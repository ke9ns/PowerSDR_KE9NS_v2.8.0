//=================================================================
// console.cs
//=================================================================
// PowerSDR is a C# implementation of a Software Defined Radio. 
// Copyright (C) 2003-2013  FlexRadio Systems.  
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// You may contact us via email at: gpl@flexradio.com.
// Paper mail may be sent to: 
//    FlexRadio Systems
//    4616 W. Howard Lane  Suite 1-150
//    Austin, TX 78728
//    USA
//=================================================================

// ke9ns things to remember
//
// console.Console_Resize(this, e);
// Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)  ==   %userprofile%\AppData\Roaming
//
// string master_path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\";  // %userprofile%\AppData\Roaming\FlexRadio Systems\
//
// File.Exists(app_data_path + "wisdom"))  // look for %userprofile%\AppData\Roaming\FlexRadio Systems\PowerSDR v2.8.0\wisdom
// File.Exists(master_path + "production")    production = true;   // this allows PA calibration
// File.Exists(master_path + "test_equip")    test_equip = true;   // this allows ?
// File.Exists(master_path + "master.xml");                        // this is list of your PowerSDR radios
//
// path = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\FlexRadio Systems\\PowerSDR";  // ke9ns this is the ProgramData folder
// Application.StartupPath  = \Program Files (x86)\FlexRadio Systems\PowerSDR v2.8.0

//  current_region = FWCEEPROM.Region; or //  current_region = HIDEEPROM.Region;
//
//  extended = FWC.GetStatus(); or  extended = USBHID.GetStatus(); or (File.Exists("extended.edf")		// Check for extended capabilities file
//
//  a.Add("Version/"+this.Text);		    // save the current title bar string
//  a.Add("VersionNumber/" + ver_num);      // PowerSDR version number in a.b.c format
//  a.Add("RadioType/" + CurrentModel);     // radio model string (ex. FLEX1500)
//  a.Add("BandTextID/" + current_region);  // TURF Region
//  a.Add("Opened/" + extended);            // has the radio been opened?

/*
Class Console
{
   import gdi32.dll here

   public Console
   {
       InitializeComponents();
       InitConsole();

   } // public console

   Dispose()
   {
   }
   InitializeComponents
   {
      select property info for console items here
   }
   Main
   {
      embed fonts here
   }
   InitConsole
   {

   }
   Flexcontrolscan
   {
   }
   Flexcontrolscan_threadfunction
   {
   }
   SyncDsp
   {
   }
   Exitconsole
   {
   }
   SaveState
   {
   }
   Getstate
   {
   }






} // class console



*/

//
// SoftRock Modifications Copyright (C) 2005, 2006, 2007 Bill Tracey (kd5tfd)
//

//#define INTERLEAVED
//#define SPLIT_INTERLEAVED
//#define SDRX
#define FLEX1500_BUFFER_MUTE                             // Enables muting audio as buffers switch in RX/TX transitions
//#define WRITE_FFT_TEST

using System;

using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing.Text;
using System.Globalization;
using System.IO;
using System.IO.Ports;
using System.Net;
using System.Net.Sockets; // ke9ns add
using System.Reflection;
using System.Runtime.InteropServices;
using System.Management;
using System.Threading;
using System.Text;
using System.Media; // ke9ns for system Beep

//System.Windows.Media.Effects; // ke9ns add

using System.Windows.Forms;
using System.Windows.Forms.Design; // ke9ns add



using HttpServer; // rn3kk add

//using System.Threading.Tasks; // ke9ns add net 4.5

using System.Speech.Synthesis; // ke9ns add


using PortTalk;
//using System.Object;
//using System.Windows.Threading.DispatcherObject;
using System.Windows.Media.Imaging;

using FlexCW;

#if(!NO_TNF)
using Flex.TNF;
#endif

using Flex.Control;



namespace PowerSDR
{
  
        #region Enums

    public enum FWCATUMode
	{
		FIRST = -1,
		Bypass,
		SemiAutomatic,
		Automatic,
		LAST,
	}

	public enum AntMode
	{
		Simple = 0,
		Expert,
	}

	public enum Window
	{
		FIRST = -1,
		RECTANGULAR,
		HANNING,
		WELCH,
		PARZEN,
		BARTLETT,
		HAMMING,
		BLACKMAN2,
		BLACKMAN3,
		BLACKMAN4,
		EXPONENTIAL,
		RIEMANN,
		BLKHARRIS,
		LAST,
	}

	public enum FWCAnt
	{
		NC = 0,
		ANT1,
		ANT2,
		ANT3,
		RX1IN,
		RX2IN,
		RX1TAP,
		SIG_GEN,
        VHF,
        UHF,        
	}

    public enum HIDAnt
    {
        PA = 0,
        XVTX_COM,
        XVRX,
        BITE,
    }

	public enum RenderType
	{
		HARDWARE = 0,
		SOFTWARE,
		NONE,
	}

	public enum MultiMeterDisplayMode // means 0=first item, 1=second item, 3= thrid item
	{
		Original = 0,    // was a bargraph now ke9ns added tr7
		Edge,            // analog meter with straight needle
		Analog,          // ke9ns added
	}

	public enum FilterWidthMode
	{
		Linear = 0,
		Log,
		Log10,
	}

	public enum DisplayEngine
	{
		GDI_PLUS = 0,
		DIRECT_X,
	}

	public enum Model
	{
		SDR1000 = 0,
		SOFTROCK40,
		DEMO,
		FLEX5000,
		SDRX,
		FLEX3000,
        FLEX1500,
	}

	public enum BPFBand
	{
		NONE = -1,
		B160,
		B60,
		B20,
		B40,		
		B10,
		B6,
	}

	public enum RFELPFBand
	{
		NONE = -1,
		AUX,
		B6,
		B60,
		B20,
		B30,
		B40,
		B1210,
		B80,
		B1715,
		B160,
	}

	public enum PAFBand
	{
		NONE = 0,
		B1210,
		B1715,
		B3020,
		B6040,
		B80,
		B160,
	}

	public enum XVTRTRMode
	{
		NEGATIVE = 0,	// DEMI144-28FRS
		POSITIVE,		// 25W DEMI
		NONE,			// For Elecraft or similar XVTR
	}

	public enum SoundCard
	{
		FIRST = -1,
		UNSUPPORTED_CARD,
		DELTA_44,
		FIREBOX,
		EDIROL_FA_66,
		AUDIGY,
		AUDIGY_2,
		AUDIGY_2_ZS,
		EXTIGY,
		MP3_PLUS,
		SANTA_CRUZ,				
		LAST,
	}

	public enum DisplayMode  // ke9ns  rearrange order of display modes
	{
		FIRST = -1,
        PANADAPTER,
        PANAFALL,        
        WATERFALL,
        PANASCOPE,
        SPECTRUM,
		SCOPE,
		PHASE,
		PHASE2,
		HISTOGRAM,
 		OFF,
        CONTINUUM,
        LAST,
	}
    /*
    FIRST = -1,
		SPECTRUM,
		PANADAPTER,
		SCOPE,
		PHASE,
		PHASE2,
		WATERFALL,
		HISTOGRAM,
		PANAFALL,
		PANASCOPE,
		OFF,
		LAST,
      */
	public enum AGCMode
	{
		FIRST = -1,
		FIXD,
		LONG,
		SLOW,
		MED,
		FAST,
		CUSTOM,
		LAST,
	}

	public enum MeterRXMode
	{
		FIRST = -1,
		SIGNAL_STRENGTH,
		SIGNAL_AVERAGE,
        SIGNAL_PEAK,        // ke9ns ADD
		ADC_L,
		ADC_R,
		ADC2_L,
		ADC2_R,
		OFF,
		LAST,
	}

	public enum MeterTXMode
	{
		FIRST = -1,
		FORWARD_POWER,
		REVERSE_POWER,
		MIC,
		EQ,
		LEVELER,
		LVL_G,
		COMP,
		CPDR,
		ALC,
		ALC_G,
		SWR,
		OFF,
		LAST,
	}

	public enum KeyerLine
	{
		None = 0,
		DTR,
		RTS,
	}

	public enum DateTimeMode
	{
		OFF = 0,
		LOCAL,
		UTC,
		LAST,
	}

    //================================================================================
    // w4tme modify Regions to match SmartSDR March 2017
    public enum FRSRegion
    {
        FIRST = -1,
        US = 0,           // USA  USA, CA, ROW, IARU2
        UK = 1,           // EU01 UK, Slovakia, France, Malta
        Europe = 2,       // EU00 Germany, European Union, IARU1
        UK_Plus = 3,      // EU02 UK+ (adds 60m band)
        Italy = 4,        // EU10 
        Norway = 5,       // EU03 Norway, Denmark, Czech Rep.
        Denmark = 6,      // EU03 Norway, Denmark, Czech Rep.
        Latvia = 7,       // EU08 
        Slovakia = 8,     // EU01 UK, Slovakia, France, Malta (UK,SK,FR,MT)
        Bulgaria = 9,     // EU07 
        Greece = 10,      // EU09 
        Hungary = 11,     // EU05 
        Belgium = 12,     // EU04
        France = 13,      // EU01 UK, Slovakia, France, Malta
        Russia = 14,      // RUSS  
        Sweden = 15,      // EU06 
        Region_3 = 16,    // IARU3 China, Australia, New Zealand
        Japan = 17,       // JPN  
        Italy_Plus = 18,  // EU11 Italy+ (40m band)
        ES_CH_FIN = 19,   // EU12 Spain, Switzerland, Finland (ES,CH,FIN)  
        Netherlands = 20, // EU13 
        EU_Travel = 21,   // EU14 
        Luxembourg = 22,  // EU15
        Region_2 = 23,    // IARU2 (Central & South America)		
        LAST,
    }


    /*  ke9ns  ORIGINAL 2.7.2 FRSRegion list
        US = 0,           // IARU 2
        Spain_UK = 1,     // now just UK
        Europe = 2,       // IARU 1  
        UK_Plus = 3,      //  
        Italy = 4,        // 
        Norway = 5,       // 
        Denmark = 6,      // 
        Latvia = 7,       // 
        Slovakia = 8,     // 
        Bulgaria = 9,     // 
        Greece = 10,      // 
        Hungary = 11,     // 
        Netherlands = 12, //  now belgium
        France = 13,      // 
        Russia = 14,      // 
        Sweden = 15,      // 
        Region_3 = 16,    // IARU 3
        Japan = 17,       // 
        Italy_Plus = 18,  // 
                         

     */

    public enum PreampMode
	{
		FIRST = -1,
		OFF,
		LOW,
		MED,
		HIGH,
		LAST,
	}

    public enum FLEX1500PreampMode
    {
        FIRST = -1,
        MINUS_10,
        ZERO,
        PLUS_10,
        PLUS_20,
        PLUS_30,
        LAST,
    }

	public enum StatusPin
	{
		PIN_12	= 0x08,		//S3
		Dash	= 0x10,		//S4
		Dot		= 0x20,		//S5
		PA_DATA	= 0x40,		//S6
		PIN_11	= 0x80,		//S7\
	}

	public enum ATUTuneMode
	{
		FIRST = -1,
		BYPASS,
		MEMORY,
		FULL,
		LAST,
	}

    public enum DSPISB // ke9ns add for LSB-AM, USB-AM
    {
        FIRST = -1,
        AML,
        AMU,
        LAST,

    } // DSPISB


    public enum DSPMode
	{
		FIRST = -1,
		LSB,
		USB,
		DSB,
		CWL,
		CWU,
		FM,
		AM,
		DIGU,
		SPEC,
		DIGL,
		SAM, // = 10
		DRM,
      
 		LAST,
	} // DSPMODE

	public enum Band
	{
		FIRST = -1,
		GEN,
		B160M,
		B80M,
		B60M,
		B40M,
		B30M,
		B20M,
		B17M,
		B15M,
		B12M,
		B10M,
		B6M,
		B2M,
		WWV,

        VHF0,
		VHF1,
		VHF2,
		VHF3,
		VHF4,
		VHF5,
		VHF6,
		VHF7,
		VHF8,
		VHF9,
		VHF10,
		VHF11,
		VHF12,
		VHF13,

        BLMF, // ke9ns move down below vhf
        B120M,
        B90M,
        B61M,
        B49M,
        B41M,
        B31M,
        B25M,
        B22M,
        B19M,
        B16M,
        B14M,
        B13M,
        B11M,

        LAST,
	}

	public enum Filter
	{
		FIRST = -1,
		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		VAR1,
		VAR2,
		NONE,
		LAST,
	}

	public enum PTTMode
	{
		FIRST = -1,
		NONE,
		MANUAL,
		MIC,
		CW,
		X2,
		CAT,
		VOX,
		LAST,
	}

	public enum DisplayLabelAlignment
	{
		FIRST = -1,
		LEFT,
		CENTER,
		RIGHT,
		AUTO,
        Sunit, // ke9ns add
		OFF,
		LAST,
	}

	public enum ClickTuneMode
	{
		Off = 0,
		VFOA,
		VFOB,
	}
    
    public enum FMTXMode
    {
        // Order is chosen carefully here for memory form -- take care before rearranging
        High = 0,   // +
        Simplex,    // S
        Low,        // -     
    }

    public enum FlexControlMode
    {
        Basic = 0,
        Advanced,
    }

    public enum FlexControlKnobFunction
    {
        TuneVFOA,
        TuneVFOB,
        TuneVFOASub,
        TuneRIT,
        TuneXIT,
        TuneAF,
        TuneAGCT,
        None,
    }

    #endregion

  
    unsafe public class Console : System.Windows.Forms.Form
	{
      
       
        //==================================================================================
        //==================================================================================
        // ke9ns add (copied from cwx precision multimedia msec timer)
        //       everything below

        #region Win32 Multimedia Timer Functions

      //  private int tel;            // time of one element in ms

        // Represents the method that is called by Windows when a timer event occurs.
        private delegate void TimeProc(int id, int msg, int user, int param1, int param2);

        // Specifies constants for multimedia timer event types.

        public enum TimerMode
        {
            OneShot,    // Timer event occurs once.
            Periodic    // Timer event occurs periodically.
        };

        // Represents information about the timer's capabilities.
        [StructLayout(LayoutKind.Sequential)]
        public struct TimerCaps
        {
            public int periodMin;   // Minimum supported period in milliseconds.
            public int periodMax;   // Maximum supported period in milliseconds.
        }



        // Gets timer capabilities.
        [DllImport("winmm.dll")]
        private static extern int timeGetDevCaps(ref TimerCaps caps, int sizeOfTimerCaps);

        // Creates and starts the timer.
        [DllImport("winmm.dll")]
        private static extern int timeSetEvent(int delay, int resolution, TimeProc proc, int user, int mode);

  
        // Stops and destroys the timer.
        [DllImport("winmm.dll")]
        private static extern int timeKillEvent(int id);

        // Indicates that the operation was successful.
        private const int TIMERR_NOERROR = 0;

        // Timer identifier.
        private int timerID;

        private TimeProc timeProcPeriodic;   // ke9ns add to use windows based multimedia timer

    //   Stopwatch WATCH1 = new Stopwatch();
    //    Stopwatch WATCH2 = new Stopwatch();


        #endregion


        HidDevice.PowerMate powerMate = new HidDevice.PowerMate();  // ke9ns add link back to PowerMate.cpp and PowerMate.h
        public int KBON = 0; // ke9ns add 1=knob present 0=knob not present
        public int speed = 0; // ke9ns add speed of knob freq change
        public int lastvalue = 0; // ke9ns add knob

        public CheckBoxTS chkRX1MUTE;  // ke9ns add allow RX1 mute of flex radio audio but not vac stream audio


        private RichTextBox txtNOAA2;    // ke9ns add for space weather on main console screen
        private RichTextBox txtNOAA;    // ke9ns add for space weather on main console screen

        
        private LabelTS labelTS2;
        private LabelTS labelTS1;
        public NumericUpDownTS udTXFilterLow;
        public NumericUpDownTS udTXFilterHigh;
        public CheckBoxTS chkBoxMuteSpk;
        public CheckBoxTS chkBoxDrive;
        private LabelTS labelTS5;
        public PanelTS panelTSBandStack;
        private Button buttonDel;
        private Button buttonAdd;
        private Button buttonSort;
        public TextBox textBox1;
        public RichTextBox txtTimer;
        private ToolStripMenuItem trackMenuItem1;
        public Button buttonCQ;
        public Button buttonCall;
        private PrettyTrackBar ptbTune;
        private LabelTS lblTUNE;
        private LabelTS lblMON;
        public PrettyTrackBar ptbMON;
        private Label label5;
        private Label label3;
        private Label label4;
        private Label label2;
        private ImageList imageList1;
        public PictureBox VFODialA;
        public PictureBox VFODialB;
        public PictureBox VFODialAA;
        public PictureBox VFODialBB;
        private LabelTS labelTS6;
        private ComboBoxTS comboCWTXProfile;
        private Label label6;
        SpeechSynthesizer speaker = new SpeechSynthesizer(); // ke9ns add 

        //============================================================================ ke9ns add
        //============================================================================ ke9ns add
        // ke9ns ADD font
        // import gdi32.dll because this allows you to embed fonts into PowerSDR
        //============================================================================ ke9ns add
        //============================================================================ ke9ns add
        [DllImport("gdi32.dll")]
            private static extern IntPtr AddFontMemResourceEx(IntPtr pbFont, uint cbFont,
               IntPtr pdv, [In] ref uint pcFonts); // this imports the addfont call
       
            private static FontFamily S1,S2,S3,S4;    // setup 3 font families
            private static  Font ff,ff1,ff2,ff3,ff4,ff5,ff6,ff7,ff8, ff9, ff9a;  // 8 different font sizes and styles


        //============================================================================ ke9ns ad
        //============================================================================ ke9ns add
        // ke9nd ADD images
        // the purpose of this is to embed an image file into PowerSDR
        // make sure to put the jpg in powersdr.resources and set the properties of the jpg to "embed resource"
        //============================================================================ ke9ns add
        //============================================================================ ke9ns add
        private static System.Reflection.Assembly myAssembly = System.Reflection.Assembly.GetExecutingAssembly();
        // this code allows you to embed an image.

        public static Stream meter_image = myAssembly.GetManifestResourceStream("PowerSDR.Resources.met3.jpg"); // ke9ns add tr7 meter image
        public static Stream meter_image1 = myAssembly.GetManifestResourceStream("PowerSDR.Resources.meterback1.png"); // ke9ns add light color analog meter background
        public static Stream meter_image2 = myAssembly.GetManifestResourceStream("PowerSDR.Resources.meterback2.png");// ke9ns add dark color analog meter background

        public static Stream antpic = myAssembly.GetManifestResourceStream("PowerSDR.Resources.ant2.png");// ke9ns add clip art of antenna symbol
        public static Stream dialpic = myAssembly.GetManifestResourceStream("PowerSDR.Resources.disk3.png");// ke9ns add dial graphic
        public static Stream vfoApic = myAssembly.GetManifestResourceStream("PowerSDR.Resources.arrowA.png");// ke9ns add vfoA graphic
        public static Stream vfoBpic = myAssembly.GetManifestResourceStream("PowerSDR.Resources.arrowB.png");// ke9ns add vfoB graphic


        public static Stream Black_image = myAssembly.GetManifestResourceStream("PowerSDR.Resources.black2.png");// ke9ns add black needle analog meter
        public static Stream Red_image = myAssembly.GetManifestResourceStream("PowerSDR.Resources.red2.png");// ke9ns add red needle analog meter
        public static Stream Yellow_image = myAssembly.GetManifestResourceStream("PowerSDR.Resources.yell2.png");// ke9ns add yellow needle analog meter
        public static Stream White_image = myAssembly.GetManifestResourceStream("PowerSDR.Resources.white2.png");// ke9ns add yellow needle analog meter


        Image TR7 = new Bitmap(meter_image);         // pre-can the images 
        Image meterback1 = new Bitmap(meter_image1);
        Image meterback2 = new Bitmap(meter_image2);

        Image ant2 = new Bitmap(antpic); // image of antenna symbol
        Image dial = new Bitmap(dialpic); // image of vfo a
        Image dial1 = new Bitmap(dialpic); // image of vfo b
        Image vfoA = new Bitmap(vfoApic); // image of vfo a
        Image vfoB = new Bitmap(vfoBpic); // image of vfo b


        int yell = 1;
        int red = 3;
        int white = 0;
        int black = 2;

        Bitmap yell1 = new Bitmap(Yellow_image);   // pre can the images into bitmaps so they can be rotated later
        Bitmap white1 = new Bitmap(White_image);
        Bitmap black1 = new Bitmap(Black_image);
        Bitmap red1 = new Bitmap(Red_image);

        //==================================================================================================



        #region Variable Declarations
        // ======================================================
        // Variable Declarations 
        // ======================================================


        public DSP dsp;
		private SIOListenerII siolisten = null;
        private SIOListenerIII siolisten1 = null;          // ke9ns add for ant rotor control

        private Thread[] audio_process_thread;				// threads to run DttSP functions
		private Thread draw_display_thread;					// draws the main display 
		private Thread multimeter_thread;					// updates the rx1/tx meter data
		private Thread rx2_meter_thread;					// updates the rx2 meter data
		private Thread poll_ptt_thread;						// polls the PTT line on the parallel port
		private Thread poll_pa_pwr_thread;					// polls the FWD and REV power if the PA is installed
		private Thread sql_update_thread;					// polls the RX signal strength
		private Thread rx2_sql_update_thread;				// polls the RX2 signal strength
		private Thread vox_update_thread;					// polls the mic input
		private Thread noise_gate_update_thread;			// polls the mic input during TX
        private Thread f3k_temp_thread;				        // polls the temp on the FLEX-3000 to turn fan on/off
        private Thread f3k_mic_function_thread;				// handles the FLEX-3000 mic inputs (Up, Down, Fast)
        //private Thread wbir_thread;
        //private Thread wbir_rx2_thread;
        private Thread update_rx1_dds_thread;
        private Thread update_rx2_dds_thread;
        private Thread update_tx_dds_thread;
        private Thread audio_watchdog_thread;
		//private HiPerfTimer polltimer;

		private bool calibration_running = false;
		private bool displaydidit = false;
		//private bool calibrationdidit = false;
		public Mutex calibration_mutex = new Mutex();

      
        public Http httpFile;                           // ke9ns add
        public HttpServer httpServer = null;           // rn3kk add
   
        public Setup setupForm;                        // ke9ns communications with setupform  (i.e. allow combometertype.text update from inside console.cs) 

        public Skin skin1; // ke9ns add

        public HidDevice.PowerMate PowerMate;              // ke9ns add communicate with powermate HID

        public IDBOX IDBOXForm;                          // ke9ns add ID Timer function function (idtimer)
        public TOTBOX TOTBOXForm;                          // ke9ns add Timeout Timer function function (tottimer)


        public SpotControl SpotForm;                       // ke9ns add DX spotter function
        public ScanControl ScanForm;                       // ke9ns add freq Scanner function
        public StackControl StackForm;                     // ke9ns add band stack form
        public SwlControl SwlForm;                         // ke9ns add band swl form
        public helpbox helpboxForm;                         // ke9ns add helpbox form

        public CWX cwxForm;
		public UCBForm ucbForm;
        public XVTRForm xvtrForm;
        public VUForm vuForm;
		public EQForm eqForm;
		public FilterForm filterRX1Form;
		public FilterForm filterRX2Form;
		public FLEX5000LLHWForm flex5000LLHWForm;
		public FLEX5000DebugForm flex5000DebugForm;
		public FWCMixForm fwcMixForm;
		public FLEX3000MixerForm flex3000MixerForm;
        public FLEX1500MixerForm flex1500MixerForm;
		public FWCAntForm fwcAntForm;
		public FLEX5000RelayForm flex5000RelayForm;
		public FWCATUForm fwcAtuForm;
        public FLEX3000ATUForm flex3000ATUForm;
		public FWCTestForm fwcTestForm;
		public FLEX5000LPFForm flex5000LPFForm;
		public FWCCalForm fwcCalForm;
		public FLEX5000ProdTestForm flex5000ProdTestForm;
		public FLEX5000FinalTestForm flex5000FinalTestForm;
		public FLEX5000RX2CalForm flex5000RX2CalForm;
        public FLEX3000TestForm flex3000TestForm;
        public DSPTestForm dspTestForm;
        public PreSelForm preSelForm;
        public FLEX1500DebugForm flex1500DebugForm;
        public FLEX5000VUCalForm flex5000VUCalForm;
        public DiversityForm diversityForm;
        public FlexControlBasicForm flexControlBasicForm;
        public FlexControlAdvancedForm flexControlAdvancedForm;
        private AboutForm aboutForm;

        public HIDAntForm hidAntForm;

		public bool fwc_init = false;
		public int fwc_index = -1;
		private long fwc_last_cal_date_time = 0;
		private uint fwc_serial_num = 0;
		private uint fwc_trx_serial_num = 0;
		private uint rx2_trx_match_serial = 0;

        private int rx1_squelch_threshold_scroll = -160;  
        private int rx2_squelch_threshold_scroll = -160;
        private bool rx1_squelch_on = false;
        private bool rx2_squelch_on = false;
        private int rx1_fm_squelch_threshold_scroll = 0;        
        private int rx2_fm_squelch_threshold_scroll = 0;

		private long rx2_last_cal_date_time = 0;
		private uint rx2_serial_num = 0;

        public bool hid_init = false;
        public int hid_index = -1;
        private long hid_last_cal_date_time = 0;
        private uint hid_serial_num = 0;
        private uint hid_trx_serial_num = 0;

        public MemoryForm memoryForm;

        private MemoryList memoryList;

        public MemoryList MemoryList
        {
            get { return memoryList; }
        }


     
        //====================================================================================
        // ke9ns add  dx cluster list
        private DXMemList dxmemList; // ke9ns add

        public DXMemList DXMemList // ke9ns add
        {
            get { return dxmemList; }
        }

        //=======================================================================================
      

        private HW hw;										// will eventually be an array of rigs to support multiple radios


		public WaveControl WaveForm;                       // ke9ns    communication with the waveform (i.e. allows audio to be played from console.cs)

    
        public PAQualify PAQualForm;
		public ProductionTest ProdTestForm;

		private bool run_setup_wizard;						// Used to run the wizard the first time the software comes up
        private bool show_alpha_warning = false;
        private bool show_beta_warning = true;
        private bool show_mobile_warning = true;

        //    public int[] band = new int[100];

       //   [StructLayout(LayoutKind.Explicit)]
       //  public struct UnionTest

        // {

        //   [FieldOffset(0)]  public int band_160m_index;                     // These band indexes are used to keep track of which
        //  [FieldOffset(0)]  band[0];
        // }



        public int[] band_index = new int[100];  //  replaces band_160m_index; 
        public int[] band_register = new int[100]; // replaces band_160m_register;	


        public int band_160m_index;                     // These band indexes are used to keep track of which
        public int band_80m_index;							// location in the bandstack was last saved/recalled
		public int band_60m_index;
		public int band_40m_index;
		public int band_30m_index;
		public int band_20m_index;
		public int band_17m_index;
		public int band_15m_index;
		public int band_12m_index;
		public int band_10m_index;
		public int band_6m_index;
		public int band_2m_index;
		public int band_wwv_index;
		public int band_gen_index;

        public int band_LMF_index; // ke9ns add
        public int band_120m_index;
        public int band_90m_index;
        public int band_61m_index;
        public int band_49m_index;
        public int band_41m_index;
        public int band_31m_index;
        public int band_25m_index;
        public int band_22m_index;
        public int band_19m_index;
        public int band_16m_index;
        public int band_14m_index;
        public int band_13m_index;
        public int band_11m_index;

        public int band_vhf0_index;
		public int band_vhf1_index;
		public int band_vhf2_index;
		public int band_vhf3_index;
		public int band_vhf4_index;
		public int band_vhf5_index;
		public int band_vhf6_index;
		public int band_vhf7_index;
		public int band_vhf8_index;
		public int band_vhf9_index;
		public int band_vhf10_index;
		public int band_vhf11_index;
		public int band_vhf12_index;
		public int band_vhf13_index;




      
        public int band_160m_register;						// These integers are the number of band stack registers
		public int band_80m_register;						// found in the database for each band
		public int band_60m_register;
		public int band_40m_register;
		public int band_30m_register;
		public int band_20m_register;
		public int band_17m_register;
		public int band_15m_register;
		public int band_12m_register;
		public int band_10m_register;
		public int band_6m_register;
		public int band_2m_register;
		public int band_wwv_register;
		public int band_gen_register;

        public int band_LMF_register; // ke9ns add
        public int band_120m_register;
        public int band_90m_register;
        public int band_61m_register;
        public int band_49m_register;
        public int band_41m_register;
        public int band_31m_register;
        public int band_25m_register;
        public int band_22m_register;
        public int band_19m_register;
        public int band_16m_register;
        public int band_14m_register;
        public int band_13m_register;
        public int band_11m_register;

        public int band_vhf0_register;
		public int band_vhf1_register;
		public int band_vhf2_register;
		public int band_vhf3_register;
		public int band_vhf4_register;
		public int band_vhf5_register;
		public int band_vhf6_register;
		public int band_vhf7_register;
		public int band_vhf8_register;
		public int band_vhf9_register;
		public int band_vhf10_register;
		public int band_vhf11_register;
		public int band_vhf12_register;
        public int band_vhf13_register;

     

        private RadioButtonTS[] vhf_text;
     //   private RadioButtonTS[] gen_text; // ke9ns add


		private bool was_panadapter = false;				// used to restore panadater when switching to spectrum DSP mode
		private bool was_waterfall = false;					// used to restore waterfall when switching to spectrum DSP mode

		public float[] rx1_preamp_offset;					// offset values for each preamp mode in dB
		public float[] rx2_preamp_offset;					// offset values for each preamp mode in dB
		public float rx1_meter_cal_offset;					// multimeter calibration offset per volume setting in dB
		public float rx2_meter_cal_offset;					// multimeter calibration offset per volume setting in dB
		public float rx1_filter_size_cal_offset = 3;		// filter offset based on DSP filter size
		public float rx2_filter_size_cal_offset = 3;		// filter offset based on DSP filter size

		private bool meter_data_ready;                      // used to synchronize the new DSP data with the multimeter
        private bool meter_data_ready2;                      // ke9ns add for using rx2 for extra tx meter

         public float new_meter_data;                       // new data for the multimeter from the DSP
        private float new_meter_data2;                       // ke9ns add for using RX2 for extra TX meter

        private float current_meter_data;					// current data for the multimeter
		private int meter_peak_count;						// Counter for peak hold on multimeter
		private float meter_peak_value;						// Value for peak hold on multimeter
		private float[] meter_text_history;					// Array used to output the peak power over a period of time
		private int meter_text_history_index;				// index used with above variable to do peak power

		private bool rx2_meter_data_ready;					// used to synchronize the new DSP data with the multimeter
		private float rx2_meter_new_data;					// new data for the multimeter from the DSP
        private double tx2_meter_new_data;                  // ke9ns add to allow MIC dBm values while in RX mode
		private float rx2_meter_current_data;				// current data for the multimeter
		private int rx2_meter_peak_count;					// Counter for peak hold on multimeter
		private float rx2_meter_peak_value;					// Value for peak hold on multimeter

		public float[][] power_table;						// table used to store power in new power cal routine
        public float[] vhf_power_table;                     // table used to store VHF power (Audio.RadioVolume) in VU cal routine
        public float[] uhf_power_table;                     // table used to store UHF power (Audio.RadioVolume) in VU cal routine
        public double[] freqs_2m = { 144.0, 144.3, 144.6, 144.9, 145.2, 145.5, 145.8, 146.1, 146.4, 146.7, 147.0, 147.3, 147.9, 148.0 };
        public double[] freqs_70cm = { 430.0, 431.5, 433.0, 434.5, 436.0, 437.5, 439.0, 440.5, 442.0, 443.5, 445.0, 445.5, 446.0, 446.5, 447.0, 447.5, 448.0, 448.5, 449.0, 449.5, 449.975, 450.0 };

		public int pa_fwd_power;							// forward power as read by the ADC on the PA
		public int pa_rev_power;							// reverse power as read by the ADC on the PA
		public bool tuning;							    	// true when the TUN button is active
		public bool atu_tuning;		    					// true while the atu is tuning
		private Band tuned_band;							// last band that the atu was tuned on

		public float[] rx1_image_gain_table;				// table used to store image cal info
		public float[] rx1_image_phase_table;				// table used to store image cal info
		public float[] rx2_image_gain_table;				// table used to store image cal info
		public float[] rx2_image_phase_table;				// table used to store image cal info
		public float[] tx_image_gain_table;					// table used to store image cal info
		public float[] tx_image_phase_table;				// table used to store image cal info
		public int[][] pa_bias_table;						// table used to store PA Bias settings
		public float[][] rx1_level_table;					// table used to store RX1 Level cal settings
		public float[][] rx2_level_table;					// table used to store RX2 Level cal settings
		public float[][] pa_bridge_table;					// table used to store PA Bridge cal settings
		public float[] swr_table;							// table used to calibrate SWR
        public float[] atu_swr_table;						// table used to cal SWR at ATU power
		public float rx2_res_offset;
        public float[] vhf_level_table;
        public float[] uhf_level_table;

        //public int[][] tx_carrier_table;					// table used to store tx carrier cal info
        public SortedDictionary<double, uint> tx_carrier_cal;

		public byte rx1_level_checksum;
		public byte rx1_image_gain_checksum;
		public byte rx1_image_phase_checksum;
		public byte tx_image_gain_checksum;
		public byte tx_image_phase_checksum;
		public byte tx_carrier_checksum;
		public byte pa_bias_checksum;
		public byte pa_bridge_checksum;
		public byte pa_power_checksum;
		public byte pa_swr_checksum;
        public byte atu_swr_checksum;
        public byte vu_level_checksum;
        public byte vu_power_checksum;

		public byte rx2_level_checksum;
		public byte rx2_image_gain_checksum;
		public byte rx2_image_phase_checksum;


        public double[] CTCSS_array =  {
            67.0 , 69.3 , 71.9 , 74.4 , 77.0 , 79.7 , 82.5 , 85.4 , 88.5 , 91.5 ,
            94.8 , 97.4 , 100.0, 103.5, 107.2, 110.9, 114.8, 118.8, 123.0, 127.3,
            131.8, 136.5, 141.3, 146.2, 151.4, 156.7, 159.8, 162.2, 165.5, 167.9,
            171.3, 173.8, 177.3, 179.9, 183.5, 186.2, 189.9, 192.8, 199.5, 203.5,
            206.5, 210.7, 218.1, 225.7, 229.1, 233.6, 241.8, 250.3, 254.1};

        public double[] FM_deviation_array = { 5000, 2500 };
        
        public bool oldATU = true;
        
		private bool shift_down;							// used to modify tuning rate
		private bool calibrating;							// true if running a calibration routine
		public bool manual_mox;							// True if the MOX button was clicked on (not PTT)		

		public DSPMode vfob_dsp_mode;						// Saves control pointer for last mode used on VFO B 
		private Filter vfob_filter;							// Saves control pointer for last filter used on VFO B
		private int vfo_char_width;							// Used to calibrate mousewheel tuning
		private int vfo_char_space;							// Used to calibrate mousewheel tuning
		private int vfo_small_char_width;					// Used to calibrate mousewheel tuning
		private int vfo_small_char_space;					// Used to calibrate mousewheel tuning
		private int vfo_decimal_width;						// Used to calibrate mousewheel tuning
		private int vfo_decimal_space;						// Used to calibrate mousewheel tuning		
		private int vfo_sub_char_width;						// Used to calibrate mousewheel tuning
		private int vfo_sub_char_space;						// Used to calibrate mousewheel tuning
		//private int vfo_sub_small_char_width;				// Used to calibrate mousewheel tuning
		//private int vfo_sub_small_char_space;				// Used to calibrate mousewheel tuning
		private int vfo_sub_decimal_width;					// Used to calibrate mousewheel tuning
		private int vfo_sub_decimal_space;					// Used to calibrate mousewheel tuning	
		private int vfo_pixel_offset;						// Used to calibrate mousewheel tuning
		private int vfoa_hover_digit;						// Digit for hover display
		private int vfo_sub_pixel_offset;
		private int vfoa_sub_hover_digit;					// Digit for VFOA sub hover display
		private int vfob_hover_digit;						// Digit for hover display
		public string last_band;							// Used in bandstacking algorithm
        public int last_band_index;                         // ke9ns add for display of bandstack frequencies
        public int last_band_index_size;                    // ke9ns add

		private DSPMode quick_save_mode;					// Quick Save Mode
		private Filter quick_save_filter;					// Quick Save Filter


		private string separator;							// contains the locations specific decimal separator

		private int last_filter_shift;						// VK6APH
		private int last_var1_shift;						// VK6APH 
		private int last_var2_shift;						// VK6APH

		public string[] CmdLineArgs;

		private double rx1_avg_last_ddsfreq = 0;				// Used to move the display average when tuning
		private double rx1_avg_last_dttsp_osc = 0;
		private double rx1_last_bin_shift_leftover = 0; 

		private double rx2_avg_last_ddsfreq = 0;				// Used to move the display average when tuning
		private double rx2_avg_last_dttsp_osc = 0;
		private double rx2_last_bin_shift_leftover = 0; 

		private HiPerfTimer break_in_timer;
		public double avg_vox_pwr = 0.0;

		// BT 11/05/2007
		public PowerSDR.RemoteProfiles ProfileForm;

        //EHR 25Mar08
        private TDxInput.Device TDxDevice;
        private TDxInput.Sensor TDxSensor;

		public bool initializing = true;

		private int h_delta = 0;		//k6jca 1/15/08
		private int v_delta = 0;		//k6jca 1/15/08

		private int previous_delta = 0;  //k6jca

		private Size console_basis_size = new Size (100,100);		//k6jca
		private Point gr_filter_basis_location = new Point (100,100);		//k6jca
		private Point gr_Multimeter_basis_location = new Point (100,100);		//k6jca
		private Point gr_BandHF_basis_location = new Point (100,100);       //k6jca
        private Point gr_BandGEN_basis_location = new Point(100, 100);       //ke9ns add
        private Point gr_BandVHF_basis_location = new Point (100,100);		//k6jca
		private Point gr_Mode_basis_location = new Point (100,100);		//k6jca
		private Point gr_VFOB_basis_location = new Point (100,100);		//k6jca
		private Point gr_VFOA_basis_location = new Point (100,100);		//k6jca

        private Point gr_VFODialA_location = new Point(100, 100);     //ke9ns add
        private Point gr_VFODialB_location = new Point(100, 100);     //ke9ns add

        private Point gr_VFODialAA_location = new Point(100, 100);     //ke9ns add
        private Point gr_VFODialBB_location = new Point(100, 100);     //ke9ns add

        private Point gr_ModePhone_basis_location = new Point (100,100);		//k6jca
		private Point gr_ModeCW_basis_location = new Point (100,100);		//k6jca
		private Point gr_ModeDig_basis_location = new Point (100,100);		//k6jca
        private Point gr_ModeFM_basis_location = new Point(100, 100);  // anonymous
		private Point gr_VFO_basis_location = new Point (100,100);		//k6jca
		private Point gr_vfobetween_basis_location = new Point (100,100);		//k6jca
		private Point btn_display_pan_center_basis = new Point (100,100);		//k6jca
		private Point tb_display_pan_basis = new Point (100,100);		//k6jca
		private Size tb_display_pan_size_basis = new Size (100,100);		//k6jca
		private Point btn_display_zoom_4x_basis = new Point (100,100);		//k6jca
		private Point btn_display_zoom_2x_basis = new Point (100,100);		//k6jca
		private Point btn_display_zoom_1x_basis = new Point (100,100);		//k6jca
		private Point btn_display_zoom_05_basis = new Point (100,100);		//k6jca
		private Point tb_display_zoom_basis = new Point (100,100);		//k6jca
		private Point txt_display_peak_freq_basis = new Point (100,100);		//k6jca
		private Point txt_display_peak_power_basis = new Point (100,100);		//k6jca
		private Point txt_display_peak_offset_basis = new Point (100,100);		//k6jca
        private Point autobrightbox_basis = new Point(100, 100);               // ke9ns add
		private Point lbl_display_zoom_basis = new Point (100,100);		//k6jca
		private Size gr_display_size_basis = new Size (100,100);		//k6jca
		private Size pic_display_size_basis = new Size (100,100);		//k6jca
		private Size textbox1_size_basis = new Size (100,100);		//k6jca
		private Point textbox1_basis = new Point (100,100);		//k6jca
		private Point gr_display2_basis = new Point (100,100);		//k6jca
		private Point gr_dsp_basis = new Point (100,100);		//k6jca
		private Point tb_displaypan_basis = new Point (100,100);		//k6jca
		private Point lbl_displaypan_basis = new Point (100,100);		//k6jca
		private Point txt_display_cursor_freq_basis = new Point (100,100);		//k6jca
		private Point txt_display_cursor_power_basis = new Point (100,100);		//k6jca
		private Point txt_display_cursor_offset_basis = new Point (100,100);		//k6jca
		private Point chk_power_basis = new Point (100,100);		//k6jca
		private Point gr_multirx_basis = new Point (100,100);		//k6jca

		private Point pan_rx2_divider_basis = new Point(100, 100);
		private Size pan_rx2_divider_size_basis = new Size(100, 100);

		private Point gr_display_split_basis = new Point (100,100); // KE5DTO
		private Point gr_options_basis = new Point (100,100);		//k6jca
		private Point gr_sound_controls_basis = new Point (100,100);		//k6jca
		private Point chk_squelch_basis = new Point (100,100);		//k6jca
		private Point ud_squelch_basis = new Point (100,100);		//k6jca
		private Point pic_sql_basis = new Point (100,100);		//k6jca
		private Point tb_sql_basis = new Point (100,100);		//k6jca
		private Point gr_antenna_basis = new Point (100,100);		//k6jca
		private Point chk_bci_basis = new Point (100,100);		//k6jca
		private Point button1_basis = new Point (100,100);		//k6jca
		private Point gr_date_time_basis = new Point (100,100);		//k6jca
		//private Point lbl_cpu_meter_basis = new Point (100,100);		//k6jca
		
		private Point gr_rx2_meter_basis = new Point(100, 100);
		private Point gr_rx2_filter_basis = new Point(100, 100);
		private Point gr_rx2_mode_basis = new Point(100, 100);
		private Point gr_rx2_display_basis = new Point(100, 100);
		private Point gr_rx2_dsp_basis = new Point(100, 100);
		
		private Point lbl_rx2_rf_basis = new Point(100, 100);
		private Point ud_rx2_rf_basis = new Point(100, 100);
		private Point tb_rx2_rf_basis = new Point(100, 100);
		private Point chk_rx2_squelch_basis = new Point(100, 100);
		private Point ud_rx2_squelch_basis = new Point(100, 100);
		private Point tb_rx2_squelch_basis = new Point(100, 100);
		private Point pic_rx2_squelch_basis = new Point(100, 100);

		private Point gr_rx2_mixer_basis = new Point(100, 100);
		private Point chk_rx2_enable_basis = new Point(100, 100);
		private Point chk_rx2_preamp_basis = new Point(100, 100);
		private Point lbl_rx2_band_basis = new Point(100, 100);
		private Point combo_rx2_band_basis = new Point(100, 100);

        public bool swapping = false;   //used to supress V/U on both RX1/RX2 error while swapping

        private Mutex psdr2_mutex;                                  // Mutex for INNO installer
        private string psdr2_mutex_name = "PowerSDRv2.x_Mutex";     // Mutex name
        private bool psdr2_mutex_exists = false;                    // is true when Mutex has been created
        private bool dax_audio_enum = false;

#if (NO_DJ)
        //mod DH1TW
        public DJConsole DJConsoleObj;
        public DJConsoleUI.DJConsoleSelect DJConsoleConfigurator;

#endif

#endregion

#region Windows Form Generated Code

        private System.Windows.Forms.ButtonTS btnHidden;
		public System.Windows.Forms.TextBoxTS txtVFOAFreq;
		private System.Windows.Forms.TextBoxTS txtVFOABand;
		private System.Windows.Forms.TextBoxTS txtVFOBFreq;
        public PictureBox picDisplay;
        private System.Windows.Forms.PanelTS grpVFOA;
     	private System.Windows.Forms.PanelTS grpVFOB;
        private System.Windows.Forms.TextBoxTS txtVFOBBand;
        public CheckBoxTS chkPower;
        private System.Windows.Forms.RichTextBox lblCPUMeter; // ke9ns mod   private System.Windows.Forms.LabelTS lblCPUMeter;
        private System.Windows.Forms.NumericUpDownTS udFilterLow;
		private System.Windows.Forms.NumericUpDownTS udFilterHigh;
		private System.Windows.Forms.RadioButtonTS radFilterVar1;
		private System.Windows.Forms.RadioButtonTS radFilterVar2;
		private System.Windows.Forms.RadioButtonTS radModeSPEC;
        public RadioButtonTS radModeLSB;
        private System.Windows.Forms.RadioButtonTS radModeDIGL;
		private System.Windows.Forms.RadioButtonTS radModeCWU;
		private System.Windows.Forms.RadioButtonTS radModeDSB;
		private System.Windows.Forms.RadioButtonTS radModeSAM;
		private System.Windows.Forms.RadioButtonTS radModeAM;
		private System.Windows.Forms.RadioButtonTS radModeCWL;
        public RadioButtonTS radModeUSB;
        private System.Windows.Forms.RadioButtonTS radModeFMN;
        private System.Windows.Forms.RadioButtonTS radModeDRM;
		private System.Windows.Forms.LabelTS lblAGC;
		private System.Windows.Forms.ComboBoxTS comboAGC;
		private System.Windows.Forms.CheckBoxTS chkNB;
		private System.Windows.Forms.CheckBoxTS chkANF;
		private System.Windows.Forms.CheckBoxTS chkNR;
		private System.Windows.Forms.CheckBoxTS chkMON;
        public CheckBoxTS chkTUN;
        public CheckBoxTS chkMOX;
        private System.Windows.Forms.NumericUpDownTS udXIT;
		private System.Windows.Forms.NumericUpDownTS udRIT;
		private System.Windows.Forms.CheckBoxTS chkMUT;
		private System.Windows.Forms.CheckBoxTS chkXIT;
		private System.Windows.Forms.CheckBoxTS chkRIT;
        private System.Windows.Forms.LabelTS lblPWR;
        private System.Windows.Forms.LabelTS lblAF;
        private System.Windows.Forms.LabelTS lblMIC;
		private System.Windows.Forms.TextBoxTS txtWheelTune;
		private System.Windows.Forms.CheckBoxTS chkBIN;
		private System.Windows.Forms.PanelTS grpMultimeter;
		private System.Windows.Forms.ButtonTS btnVFOSwap;
		private System.Windows.Forms.ButtonTS btnVFOBtoA;
        private System.Windows.Forms.ButtonTS btnVFOAtoB;
        public CheckBoxTS chkVFOSplit;
        private System.Windows.Forms.TextBoxTS txtMultiText;
		private System.Windows.Forms.Timer timer_cpu_meter;
		private System.Windows.Forms.LabelTS lblFilterHigh;
		private System.Windows.Forms.LabelTS lblFilterLow;
		private System.Windows.Forms.LabelTS lblMultiSMeter;
        private PictureBox picMultiMeterDigital;
        private PictureBox picRX2Meter;
        private System.Windows.Forms.CheckBoxTS chkSquelch;
		private System.Windows.Forms.Timer timer_peak_text;
		private System.Windows.Forms.TextBoxTS txtMemoryQuick;
		private System.Windows.Forms.ButtonTS btnMemoryQuickSave;
		private System.Windows.Forms.ButtonTS btnMemoryQuickRestore;
        private System.Windows.Forms.ToolTip toolTip1;
		private System.Windows.Forms.LabelTS lblFilterShift;
		private System.Windows.Forms.ButtonTS btnFilterShiftReset;
		private System.Windows.Forms.Timer timer_clock;
		private System.Windows.Forms.RichTextBox txtDate;   // ke9ns mod (was texboxts)
  		private System.Windows.Forms.Panel panelVFOAHover;
		private System.Windows.Forms.Panel panelVFOBHover;
		private System.Windows.Forms.ComboBoxTS comboMeterRXMode;
        private System.Windows.Forms.ComboBoxTS comboMeterTXMode;
		private System.Windows.Forms.ButtonTS btnXITReset;
		private System.Windows.Forms.ButtonTS btnRITReset;
		private System.Windows.Forms.ComboBoxTS comboTuneMode;
		private System.Windows.Forms.ComboBoxTS comboPreamp;
		private System.Windows.Forms.LabelTS lblPreamp;
		private System.Windows.Forms.CheckBoxTS chkDSPNB2;
        private System.Windows.Forms.CheckBoxTS chkVFOLock;
        private System.Windows.Forms.LabelTS lblFilterWidth;
		private System.Windows.Forms.ButtonTS btnBandHF;
        private System.Windows.Forms.ButtonTS btnBandVHF;
        public LabelTS lblCWSpeed;
        private System.Windows.Forms.ButtonTS btnIFtoVFO;
        private System.Windows.Forms.ButtonTS btnZeroBeat;
		private System.Windows.Forms.RichTextBox txtTime;  // ke9ns mod
        private System.Windows.Forms.RadioButtonTS radModeDIGU;
		private System.Windows.Forms.RadioButtonTS radFilter1;
		private System.Windows.Forms.RadioButtonTS radFilter2;
		private System.Windows.Forms.RadioButtonTS radFilter3;
		private System.Windows.Forms.RadioButtonTS radFilter4;
		private System.Windows.Forms.RadioButtonTS radFilter5;
		private System.Windows.Forms.RadioButtonTS radFilter6;
		private System.Windows.Forms.RadioButtonTS radFilter7;
		private System.Windows.Forms.RadioButtonTS radFilter8;
		private System.Windows.Forms.RadioButtonTS radFilter9;
        private System.Windows.Forms.RadioButtonTS radFilter10;
        private System.Windows.Forms.LabelTS lblRF;
		private System.Windows.Forms.LabelTS lblTuneStep;
        private System.Windows.Forms.PanelTS grpVFOBetween; // ke9ns mod
        private System.Windows.Forms.CheckBoxTS chkVOX;
        private System.Windows.Forms.LabelTS lblTXGain;
        private System.Windows.Forms.LabelTS lblRXGain;
        private System.Windows.Forms.PictureBox picVOX;
        private System.Windows.Forms.CheckBoxTS chkNoiseGate;
		private System.Windows.Forms.PictureBox picNoiseGate;
        public  System.Windows.Forms.TextBoxTS autoBrightBox;
        private System.Windows.Forms.TextBoxTS txtDisplayCursorOffset;
		private System.Windows.Forms.TextBoxTS txtDisplayCursorPower;
		private System.Windows.Forms.TextBoxTS txtDisplayCursorFreq;
		private System.Windows.Forms.TextBoxTS txtDisplayPeakOffset;
		private System.Windows.Forms.TextBoxTS txtDisplayPeakFreq;
        public TextBoxTS txtDisplayPeakPower;
        private System.Windows.Forms.TextBoxTS txtVFOAMSD;
		private System.Windows.Forms.TextBoxTS txtVFOBMSD;
		private System.Windows.Forms.TextBoxTS txtVFOALSD;
        private System.Windows.Forms.TextBoxTS txtVFOBLSD;
		private System.Windows.Forms.CheckBoxTS chkSR;
        private System.Windows.Forms.ButtonTS btnTuneStepChangeSmaller;
		private System.Windows.Forms.ComboBoxTS comboTXProfile;
        private System.Windows.Forms.CheckBoxTS chkShowTXFilter;
        private System.Windows.Forms.CheckBoxTS chkShowDigTXFilter;
		private System.Windows.Forms.ComboBoxTS comboVACSampleRate;
		private System.Windows.Forms.GroupBoxTS grpDIGSampleRate;
		private System.Windows.Forms.GroupBoxTS grpVACStereo;
		private System.Windows.Forms.CheckBoxTS chkVACStereo;
		private System.Windows.Forms.CheckBoxTS chkCWSidetone;
		private System.Windows.Forms.CheckBoxTS chkCWIambic;
		private System.Windows.Forms.LabelTS lblCWPitchFreq;
        public System.Windows.Forms.NumericUpDownTS udCWPitch;
        public System.Windows.Forms.ButtonTS lblDisplayPan;
        private System.Windows.Forms.ButtonTS btnDisplayPanCenter;
        private System.Windows.Forms.LabelTS lblDisplayZoom;
		private System.Windows.Forms.LabelTS lblTransmitProfile;
		private System.Windows.Forms.CheckBoxTS chkX2TR;
        private System.Windows.Forms.CheckBoxTS chkShowTXCWFreq;
        private System.Windows.Forms.CheckBoxTS chkPanSwap;
		private System.Windows.Forms.GroupBoxTS grpSemiBreakIn;
		private System.Windows.Forms.LabelTS lblCWBreakInDelay;
		private System.Windows.Forms.CheckBoxTS chkCWBreakInEnabled;
		private System.Windows.Forms.NumericUpDownTS udCWBreakInDelay;
		private System.Windows.Forms.CheckBoxTS chkVAC1;
		private System.Windows.Forms.ComboBoxTS comboDigTXProfile;
        private System.Windows.Forms.LabelTS lblDigTXProfile;
		private System.Windows.Forms.CheckBoxTS chkRXEQ;
        private System.Windows.Forms.CheckBoxTS chkTXEQ;
        private System.Windows.Forms.CheckBoxTS chkBCI;
        private System.ComponentModel.IContainer components;
        public CheckBoxTS chkEnableMultiRX;
        private System.Windows.Forms.ButtonTS btnTuneStepChangeLarger;
		private System.Windows.Forms.LabelTS lblAntRX1;
        private System.Windows.Forms.LabelTS lblAntTX;
		private System.Windows.Forms.CheckBoxTS chkSplitDisplay;
		private System.Windows.Forms.ComboBoxTS comboDisplayModeTop;
		private System.Windows.Forms.ComboBoxTS comboDisplayModeBottom;
		private System.Windows.Forms.LabelTS lblDisplayModeTop;
        private System.Windows.Forms.LabelTS lblDisplayModeBottom;
        private System.Windows.Forms.CheckBoxTS chkCPDR;
		private System.Windows.Forms.CheckBoxTS chkDX;
		private System.Windows.Forms.CheckBoxTS ckQuickPlay;
        public CheckBoxTS ckQuickRec;
        private System.Windows.Forms.GroupBoxTS grpDisplaySplit;
        public CheckBoxTS chkRX2;
        private System.Windows.Forms.CheckBoxTS chkRX2SR;
		private System.Windows.Forms.Panel panelVFOASubHover;
        private System.Windows.Forms.LabelTS lblAntRX2;
		private System.Windows.Forms.RadioButtonTS radRX2ModeAM;
		private System.Windows.Forms.RadioButtonTS radRX2ModeSAM;
		private System.Windows.Forms.RadioButtonTS radRX2ModeDSB;
		private System.Windows.Forms.RadioButtonTS radRX2ModeCWU;
		private System.Windows.Forms.RadioButtonTS radRX2ModeDIGU;
		private System.Windows.Forms.RadioButtonTS radRX2ModeDIGL;
        public RadioButtonTS radRX2ModeLSB;
        private System.Windows.Forms.RadioButtonTS radRX2ModeSPEC;
		private System.Windows.Forms.RadioButtonTS radRX2ModeDRM;
		private System.Windows.Forms.RadioButtonTS radRX2ModeFMN;
        public RadioButtonTS radRX2ModeUSB;
        private System.Windows.Forms.RadioButtonTS radRX2ModeCWL;
        private System.Windows.Forms.CheckBoxTS chkRX2BIN;
		private System.Windows.Forms.RadioButtonTS radRX2Filter1;
		private System.Windows.Forms.RadioButtonTS radRX2Filter2;
		private System.Windows.Forms.RadioButtonTS radRX2Filter3;
		private System.Windows.Forms.RadioButtonTS radRX2Filter4;
		private System.Windows.Forms.RadioButtonTS radRX2Filter5;
		private System.Windows.Forms.RadioButtonTS radRX2Filter6;
		private System.Windows.Forms.RadioButtonTS radRX2Filter7;
		private System.Windows.Forms.RadioButtonTS radRX2FilterVar1;
		private System.Windows.Forms.RadioButtonTS radRX2FilterVar2;
		private System.Windows.Forms.PanelTS grpRX2Meter;
		private System.Windows.Forms.ComboBoxTS comboRX2MeterMode;
		private System.Windows.Forms.NumericUpDownTS udRX2FilterLow;
		private System.Windows.Forms.NumericUpDownTS udRX2FilterHigh;
		private System.Windows.Forms.LabelTS lblRX2FilterLow;
        private System.Windows.Forms.LabelTS lblRX2FilterHigh;
		private System.Windows.Forms.CheckBoxTS chkRX2NB2;
		private System.Windows.Forms.CheckBoxTS chkRX2NB;
		private System.Windows.Forms.CheckBoxTS chkRX2ANF;
		private System.Windows.Forms.CheckBoxTS chkRX2NR;
		
		private System.Windows.Forms.TextBoxTS txtRX2Meter;
		private System.Windows.Forms.LabelTS lblRX2Meter;
        private System.Windows.Forms.CheckBoxTS chkRX2Preamp;
        private System.Windows.Forms.LabelTS lblRX2RF;
        private System.Windows.Forms.PictureBox picSquelch;
        private System.Windows.Forms.CheckBoxTS chkRX2Squelch;
		private System.Windows.Forms.PictureBox picRX2Squelch;
        private System.Windows.Forms.CheckBoxTS chkRX1Preamp;
        private System.Windows.Forms.CheckBoxTS chkRX2Mute;
		private System.Windows.Forms.CheckBoxTS chkRX2DisplayPeak;
		private System.Windows.Forms.ComboBoxTS comboRX2DisplayMode;
		private System.Windows.Forms.CheckBoxTS chkRX2DisplayAVG;   
		private System.Windows.Forms.Label lblRX2Mute;
		private System.Windows.Forms.Label lblRX2Pan;
        private System.Windows.Forms.Label lblRX2Vol;
		private System.Windows.Forms.ComboBoxTS comboRX2Band;           
        private System.Windows.Forms.LabelTS lblRX2Band;
		private System.Windows.Forms.ComboBoxTS comboRX2AGC;
		private System.Windows.Forms.LabelTS lblRX2AGC;
		private System.Windows.Forms.CheckBoxTS chkVFOSync;
        public CheckBoxTS chkVFOATX;
        public CheckBoxTS chkVFOBTX;
        private PanelTS panelBandHF;
        private PanelTS panelBandVHF;
        private PanelTS panelBandGN;
        private PanelTS panelMode;
        private PanelTS panelFilter;
        private PanelTS panelDisplay;
        private PanelTS panelOptions;
        private PanelTS panelSoundControls;
        private PanelTS panelAntenna;
        private PanelTS panelDateTime;
        private PanelTS panelVFO;
        private PanelTS panelDSP;
        private PanelTS panelMultiRX;
        private PanelTS panelModeSpecificCW;
        private PanelTS panelModeSpecificPhone;
        private PanelTS panelModeSpecificDigital;
        private RadioButtonTS radBand160;
        private RadioButtonTS radBand80;
        private RadioButtonTS radBand60;
        private RadioButtonTS radBand40;
        private RadioButtonTS radBand30;
        private RadioButtonTS radBand20;
        private RadioButtonTS radBand17;
        private RadioButtonTS radBand15;
        private RadioButtonTS radBand12;
        private RadioButtonTS radBand10;
        private RadioButtonTS radBand6;
        private RadioButtonTS radBand2;
        private RadioButtonTS radBandWWV;
        private RadioButtonTS radBandGEN;

        private RadioButtonTS radBandGN13; // ke9ns add
        private RadioButtonTS radBandGN12;
        private RadioButtonTS radBandGN11;
        private RadioButtonTS radBandGN10;
        private RadioButtonTS radBandGN9;
        private RadioButtonTS radBandGN8;
        private RadioButtonTS radBandGN7;
        private RadioButtonTS radBandGN6;
        private RadioButtonTS radBandGN5;
        private RadioButtonTS radBandGN4;
        private RadioButtonTS radBandGN3;
        private RadioButtonTS radBandGN2;
        private RadioButtonTS radBandGN1;
        private RadioButtonTS radBandGN0;
        private ButtonTS btnBandHF1;

        private RadioButtonTS radBandVHF0;
        private RadioButtonTS radBandVHF11;
        private RadioButtonTS radBandVHF10;
        private RadioButtonTS radBandVHF9;
        private RadioButtonTS radBandVHF8;
        private RadioButtonTS radBandVHF7;
        private RadioButtonTS radBandVHF6;
        private RadioButtonTS radBandVHF5;
        private RadioButtonTS radBandVHF4;
        private RadioButtonTS radBandVHF3;
        private RadioButtonTS radBandVHF2;
        private RadioButtonTS radBandVHF1;
        private RadioButtonTS radBandVHF13;
        private RadioButtonTS radBandVHF12;


        private PanelTS panelRX2Mixer;
        private PanelTS panelRX2DSP;
        private PanelTS panelRX2Display;
        private PanelTS panelRX2Mode;
        private PanelTS panelRX2Filter;
        private PrettyTrackBar ptbDisplayPan;
        public PrettyTrackBar ptbDisplayZoom;
        public PrettyTrackBar ptbAF;
        private PrettyTrackBar ptbRF;
        private PrettyTrackBar ptbPWR;
        private PrettyTrackBar ptbSquelch;
        private PrettyTrackBar ptbMic;
        private LabelTS lblMicVal;
        private PrettyTrackBar ptbDX;
        private LabelTS lblDXVal;
        private PrettyTrackBar ptbCPDR;
        private LabelTS lblCPDRVal;
        private PrettyTrackBar ptbVOX;
        private LabelTS lblVOXVal;
        private PrettyTrackBar ptbNoiseGate;
        private LabelTS lblNoiseGateVal;
        private PrettyTrackBar ptbFilterWidth;
        private PrettyTrackBar ptbFilterShift;
        public PrettyTrackBar ptbCWSpeed;
        private PrettyTrackBar ptbPanMainRX;
        private PrettyTrackBar ptbPanSubRX;
        private PrettyTrackBar ptbRX2RF;
        private PrettyTrackBar ptbRX2Squelch;
        private PrettyTrackBar ptbRX2Gain;
        private PrettyTrackBar ptbRX2Pan;
        private PrettyTrackBar ptbRX1Gain;
        private PrettyTrackBar ptbRX0Gain;
        private PrettyTrackBar ptbVACRXGain;
        private PrettyTrackBar ptbVACTXGain;
        private ContextMenuStrip contextMenuStripFilterRX1;
        private ToolStripMenuItem toolStripMenuItemRX1FilterConfigure;
        private ToolStripMenuItem toolStripMenuItemRX1FilterReset;
        private ContextMenuStrip contextMenuStripFilterRX2;
        private ToolStripMenuItem toolStripMenuItemRX2FilterConfigure;
        private ToolStripMenuItem toolStripMenuItemRX2FilterReset;
        private System.Windows.Forms.Timer timer_navigate;
        private RadioButtonTS radDisplayZoom05;
        private RadioButtonTS radDisplayZoom4x;
        private RadioButtonTS radDisplayZoom2x;
        private RadioButtonTS radDisplayZoom1x;
        private CheckBoxTS chkFWCATUBypass;
        public CheckBoxTS chkFWCATU;
        private System.Windows.Forms.Timer timer2;
        private ContextMenuStrip contextMenuStripNotch;
        private ToolStripMenuItem toolStripNotchDelete;
        private ToolStripMenuItem toolStripNotchRemember;
        private ToolStripSeparator toolStripSeparator1;
        private ToolStripMenuItem toolStripNotchNormal;
        private ToolStripMenuItem toolStripNotchDeep;
        private ToolStripMenuItem toolStripNotchVeryDeep;
        private PanelTS panelDisplay2;
        private ButtonTS btnTNFAdd;
        private CheckBoxTS chkTNF;
        private CheckBoxTS chkDisplayPeak;
        private ComboBoxTS comboDisplayMode;
        private CheckBoxTS chkDisplayAVG;
        private PanelTS panelModeSpecificFM;
        private LabelTS lblMicValFM;
        private PrettyTrackBar ptbFMMic;
        private LabelTS lblFMMic;
        private LabelTS labelTS7;
        private ComboBoxTS comboFMTXProfile;
        private CheckBoxTS chkFMTXLow;
        private CheckBoxTS chkFMTXSimplex;
        private CheckBoxTS chkFMTXHigh;
        private CheckBoxTS chkFMCTCSS;
        private ComboBoxTS comboFMCTCSS;
        private RadioButtonTS radFMDeviation2kHz;
        private RadioButtonTS radFMDeviation5kHz;
        private LabelTS lblFMDeviation;
        private CheckBoxTS chkFMTXRev;
        private LabelTS lblFMOffset;
        private NumericUpDownTS udFMOffset;
        public ComboBoxTS comboFMMemory;
        private ButtonTS btnFMMemoryUp;
        private ButtonTS btnFMMemoryDown;
        private LabelTS lblFMMemory;
        private ButtonTS btnFMMemory;
        public MenuStrip menuStrip1;
        private ToolStripMenuItem setupToolStripMenuItem;
        private ToolStripMenuItem memoryToolStripMenuItem;
        public ToolStripMenuItem waveToolStripMenuItem;
        private ToolStripMenuItem equalizerToolStripMenuItem;
        private ToolStripMenuItem xVTRsToolStripMenuItem;
        private ToolStripMenuItem cWXToolStripMenuItem;
        private ToolStripMenuItem uCBToolStripMenuItem;
        private ToolStripMenuItem mixerToolStripMenuItem;
        private ToolStripMenuItem antennaToolStripMenuItem;
        private ToolStripMenuItem relaysToolStripMenuItem;
        private ToolStripMenuItem aTUToolStripMenuItem;
        private ToolStripMenuItem flexControlToolStripMenuItem;
        private ToolStripMenuItem eSCToolStripMenuItem;
        private ToolStripMenuItem reportBugToolStripMenuItem;
        private ToolStripMenuItem remoteProfilesToolStripMenuItem;
        private ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.Timer timerNotchZoom;
        private ToolStripMenuItem herosToolStripMenuItem;
        private CheckBoxTS chkVAC2;
        private LabelTS lblVACRXIndicator;
        private LabelTS lblVACTXIndicator;
        private ToolStripMenuItem GrayMenuItem;
        private RichTextBox labelTS4;  // ke9ns add
        private RichTextBox labelTS3; // ke9ns add
        public ToolStripMenuItem TXIDMenuItem;
        public ToolStripTextBox callsignTextBox;
        private ToolStripMenuItem ScanMenuItem;
        public OpenFileDialog openFileDialog1;
        public TextBoxTS regBox;
        public TextBoxTS regBox1;
        public ToolStripMenuItem spotterMenu;
        public CheckBoxTS checkBoxID;
        private Label label1;
        private ComboBoxTS comboMeterTX1Mode;
        private System.Windows.Forms.CheckBoxTS chkFullDuplex;

#endregion

#region Constructor and Destructor
        // ======================================================
		// Constructor and Destructor
		// ======================================================

		public Console(string[] args)
        {

          

            //====================================================================================
            //====================================================================================
            //====================================================================================
            // KE9NS ADD: the purpose of this function is to embed the fonts into the resource (PowerSDR.exe)
            // this for some reason requires using unmanaged memory as opposed to simply reading the file.
            //====================================================================================
            //====================================================================================
            //====================================================================================
            // Embed Swis721 BlkEx BT Font
            byte[] fontArray = Properties.Resources.swissek;  //  swissek buffer to hold Font file
            int dataLength = Properties.Resources.swissek.Length; //  swissek get length of Font file

            byte[] fontArray1 = Properties.Resources.swissb;  // swissbi  buffer to hold Font file     SWIS721 Bold
            int dataLength1 = Properties.Resources.swissb.Length; // swissbi  get length of Font file

            byte[] fontArray2 = Properties.Resources.swisscki;  // swisscki  buffer to hold Font file    SWIS721 Condensed Kerfed Italic FONT
            int dataLength2 = Properties.Resources.swisscki.Length; // swisscki  get length of Font file


            byte[] fontArray3 = Properties.Resources.swissbo;  // swisscbo  buffer to hold Font file     SWIS721 OUTLINE FONT
            int dataLength3 = Properties.Resources.swissbo.Length; // swisscbo  get length of Font file


            IntPtr ptrData = Marshal.AllocCoTaskMem(dataLength); //int pointer to a allocated block of unmanaged memory the size of the Font File
            IntPtr ptrData1 = Marshal.AllocCoTaskMem(dataLength1); //int pointer to a allocated block of unmanaged memory the size of the Font File
           IntPtr ptrData2 = Marshal.AllocCoTaskMem(dataLength2); //int pointer to a allocated block of unmanaged memory the size of the Font File
            IntPtr ptrData3 = Marshal.AllocCoTaskMem(dataLength3); //int pointer to a allocated block of unmanaged memory the size of the Font File


            Marshal.Copy(fontArray, 0, ptrData, dataLength); // copy Font File bytes source -> into unmanged memory block
            Marshal.Copy(fontArray1, 0, ptrData1, dataLength1); // copy Font File bytes source -> into unmanged memory block
            Marshal.Copy(fontArray2, 0, ptrData2, dataLength2); // copy Font File bytes source -> into unmanged memory block
            Marshal.Copy(fontArray3, 0, ptrData3, dataLength3); // copy Font File bytes source -> into unmanged memory block

            uint cFonts = 0;
           

            AddFontMemResourceEx(ptrData, (uint)fontArray.Length, IntPtr.Zero, ref cFonts); // class part of gdi32.dll add Font from unmanged memory block
            AddFontMemResourceEx(ptrData1, (uint)fontArray1.Length, IntPtr.Zero, ref cFonts); // class part of gdi32.dll add Font from unmanged memory block
           AddFontMemResourceEx(ptrData2, (uint)fontArray2.Length, IntPtr.Zero, ref cFonts); // class part of gdi32.dll add Font from unmanged memory block
            AddFontMemResourceEx(ptrData3, (uint)fontArray3.Length, IntPtr.Zero, ref cFonts); // class part of gdi32.dll add Font from unmanged memory block

            PrivateFontCollection pfc = new PrivateFontCollection();  // class to provide client provided fonts
            PrivateFontCollection pfc1 = new PrivateFontCollection();  // class to provide client provided fonts
            PrivateFontCollection pfc3 = new PrivateFontCollection();  // class to provide client provided fonts


            pfc.AddMemoryFont(ptrData, dataLength); // add Font from unmanaged memory block
            pfc.AddMemoryFont(ptrData1, dataLength1); // add Font from unmanaged memory block
            pfc1.AddMemoryFont(ptrData2, dataLength2); // add Font from unmanaged memory block
            pfc3.AddMemoryFont(ptrData3, dataLength3); // add Font from unmanaged memory block

            Marshal.FreeCoTaskMem(ptrData);  // release unmanaged memory block (safe again)
            Marshal.FreeCoTaskMem(ptrData1);  // release unmanaged memory block (safe again)
            Marshal.FreeCoTaskMem(ptrData2);  // release unmanaged memory block (safe again)
            Marshal.FreeCoTaskMem(ptrData3);  // release unmanaged memory block (safe again)

            S1 = pfc.Families[0]; // swissek
            S2 = pfc.Families[1]; // swissb  Swis721 BT Bold

            S3 = pfc1.Families[0]; //swisscki
            S4 = pfc3.Families[0]; //swisscbo

            ff = new Font(S1, 7.0f, FontStyle.Bold | FontStyle.Italic); // Swis721 BlkEx B  // analog meters
            ff1 = new Font(S1, 6.9f, FontStyle.Bold | FontStyle.Italic); // Swis721 BlkEx B // white numbers
            ff2 = new Font(S1, 5.5f, FontStyle.Bold | FontStyle.Italic); // Swis721 BlkEx B // red +numbers

            ff3 = new Font(S2, 14.0f, FontStyle.Bold ); // Swis721 BT // digital meter values
            ff4 = new Font(S2, 12.0f, FontStyle.Bold ); // Swis721 BT
            ff5 = new Font(S2, 8.25f, FontStyle.Bold ); // Swis721 BT

            ff8 = new Font(S2, 11.0f, FontStyle.Bold | FontStyle.Italic); // Swis721 BT  font for meter indication

            //    f6 = new Font(S2, 32.0f, FontStyle.Italic); // Swis721 BT for txtVFOAMSD (A and B)
            //    f7 = new Font(S2, 27.0f, FontStyle.Italic); // Swis721 BT for txtVFOALSD (A and B)

            //   f6 = new Font(S3, 32.0f, FontStyle.Regular); // Swis721 BI for txtVFOAMSD (A and B) its already a Bold and Italic font
            //  f7 = new Font(S3, 27.0f, FontStyle.Regular); // Swis721 BI for txtVFOALSD (A and B)


            ff6 = new Font(S3, 32.0f, FontStyle.Bold | FontStyle.Italic); // Swis721 BI for txtVFOAMSD (A and B) its already a Bold and Italic font
            ff7 = new Font(S3, 27.0f, FontStyle.Bold | FontStyle.Italic); // Swis721 BI for txtVFOALSD (A and B)

            ff9 = new Font(S4, 32.5f,  FontStyle.Bold); // Swis721 BO for txtVFOAMSD (A and B) its already a Open and Italic font
            ff9a = new Font(S4, 27.0f, FontStyle.Bold); // Swis721 BO for txtVFOAMSD (A and B) its already a Open and Italic font


            //============================================================================================================ ke9ns add end


            foreach (string s in args)
            {
                if (s.StartsWith("-datapath:"))
                {
                    string path = s.Trim().Substring(s.Trim().IndexOf(":") + 1);

                    if (path.EndsWith("\"")) path = path.Substring(0, path.Length - 1);

                    if (!path.EndsWith("\\")) path += "\\";

                    if (Directory.Exists(path))  AppDataPath = path;
                    else
                    {
                        DialogResult dr = MessageBox.Show("-datapath: command line option found, but the folder specified was not found.\n" +
                            "Would you like to create this folder?  If not, the default folder will be used.\n\n" +
                            "("+s+")",
                            "Command Line Option: Create Folder?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                        if(dr == DialogResult.Yes)
                        {
                            Directory.CreateDirectory(path);
                            AppDataPath = path;
                        }
                    }
                }
            }


            //---------------------------------------------------------------------------------
            // ke9ns info:    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)  ==   %userprofile%\AppData\Roaming

            if (app_data_path == "")
            {
                Assembly assembly = Assembly.GetExecutingAssembly();
                FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
                string version = fvi.FileVersion.Substring(0, fvi.FileVersion.LastIndexOf("."));

            //  AppDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\PowerSDR" + version + "\\"; // ke9ns original
               AppDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\PowerSDR v2.8.0\\"; // keep it the same otherwise everyone starts with a new database
              //  AppDataPath1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\PowerSDR v2.7.2\\"; // keep it the same otherwise everyone starts with a new database


            }

            // identify all detectable radios (FLEX-5000s, FLEX-3000s, FLEX-1500s)
            RadiosAvailable.Init();

            // check for existence of master file
            string master_path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\";  // %userprofile%\AppData\Roaming\FlexRadio Systems\

            if (File.Exists(master_path + "production"))    production = true;  // ke9ns if an empty file called production is found in the  %userprofile%\AppData\Roaming\FlexRadio Systems\ folder

            if (File.Exists(master_path + "test_equip"))    test_equip = true;   // ke9ns if an empty file called test_quip is found in the  %userprofile%\AppData\Roaming\FlexRadio Systems\ folder

            Master.Init();

            Debug.Assert(File.Exists(master_path + "master.xml"));

            // decide whether to present a choice of radios to the user
            Pal.Init();
            RadiosAvailable.ScanPal(); // gather info on Pal radios
            
            if(RadiosAvailable.NumPresent == 0) // handle v1.x firmware
            {
                if (FWCMidi.Open())
                {
                    /*MessageBox.Show("Error communicating with radio.  The program will now be closed.\n" +
                        "Please update the radio firmware to v2.0+ to prevent this issue.\n" +
                        "For instructions, visit:\n\n http://kc.flexradio.com/KnowledgebaseArticle50441.aspx",
                        "Communication Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    Process.GetCurrentProcess().Kill();
                    return;*/

                    uint model;
                    int ret = FWC.GetModelMidi(out model);
                    if (model == 3) current_model = Model.FLEX3000;
                    else current_model = Model.FLEX5000;

                    DialogResult dr = MessageBox.Show("A radio firmware update is required in order to continue.\n\n" +
                        "Would you like to update your firmware now?\n" +
                        "If not, PowerSDR will be closed.",
                        "Update Firmware Now?",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Question);

                    if (dr == DialogResult.No)
                    {
                        Process.GetCurrentProcess().Kill(); // program ends here
                        return; // this is just for code clarity
                    }

                    if (current_model == Model.FLEX5000)
                    {
                        dr = MessageBox.Show("Is the radio in use a FLEX-5000?",
                            "FLEX-5000?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                        if (dr == DialogResult.No)
                        {
                            dr = MessageBox.Show("Is the radio in use a FLEX-3000?",
                                "FLEX-3000?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                            if (dr == DialogResult.No)
                            {
                                MessageBox.Show("The radio was not recognized.  Please try again.",
                                    "Radio Model Confusion",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);

                                Process.GetCurrentProcess().Kill(); // program ends here
                                return; // this is just for code clarity
                            }

                            current_model = Model.FLEX3000;
                        }
                    }

                    LoadFWCFirmware(VerToString(GetMinVersion(current_model)));

                    MessageBox.Show("Update complete.  The program will now close.\n" +
                        "Please restart PowerSDR to continue.",
                        "Restart Required",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);

                    Process.GetCurrentProcess().Kill();
                }
            } // radiosavailable == 0

            Flex1500.Init();
            RadiosAvailable.Scan1500();

           
      

            int list_det_num = 0;
            int list_undet_num = 0; // ignore demo
            int list_det_present = 0;

            foreach (Radio r in RadiosAvailable.RadioList)
            {
                switch (r.Model)
                {
                    case Model.FLEX5000:
                    case Model.FLEX3000:
                    case Model.FLEX1500:
                        list_det_num++; 
                        if (r.Present) list_det_present++; 
                        break;
                 //   case Model.SDR1000:
                  //  case Model.SOFTROCK40:
                   //     list_undet_num++; break;
                }
            }

            if ((list_det_num == 1 && list_undet_num == 0) ||  (production && list_det_present == 1)) // skip form
            {
                foreach (Radio r in RadiosAvailable.RadioList)
                {
                    bool found = false;
                    switch (r.Model)
                    {
                        case Model.FLEX5000:
                        case Model.FLEX3000:
                            if (r.Present)
                            {
                                Pal.SelectDevice((uint)r.AccessObj);
                                found = true;
                            }
                            break;
                        case Model.FLEX1500:
                            if (r.Present)
                            {
                                Flex1500.SetActiveRadio((IntPtr)r.AccessObj);
                                found = true;
                            }
                            break;
                    }

                    if (found) // if a Flex radio found
                    {
                        radio_to_use = r;
                        //  DBFileName = app_data_path + r.GetDBFilename();  // ke9ns original this line of code

                        DBFileName = app_data_path + r.GetDBFilename1();  // ke9ns mod  this tells PowerSDR to look for a databaseRevQ_F5K_1610-2780.xml file
                     
                        DBFileName1 = app_data_path + r.GetDBFilename(); // ke9ns add  this is the old original name database_F5K_1610-2780.xml file that we copy use to copy over to the RevQ when needed
                                                                         //            we do this just in case you need your original database for running an older copy of PowerSDR

                    
                        break;
                    }

                } // foreach(radio)

                // add any new radios found to the master list
                foreach (Radio r in RadiosAvailable.RadioList)
                    Master.AddRadio(r);

                Master.Commit();
            }

            // use one database for each model in production (not each serial)
            /*if (db_file_name != "" && production && radio_to_use.Model != Model.DEMO) 
            {
                int index = db_file_name.LastIndexOf("_");
                DBFileName = db_file_name.Substring(0, index) + ".xml";
            }*/
           
            if(radio_to_use == null)
            {
                RadioChoice choiceForm = new RadioChoice(this);
                choiceForm.ShowDialog();
            }

            foreach (string s in args)
            {
                if(s.StartsWith("-dbfilename:"))
                {
                    string path = s.Trim().Substring(s.Trim().IndexOf(":") + 1);

                    if (File.Exists(path))
                    {
                        DBFileName = path;
                    }
                    else
                    {
                        DialogResult dr = MessageBox.Show("-dbfilename: command line option found, but the file specified was not found.\n" +
                            "Would you like to create this file?  If not, the default database will be used.\n\n" +
                            "(" + s + ")",
                            "Command Line Option: Create File?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                        if (dr == DialogResult.Yes)
                            DBFileName = path;
                    }
                }
            }

#if (DEBUG)
            AppDataPath += "Debug\\";
#endif
            if (!Directory.Exists(app_data_path))
            {
                Directory.CreateDirectory(app_data_path);
            }

            if (db_file_name == "")
            {
                DBFileName = AppDataPath + "database.xml";
            }

            if (File.Exists(db_file_name))
            {
                if (Keyboard.IsKeyDown(Keys.LShiftKey) || Keyboard.IsKeyDown(Keys.RShiftKey))
                {
                    Thread.Sleep(500); // ensure this is intentional
                    if (Keyboard.IsKeyDown(Keys.LShiftKey) || Keyboard.IsKeyDown(Keys.RShiftKey))
                    {
                        DialogResult dr = MessageBox.Show(
                            "The Factory Defaults function has been tiggered.  Would you like to Reset to Factory Defaults?\n\n"+
                            "If so, a copy of the current database will be placed on the desktop with "+
                            "a date and time stamp in the file name before creating a brand new "+
                            "database for active use.",
                            "Factory Defaults?",
                            MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

                        if (dr == DialogResult.Yes)
                        {
                            string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                            string datetime = DateTime.Now.ToShortDateString().Replace("/", "-") + "_" +
                                DateTime.Now.ToShortTimeString().Replace(":", ".");

                            string file = db_file_name.Substring(db_file_name.LastIndexOf("\\") + 1);
                            file = file.Substring(0, file.Length - 4);

                            File.Copy(db_file_name, desktop + "\\PowerSDR_" + file + "_" + datetime + ".xml");

                            File.Delete(db_file_name);
                            Thread.Sleep(100);
                        }
                    }
                }
            } // file exists

            //===========================================================================================
            //===========================================================================================
            //===========================================================================================
            //===========================================================================================
            // SPLASH SCREEN STARTUP

            CmdLineArgs = args;

            Splash.ShowSplashScreen();							// Start splash screen

            Splash.SetStatus("Initializing Components");        // Set progress point

            InitializeComponent();								// Windows Forms Generated Code

            // for resizing
            GrabConsoleSizeBasis();
            MinimumSize = this.Size;

            Splash.SetStatus("Initializing Database");			// Set progress point
            DB_Exists = DB.Init(radio_to_use.Model);		    // Initialize the database and pass the current radio model

            InitCTCSS();
            Splash.SetStatus("Initializing Hardware");			// Set progress point

            // check model in Options table
            ArrayList list = DB.GetVars("Options");				// Get the saved list of controls
            list.Sort();


            Splash.SetStatus("Enumerating Radio Hardware");     // Set progress point

            if(radio_to_use != null)
            {
                switch (radio_to_use.Model)
                {
                    case Model.FLEX5000:
                        current_model = Model.FLEX5000;
                        fwc_init = true;
                        hid_init = false;
                        FWC.SetPalCallback();
                        FWCMidi.Open();

                        if (list.Count == 0)
                        {
                            list.Add("radGenModelFLEX5000/True");
                            DB.SaveVars("Options", ref list);
                        }
                        break;
                    case Model.FLEX3000:
                        current_model = Model.FLEX3000;
                        fwc_init = true;
                        hid_init = false;
                        FWC.SetPalCallback();
                        FWCMidi.Open();

                        if (list.Count == 0)
                        {
                            list.Add("radGenModelFLEX5000/True");
                            DB.SaveVars("Options", ref list);
                        }
                        break;
                    case Model.FLEX1500:
                        current_model = Model.FLEX1500;
                        fwc_init = false;
                        hid_init = true;
                        if (list.Count == 0)
                        {
                            list.Add("radGenModelFLEX1500/True");
                            DB.SaveVars("Options", ref list);
                        }
                        break;
                  /*  case Model.SDR1000:
                        current_model = Model.SDR1000;
                        fwc_init = false;
                        hid_init = false;
                        if (list.Count == 0)
                        {
                            list.Add("radGenModelSDR1000/True");
                            DB.SaveVars("Options", ref list);
                        }
                        run_setup_wizard = true;
                        break;
                    case Model.SOFTROCK40:
                        current_model = Model.SOFTROCK40;
                        fwc_init = false;
                        hid_init = false;
                        if (list.Count == 0)
                        {
                            list.Add("radGenModelSoftRock40/True");
                            DB.SaveVars("Options", ref list);
                        }
                        break;
                  */  default:
                        current_model = Model.DEMO;
                        fwc_init = false;
                        hid_init = false;
                        if (list.Count == 0)
                        {
                            list.Add("radGenModelDemoNone/True");
                            DB.SaveVars("Options", ref list);
                        }
                        break;
                }
            }

            if (fwc_init)
            {
                FWCEEPROM.Init();
                current_region = FWCEEPROM.Region;

               
             //   current_region = FRSRegion.Europe; // ke9ns region test

                if (!db_exists) // modify bandtext and bandstack for non-US regions
                {
                    if (current_region != FRSRegion.US)
                    {
                        Splash.SetStatus("Harmonizing BandText");
                        DB.UpdateRegion(current_region);
                    }
                }

                if (FWCEEPROM.NeedDump())
                {
                    Splash.HideForm();

                    FWCEEPROM.StartDump(); // fwc_eeprom.cs

                    Splash.UnHideForm();
                }

                switch (FWCEEPROM.Model)
                {
                    case 0:
                    case 1:
                    case 2:
                        current_model = Model.FLEX5000;
                        break;
                    case 3:
                        current_model = Model.FLEX3000;
                        break;
                }

                InitRadio();
            }

            if (hid_init)
            {
                HIDEEPROM.Init();
                current_region = HIDEEPROM.Region;

                if (!db_exists) // modify bandtext and bandstack for non-US regions
                {
                    if (current_region != FRSRegion.US)
                    {
                        Splash.SetStatus("Harmonizing BandText");
                        DB.UpdateRegion(current_region);
                    }
                }

                if (HIDEEPROM.NeedDump())
                    HIDEEPROM.StartDump();

                current_model = Model.FLEX1500;

                InitFLEX1500();
            }

         
            //====================================================================================
            // ke9ns  this is where you determine if you have RX2
            //====================================================================================

            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)  // original
            {
                chkRX2.Visible = true;
                lblAntRX2.Visible = true;
                //   panelRX2Divider.Visible = true;

                this.MinimumSize = new Size(this.MinimumSize.Width, this.MinimumSize.Height - (panelRX2Filter.Height + 0));
            }
            else // this is for 1500 and 3000 and 5000 with only RX1
            {
                console_basis_size.Height -= (panelRX2Filter.Height + 8); // panelRX2Filter

                grpRX2Meter.Visible = false;


                panelRX2Mode.Visible = false;
                panelRX2Display.Visible = false;

                panelRX2DSP.Visible = false;

                panelRX2Mixer.Visible = false;

                lblRX2Band.Visible = false;

                chkRX2Preamp.Visible = false;

                ptbRX2RF.Visible = false;

                ptbRX2Squelch.Visible = false;

                comboRX2Band.Visible = false;

                lblRX2RF.Visible = false;

                this.MinimumSize = new Size(this.MinimumSize.Width, this.MinimumSize.Height - (panelRX2Filter.Height + 8));

                if (chkRX2.Checked) chkRX2.Checked = false;

                this.Height -= (panelRX2Filter.Height + 8);
                panelRX2Filter.Visible = false;
                chkRX2Squelch.Visible = false;
            }

            Splash.SetStatus("Initializing Radio");				// Set progress point
            dsp = new DSP();								    // Initialize the Radio processor

            Splash.SetStatus("Initializing PortAudio");			// Set progress point
            PA19.PA_Initialize();								// Initialize the audio interface
            if (fwc_init) Thread.Sleep(500);

            Splash.SetStatus("Loading Main Form");				// Set progress point
            Splash.SplashForm.Owner = this;						// So that main form will show/focus when splash disappears
            break_in_timer = new HiPerfTimer();

#if (NO_DJ)
            //mod DH1TW
            DJConsoleObj = new DJConsole(this);

            //endmod
#endif
          

            InitConsole();										// Initialize all forms and main variables            

            Splash.SetStatus("Finished");                       // Set progress point
                                                                // Activates double buffering
                                                                //SetStyle(ControlStyles.DoubleBuffer, true);

         
            //===================================================================================



            this.SetStyle(ControlStyles.UserPaint | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
            this.UpdateStyles();

            Splash.CloseForm();									// End splash screen

            // create a Windows Mutex for PowerSDR.  Do not create a second Mutex if one already exists
            try
            {
                psdr2_mutex = Mutex.OpenExisting(psdr2_mutex_name);
            }
            catch (WaitHandleCannotBeOpenedException)
            {
                psdr2_mutex = new Mutex(true, psdr2_mutex_name, out psdr2_mutex_exists);
            }



            // ke9ns Extended capabilities Flex radio check

            if (fwc_init && (current_model == Model.FLEX3000 || current_model == Model.FLEX5000))
            {
                extended = FWC.GetStatus();
              //  Debug.WriteLine("EXTENDED " + FWC.GetStatus());

            }
            else if (hid_init && current_model == Model.FLEX1500) extended = USBHID.GetStatus();
            else if (File.Exists("extended.edf"))						// Check for extended capabilities file
            {
                ArrayList a = DB.GetVars("State");
                a.Sort();
                ArrayList names = new ArrayList();
                ArrayList vals = new ArrayList();

                foreach (string s in a)
                {
                    string[] str = s.Split('/');
                    if (str.Length > 2)
                    {
                        for (int j = 2; j < str.Length; j++)
                            str[1] += "/" + str[j];
                    }
                    names.Add(str[0]);
                    vals.Add(str[1]);
                }

                int i = names.BinarySearch("extended");

                if (i < 0) // If not found, prompt for logon info
                {
                    LogOn LogOnForm = new LogOn(this);
                    LogOnForm.ShowDialog();
                }
                else  // If found, check for existing logon info
                {
                    string text = (string)vals[i];

                    StreamReader sr = File.OpenText("extended.edf");
                    string data = sr.ReadLine();
                    sr.Close();

                    if (text == data) extended = true;
                    else	// Logon information found, but doesn't match
                    {
                        MessageBox.Show("Error reading logon information.", "Logon Error",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        LogOn LogOnForm = new LogOn(this);
                        LogOnForm.ShowDialog();
                    }
                }
            } // check for extended file
            else
            {
                //   extended = true; // but will not key radio transmitter without proper eeprom data

            }

            Rectangle screenRectangle = RectangleToScreen(this.ClientRectangle);

            int titleHeight = screenRectangle.Top - this.Top;

          //  int BorderWidth = (this.Width – this.ClientSize.Width) / 2;
          //  int TitlebarHeight = this.Height – this.ClientSize.Height – 2 * BorderWidth;

            Debug.WriteLine("titlebar " + titleHeight);


            
            // update titlebar
            this.Text = TitleBar.GetString(); 

            setupForm.UpdateCustomTitle();

            if(radio_to_use != null)
            {
                string s = "";
                
                switch(radio_to_use.Model)
                {
                    case Model.FLEX5000: s = "FLEX-5000"; break;
                    case Model.FLEX3000: s = "FLEX-3000"; break;
                    case Model.FLEX1500: s = "FLEX-1500"; break;
                  //  case Model.SDR1000:  s = "SDR-1000";  break;
                  //  case Model.SOFTROCK40: s = "SoftRock"; break;
                    case Model.DEMO:     s = "Demo"; break;
                }

                if(radio_to_use.Nickname == null || radio_to_use.Nickname == "")
                {
                    if((radio_to_use.SerialNumber != null) && (radio_to_use.SerialNumber != ""))
                        s += ": " + radio_to_use.SerialNumber;
                }
                else
                {
                    if((radio_to_use.Nickname != null) && (radio_to_use.Nickname != ""))
                        s += ": " + radio_to_use.Nickname;
                }
                
                this.Text += "   " + s + " : " + current_region + " ";  // ke9ns mod  added FRSRegion to top line of console window
                if (extended == true) this.Text += "Extended";
            }
          
            /* not working on some machines
            
            if (LessThan1GBRam() && !production)
            {
                RamWarnForm form = new RamWarnForm(this);
                form.ShowDialog();
            }
            */

            if (show_alpha_warning && this.Text.ToLower().Contains("alpha") && !production)
            {
                AlphaWarnForm form = new AlphaWarnForm(this);
                form.ShowDialog();
            }

            if (show_beta_warning && this.Text.ToLower().Contains("beta") && !production)
            {
                BetaWarnForm form = new BetaWarnForm(this);
                form.ShowDialog();
            }

            if (show_mobile_warning && !production)
            {
                MobileWarnForm form = new MobileWarnForm(this);
                form.ShowDialog();
            }

            reportBugToolStripMenuItem.Visible = true;

            if (run_setup_wizard)
            {
                SetupWizard w = new SetupWizard(this, 0);
                w.ShowDialog();
                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                {
                    setupForm.ResetFLEX5000();
                    CheckCalData();
                    for (int i = 0; i < 8; i++)
                        flex5000DebugForm.SetPAPot(i, (byte)pa_bias_table[0][i]);
                    if (!FWCEEPROM.TRXChecksumPresent)
                    {
                        WriteTRXChecksums();
                        VerifyTRXChecksums();
                    }
                    RX1Band = RX2Band = TXBand = rx1_band;
                   
                    switch (current_model)
                    {
                        case Model.FLEX5000:

                            Debug.WriteLine("rx1_band " + rx1_band);

                            fwcAntForm.SetBand(rx1_band);


                            fwcAntForm.CurrentAntMode = current_ant_mode;
                            fwcAntForm.RX1Ant = rx1_ant;
                            fwcAntForm.RX1Loop = rx1_loop;
                            fwcAntForm.RX2Ant = rx2_ant;
                            fwcAntForm.TXAnt = tx_ant;
                            CheckRX2CalData();
                            break;
                    }
                }
                else if (hid_init && current_model == Model.FLEX1500)
                {
                    Check1500CalData();
                    Verify1500Checksums();

                    hidAntForm.SetBand(rx1_band);
                    hidAntForm.RXAnt = rx_ant_1500;
                    hidAntForm.TXAnt = tx_ant_1500;
                }
            }

            if (rx1_meter_cal_offset == 0.0f)
            {
                switch (current_soundcard)
                {
                    case SoundCard.SANTA_CRUZ:
                        rx1_meter_cal_offset = -26.39952f;
                        break;
                    case SoundCard.AUDIGY_2_ZS:
                        rx1_meter_cal_offset = 1.024933f;
                        break;
                    case SoundCard.MP3_PLUS:
                        rx1_meter_cal_offset = -33.40224f;
                        break;
                    case SoundCard.EXTIGY:
                        rx1_meter_cal_offset = -29.30501f;
                        break;
                    case SoundCard.DELTA_44:
                        rx1_meter_cal_offset = -25.13887f;
                        break;
                    case SoundCard.FIREBOX:
                        rx1_meter_cal_offset = -20.94611f;
                        break;
                    case SoundCard.EDIROL_FA_66:
                        rx1_meter_cal_offset = -46.82864f;
                        break;
                    case SoundCard.UNSUPPORTED_CARD:
                        rx1_meter_cal_offset = -22.43533f;
                        break;
                }
            }

            if (rx1_display_cal_offset == 0.0f)
            {
                switch (current_soundcard)
                {
                    case SoundCard.SANTA_CRUZ:
                        RX1DisplayCalOffset = -56.56675f;
                        break;
                    case SoundCard.AUDIGY_2_ZS:
                        RX1DisplayCalOffset = -29.20928f;
                        break;
                    case SoundCard.MP3_PLUS:
                        RX1DisplayCalOffset = -62.84578f;
                        break;
                    case SoundCard.EXTIGY:
                        RX1DisplayCalOffset = -62.099f;
                        break;
                    case SoundCard.DELTA_44:
                        RX1DisplayCalOffset = -57.467f;
                        break;
                    case SoundCard.FIREBOX:
                        RX1DisplayCalOffset = -54.019f;
                        break;
                    case SoundCard.EDIROL_FA_66:
                        RX1DisplayCalOffset = -80.429f;
                        break;
                    case SoundCard.UNSUPPORTED_CARD:
                        RX1DisplayCalOffset = -48.62103f;
                        break;
                }
            }

            /*if(notify_on_beta || notify_on_release)
            {
                Thread t = new Thread(new ThreadStart(CheckForUpdates));
                t.IsBackground = true;
                t.Priority = ThreadPriority.Lowest;
                t.Name = "Update Check Thread";
                t.Start();
            }*/

            foreach (string s in CmdLineArgs)
            {
                if (s == "-autostart")
                    chkPower.Checked = true;
                else if (s.StartsWith("-datapath:"))
                {
                    string path = s.Substring(s.IndexOf(":") + 1);
                    if (Directory.Exists(path))  AppDataPath = path;
                }
            }

            if ((current_model == Model.FLEX5000 || current_model == Model.FLEX3000) && !fwc_init)
                MessageBox.Show("Error opening radio driver.", "Driver Error", MessageBoxButtons.OK, MessageBoxIcon.Error);

            if (current_model == Model.FLEX1500 && !hid_init)
                MessageBox.Show("Error opening radio driver.", "Driver Error", MessageBoxButtons.OK, MessageBoxIcon.Error);

            if (!fwc_init || !FWCEEPROM.RX2OK)
            {
                chkRX2.Checked = false;
                chkSplitDisplay.Checked = false;
            }
            /*
             Common.RestoreForm(XVTRForm, "XVTR", false);
             if (FWCEEPROM.VUOK)
             {
                 FWC.SetEN2M(true); //XVINT
                 XVTRForm.udUCBAddr0.Value = 0;
                 XVTRForm.txtButtonText0.Text = "2m";
                 XVTRForm.udLOOffset0.Value = 125;
                 XVTRForm.udLOError0.Value = 0;
                 XVTRForm.udFreqBegin0.Value = 144;
                 XVTRForm.udFreqEnd0.Value = 148;
                 //XVTRForm.udRXGain0.Value = 32;
                 XVTRForm.chkRXOnly0.Checked = false;
                 XVTRForm.udPower0.Value = 100;
                 XVTRForm.chkXVTRRF0.Checked = false;

                 XVTRForm.udUCBAddr1.Value = 1;
                 XVTRForm.txtButtonText1.Text = "70cm";
                 XVTRForm.udLOOffset1.Value = 400;
                 XVTRForm.udLOError1.Value = 0;
                 XVTRForm.udFreqBegin1.Value = 430;
                 XVTRForm.udFreqEnd1.Value = 450;
                 //XVTRForm.udRXGain1.Value = 28;
                 XVTRForm.chkRXOnly1.Checked = false;
                 XVTRForm.udPower1.Value = 100;
                 XVTRForm.chkXVTRRF1.Checked = false;

                 XVTRForm.chkEnable0.Checked = true;
                 XVTRForm.chkEnable1.Checked = true;
                 XVTRForm.chkVHFIFGain.Enabled = true;
                 XVTRForm.chkUHFIFGain.Enabled = true;
                 XVTRForm.chkVHFPAEnable.Enabled = true;
                 XVTRForm.chkUHFPAEnable.Enabled = true;
                 XVTRForm.label_VUModulePresent.Visible = true;
                 XVTRForm.label_VUModuleNotPresent.Visible = false;

             }
             else
             {
                 XVTRForm.chkEnable0.Checked = false;
                 XVTRForm.chkEnable1.Checked = false;
                 XVTRForm.chkVHFIFGain.Enabled = false;
                 XVTRForm.chkUHFIFGain.Enabled = false;
                 XVTRForm.chkVHFPAEnable.Enabled = false;
                 XVTRForm.chkUHFPAEnable.Enabled = false;
                 XVTRForm.chkEnable0.Checked = false;
                 XVTRForm.chkEnable1.Checked = false;
                 XVTRForm.label_VUModulePresent.Visible = false;
                 XVTRForm.label_VUModuleNotPresent.Visible = true;
             }
              */

#if (DEBUG)
			//button1.Visible = true;
            //buttonTS1.Visible = true;
#endif
            SyncDSP();

            initializing = false;

#if (NO_DJ)
            //mod DH1TW
        //    this.Text = "PowerSDR-UI 0.997 based on FlexRadio Systems™ PowerSDR™ 2.7.2";
            //endmod

#endif
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
        } // public console

      
//=============================================================================

        public bool reset_db = false;
		protected override void Dispose( bool disposing )
		{


            if (KBON == 1)
            {
                powerMate.Shutdown(); // ke9ns add 
            }
          

#if (NO_DJ)
            //mod DH1TW
            if (DJConsoleObj != null) DJConsoleObj.Close();
#endif
            USB.Exit();
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );

            ExitConsole();

            if (reset_db)
			{
				string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
				string datetime = DateTime.Now.ToShortDateString().Replace("/", "-")+"_"+
					DateTime.Now.ToShortTimeString().Replace(":", ".");

                string file = db_file_name.Substring(db_file_name.LastIndexOf("\\") + 1);
                file = file.Substring(0, file.Length - 4);

                File.Copy(db_file_name, desktop + "\\PowerSDR_" + file + "_" + datetime + ".xml");
                File.Delete(db_file_name);
			}
            Debug.WriteLine("((((((((TERMINATE PROGRM 3))))))))))))))))");

            System.Windows.Forms.Application.Exit();

        } // dispose


        #endregion

        #region Windows Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Console));
            this.timer_cpu_meter = new System.Windows.Forms.Timer(this.components);
            this.timer_peak_text = new System.Windows.Forms.Timer(this.components);
            this.toolTip1 = new System.Windows.Forms.ToolTip(this.components);
            this.radBandGEN = new System.Windows.Forms.RadioButtonTS();
            this.radBandWWV = new System.Windows.Forms.RadioButtonTS();
            this.radBand2 = new System.Windows.Forms.RadioButtonTS();
            this.radBand6 = new System.Windows.Forms.RadioButtonTS();
            this.radBand10 = new System.Windows.Forms.RadioButtonTS();
            this.radBand12 = new System.Windows.Forms.RadioButtonTS();
            this.radBand15 = new System.Windows.Forms.RadioButtonTS();
            this.radBand17 = new System.Windows.Forms.RadioButtonTS();
            this.radBand20 = new System.Windows.Forms.RadioButtonTS();
            this.radBand30 = new System.Windows.Forms.RadioButtonTS();
            this.radBand40 = new System.Windows.Forms.RadioButtonTS();
            this.radBand60 = new System.Windows.Forms.RadioButtonTS();
            this.radBand160 = new System.Windows.Forms.RadioButtonTS();
            this.radBand80 = new System.Windows.Forms.RadioButtonTS();
            this.btnBandVHF = new System.Windows.Forms.ButtonTS();
            this.chkVFOBTX = new System.Windows.Forms.CheckBoxTS();
            this.chkVFOATX = new System.Windows.Forms.CheckBoxTS();
            this.btnTNFAdd = new System.Windows.Forms.ButtonTS();
            this.chkTNF = new System.Windows.Forms.CheckBoxTS();
            this.chkDisplayPeak = new System.Windows.Forms.CheckBoxTS();
            this.comboDisplayMode = new System.Windows.Forms.ComboBoxTS();
            this.chkDisplayAVG = new System.Windows.Forms.CheckBoxTS();
            this.ptbRX2RF = new PowerSDR.PrettyTrackBar();
            this.label1 = new System.Windows.Forms.Label();
            this.checkBoxID = new System.Windows.Forms.CheckBoxTS();
            this.chkFWCATU = new System.Windows.Forms.CheckBoxTS();
            this.chkFWCATUBypass = new System.Windows.Forms.CheckBoxTS();
            this.ckQuickPlay = new System.Windows.Forms.CheckBoxTS();
            this.chkMON = new System.Windows.Forms.CheckBoxTS();
            this.ckQuickRec = new System.Windows.Forms.CheckBoxTS();
            this.chkMUT = new System.Windows.Forms.CheckBoxTS();
            this.chkMOX = new System.Windows.Forms.CheckBoxTS();
            this.chkTUN = new System.Windows.Forms.CheckBoxTS();
            this.chkX2TR = new System.Windows.Forms.CheckBoxTS();
            this.comboTuneMode = new System.Windows.Forms.ComboBoxTS();
            this.udFMOffset = new System.Windows.Forms.NumericUpDownTS();
            this.chkFMTXRev = new System.Windows.Forms.CheckBoxTS();
            this.radFMDeviation2kHz = new System.Windows.Forms.RadioButtonTS();
            this.radFMDeviation5kHz = new System.Windows.Forms.RadioButtonTS();
            this.comboFMCTCSS = new System.Windows.Forms.ComboBoxTS();
            this.chkFMCTCSS = new System.Windows.Forms.CheckBoxTS();
            this.chkFMTXLow = new System.Windows.Forms.CheckBoxTS();
            this.chkFMTXSimplex = new System.Windows.Forms.CheckBoxTS();
            this.chkFMTXHigh = new System.Windows.Forms.CheckBoxTS();
            this.comboFMTXProfile = new System.Windows.Forms.ComboBoxTS();
            this.udCWPitch = new System.Windows.Forms.NumericUpDownTS();
            this.udCWBreakInDelay = new System.Windows.Forms.NumericUpDownTS();
            this.chkCWBreakInEnabled = new System.Windows.Forms.CheckBoxTS();
            this.chkShowTXCWFreq = new System.Windows.Forms.CheckBoxTS();
            this.chkCWSidetone = new System.Windows.Forms.CheckBoxTS();
            this.chkCWIambic = new System.Windows.Forms.CheckBoxTS();
            this.chkShowTXFilter = new System.Windows.Forms.CheckBoxTS();
            this.chkShowDigTXFilter = new System.Windows.Forms.CheckBoxTS();
            this.chkDX = new System.Windows.Forms.CheckBoxTS();
            this.chkTXEQ = new System.Windows.Forms.CheckBoxTS();
            this.comboTXProfile = new System.Windows.Forms.ComboBoxTS();
            this.chkRXEQ = new System.Windows.Forms.CheckBoxTS();
            this.chkCPDR = new System.Windows.Forms.CheckBoxTS();
            this.chkVAC1 = new System.Windows.Forms.CheckBoxTS();
            this.chkVOX = new System.Windows.Forms.CheckBoxTS();
            this.chkNoiseGate = new System.Windows.Forms.CheckBoxTS();
            this.udRX2FilterHigh = new System.Windows.Forms.NumericUpDownTS();
            this.udRX2FilterLow = new System.Windows.Forms.NumericUpDownTS();
            this.radRX2ModeAM = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeLSB = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeSAM = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeCWL = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeDSB = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeUSB = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeCWU = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeFMN = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeDIGU = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeDRM = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeDIGL = new System.Windows.Forms.RadioButtonTS();
            this.radRX2ModeSPEC = new System.Windows.Forms.RadioButtonTS();
            this.chkRX2DisplayPeak = new System.Windows.Forms.CheckBoxTS();
            this.comboRX2DisplayMode = new System.Windows.Forms.ComboBoxTS();
            this.chkRX2Mute = new System.Windows.Forms.CheckBoxTS();
            this.chkPanSwap = new System.Windows.Forms.CheckBoxTS();
            this.chkEnableMultiRX = new System.Windows.Forms.CheckBoxTS();
            this.chkSR = new System.Windows.Forms.CheckBoxTS();
            this.chkNR = new System.Windows.Forms.CheckBoxTS();
            this.chkDSPNB2 = new System.Windows.Forms.CheckBoxTS();
            this.chkBIN = new System.Windows.Forms.CheckBoxTS();
            this.chkNB = new System.Windows.Forms.CheckBoxTS();
            this.chkANF = new System.Windows.Forms.CheckBoxTS();
            this.btnZeroBeat = new System.Windows.Forms.ButtonTS();
            this.chkVFOSplit = new System.Windows.Forms.CheckBoxTS();
            this.btnRITReset = new System.Windows.Forms.ButtonTS();
            this.btnXITReset = new System.Windows.Forms.ButtonTS();
            this.udRIT = new System.Windows.Forms.NumericUpDownTS();
            this.btnIFtoVFO = new System.Windows.Forms.ButtonTS();
            this.chkRIT = new System.Windows.Forms.CheckBoxTS();
            this.btnVFOSwap = new System.Windows.Forms.ButtonTS();
            this.chkXIT = new System.Windows.Forms.CheckBoxTS();
            this.btnVFOBtoA = new System.Windows.Forms.ButtonTS();
            this.udXIT = new System.Windows.Forms.NumericUpDownTS();
            this.btnVFOAtoB = new System.Windows.Forms.ButtonTS();
            this.chkRX1Preamp = new System.Windows.Forms.CheckBoxTS();
            this.comboAGC = new System.Windows.Forms.ComboBoxTS();
            this.lblAGC = new System.Windows.Forms.LabelTS();
            this.comboPreamp = new System.Windows.Forms.ComboBoxTS();
            this.lblRF = new System.Windows.Forms.LabelTS();
            this.comboDigTXProfile = new System.Windows.Forms.ComboBoxTS();
            this.chkVACStereo = new System.Windows.Forms.CheckBoxTS();
            this.comboVACSampleRate = new System.Windows.Forms.ComboBoxTS();
            this.btnDisplayPanCenter = new System.Windows.Forms.ButtonTS();
            this.udFilterHigh = new System.Windows.Forms.NumericUpDownTS();
            this.udFilterLow = new System.Windows.Forms.NumericUpDownTS();
            this.btnFilterShiftReset = new System.Windows.Forms.ButtonTS();
            this.radModeAM = new System.Windows.Forms.RadioButtonTS();
            this.radModeLSB = new System.Windows.Forms.RadioButtonTS();
            this.radModeSAM = new System.Windows.Forms.RadioButtonTS();
            this.radModeCWL = new System.Windows.Forms.RadioButtonTS();
            this.radModeDSB = new System.Windows.Forms.RadioButtonTS();
            this.radModeUSB = new System.Windows.Forms.RadioButtonTS();
            this.radModeCWU = new System.Windows.Forms.RadioButtonTS();
            this.radModeFMN = new System.Windows.Forms.RadioButtonTS();
            this.radModeDIGU = new System.Windows.Forms.RadioButtonTS();
            this.radModeDRM = new System.Windows.Forms.RadioButtonTS();
            this.radModeDIGL = new System.Windows.Forms.RadioButtonTS();
            this.radModeSPEC = new System.Windows.Forms.RadioButtonTS();
            this.comboRX2Band = new System.Windows.Forms.ComboBoxTS();
            this.txtWheelTune = new System.Windows.Forms.TextBoxTS();
            this.chkPower = new System.Windows.Forms.CheckBoxTS();
            this.comboMeterTXMode = new System.Windows.Forms.ComboBoxTS();
            this.comboMeterRXMode = new System.Windows.Forms.ComboBoxTS();
            this.chkSquelch = new System.Windows.Forms.CheckBoxTS();
            this.btnMemoryQuickRestore = new System.Windows.Forms.ButtonTS();
            this.btnMemoryQuickSave = new System.Windows.Forms.ButtonTS();
            this.txtMemoryQuick = new System.Windows.Forms.TextBoxTS();
            this.chkVFOLock = new System.Windows.Forms.CheckBoxTS();
            this.chkVFOSync = new System.Windows.Forms.CheckBoxTS();
            this.chkFullDuplex = new System.Windows.Forms.CheckBoxTS();
            this.btnTuneStepChangeLarger = new System.Windows.Forms.ButtonTS();
            this.btnTuneStepChangeSmaller = new System.Windows.Forms.ButtonTS();
            this.chkBCI = new System.Windows.Forms.CheckBoxTS();
            this.chkSplitDisplay = new System.Windows.Forms.CheckBoxTS();
            this.comboDisplayModeTop = new System.Windows.Forms.ComboBoxTS();
            this.comboDisplayModeBottom = new System.Windows.Forms.ComboBoxTS();
            this.chkRX2SR = new System.Windows.Forms.CheckBoxTS();
            this.chkRX2NB2 = new System.Windows.Forms.CheckBoxTS();
            this.chkRX2NB = new System.Windows.Forms.CheckBoxTS();
            this.chkRX2ANF = new System.Windows.Forms.CheckBoxTS();
            this.chkRX2NR = new System.Windows.Forms.CheckBoxTS();
            this.chkRX2BIN = new System.Windows.Forms.CheckBoxTS();
            this.comboRX2AGC = new System.Windows.Forms.ComboBoxTS();
            this.lblRX2AGC = new System.Windows.Forms.LabelTS();
            this.comboRX2MeterMode = new System.Windows.Forms.ComboBoxTS();
            this.lblRX2RF = new System.Windows.Forms.LabelTS();
            this.chkRX2Squelch = new System.Windows.Forms.CheckBoxTS();
            this.chkRX2Preamp = new System.Windows.Forms.CheckBoxTS();
            this.chkRX2DisplayAVG = new System.Windows.Forms.CheckBoxTS();
            this.radDisplayZoom05 = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom4x = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom2x = new System.Windows.Forms.RadioButtonTS();
            this.radDisplayZoom1x = new System.Windows.Forms.RadioButtonTS();
            this.btnFMMemory = new System.Windows.Forms.ButtonTS();
            this.btnFMMemoryUp = new System.Windows.Forms.ButtonTS();
            this.btnFMMemoryDown = new System.Windows.Forms.ButtonTS();
            this.chkVAC2 = new System.Windows.Forms.CheckBoxTS();
            this.txtDisplayPeakOffset = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayCursorOffset = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayCursorPower = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayCursorFreq = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayPeakPower = new System.Windows.Forms.TextBoxTS();
            this.txtDisplayPeakFreq = new System.Windows.Forms.TextBoxTS();
            this.autoBrightBox = new System.Windows.Forms.TextBoxTS();
            this.radBandGN13 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN12 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN11 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN10 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN9 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN8 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN7 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN6 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN5 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN4 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN3 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN2 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN1 = new System.Windows.Forms.RadioButtonTS();
            this.radBandGN0 = new System.Windows.Forms.RadioButtonTS();
            this.regBox1 = new System.Windows.Forms.TextBoxTS();
            this.regBox = new System.Windows.Forms.TextBoxTS();
            this.lblAntRX2 = new System.Windows.Forms.LabelTS();
            this.lblAntRX1 = new System.Windows.Forms.LabelTS();
            this.lblAntTX = new System.Windows.Forms.LabelTS();
            this.labelTS4 = new System.Windows.Forms.RichTextBox();
            this.labelTS3 = new System.Windows.Forms.RichTextBox();
            this.comboMeterTX1Mode = new System.Windows.Forms.ComboBoxTS();
            this.chkRX1MUTE = new System.Windows.Forms.CheckBoxTS();
            this.ptbCWSpeed = new PowerSDR.PrettyTrackBar();
            this.ptbRX2Pan = new PowerSDR.PrettyTrackBar();
            this.ptbRX2Gain = new PowerSDR.PrettyTrackBar();
            this.ptbRX1Gain = new PowerSDR.PrettyTrackBar();
            this.ptbPanSubRX = new PowerSDR.PrettyTrackBar();
            this.ptbRX0Gain = new PowerSDR.PrettyTrackBar();
            this.ptbPanMainRX = new PowerSDR.PrettyTrackBar();
            this.ptbPWR = new PowerSDR.PrettyTrackBar();
            this.ptbRF = new PowerSDR.PrettyTrackBar();
            this.ptbAF = new PowerSDR.PrettyTrackBar();
            this.ptbVACTXGain = new PowerSDR.PrettyTrackBar();
            this.ptbVACRXGain = new PowerSDR.PrettyTrackBar();
            this.ptbDisplayZoom = new PowerSDR.PrettyTrackBar();
            this.ptbDisplayPan = new PowerSDR.PrettyTrackBar();
            this.ptbFilterShift = new PowerSDR.PrettyTrackBar();
            this.ptbFilterWidth = new PowerSDR.PrettyTrackBar();
            this.picMultiMeterDigital = new System.Windows.Forms.PictureBox();
            this.picRX2Meter = new System.Windows.Forms.PictureBox();
            this.txtNOAA2 = new System.Windows.Forms.RichTextBox();
            this.txtNOAA = new System.Windows.Forms.RichTextBox();
            this.lblDisplayZoom = new System.Windows.Forms.LabelTS();
            this.lblDisplayPan = new System.Windows.Forms.ButtonTS();
            this.udTXFilterLow = new System.Windows.Forms.NumericUpDownTS();
            this.udTXFilterHigh = new System.Windows.Forms.NumericUpDownTS();
            this.chkBoxMuteSpk = new System.Windows.Forms.CheckBoxTS();
            this.chkBoxDrive = new System.Windows.Forms.CheckBoxTS();
            this.lblPWR = new System.Windows.Forms.LabelTS();
            this.labelTS5 = new System.Windows.Forms.LabelTS();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.buttonAdd = new System.Windows.Forms.Button();
            this.buttonSort = new System.Windows.Forms.Button();
            this.buttonDel = new System.Windows.Forms.Button();
            this.txtTimer = new System.Windows.Forms.RichTextBox();
            this.buttonCQ = new System.Windows.Forms.Button();
            this.buttonCall = new System.Windows.Forms.Button();
            this.ptbTune = new PowerSDR.PrettyTrackBar();
            this.lblTUNE = new System.Windows.Forms.LabelTS();
            this.ptbMON = new PowerSDR.PrettyTrackBar();
            this.lblMON = new System.Windows.Forms.LabelTS();
            this.lblAF = new System.Windows.Forms.LabelTS();
            this.ptbMic = new PowerSDR.PrettyTrackBar();
            this.ptbNoiseGate = new PowerSDR.PrettyTrackBar();
            this.ptbCPDR = new PowerSDR.PrettyTrackBar();
            this.ptbDX = new PowerSDR.PrettyTrackBar();
            this.comboCWTXProfile = new System.Windows.Forms.ComboBoxTS();
            this.timer_clock = new System.Windows.Forms.Timer(this.components);
            this.contextMenuStripFilterRX1 = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuItemRX1FilterConfigure = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItemRX1FilterReset = new System.Windows.Forms.ToolStripMenuItem();
            this.contextMenuStripFilterRX2 = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripMenuItemRX2FilterConfigure = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItemRX2FilterReset = new System.Windows.Forms.ToolStripMenuItem();
            this.timer_navigate = new System.Windows.Forms.Timer(this.components);
            this.timer2 = new System.Windows.Forms.Timer(this.components);
            this.contextMenuStripNotch = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.toolStripNotchDelete = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripNotchRemember = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.toolStripNotchNormal = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripNotchDeep = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripNotchVeryDeep = new System.Windows.Forms.ToolStripMenuItem();
            this.timerNotchZoom = new System.Windows.Forms.Timer(this.components);
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.setupToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.memoryToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.waveToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.equalizerToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.xVTRsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.cWXToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.uCBToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.mixerToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.antennaToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.relaysToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aTUToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.flexControlToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.eSCToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.GrayMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.TXIDMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.callsignTextBox = new System.Windows.Forms.ToolStripTextBox();
            this.ScanMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.spotterMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.trackMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.herosToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.remoteProfilesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.reportBugToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openFileDialog1 = new System.Windows.Forms.OpenFileDialog();
            this.picRX2Squelch = new System.Windows.Forms.PictureBox();
            this.picSquelch = new System.Windows.Forms.PictureBox();
            this.panelBandHF = new System.Windows.Forms.PanelTS();
            this.panelBandVHF = new System.Windows.Forms.PanelTS();
            this.radBandVHF13 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF12 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF11 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF10 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF9 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF8 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF7 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF6 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF5 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF4 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF3 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF2 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF1 = new System.Windows.Forms.RadioButtonTS();
            this.radBandVHF0 = new System.Windows.Forms.RadioButtonTS();
            this.btnBandHF = new System.Windows.Forms.ButtonTS();
            this.grpVFOB = new System.Windows.Forms.PanelTS();
            this.panelVFOBHover = new System.Windows.Forms.Panel();
            this.txtVFOBLSD = new System.Windows.Forms.TextBoxTS();
            this.txtVFOBMSD = new System.Windows.Forms.TextBoxTS();
            this.txtVFOBBand = new System.Windows.Forms.TextBoxTS();
            this.txtVFOBFreq = new System.Windows.Forms.TextBoxTS();
            this.grpVFOA = new System.Windows.Forms.PanelTS();
            this.panelVFOASubHover = new System.Windows.Forms.Panel();
            this.panelVFOAHover = new System.Windows.Forms.Panel();
            this.txtVFOALSD = new System.Windows.Forms.TextBoxTS();
            this.txtVFOABand = new System.Windows.Forms.TextBoxTS();
            this.txtVFOAMSD = new System.Windows.Forms.TextBoxTS();
            this.txtVFOAFreq = new System.Windows.Forms.TextBoxTS();
            this.btnHidden = new System.Windows.Forms.ButtonTS();
            this.panelDisplay2 = new System.Windows.Forms.PanelTS();
            this.label6 = new System.Windows.Forms.Label();
            this.ptbRX2Squelch = new PowerSDR.PrettyTrackBar();
            this.panelOptions = new System.Windows.Forms.PanelTS();
            this.panelTSBandStack = new System.Windows.Forms.PanelTS();
            this.panelModeSpecificFM = new System.Windows.Forms.PanelTS();
            this.lblFMMemory = new System.Windows.Forms.LabelTS();
            this.comboFMMemory = new System.Windows.Forms.ComboBoxTS();
            this.lblFMOffset = new System.Windows.Forms.LabelTS();
            this.lblFMDeviation = new System.Windows.Forms.LabelTS();
            this.ptbFMMic = new PowerSDR.PrettyTrackBar();
            this.lblMicValFM = new System.Windows.Forms.LabelTS();
            this.lblFMMic = new System.Windows.Forms.LabelTS();
            this.labelTS7 = new System.Windows.Forms.LabelTS();
            this.panelModeSpecificCW = new System.Windows.Forms.PanelTS();
            this.labelTS6 = new System.Windows.Forms.LabelTS();
            this.lblCWSpeed = new System.Windows.Forms.LabelTS();
            this.grpSemiBreakIn = new System.Windows.Forms.GroupBoxTS();
            this.lblCWBreakInDelay = new System.Windows.Forms.LabelTS();
            this.lblCWPitchFreq = new System.Windows.Forms.LabelTS();
            this.panelModeSpecificPhone = new System.Windows.Forms.PanelTS();
            this.labelTS2 = new System.Windows.Forms.LabelTS();
            this.labelTS1 = new System.Windows.Forms.LabelTS();
            this.picNoiseGate = new System.Windows.Forms.PictureBox();
            this.lblNoiseGateVal = new System.Windows.Forms.LabelTS();
            this.picVOX = new System.Windows.Forms.PictureBox();
            this.ptbVOX = new PowerSDR.PrettyTrackBar();
            this.lblVOXVal = new System.Windows.Forms.LabelTS();
            this.lblCPDRVal = new System.Windows.Forms.LabelTS();
            this.lblDXVal = new System.Windows.Forms.LabelTS();
            this.lblMicVal = new System.Windows.Forms.LabelTS();
            this.lblMIC = new System.Windows.Forms.LabelTS();
            this.lblTransmitProfile = new System.Windows.Forms.LabelTS();
            this.panelAntenna = new System.Windows.Forms.PanelTS();
            this.panelRX2Filter = new System.Windows.Forms.PanelTS();
            this.radRX2Filter1 = new System.Windows.Forms.RadioButtonTS();
            this.lblRX2FilterHigh = new System.Windows.Forms.LabelTS();
            this.lblRX2FilterLow = new System.Windows.Forms.LabelTS();
            this.radRX2Filter2 = new System.Windows.Forms.RadioButtonTS();
            this.radRX2FilterVar2 = new System.Windows.Forms.RadioButtonTS();
            this.radRX2Filter3 = new System.Windows.Forms.RadioButtonTS();
            this.radRX2FilterVar1 = new System.Windows.Forms.RadioButtonTS();
            this.radRX2Filter4 = new System.Windows.Forms.RadioButtonTS();
            this.radRX2Filter7 = new System.Windows.Forms.RadioButtonTS();
            this.radRX2Filter5 = new System.Windows.Forms.RadioButtonTS();
            this.radRX2Filter6 = new System.Windows.Forms.RadioButtonTS();
            this.panelRX2Mode = new System.Windows.Forms.PanelTS();
            this.panelRX2Display = new System.Windows.Forms.PanelTS();
            this.panelRX2Mixer = new System.Windows.Forms.PanelTS();
            this.lblRX2Pan = new System.Windows.Forms.Label();
            this.lblRX2Vol = new System.Windows.Forms.Label();
            this.lblRX2Mute = new System.Windows.Forms.Label();
            this.panelMultiRX = new System.Windows.Forms.PanelTS();
            this.label5 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.panelDSP = new System.Windows.Forms.PanelTS();
            this.panelVFO = new System.Windows.Forms.PanelTS();
            this.lblCPUMeter = new System.Windows.Forms.RichTextBox();
            this.panelDateTime = new System.Windows.Forms.PanelTS();
            this.txtTime = new System.Windows.Forms.RichTextBox();
            this.txtDate = new System.Windows.Forms.RichTextBox();
            this.panelSoundControls = new System.Windows.Forms.PanelTS();
            this.lblPreamp = new System.Windows.Forms.LabelTS();
            this.panelModeSpecificDigital = new System.Windows.Forms.PanelTS();
            this.lblVACTXIndicator = new System.Windows.Forms.LabelTS();
            this.lblVACRXIndicator = new System.Windows.Forms.LabelTS();
            this.lblDigTXProfile = new System.Windows.Forms.LabelTS();
            this.lblRXGain = new System.Windows.Forms.LabelTS();
            this.grpVACStereo = new System.Windows.Forms.GroupBoxTS();
            this.lblTXGain = new System.Windows.Forms.LabelTS();
            this.grpDIGSampleRate = new System.Windows.Forms.GroupBoxTS();
            this.panelDisplay = new System.Windows.Forms.PanelTS();
            this.picDisplay = new System.Windows.Forms.PictureBox();
            this.panelFilter = new System.Windows.Forms.PanelTS();
            this.radFilter1 = new System.Windows.Forms.RadioButtonTS();
            this.lblFilterHigh = new System.Windows.Forms.LabelTS();
            this.lblFilterLow = new System.Windows.Forms.LabelTS();
            this.lblFilterWidth = new System.Windows.Forms.LabelTS();
            this.radFilterVar2 = new System.Windows.Forms.RadioButtonTS();
            this.radFilterVar1 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter10 = new System.Windows.Forms.RadioButtonTS();
            this.lblFilterShift = new System.Windows.Forms.LabelTS();
            this.radFilter9 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter8 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter2 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter7 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter3 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter6 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter4 = new System.Windows.Forms.RadioButtonTS();
            this.radFilter5 = new System.Windows.Forms.RadioButtonTS();
            this.panelMode = new System.Windows.Forms.PanelTS();
            this.grpMultimeter = new System.Windows.Forms.PanelTS();
            this.lblMultiSMeter = new System.Windows.Forms.LabelTS();
            this.txtMultiText = new System.Windows.Forms.TextBoxTS();
            this.lblTuneStep = new System.Windows.Forms.LabelTS();
            this.grpVFOBetween = new System.Windows.Forms.PanelTS();
            this.lblDisplayModeTop = new System.Windows.Forms.LabelTS();
            this.lblDisplayModeBottom = new System.Windows.Forms.LabelTS();
            this.grpDisplaySplit = new System.Windows.Forms.GroupBoxTS();
            this.chkRX2 = new System.Windows.Forms.CheckBoxTS();
            this.grpRX2Meter = new System.Windows.Forms.PanelTS();
            this.lblRX2Meter = new System.Windows.Forms.LabelTS();
            this.txtRX2Meter = new System.Windows.Forms.TextBoxTS();
            this.lblRX2Band = new System.Windows.Forms.LabelTS();
            this.panelBandGN = new System.Windows.Forms.PanelTS();
            this.btnBandHF1 = new System.Windows.Forms.ButtonTS();
            this.panelRX2DSP = new System.Windows.Forms.PanelTS();
            this.ptbSquelch = new PowerSDR.PrettyTrackBar();
            this.imageList1 = new System.Windows.Forms.ImageList(this.components);
            this.VFODialA = new System.Windows.Forms.PictureBox();
            this.VFODialB = new System.Windows.Forms.PictureBox();
            this.VFODialAA = new System.Windows.Forms.PictureBox();
            this.VFODialBB = new System.Windows.Forms.PictureBox();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2RF)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFMOffset)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWPitch)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWBreakInDelay)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRX2FilterHigh)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRX2FilterLow)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRIT)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udXIT)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFilterHigh)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFilterLow)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCWSpeed)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2Pan)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2Gain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX1Gain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanSubRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX0Gain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanMainRX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPWR)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRF)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbAF)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACTXGain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACRXGain)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayZoom)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayPan)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterShift)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterWidth)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picMultiMeterDigital)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picRX2Meter)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udTXFilterLow)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.udTXFilterHigh)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbTune)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbMON)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbMic)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNoiseGate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCPDR)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDX)).BeginInit();
            this.contextMenuStripFilterRX1.SuspendLayout();
            this.contextMenuStripFilterRX2.SuspendLayout();
            this.contextMenuStripNotch.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picRX2Squelch)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picSquelch)).BeginInit();
            this.panelBandHF.SuspendLayout();
            this.panelBandVHF.SuspendLayout();
            this.grpVFOB.SuspendLayout();
            this.grpVFOA.SuspendLayout();
            this.panelDisplay2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2Squelch)).BeginInit();
            this.panelOptions.SuspendLayout();
            this.panelTSBandStack.SuspendLayout();
            this.panelModeSpecificFM.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFMMic)).BeginInit();
            this.panelModeSpecificCW.SuspendLayout();
            this.grpSemiBreakIn.SuspendLayout();
            this.panelModeSpecificPhone.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picNoiseGate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.picVOX)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVOX)).BeginInit();
            this.panelAntenna.SuspendLayout();
            this.panelRX2Filter.SuspendLayout();
            this.panelRX2Mode.SuspendLayout();
            this.panelRX2Display.SuspendLayout();
            this.panelRX2Mixer.SuspendLayout();
            this.panelMultiRX.SuspendLayout();
            this.panelDSP.SuspendLayout();
            this.panelVFO.SuspendLayout();
            this.panelDateTime.SuspendLayout();
            this.panelSoundControls.SuspendLayout();
            this.panelModeSpecificDigital.SuspendLayout();
            this.grpVACStereo.SuspendLayout();
            this.grpDIGSampleRate.SuspendLayout();
            this.panelDisplay.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picDisplay)).BeginInit();
            this.panelFilter.SuspendLayout();
            this.panelMode.SuspendLayout();
            this.grpMultimeter.SuspendLayout();
            this.grpVFOBetween.SuspendLayout();
            this.grpDisplaySplit.SuspendLayout();
            this.grpRX2Meter.SuspendLayout();
            this.panelBandGN.SuspendLayout();
            this.panelRX2DSP.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ptbSquelch)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialA)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialB)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialAA)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialBB)).BeginInit();
            this.SuspendLayout();
            // 
            // timer_cpu_meter
            // 
            this.timer_cpu_meter.Enabled = true;
            this.timer_cpu_meter.Interval = 1000;
            this.timer_cpu_meter.Tick += new System.EventHandler(this.timer_cpu_meter_Tick);
            // 
            // timer_peak_text
            // 
            this.timer_peak_text.Interval = 500;
            this.timer_peak_text.Tick += new System.EventHandler(this.timer_peak_text_Tick);
            // 
            // radBandGEN
            // 
            resources.ApplyResources(this.radBandGEN, "radBandGEN");
            this.radBandGEN.FlatAppearance.BorderSize = 0;
            this.radBandGEN.ForeColor = System.Drawing.Color.Coral;
            this.radBandGEN.Name = "radBandGEN";
            this.radBandGEN.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGEN, resources.GetString("radBandGEN.ToolTip"));
            this.radBandGEN.UseVisualStyleBackColor = true;
            this.radBandGEN.Click += new System.EventHandler(this.btnBandGEN_Click);
            this.radBandGEN.PaddingChanged += new System.EventHandler(this.radBandGEN_Click);
            // 
            // radBandWWV
            // 
            resources.ApplyResources(this.radBandWWV, "radBandWWV");
            this.radBandWWV.FlatAppearance.BorderSize = 0;
            this.radBandWWV.ForeColor = System.Drawing.Color.LightGreen;
            this.radBandWWV.Name = "radBandWWV";
            this.radBandWWV.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandWWV, resources.GetString("radBandWWV.ToolTip"));
            this.radBandWWV.UseVisualStyleBackColor = true;
            this.radBandWWV.Click += new System.EventHandler(this.radBandWWV_Click);
            this.radBandWWV.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandWWV_MouseDown);
            // 
            // radBand2
            // 
            resources.ApplyResources(this.radBand2, "radBand2");
            this.radBand2.FlatAppearance.BorderSize = 0;
            this.radBand2.ForeColor = System.Drawing.Color.White;
            this.radBand2.Name = "radBand2";
            this.radBand2.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand2, resources.GetString("radBand2.ToolTip"));
            this.radBand2.UseVisualStyleBackColor = true;
            // 
            // radBand6
            // 
            resources.ApplyResources(this.radBand6, "radBand6");
            this.radBand6.FlatAppearance.BorderSize = 0;
            this.radBand6.ForeColor = System.Drawing.Color.White;
            this.radBand6.Name = "radBand6";
            this.radBand6.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand6, resources.GetString("radBand6.ToolTip"));
            this.radBand6.UseVisualStyleBackColor = true;
            this.radBand6.Click += new System.EventHandler(this.radBand6_Click);
            this.radBand6.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand6_MouseDown);
            // 
            // radBand10
            // 
            resources.ApplyResources(this.radBand10, "radBand10");
            this.radBand10.FlatAppearance.BorderSize = 0;
            this.radBand10.ForeColor = System.Drawing.Color.White;
            this.radBand10.Name = "radBand10";
            this.radBand10.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand10, resources.GetString("radBand10.ToolTip"));
            this.radBand10.UseVisualStyleBackColor = true;
            this.radBand10.Click += new System.EventHandler(this.radBand10_Click);
            this.radBand10.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand10_MouseDown);
            // 
            // radBand12
            // 
            resources.ApplyResources(this.radBand12, "radBand12");
            this.radBand12.FlatAppearance.BorderSize = 0;
            this.radBand12.ForeColor = System.Drawing.Color.White;
            this.radBand12.Name = "radBand12";
            this.radBand12.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand12, resources.GetString("radBand12.ToolTip"));
            this.radBand12.UseVisualStyleBackColor = true;
            this.radBand12.Click += new System.EventHandler(this.radBand12_Click);
            this.radBand12.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand12_MouseDown);
            // 
            // radBand15
            // 
            resources.ApplyResources(this.radBand15, "radBand15");
            this.radBand15.FlatAppearance.BorderSize = 0;
            this.radBand15.ForeColor = System.Drawing.Color.White;
            this.radBand15.Name = "radBand15";
            this.radBand15.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand15, resources.GetString("radBand15.ToolTip"));
            this.radBand15.UseVisualStyleBackColor = true;
            this.radBand15.Click += new System.EventHandler(this.radBand15_Click);
            this.radBand15.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand15_MouseDown);
            // 
            // radBand17
            // 
            resources.ApplyResources(this.radBand17, "radBand17");
            this.radBand17.FlatAppearance.BorderSize = 0;
            this.radBand17.ForeColor = System.Drawing.Color.White;
            this.radBand17.Name = "radBand17";
            this.radBand17.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand17, resources.GetString("radBand17.ToolTip"));
            this.radBand17.UseVisualStyleBackColor = true;
            this.radBand17.Click += new System.EventHandler(this.radBand17_Click);
            this.radBand17.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand17_MouseDown);
            // 
            // radBand20
            // 
            resources.ApplyResources(this.radBand20, "radBand20");
            this.radBand20.FlatAppearance.BorderSize = 0;
            this.radBand20.ForeColor = System.Drawing.Color.White;
            this.radBand20.Name = "radBand20";
            this.radBand20.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand20, resources.GetString("radBand20.ToolTip"));
            this.radBand20.UseVisualStyleBackColor = true;
            this.radBand20.Click += new System.EventHandler(this.radBand20_Click);
            this.radBand20.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand20_MouseDown);
            // 
            // radBand30
            // 
            resources.ApplyResources(this.radBand30, "radBand30");
            this.radBand30.FlatAppearance.BorderSize = 0;
            this.radBand30.ForeColor = System.Drawing.Color.White;
            this.radBand30.Name = "radBand30";
            this.radBand30.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand30, resources.GetString("radBand30.ToolTip"));
            this.radBand30.UseVisualStyleBackColor = true;
            this.radBand30.Click += new System.EventHandler(this.radBand30_Click);
            this.radBand30.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand30_MouseDown);
            // 
            // radBand40
            // 
            resources.ApplyResources(this.radBand40, "radBand40");
            this.radBand40.FlatAppearance.BorderSize = 0;
            this.radBand40.ForeColor = System.Drawing.Color.White;
            this.radBand40.Name = "radBand40";
            this.radBand40.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand40, resources.GetString("radBand40.ToolTip"));
            this.radBand40.UseVisualStyleBackColor = true;
            this.radBand40.Click += new System.EventHandler(this.radBand40_Click);
            this.radBand40.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand40_MouseDown);
            // 
            // radBand60
            // 
            resources.ApplyResources(this.radBand60, "radBand60");
            this.radBand60.FlatAppearance.BorderSize = 0;
            this.radBand60.ForeColor = System.Drawing.Color.White;
            this.radBand60.Name = "radBand60";
            this.radBand60.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand60, resources.GetString("radBand60.ToolTip"));
            this.radBand60.UseVisualStyleBackColor = true;
            this.radBand60.Click += new System.EventHandler(this.radBand60_Click);
            this.radBand60.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand60_MouseDown);
            // 
            // radBand160
            // 
            resources.ApplyResources(this.radBand160, "radBand160");
            this.radBand160.FlatAppearance.BorderSize = 0;
            this.radBand160.ForeColor = System.Drawing.Color.White;
            this.radBand160.Name = "radBand160";
            this.radBand160.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand160, resources.GetString("radBand160.ToolTip"));
            this.radBand160.UseVisualStyleBackColor = true;
            this.radBand160.Click += new System.EventHandler(this.radBand160_Click);
            this.radBand160.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand160_MouseDown);
            // 
            // radBand80
            // 
            resources.ApplyResources(this.radBand80, "radBand80");
            this.radBand80.FlatAppearance.BorderSize = 0;
            this.radBand80.ForeColor = System.Drawing.Color.White;
            this.radBand80.Name = "radBand80";
            this.radBand80.TabStop = true;
            this.toolTip1.SetToolTip(this.radBand80, resources.GetString("radBand80.ToolTip"));
            this.radBand80.UseVisualStyleBackColor = true;
            this.radBand80.Click += new System.EventHandler(this.radBand80_Click);
            this.radBand80.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBand80_MouseDown);
            // 
            // btnBandVHF
            // 
            this.btnBandVHF.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnBandVHF, "btnBandVHF");
            this.btnBandVHF.ForeColor = System.Drawing.Color.Gold;
            this.btnBandVHF.Name = "btnBandVHF";
            this.toolTip1.SetToolTip(this.btnBandVHF, resources.GetString("btnBandVHF.ToolTip"));
            this.btnBandVHF.Click += new System.EventHandler(this.btnBandVHF_Click);
            // 
            // chkVFOBTX
            // 
            resources.ApplyResources(this.chkVFOBTX, "chkVFOBTX");
            this.chkVFOBTX.FlatAppearance.BorderSize = 0;
            this.chkVFOBTX.Name = "chkVFOBTX";
            this.toolTip1.SetToolTip(this.chkVFOBTX, resources.GetString("chkVFOBTX.ToolTip"));
            this.chkVFOBTX.CheckedChanged += new System.EventHandler(this.chkVFOBTX_CheckedChanged);
            // 
            // chkVFOATX
            // 
            resources.ApplyResources(this.chkVFOATX, "chkVFOATX");
            this.chkVFOATX.BackColor = System.Drawing.Color.Transparent;
            this.chkVFOATX.Checked = true;
            this.chkVFOATX.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkVFOATX.FlatAppearance.BorderSize = 0;
            this.chkVFOATX.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkVFOATX.Name = "chkVFOATX";
            this.toolTip1.SetToolTip(this.chkVFOATX, resources.GetString("chkVFOATX.ToolTip"));
            this.chkVFOATX.UseVisualStyleBackColor = false;
            this.chkVFOATX.CheckedChanged += new System.EventHandler(this.chkVFOATX_CheckedChanged);
            // 
            // btnTNFAdd
            // 
            this.btnTNFAdd.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnTNFAdd, "btnTNFAdd");
            this.btnTNFAdd.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnTNFAdd.Name = "btnTNFAdd";
            this.toolTip1.SetToolTip(this.btnTNFAdd, resources.GetString("btnTNFAdd.ToolTip"));
            this.btnTNFAdd.Click += new System.EventHandler(this.btnTNFAdd_Click);
            this.btnTNFAdd.MouseDown += new System.Windows.Forms.MouseEventHandler(this.btnTNFAdd_MouseDown);
            // 
            // chkTNF
            // 
            resources.ApplyResources(this.chkTNF, "chkTNF");
            this.chkTNF.Checked = true;
            this.chkTNF.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkTNF.FlatAppearance.BorderSize = 0;
            this.chkTNF.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkTNF.Name = "chkTNF";
            this.toolTip1.SetToolTip(this.chkTNF, resources.GetString("chkTNF.ToolTip"));
            this.chkTNF.CheckedChanged += new System.EventHandler(this.chkTNF_CheckedChanged);
            this.chkTNF.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkTNF_MouseDown);
            // 
            // chkDisplayPeak
            // 
            resources.ApplyResources(this.chkDisplayPeak, "chkDisplayPeak");
            this.chkDisplayPeak.FlatAppearance.BorderSize = 0;
            this.chkDisplayPeak.Name = "chkDisplayPeak";
            this.toolTip1.SetToolTip(this.chkDisplayPeak, resources.GetString("chkDisplayPeak.ToolTip"));
            this.chkDisplayPeak.CheckedChanged += new System.EventHandler(this.chkDisplayPeak_CheckedChanged);
            // 
            // comboDisplayMode
            // 
            this.comboDisplayMode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboDisplayMode.DisplayMember = "0";
            this.comboDisplayMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboDisplayMode.DropDownWidth = 88;
            resources.ApplyResources(this.comboDisplayMode, "comboDisplayMode");
            this.comboDisplayMode.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboDisplayMode.Name = "comboDisplayMode";
            this.toolTip1.SetToolTip(this.comboDisplayMode, resources.GetString("comboDisplayMode.ToolTip"));
            this.comboDisplayMode.SelectedIndexChanged += new System.EventHandler(this.comboDisplayMode_SelectedIndexChanged);
            // 
            // chkDisplayAVG
            // 
            resources.ApplyResources(this.chkDisplayAVG, "chkDisplayAVG");
            this.chkDisplayAVG.FlatAppearance.BorderSize = 0;
            this.chkDisplayAVG.Name = "chkDisplayAVG";
            this.toolTip1.SetToolTip(this.chkDisplayAVG, resources.GetString("chkDisplayAVG.ToolTip"));
            this.chkDisplayAVG.CheckedChanged += new System.EventHandler(this.chkDisplayAVG_CheckedChanged);
            // 
            // ptbRX2RF
            // 
            this.ptbRX2RF.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.ptbRX2RF, "ptbRX2RF");
            this.ptbRX2RF.HeadImage = null;
            this.ptbRX2RF.LargeChange = 1;
            this.ptbRX2RF.Maximum = 120;
            this.ptbRX2RF.Minimum = -20;
            this.ptbRX2RF.Name = "ptbRX2RF";
            this.ptbRX2RF.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbRX2RF.SmallChange = 1;
            this.ptbRX2RF.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRX2RF, resources.GetString("ptbRX2RF.ToolTip"));
            this.ptbRX2RF.Value = 90;
            this.ptbRX2RF.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRX2RF_Scroll);
            // 
            // label1
            // 
            resources.ApplyResources(this.label1, "label1");
            this.label1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.label1.Name = "label1";
            this.toolTip1.SetToolTip(this.label1, resources.GetString("label1.ToolTip"));
            // 
            // checkBoxID
            // 
            resources.ApplyResources(this.checkBoxID, "checkBoxID");
            this.checkBoxID.Name = "checkBoxID";
            this.toolTip1.SetToolTip(this.checkBoxID, resources.GetString("checkBoxID.ToolTip"));
            this.checkBoxID.CheckedChanged += new System.EventHandler(this.checkBoxID_CheckedChanged);
            // 
            // chkFWCATU
            // 
            resources.ApplyResources(this.chkFWCATU, "chkFWCATU");
            this.chkFWCATU.FlatAppearance.BorderSize = 0;
            this.chkFWCATU.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFWCATU.Name = "chkFWCATU";
            this.toolTip1.SetToolTip(this.chkFWCATU, resources.GetString("chkFWCATU.ToolTip"));
            this.chkFWCATU.CheckedChanged += new System.EventHandler(this.chkFWCATU_CheckedChanged);
            this.chkFWCATU.Click += new System.EventHandler(this.chkFWCATU_Click);
            // 
            // chkFWCATUBypass
            // 
            resources.ApplyResources(this.chkFWCATUBypass, "chkFWCATUBypass");
            this.chkFWCATUBypass.FlatAppearance.BorderSize = 0;
            this.chkFWCATUBypass.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFWCATUBypass.Name = "chkFWCATUBypass";
            this.toolTip1.SetToolTip(this.chkFWCATUBypass, resources.GetString("chkFWCATUBypass.ToolTip"));
            this.chkFWCATUBypass.Click += new System.EventHandler(this.chkFWCATUBypass_Click);
            // 
            // ckQuickPlay
            // 
            resources.ApplyResources(this.ckQuickPlay, "ckQuickPlay");
            this.ckQuickPlay.FlatAppearance.BorderSize = 0;
            this.ckQuickPlay.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.ckQuickPlay.Name = "ckQuickPlay";
            this.toolTip1.SetToolTip(this.ckQuickPlay, resources.GetString("ckQuickPlay.ToolTip"));
            this.ckQuickPlay.CheckedChanged += new System.EventHandler(this.ckQuickPlay_CheckedChanged);
            this.ckQuickPlay.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ckQuickPlay_MouseUp);
            this.ckQuickPlay.MouseUp += new System.Windows.Forms.MouseEventHandler(this.ckQuickPlay_MouseDown);
            // 
            // chkMON
            // 
            resources.ApplyResources(this.chkMON, "chkMON");
            this.chkMON.FlatAppearance.BorderSize = 0;
            this.chkMON.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkMON.Name = "chkMON";
            this.toolTip1.SetToolTip(this.chkMON, resources.GetString("chkMON.ToolTip"));
            this.chkMON.CheckedChanged += new System.EventHandler(this.chkMON_CheckedChanged);
            // 
            // ckQuickRec
            // 
            resources.ApplyResources(this.ckQuickRec, "ckQuickRec");
            this.ckQuickRec.FlatAppearance.BorderSize = 0;
            this.ckQuickRec.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.ckQuickRec.Name = "ckQuickRec";
            this.toolTip1.SetToolTip(this.ckQuickRec, resources.GetString("ckQuickRec.ToolTip"));
            this.ckQuickRec.CheckedChanged += new System.EventHandler(this.ckQuickRec_CheckedChanged);
            this.ckQuickRec.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ckQuickRec_MouseDown);
            // 
            // chkMUT
            // 
            resources.ApplyResources(this.chkMUT, "chkMUT");
            this.chkMUT.FlatAppearance.BorderSize = 0;
            this.chkMUT.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkMUT.Name = "chkMUT";
            this.toolTip1.SetToolTip(this.chkMUT, resources.GetString("chkMUT.ToolTip"));
            this.chkMUT.CheckedChanged += new System.EventHandler(this.chkMUT_CheckedChanged);
            this.chkMUT.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkMUT_MouseDown);
            // 
            // chkMOX
            // 
            resources.ApplyResources(this.chkMOX, "chkMOX");
            this.chkMOX.FlatAppearance.BorderSize = 0;
            this.chkMOX.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkMOX.Name = "chkMOX";
            this.toolTip1.SetToolTip(this.chkMOX, resources.GetString("chkMOX.ToolTip"));
            this.chkMOX.CheckedChanged += new System.EventHandler(this.chkMOX_CheckedChanged2);
            this.chkMOX.Click += new System.EventHandler(this.chkMOX_Click);
            // 
            // chkTUN
            // 
            resources.ApplyResources(this.chkTUN, "chkTUN");
            this.chkTUN.FlatAppearance.BorderSize = 0;
            this.chkTUN.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkTUN.Name = "chkTUN";
            this.toolTip1.SetToolTip(this.chkTUN, resources.GetString("chkTUN.ToolTip"));
            this.chkTUN.CheckedChanged += new System.EventHandler(this.chkTUN_CheckedChanged);
            this.chkTUN.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkTUN_MouseDown);
            // 
            // chkX2TR
            // 
            resources.ApplyResources(this.chkX2TR, "chkX2TR");
            this.chkX2TR.FlatAppearance.BorderSize = 0;
            this.chkX2TR.Name = "chkX2TR";
            this.toolTip1.SetToolTip(this.chkX2TR, resources.GetString("chkX2TR.ToolTip"));
            this.chkX2TR.CheckedChanged += new System.EventHandler(this.chkX2TR_CheckedChanged);
            // 
            // comboTuneMode
            // 
            this.comboTuneMode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboTuneMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboTuneMode.DropDownWidth = 42;
            resources.ApplyResources(this.comboTuneMode, "comboTuneMode");
            this.comboTuneMode.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboTuneMode.Items.AddRange(new object[] {
            resources.GetString("comboTuneMode.Items"),
            resources.GetString("comboTuneMode.Items1"),
            resources.GetString("comboTuneMode.Items2")});
            this.comboTuneMode.Name = "comboTuneMode";
            this.toolTip1.SetToolTip(this.comboTuneMode, resources.GetString("comboTuneMode.ToolTip"));
            this.comboTuneMode.SelectedIndexChanged += new System.EventHandler(this.comboTuneMode_SelectedIndexChanged);
            // 
            // udFMOffset
            // 
            this.udFMOffset.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.udFMOffset.DecimalPlaces = 3;
            this.udFMOffset.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udFMOffset.Increment = new decimal(new int[] {
            1,
            0,
            0,
            65536});
            resources.ApplyResources(this.udFMOffset, "udFMOffset");
            this.udFMOffset.Maximum = new decimal(new int[] {
            50,
            0,
            0,
            0});
            this.udFMOffset.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udFMOffset.Name = "udFMOffset";
            this.toolTip1.SetToolTip(this.udFMOffset, resources.GetString("udFMOffset.ToolTip"));
            this.udFMOffset.Value = new decimal(new int[] {
            1,
            0,
            0,
            65536});
            this.udFMOffset.ValueChanged += new System.EventHandler(this.udFMOffset_ValueChanged);
            // 
            // chkFMTXRev
            // 
            resources.ApplyResources(this.chkFMTXRev, "chkFMTXRev");
            this.chkFMTXRev.FlatAppearance.BorderSize = 0;
            this.chkFMTXRev.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFMTXRev.Name = "chkFMTXRev";
            this.toolTip1.SetToolTip(this.chkFMTXRev, resources.GetString("chkFMTXRev.ToolTip"));
            this.chkFMTXRev.CheckedChanged += new System.EventHandler(this.chkFMTXRev_CheckedChanged);
            // 
            // radFMDeviation2kHz
            // 
            resources.ApplyResources(this.radFMDeviation2kHz, "radFMDeviation2kHz");
            this.radFMDeviation2kHz.FlatAppearance.BorderSize = 0;
            this.radFMDeviation2kHz.ForeColor = System.Drawing.Color.White;
            this.radFMDeviation2kHz.Name = "radFMDeviation2kHz";
            this.toolTip1.SetToolTip(this.radFMDeviation2kHz, resources.GetString("radFMDeviation2kHz.ToolTip"));
            this.radFMDeviation2kHz.UseVisualStyleBackColor = true;
            this.radFMDeviation2kHz.CheckedChanged += new System.EventHandler(this.radFMDeviation2kHz_CheckedChanged);
            // 
            // radFMDeviation5kHz
            // 
            resources.ApplyResources(this.radFMDeviation5kHz, "radFMDeviation5kHz");
            this.radFMDeviation5kHz.Checked = true;
            this.radFMDeviation5kHz.FlatAppearance.BorderSize = 0;
            this.radFMDeviation5kHz.ForeColor = System.Drawing.Color.White;
            this.radFMDeviation5kHz.Name = "radFMDeviation5kHz";
            this.radFMDeviation5kHz.TabStop = true;
            this.toolTip1.SetToolTip(this.radFMDeviation5kHz, resources.GetString("radFMDeviation5kHz.ToolTip"));
            this.radFMDeviation5kHz.UseVisualStyleBackColor = true;
            this.radFMDeviation5kHz.CheckedChanged += new System.EventHandler(this.radFMDeviation5kHz_CheckedChanged);
            // 
            // comboFMCTCSS
            // 
            this.comboFMCTCSS.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboFMCTCSS.DropDownWidth = 60;
            resources.ApplyResources(this.comboFMCTCSS, "comboFMCTCSS");
            this.comboFMCTCSS.Name = "comboFMCTCSS";
            this.toolTip1.SetToolTip(this.comboFMCTCSS, resources.GetString("comboFMCTCSS.ToolTip"));
            this.comboFMCTCSS.SelectedIndexChanged += new System.EventHandler(this.comboFMCTCSS_SelectedIndexChanged);
            // 
            // chkFMCTCSS
            // 
            resources.ApplyResources(this.chkFMCTCSS, "chkFMCTCSS");
            this.chkFMCTCSS.FlatAppearance.BorderSize = 0;
            this.chkFMCTCSS.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFMCTCSS.Name = "chkFMCTCSS";
            this.toolTip1.SetToolTip(this.chkFMCTCSS, resources.GetString("chkFMCTCSS.ToolTip"));
            this.chkFMCTCSS.CheckedChanged += new System.EventHandler(this.chkFMCTCSS_CheckedChanged);
            // 
            // chkFMTXLow
            // 
            resources.ApplyResources(this.chkFMTXLow, "chkFMTXLow");
            this.chkFMTXLow.FlatAppearance.BorderSize = 0;
            this.chkFMTXLow.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFMTXLow.Name = "chkFMTXLow";
            this.toolTip1.SetToolTip(this.chkFMTXLow, resources.GetString("chkFMTXLow.ToolTip"));
            this.chkFMTXLow.CheckedChanged += new System.EventHandler(this.chkFMTXLow_CheckedChanged);
            this.chkFMTXLow.Click += new System.EventHandler(this.chkFMMode_Click);
            // 
            // chkFMTXSimplex
            // 
            resources.ApplyResources(this.chkFMTXSimplex, "chkFMTXSimplex");
            this.chkFMTXSimplex.Checked = true;
            this.chkFMTXSimplex.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkFMTXSimplex.FlatAppearance.BorderSize = 0;
            this.chkFMTXSimplex.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFMTXSimplex.Name = "chkFMTXSimplex";
            this.toolTip1.SetToolTip(this.chkFMTXSimplex, resources.GetString("chkFMTXSimplex.ToolTip"));
            this.chkFMTXSimplex.CheckedChanged += new System.EventHandler(this.chkFMTXSimplex_CheckedChanged);
            this.chkFMTXSimplex.Click += new System.EventHandler(this.chkFMMode_Click);
            // 
            // chkFMTXHigh
            // 
            resources.ApplyResources(this.chkFMTXHigh, "chkFMTXHigh");
            this.chkFMTXHigh.FlatAppearance.BorderSize = 0;
            this.chkFMTXHigh.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFMTXHigh.Name = "chkFMTXHigh";
            this.toolTip1.SetToolTip(this.chkFMTXHigh, resources.GetString("chkFMTXHigh.ToolTip"));
            this.chkFMTXHigh.CheckedChanged += new System.EventHandler(this.chkFMTXHigh_CheckedChanged);
            this.chkFMTXHigh.Click += new System.EventHandler(this.chkFMMode_Click);
            // 
            // comboFMTXProfile
            // 
            this.comboFMTXProfile.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboFMTXProfile.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboFMTXProfile.DropDownWidth = 96;
            this.comboFMTXProfile.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.comboFMTXProfile, "comboFMTXProfile");
            this.comboFMTXProfile.Name = "comboFMTXProfile";
            this.toolTip1.SetToolTip(this.comboFMTXProfile, resources.GetString("comboFMTXProfile.ToolTip"));
            this.comboFMTXProfile.SelectedIndexChanged += new System.EventHandler(this.comboFMTXProfile_SelectedIndexChanged);
            this.comboFMTXProfile.MouseDown += new System.Windows.Forms.MouseEventHandler(this.comboFMTXProfile_MouseDown);
            // 
            // udCWPitch
            // 
            this.udCWPitch.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            resources.ApplyResources(this.udCWPitch, "udCWPitch");
            this.udCWPitch.Maximum = new decimal(new int[] {
            2250,
            0,
            0,
            0});
            this.udCWPitch.Minimum = new decimal(new int[] {
            200,
            0,
            0,
            0});
            this.udCWPitch.Name = "udCWPitch";
            this.toolTip1.SetToolTip(this.udCWPitch, resources.GetString("udCWPitch.ToolTip"));
            this.udCWPitch.Value = new decimal(new int[] {
            600,
            0,
            0,
            0});
            this.udCWPitch.ValueChanged += new System.EventHandler(this.udCWPitch_ValueChanged);
            // 
            // udCWBreakInDelay
            // 
            this.udCWBreakInDelay.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.udCWBreakInDelay.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udCWBreakInDelay.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udCWBreakInDelay, "udCWBreakInDelay");
            this.udCWBreakInDelay.Maximum = new decimal(new int[] {
            5000,
            0,
            0,
            0});
            this.udCWBreakInDelay.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udCWBreakInDelay.Name = "udCWBreakInDelay";
            this.toolTip1.SetToolTip(this.udCWBreakInDelay, resources.GetString("udCWBreakInDelay.ToolTip"));
            this.udCWBreakInDelay.Value = new decimal(new int[] {
            300,
            0,
            0,
            0});
            this.udCWBreakInDelay.ValueChanged += new System.EventHandler(this.udCWBreakInDelay_ValueChanged);
            this.udCWBreakInDelay.LostFocus += new System.EventHandler(this.udCWBreakInDelay_LostFocus);
            // 
            // chkCWBreakInEnabled
            // 
            this.chkCWBreakInEnabled.Checked = true;
            this.chkCWBreakInEnabled.CheckState = System.Windows.Forms.CheckState.Checked;
            resources.ApplyResources(this.chkCWBreakInEnabled, "chkCWBreakInEnabled");
            this.chkCWBreakInEnabled.ForeColor = System.Drawing.Color.White;
            this.chkCWBreakInEnabled.Name = "chkCWBreakInEnabled";
            this.toolTip1.SetToolTip(this.chkCWBreakInEnabled, resources.GetString("chkCWBreakInEnabled.ToolTip"));
            this.chkCWBreakInEnabled.CheckedChanged += new System.EventHandler(this.chkCWBreakInEnabled_CheckedChanged);
            // 
            // chkShowTXCWFreq
            // 
            this.chkShowTXCWFreq.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.chkShowTXCWFreq, "chkShowTXCWFreq");
            this.chkShowTXCWFreq.Name = "chkShowTXCWFreq";
            this.toolTip1.SetToolTip(this.chkShowTXCWFreq, resources.GetString("chkShowTXCWFreq.ToolTip"));
            this.chkShowTXCWFreq.CheckedChanged += new System.EventHandler(this.chkShowTXCWFreq_CheckedChanged);
            // 
            // chkCWSidetone
            // 
            this.chkCWSidetone.Checked = true;
            this.chkCWSidetone.CheckState = System.Windows.Forms.CheckState.Checked;
            resources.ApplyResources(this.chkCWSidetone, "chkCWSidetone");
            this.chkCWSidetone.ForeColor = System.Drawing.Color.White;
            this.chkCWSidetone.Name = "chkCWSidetone";
            this.toolTip1.SetToolTip(this.chkCWSidetone, resources.GetString("chkCWSidetone.ToolTip"));
            this.chkCWSidetone.CheckedChanged += new System.EventHandler(this.chkCWSidetone_CheckedChanged);
            // 
            // chkCWIambic
            // 
            this.chkCWIambic.Checked = true;
            this.chkCWIambic.CheckState = System.Windows.Forms.CheckState.Checked;
            resources.ApplyResources(this.chkCWIambic, "chkCWIambic");
            this.chkCWIambic.ForeColor = System.Drawing.Color.White;
            this.chkCWIambic.Name = "chkCWIambic";
            this.toolTip1.SetToolTip(this.chkCWIambic, resources.GetString("chkCWIambic.ToolTip"));
            this.chkCWIambic.CheckedChanged += new System.EventHandler(this.chkCWIambic_CheckedChanged);
            // 
            // chkShowTXFilter
            // 
            this.chkShowTXFilter.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.chkShowTXFilter, "chkShowTXFilter");
            this.chkShowTXFilter.Name = "chkShowTXFilter";
            this.toolTip1.SetToolTip(this.chkShowTXFilter, resources.GetString("chkShowTXFilter.ToolTip"));
            this.chkShowTXFilter.CheckedChanged += new System.EventHandler(this.chkShowTXFilter_CheckedChanged);
            // 
            // chkShowDigTXFilter
            // 
            this.chkShowDigTXFilter.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.chkShowDigTXFilter, "chkShowDigTXFilter");
            this.chkShowDigTXFilter.Name = "chkShowDigTXFilter";
            this.toolTip1.SetToolTip(this.chkShowDigTXFilter, resources.GetString("chkShowDigTXFilter.ToolTip"));
            this.chkShowDigTXFilter.CheckedChanged += new System.EventHandler(this.chkShowDigTXFilter_CheckedChanged);
            // 
            // chkDX
            // 
            resources.ApplyResources(this.chkDX, "chkDX");
            this.chkDX.FlatAppearance.BorderSize = 0;
            this.chkDX.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkDX.Name = "chkDX";
            this.toolTip1.SetToolTip(this.chkDX, resources.GetString("chkDX.ToolTip"));
            this.chkDX.CheckedChanged += new System.EventHandler(this.chkDX_CheckedChanged);
            // 
            // chkTXEQ
            // 
            resources.ApplyResources(this.chkTXEQ, "chkTXEQ");
            this.chkTXEQ.FlatAppearance.BorderSize = 0;
            this.chkTXEQ.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkTXEQ.Name = "chkTXEQ";
            this.toolTip1.SetToolTip(this.chkTXEQ, resources.GetString("chkTXEQ.ToolTip"));
            this.chkTXEQ.CheckedChanged += new System.EventHandler(this.chkTXEQ_CheckedChanged);
            this.chkTXEQ.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkTXEQ_MouseDown);
            // 
            // comboTXProfile
            // 
            this.comboTXProfile.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboTXProfile.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboTXProfile.DropDownWidth = 96;
            resources.ApplyResources(this.comboTXProfile, "comboTXProfile");
            this.comboTXProfile.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboTXProfile.Name = "comboTXProfile";
            this.toolTip1.SetToolTip(this.comboTXProfile, resources.GetString("comboTXProfile.ToolTip"));
            this.comboTXProfile.SelectedIndexChanged += new System.EventHandler(this.comboTXProfile_SelectedIndexChanged);
            this.comboTXProfile.MouseDown += new System.Windows.Forms.MouseEventHandler(this.comboTXProfile_MouseDown);
            // 
            // chkRXEQ
            // 
            resources.ApplyResources(this.chkRXEQ, "chkRXEQ");
            this.chkRXEQ.FlatAppearance.BorderSize = 0;
            this.chkRXEQ.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRXEQ.Name = "chkRXEQ";
            this.toolTip1.SetToolTip(this.chkRXEQ, resources.GetString("chkRXEQ.ToolTip"));
            this.chkRXEQ.CheckedChanged += new System.EventHandler(this.chkRXEQ_CheckedChanged);
            this.chkRXEQ.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkRXEQ_MouseDown);
            // 
            // chkCPDR
            // 
            resources.ApplyResources(this.chkCPDR, "chkCPDR");
            this.chkCPDR.FlatAppearance.BorderSize = 0;
            this.chkCPDR.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkCPDR.Name = "chkCPDR";
            this.toolTip1.SetToolTip(this.chkCPDR, resources.GetString("chkCPDR.ToolTip"));
            this.chkCPDR.CheckedChanged += new System.EventHandler(this.chkCPDR_CheckedChanged);
            // 
            // chkVAC1
            // 
            resources.ApplyResources(this.chkVAC1, "chkVAC1");
            this.chkVAC1.FlatAppearance.BorderSize = 0;
            this.chkVAC1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkVAC1.Name = "chkVAC1";
            this.toolTip1.SetToolTip(this.chkVAC1, resources.GetString("chkVAC1.ToolTip"));
            this.chkVAC1.CheckedChanged += new System.EventHandler(this.chkVAC1_CheckedChanged);
            this.chkVAC1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkVAC1_MouseDown);
            // 
            // chkVOX
            // 
            resources.ApplyResources(this.chkVOX, "chkVOX");
            this.chkVOX.FlatAppearance.BorderSize = 0;
            this.chkVOX.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkVOX.Name = "chkVOX";
            this.toolTip1.SetToolTip(this.chkVOX, resources.GetString("chkVOX.ToolTip"));
            this.chkVOX.CheckedChanged += new System.EventHandler(this.chkVOX_CheckedChanged);
            // 
            // chkNoiseGate
            // 
            resources.ApplyResources(this.chkNoiseGate, "chkNoiseGate");
            this.chkNoiseGate.FlatAppearance.BorderSize = 0;
            this.chkNoiseGate.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkNoiseGate.Name = "chkNoiseGate";
            this.toolTip1.SetToolTip(this.chkNoiseGate, resources.GetString("chkNoiseGate.ToolTip"));
            this.chkNoiseGate.CheckedChanged += new System.EventHandler(this.chkNoiseGate_CheckedChanged);
            // 
            // udRX2FilterHigh
            // 
            this.udRX2FilterHigh.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            resources.ApplyResources(this.udRX2FilterHigh, "udRX2FilterHigh");
            this.udRX2FilterHigh.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udRX2FilterHigh.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udRX2FilterHigh.Maximum = new decimal(new int[] {
            15000,
            0,
            0,
            0});
            this.udRX2FilterHigh.Minimum = new decimal(new int[] {
            15000,
            0,
            0,
            -2147483648});
            this.udRX2FilterHigh.Name = "udRX2FilterHigh";
            this.toolTip1.SetToolTip(this.udRX2FilterHigh, resources.GetString("udRX2FilterHigh.ToolTip"));
            this.udRX2FilterHigh.Value = new decimal(new int[] {
            6000,
            0,
            0,
            0});
            this.udRX2FilterHigh.ValueChanged += new System.EventHandler(this.udRX2FilterHigh_ValueChanged);
            // 
            // udRX2FilterLow
            // 
            this.udRX2FilterLow.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            resources.ApplyResources(this.udRX2FilterLow, "udRX2FilterLow");
            this.udRX2FilterLow.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udRX2FilterLow.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udRX2FilterLow.Maximum = new decimal(new int[] {
            15000,
            0,
            0,
            0});
            this.udRX2FilterLow.Minimum = new decimal(new int[] {
            15000,
            0,
            0,
            -2147483648});
            this.udRX2FilterLow.Name = "udRX2FilterLow";
            this.toolTip1.SetToolTip(this.udRX2FilterLow, resources.GetString("udRX2FilterLow.ToolTip"));
            this.udRX2FilterLow.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udRX2FilterLow.ValueChanged += new System.EventHandler(this.udRX2FilterLow_ValueChanged);
            // 
            // radRX2ModeAM
            // 
            resources.ApplyResources(this.radRX2ModeAM, "radRX2ModeAM");
            this.radRX2ModeAM.FlatAppearance.BorderSize = 0;
            this.radRX2ModeAM.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeAM.Name = "radRX2ModeAM";
            this.toolTip1.SetToolTip(this.radRX2ModeAM, resources.GetString("radRX2ModeAM.ToolTip"));
            this.radRX2ModeAM.CheckedChanged += new System.EventHandler(this.radRX2ModeAM_CheckedChanged);
            // 
            // radRX2ModeLSB
            // 
            resources.ApplyResources(this.radRX2ModeLSB, "radRX2ModeLSB");
            this.radRX2ModeLSB.FlatAppearance.BorderSize = 0;
            this.radRX2ModeLSB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeLSB.Name = "radRX2ModeLSB";
            this.toolTip1.SetToolTip(this.radRX2ModeLSB, resources.GetString("radRX2ModeLSB.ToolTip"));
            this.radRX2ModeLSB.CheckedChanged += new System.EventHandler(this.radRX2ModeLSB_CheckedChanged);
            // 
            // radRX2ModeSAM
            // 
            resources.ApplyResources(this.radRX2ModeSAM, "radRX2ModeSAM");
            this.radRX2ModeSAM.FlatAppearance.BorderSize = 0;
            this.radRX2ModeSAM.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeSAM.Name = "radRX2ModeSAM";
            this.toolTip1.SetToolTip(this.radRX2ModeSAM, resources.GetString("radRX2ModeSAM.ToolTip"));
            this.radRX2ModeSAM.CheckedChanged += new System.EventHandler(this.radRX2ModeSAM_CheckedChanged);
            // 
            // radRX2ModeCWL
            // 
            resources.ApplyResources(this.radRX2ModeCWL, "radRX2ModeCWL");
            this.radRX2ModeCWL.FlatAppearance.BorderSize = 0;
            this.radRX2ModeCWL.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeCWL.Name = "radRX2ModeCWL";
            this.toolTip1.SetToolTip(this.radRX2ModeCWL, resources.GetString("radRX2ModeCWL.ToolTip"));
            this.radRX2ModeCWL.CheckedChanged += new System.EventHandler(this.radRX2ModeCWL_CheckedChanged);
            // 
            // radRX2ModeDSB
            // 
            resources.ApplyResources(this.radRX2ModeDSB, "radRX2ModeDSB");
            this.radRX2ModeDSB.FlatAppearance.BorderSize = 0;
            this.radRX2ModeDSB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeDSB.Name = "radRX2ModeDSB";
            this.toolTip1.SetToolTip(this.radRX2ModeDSB, resources.GetString("radRX2ModeDSB.ToolTip"));
            this.radRX2ModeDSB.CheckedChanged += new System.EventHandler(this.radRX2ModeDSB_CheckedChanged);
            // 
            // radRX2ModeUSB
            // 
            resources.ApplyResources(this.radRX2ModeUSB, "radRX2ModeUSB");
            this.radRX2ModeUSB.BackColor = System.Drawing.SystemColors.Control;
            this.radRX2ModeUSB.FlatAppearance.BorderSize = 0;
            this.radRX2ModeUSB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeUSB.Name = "radRX2ModeUSB";
            this.toolTip1.SetToolTip(this.radRX2ModeUSB, resources.GetString("radRX2ModeUSB.ToolTip"));
            this.radRX2ModeUSB.UseVisualStyleBackColor = false;
            this.radRX2ModeUSB.CheckedChanged += new System.EventHandler(this.radRX2ModeUSB_CheckedChanged);
            // 
            // radRX2ModeCWU
            // 
            resources.ApplyResources(this.radRX2ModeCWU, "radRX2ModeCWU");
            this.radRX2ModeCWU.FlatAppearance.BorderSize = 0;
            this.radRX2ModeCWU.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeCWU.Name = "radRX2ModeCWU";
            this.toolTip1.SetToolTip(this.radRX2ModeCWU, resources.GetString("radRX2ModeCWU.ToolTip"));
            this.radRX2ModeCWU.CheckedChanged += new System.EventHandler(this.radRX2ModeCWU_CheckedChanged);
            // 
            // radRX2ModeFMN
            // 
            resources.ApplyResources(this.radRX2ModeFMN, "radRX2ModeFMN");
            this.radRX2ModeFMN.FlatAppearance.BorderSize = 0;
            this.radRX2ModeFMN.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeFMN.Name = "radRX2ModeFMN";
            this.toolTip1.SetToolTip(this.radRX2ModeFMN, resources.GetString("radRX2ModeFMN.ToolTip"));
            this.radRX2ModeFMN.CheckedChanged += new System.EventHandler(this.radRX2ModeFMN_CheckedChanged);
            // 
            // radRX2ModeDIGU
            // 
            resources.ApplyResources(this.radRX2ModeDIGU, "radRX2ModeDIGU");
            this.radRX2ModeDIGU.FlatAppearance.BorderSize = 0;
            this.radRX2ModeDIGU.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeDIGU.Name = "radRX2ModeDIGU";
            this.toolTip1.SetToolTip(this.radRX2ModeDIGU, resources.GetString("radRX2ModeDIGU.ToolTip"));
            this.radRX2ModeDIGU.CheckedChanged += new System.EventHandler(this.radRX2ModeDIGU_CheckedChanged);
            // 
            // radRX2ModeDRM
            // 
            resources.ApplyResources(this.radRX2ModeDRM, "radRX2ModeDRM");
            this.radRX2ModeDRM.FlatAppearance.BorderSize = 0;
            this.radRX2ModeDRM.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeDRM.Name = "radRX2ModeDRM";
            this.toolTip1.SetToolTip(this.radRX2ModeDRM, resources.GetString("radRX2ModeDRM.ToolTip"));
            this.radRX2ModeDRM.CheckedChanged += new System.EventHandler(this.radRX2ModeDRM_CheckedChanged);
            // 
            // radRX2ModeDIGL
            // 
            resources.ApplyResources(this.radRX2ModeDIGL, "radRX2ModeDIGL");
            this.radRX2ModeDIGL.FlatAppearance.BorderSize = 0;
            this.radRX2ModeDIGL.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeDIGL.Name = "radRX2ModeDIGL";
            this.toolTip1.SetToolTip(this.radRX2ModeDIGL, resources.GetString("radRX2ModeDIGL.ToolTip"));
            this.radRX2ModeDIGL.CheckedChanged += new System.EventHandler(this.radRX2ModeDIGL_CheckedChanged);
            // 
            // radRX2ModeSPEC
            // 
            resources.ApplyResources(this.radRX2ModeSPEC, "radRX2ModeSPEC");
            this.radRX2ModeSPEC.FlatAppearance.BorderSize = 0;
            this.radRX2ModeSPEC.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2ModeSPEC.Name = "radRX2ModeSPEC";
            this.toolTip1.SetToolTip(this.radRX2ModeSPEC, resources.GetString("radRX2ModeSPEC.ToolTip"));
            // 
            // chkRX2DisplayPeak
            // 
            resources.ApplyResources(this.chkRX2DisplayPeak, "chkRX2DisplayPeak");
            this.chkRX2DisplayPeak.FlatAppearance.BorderSize = 0;
            this.chkRX2DisplayPeak.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2DisplayPeak.Name = "chkRX2DisplayPeak";
            this.toolTip1.SetToolTip(this.chkRX2DisplayPeak, resources.GetString("chkRX2DisplayPeak.ToolTip"));
            this.chkRX2DisplayPeak.CheckedChanged += new System.EventHandler(this.chkRX2DisplayPeak_CheckedChanged);
            // 
            // comboRX2DisplayMode
            // 
            this.comboRX2DisplayMode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboRX2DisplayMode.DisplayMember = "0";
            this.comboRX2DisplayMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboRX2DisplayMode.DropDownWidth = 88;
            resources.ApplyResources(this.comboRX2DisplayMode, "comboRX2DisplayMode");
            this.comboRX2DisplayMode.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboRX2DisplayMode.Items.AddRange(new object[] {
            resources.GetString("comboRX2DisplayMode.Items"),
            resources.GetString("comboRX2DisplayMode.Items1"),
            resources.GetString("comboRX2DisplayMode.Items2"),
            resources.GetString("comboRX2DisplayMode.Items3")});
            this.comboRX2DisplayMode.Name = "comboRX2DisplayMode";
            this.toolTip1.SetToolTip(this.comboRX2DisplayMode, resources.GetString("comboRX2DisplayMode.ToolTip"));
            this.comboRX2DisplayMode.SelectedIndexChanged += new System.EventHandler(this.comboRX2DisplayMode_SelectedIndexChanged);
            // 
            // chkRX2Mute
            // 
            resources.ApplyResources(this.chkRX2Mute, "chkRX2Mute");
            this.chkRX2Mute.Name = "chkRX2Mute";
            this.toolTip1.SetToolTip(this.chkRX2Mute, resources.GetString("chkRX2Mute.ToolTip"));
            this.chkRX2Mute.CheckedChanged += new System.EventHandler(this.chkRX2Mute_CheckedChanged);
            // 
            // chkPanSwap
            // 
            resources.ApplyResources(this.chkPanSwap, "chkPanSwap");
            this.chkPanSwap.FlatAppearance.BorderSize = 0;
            this.chkPanSwap.ForeColor = System.Drawing.Color.White;
            this.chkPanSwap.Name = "chkPanSwap";
            this.toolTip1.SetToolTip(this.chkPanSwap, resources.GetString("chkPanSwap.ToolTip"));
            this.chkPanSwap.CheckedChanged += new System.EventHandler(this.chkPanSwap_CheckedChanged);
            // 
            // chkEnableMultiRX
            // 
            resources.ApplyResources(this.chkEnableMultiRX, "chkEnableMultiRX");
            this.chkEnableMultiRX.FlatAppearance.BorderSize = 0;
            this.chkEnableMultiRX.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkEnableMultiRX.Name = "chkEnableMultiRX";
            this.toolTip1.SetToolTip(this.chkEnableMultiRX, resources.GetString("chkEnableMultiRX.ToolTip"));
            this.chkEnableMultiRX.CheckedChanged += new System.EventHandler(this.chEnableMultiRX_CheckedChanged);
            this.chkEnableMultiRX.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkEnableMultiRX_MouseDown);
            // 
            // chkSR
            // 
            resources.ApplyResources(this.chkSR, "chkSR");
            this.chkSR.BackColor = System.Drawing.Color.Yellow;
            this.chkSR.Checked = true;
            this.chkSR.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkSR.FlatAppearance.BorderSize = 0;
            this.chkSR.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkSR.Name = "chkSR";
            this.toolTip1.SetToolTip(this.chkSR, resources.GetString("chkSR.ToolTip"));
            this.chkSR.UseVisualStyleBackColor = false;
            this.chkSR.CheckedChanged += new System.EventHandler(this.chkSR_CheckedChanged);
            // 
            // chkNR
            // 
            resources.ApplyResources(this.chkNR, "chkNR");
            this.chkNR.FlatAppearance.BorderSize = 0;
            this.chkNR.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkNR.Name = "chkNR";
            this.toolTip1.SetToolTip(this.chkNR, resources.GetString("chkNR.ToolTip"));
            this.chkNR.CheckedChanged += new System.EventHandler(this.chkNR_CheckedChanged);
            this.chkNR.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkNR_MouseDown);
            // 
            // chkDSPNB2
            // 
            resources.ApplyResources(this.chkDSPNB2, "chkDSPNB2");
            this.chkDSPNB2.FlatAppearance.BorderSize = 0;
            this.chkDSPNB2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkDSPNB2.Name = "chkDSPNB2";
            this.toolTip1.SetToolTip(this.chkDSPNB2, resources.GetString("chkDSPNB2.ToolTip"));
            this.chkDSPNB2.CheckedChanged += new System.EventHandler(this.chkDSPNB2_CheckedChanged);
            this.chkDSPNB2.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkDSPNB2_MouseDown);
            // 
            // chkBIN
            // 
            resources.ApplyResources(this.chkBIN, "chkBIN");
            this.chkBIN.FlatAppearance.BorderSize = 0;
            this.chkBIN.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkBIN.Name = "chkBIN";
            this.toolTip1.SetToolTip(this.chkBIN, resources.GetString("chkBIN.ToolTip"));
            this.chkBIN.CheckedChanged += new System.EventHandler(this.chkBIN_CheckedChanged);
            // 
            // chkNB
            // 
            resources.ApplyResources(this.chkNB, "chkNB");
            this.chkNB.FlatAppearance.BorderSize = 0;
            this.chkNB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkNB.Name = "chkNB";
            this.toolTip1.SetToolTip(this.chkNB, resources.GetString("chkNB.ToolTip"));
            this.chkNB.CheckedChanged += new System.EventHandler(this.chkNB_CheckedChanged);
            this.chkNB.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkNB_MouseDown);
            // 
            // chkANF
            // 
            resources.ApplyResources(this.chkANF, "chkANF");
            this.chkANF.FlatAppearance.BorderSize = 0;
            this.chkANF.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkANF.Name = "chkANF";
            this.toolTip1.SetToolTip(this.chkANF, resources.GetString("chkANF.ToolTip"));
            this.chkANF.CheckedChanged += new System.EventHandler(this.chkANF_CheckedChanged);
            this.chkANF.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkANF_MouseDown);
            // 
            // btnZeroBeat
            // 
            resources.ApplyResources(this.btnZeroBeat, "btnZeroBeat");
            this.btnZeroBeat.FlatAppearance.BorderSize = 0;
            this.btnZeroBeat.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnZeroBeat.Name = "btnZeroBeat";
            this.toolTip1.SetToolTip(this.btnZeroBeat, resources.GetString("btnZeroBeat.ToolTip"));
            this.btnZeroBeat.Click += new System.EventHandler(this.btnZeroBeat_Click);
            // 
            // chkVFOSplit
            // 
            resources.ApplyResources(this.chkVFOSplit, "chkVFOSplit");
            this.chkVFOSplit.FlatAppearance.BorderSize = 0;
            this.chkVFOSplit.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkVFOSplit.Name = "chkVFOSplit";
            this.toolTip1.SetToolTip(this.chkVFOSplit, resources.GetString("chkVFOSplit.ToolTip"));
            this.chkVFOSplit.CheckedChanged += new System.EventHandler(this.chkVFOSplit_CheckedChanged);
            // 
            // btnRITReset
            // 
            this.btnRITReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnRITReset, "btnRITReset");
            this.btnRITReset.Name = "btnRITReset";
            this.toolTip1.SetToolTip(this.btnRITReset, resources.GetString("btnRITReset.ToolTip"));
            this.btnRITReset.Click += new System.EventHandler(this.btnRITReset_Click);
            // 
            // btnXITReset
            // 
            this.btnXITReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnXITReset, "btnXITReset");
            this.btnXITReset.Name = "btnXITReset";
            this.toolTip1.SetToolTip(this.btnXITReset, resources.GetString("btnXITReset.ToolTip"));
            this.btnXITReset.Click += new System.EventHandler(this.btnXITReset_Click);
            // 
            // udRIT
            // 
            this.udRIT.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.udRIT.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udRIT.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udRIT, "udRIT");
            this.udRIT.Maximum = new decimal(new int[] {
            99999,
            0,
            0,
            0});
            this.udRIT.Minimum = new decimal(new int[] {
            99999,
            0,
            0,
            -2147483648});
            this.udRIT.Name = "udRIT";
            this.toolTip1.SetToolTip(this.udRIT, resources.GetString("udRIT.ToolTip"));
            this.udRIT.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udRIT.ValueChanged += new System.EventHandler(this.udRIT_ValueChanged);
            this.udRIT.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udRIT.LostFocus += new System.EventHandler(this.udRIT_LostFocus);
            // 
            // btnIFtoVFO
            // 
            this.btnIFtoVFO.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnIFtoVFO, "btnIFtoVFO");
            this.btnIFtoVFO.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnIFtoVFO.Name = "btnIFtoVFO";
            this.toolTip1.SetToolTip(this.btnIFtoVFO, resources.GetString("btnIFtoVFO.ToolTip"));
            this.btnIFtoVFO.Click += new System.EventHandler(this.btnIFtoVFO_Click);
            // 
            // chkRIT
            // 
            resources.ApplyResources(this.chkRIT, "chkRIT");
            this.chkRIT.FlatAppearance.BorderSize = 0;
            this.chkRIT.Name = "chkRIT";
            this.toolTip1.SetToolTip(this.chkRIT, resources.GetString("chkRIT.ToolTip"));
            this.chkRIT.CheckedChanged += new System.EventHandler(this.chkRIT_CheckedChanged);
            // 
            // btnVFOSwap
            // 
            this.btnVFOSwap.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnVFOSwap, "btnVFOSwap");
            this.btnVFOSwap.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnVFOSwap.Name = "btnVFOSwap";
            this.toolTip1.SetToolTip(this.btnVFOSwap, resources.GetString("btnVFOSwap.ToolTip"));
            this.btnVFOSwap.Click += new System.EventHandler(this.btnVFOSwap_Click);
            // 
            // chkXIT
            // 
            resources.ApplyResources(this.chkXIT, "chkXIT");
            this.chkXIT.FlatAppearance.BorderSize = 0;
            this.chkXIT.Name = "chkXIT";
            this.toolTip1.SetToolTip(this.chkXIT, resources.GetString("chkXIT.ToolTip"));
            this.chkXIT.CheckedChanged += new System.EventHandler(this.chkXIT_CheckedChanged);
            // 
            // btnVFOBtoA
            // 
            this.btnVFOBtoA.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnVFOBtoA, "btnVFOBtoA");
            this.btnVFOBtoA.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnVFOBtoA.Name = "btnVFOBtoA";
            this.toolTip1.SetToolTip(this.btnVFOBtoA, resources.GetString("btnVFOBtoA.ToolTip"));
            this.btnVFOBtoA.Click += new System.EventHandler(this.btnVFOBtoA_Click);
            // 
            // udXIT
            // 
            this.udXIT.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.udXIT.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udXIT.Increment = new decimal(new int[] {
            1,
            0,
            0,
            0});
            resources.ApplyResources(this.udXIT, "udXIT");
            this.udXIT.Maximum = new decimal(new int[] {
            99999,
            0,
            0,
            0});
            this.udXIT.Minimum = new decimal(new int[] {
            99999,
            0,
            0,
            -2147483648});
            this.udXIT.Name = "udXIT";
            this.toolTip1.SetToolTip(this.udXIT, resources.GetString("udXIT.ToolTip"));
            this.udXIT.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udXIT.ValueChanged += new System.EventHandler(this.udXIT_ValueChanged);
            this.udXIT.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udXIT.LostFocus += new System.EventHandler(this.udXIT_LostFocus);
            // 
            // btnVFOAtoB
            // 
            this.btnVFOAtoB.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnVFOAtoB, "btnVFOAtoB");
            this.btnVFOAtoB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnVFOAtoB.Name = "btnVFOAtoB";
            this.toolTip1.SetToolTip(this.btnVFOAtoB, resources.GetString("btnVFOAtoB.ToolTip"));
            this.btnVFOAtoB.Click += new System.EventHandler(this.btnVFOAtoB_Click);
            // 
            // chkRX1Preamp
            // 
            resources.ApplyResources(this.chkRX1Preamp, "chkRX1Preamp");
            this.chkRX1Preamp.FlatAppearance.BorderSize = 0;
            this.chkRX1Preamp.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX1Preamp.Name = "chkRX1Preamp";
            this.toolTip1.SetToolTip(this.chkRX1Preamp, resources.GetString("chkRX1Preamp.ToolTip"));
            this.chkRX1Preamp.CheckedChanged += new System.EventHandler(this.chkRX1Preamp_CheckedChanged);
            // 
            // comboAGC
            // 
            this.comboAGC.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboAGC.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboAGC.DropDownWidth = 48;
            resources.ApplyResources(this.comboAGC, "comboAGC");
            this.comboAGC.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboAGC.Name = "comboAGC";
            this.toolTip1.SetToolTip(this.comboAGC, resources.GetString("comboAGC.ToolTip"));
            this.comboAGC.SelectedIndexChanged += new System.EventHandler(this.comboAGC_SelectedIndexChanged);
            // 
            // lblAGC
            // 
            this.lblAGC.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblAGC, "lblAGC");
            this.lblAGC.Name = "lblAGC";
            this.toolTip1.SetToolTip(this.lblAGC, resources.GetString("lblAGC.ToolTip"));
            // 
            // comboPreamp
            // 
            this.comboPreamp.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboPreamp.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboPreamp.DropDownWidth = 48;
            resources.ApplyResources(this.comboPreamp, "comboPreamp");
            this.comboPreamp.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboPreamp.Items.AddRange(new object[] {
            resources.GetString("comboPreamp.Items"),
            resources.GetString("comboPreamp.Items1"),
            resources.GetString("comboPreamp.Items2"),
            resources.GetString("comboPreamp.Items3")});
            this.comboPreamp.Name = "comboPreamp";
            this.toolTip1.SetToolTip(this.comboPreamp, resources.GetString("comboPreamp.ToolTip"));
            this.comboPreamp.SelectedIndexChanged += new System.EventHandler(this.comboPreamp_SelectedIndexChanged);
            // 
            // lblRF
            // 
            this.lblRF.ForeColor = System.Drawing.Color.Yellow;
            resources.ApplyResources(this.lblRF, "lblRF");
            this.lblRF.Name = "lblRF";
            this.toolTip1.SetToolTip(this.lblRF, resources.GetString("lblRF.ToolTip"));
            // 
            // comboDigTXProfile
            // 
            this.comboDigTXProfile.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboDigTXProfile.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboDigTXProfile.DropDownWidth = 96;
            resources.ApplyResources(this.comboDigTXProfile, "comboDigTXProfile");
            this.comboDigTXProfile.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboDigTXProfile.Name = "comboDigTXProfile";
            this.toolTip1.SetToolTip(this.comboDigTXProfile, resources.GetString("comboDigTXProfile.ToolTip"));
            this.comboDigTXProfile.SelectedIndexChanged += new System.EventHandler(this.comboDigTXProfile_SelectedIndexChanged);
            this.comboDigTXProfile.MouseDown += new System.Windows.Forms.MouseEventHandler(this.comboDigTXProfile_MouseDown);
            // 
            // chkVACStereo
            // 
            this.chkVACStereo.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.chkVACStereo, "chkVACStereo");
            this.chkVACStereo.Name = "chkVACStereo";
            this.toolTip1.SetToolTip(this.chkVACStereo, resources.GetString("chkVACStereo.ToolTip"));
            this.chkVACStereo.CheckedChanged += new System.EventHandler(this.chkVACStereo_CheckedChanged);
            // 
            // comboVACSampleRate
            // 
            this.comboVACSampleRate.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboVACSampleRate.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboVACSampleRate.DropDownWidth = 64;
            resources.ApplyResources(this.comboVACSampleRate, "comboVACSampleRate");
            this.comboVACSampleRate.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboVACSampleRate.Items.AddRange(new object[] {
            resources.GetString("comboVACSampleRate.Items"),
            resources.GetString("comboVACSampleRate.Items1"),
            resources.GetString("comboVACSampleRate.Items2"),
            resources.GetString("comboVACSampleRate.Items3"),
            resources.GetString("comboVACSampleRate.Items4"),
            resources.GetString("comboVACSampleRate.Items5"),
            resources.GetString("comboVACSampleRate.Items6"),
            resources.GetString("comboVACSampleRate.Items7"),
            resources.GetString("comboVACSampleRate.Items8")});
            this.comboVACSampleRate.Name = "comboVACSampleRate";
            this.toolTip1.SetToolTip(this.comboVACSampleRate, resources.GetString("comboVACSampleRate.ToolTip"));
            this.comboVACSampleRate.SelectedIndexChanged += new System.EventHandler(this.comboVACSampleRate_SelectedIndexChanged);
            this.comboVACSampleRate.MouseDown += new System.Windows.Forms.MouseEventHandler(this.comboVACSampleRate_MouseDown);
            // 
            // btnDisplayPanCenter
            // 
            this.btnDisplayPanCenter.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnDisplayPanCenter, "btnDisplayPanCenter");
            this.btnDisplayPanCenter.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnDisplayPanCenter.Name = "btnDisplayPanCenter";
            this.btnDisplayPanCenter.Tag = "";
            this.toolTip1.SetToolTip(this.btnDisplayPanCenter, resources.GetString("btnDisplayPanCenter.ToolTip"));
            this.btnDisplayPanCenter.UseVisualStyleBackColor = false;
            this.btnDisplayPanCenter.Click += new System.EventHandler(this.btnDisplayPanCenter_Click);
            this.btnDisplayPanCenter.MouseDown += new System.Windows.Forms.MouseEventHandler(this.btnDisplayPanCenter_MouseDown);
            // 
            // udFilterHigh
            // 
            this.udFilterHigh.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            resources.ApplyResources(this.udFilterHigh, "udFilterHigh");
            this.udFilterHigh.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udFilterHigh.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udFilterHigh.Maximum = new decimal(new int[] {
            15000,
            0,
            0,
            0});
            this.udFilterHigh.Minimum = new decimal(new int[] {
            15000,
            0,
            0,
            -2147483648});
            this.udFilterHigh.Name = "udFilterHigh";
            this.toolTip1.SetToolTip(this.udFilterHigh, resources.GetString("udFilterHigh.ToolTip"));
            this.udFilterHigh.Value = new decimal(new int[] {
            6000,
            0,
            0,
            0});
            this.udFilterHigh.ValueChanged += new System.EventHandler(this.udFilterHigh_ValueChanged);
            this.udFilterHigh.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udFilterHigh.LostFocus += new System.EventHandler(this.udFilterHigh_LostFocus);
            // 
            // udFilterLow
            // 
            this.udFilterLow.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            resources.ApplyResources(this.udFilterLow, "udFilterLow");
            this.udFilterLow.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udFilterLow.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udFilterLow.Maximum = new decimal(new int[] {
            15000,
            0,
            0,
            0});
            this.udFilterLow.Minimum = new decimal(new int[] {
            15000,
            0,
            0,
            -2147483648});
            this.udFilterLow.Name = "udFilterLow";
            this.toolTip1.SetToolTip(this.udFilterLow, resources.GetString("udFilterLow.ToolTip"));
            this.udFilterLow.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udFilterLow.ValueChanged += new System.EventHandler(this.udFilterLow_ValueChanged);
            this.udFilterLow.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.udFilterLow.LostFocus += new System.EventHandler(this.udFilterLow_LostFocus);
            // 
            // btnFilterShiftReset
            // 
            this.btnFilterShiftReset.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFilterShiftReset, "btnFilterShiftReset");
            this.btnFilterShiftReset.Name = "btnFilterShiftReset";
            this.btnFilterShiftReset.Tag = "Reset Filter Shift";
            this.toolTip1.SetToolTip(this.btnFilterShiftReset, resources.GetString("btnFilterShiftReset.ToolTip"));
            this.btnFilterShiftReset.Click += new System.EventHandler(this.btnFilterShiftReset_Click);
            // 
            // radModeAM
            // 
            resources.ApplyResources(this.radModeAM, "radModeAM");
            this.radModeAM.FlatAppearance.BorderSize = 0;
            this.radModeAM.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeAM.Name = "radModeAM";
            this.toolTip1.SetToolTip(this.radModeAM, resources.GetString("radModeAM.ToolTip"));
            this.radModeAM.CheckedChanged += new System.EventHandler(this.radModeAM_CheckedChanged);
            this.radModeAM.MouseUp += new System.Windows.Forms.MouseEventHandler(this.radModeAM_MouseUp);
            // 
            // radModeLSB
            // 
            resources.ApplyResources(this.radModeLSB, "radModeLSB");
            this.radModeLSB.FlatAppearance.BorderSize = 0;
            this.radModeLSB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeLSB.Name = "radModeLSB";
            this.toolTip1.SetToolTip(this.radModeLSB, resources.GetString("radModeLSB.ToolTip"));
            this.radModeLSB.CheckedChanged += new System.EventHandler(this.radModeLSB_CheckedChanged);
            // 
            // radModeSAM
            // 
            resources.ApplyResources(this.radModeSAM, "radModeSAM");
            this.radModeSAM.FlatAppearance.BorderSize = 0;
            this.radModeSAM.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeSAM.Name = "radModeSAM";
            this.toolTip1.SetToolTip(this.radModeSAM, resources.GetString("radModeSAM.ToolTip"));
            this.radModeSAM.CheckedChanged += new System.EventHandler(this.radModeSAM_CheckedChanged);
            this.radModeSAM.MouseUp += new System.Windows.Forms.MouseEventHandler(this.radModeSAM_MouseUp);
            // 
            // radModeCWL
            // 
            resources.ApplyResources(this.radModeCWL, "radModeCWL");
            this.radModeCWL.FlatAppearance.BorderSize = 0;
            this.radModeCWL.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeCWL.Name = "radModeCWL";
            this.toolTip1.SetToolTip(this.radModeCWL, resources.GetString("radModeCWL.ToolTip"));
            this.radModeCWL.CheckedChanged += new System.EventHandler(this.radModeCWL_CheckedChanged);
            // 
            // radModeDSB
            // 
            resources.ApplyResources(this.radModeDSB, "radModeDSB");
            this.radModeDSB.FlatAppearance.BorderSize = 0;
            this.radModeDSB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeDSB.Name = "radModeDSB";
            this.toolTip1.SetToolTip(this.radModeDSB, resources.GetString("radModeDSB.ToolTip"));
            this.radModeDSB.CheckedChanged += new System.EventHandler(this.radModeDSB_CheckedChanged);
            // 
            // radModeUSB
            // 
            resources.ApplyResources(this.radModeUSB, "radModeUSB");
            this.radModeUSB.BackColor = System.Drawing.SystemColors.Control;
            this.radModeUSB.FlatAppearance.BorderSize = 0;
            this.radModeUSB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeUSB.Name = "radModeUSB";
            this.toolTip1.SetToolTip(this.radModeUSB, resources.GetString("radModeUSB.ToolTip"));
            this.radModeUSB.UseVisualStyleBackColor = false;
            this.radModeUSB.CheckedChanged += new System.EventHandler(this.radModeUSB_CheckedChanged);
            // 
            // radModeCWU
            // 
            resources.ApplyResources(this.radModeCWU, "radModeCWU");
            this.radModeCWU.FlatAppearance.BorderSize = 0;
            this.radModeCWU.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeCWU.Name = "radModeCWU";
            this.toolTip1.SetToolTip(this.radModeCWU, resources.GetString("radModeCWU.ToolTip"));
            this.radModeCWU.CheckedChanged += new System.EventHandler(this.radModeCWU_CheckedChanged);
            // 
            // radModeFMN
            // 
            resources.ApplyResources(this.radModeFMN, "radModeFMN");
            this.radModeFMN.FlatAppearance.BorderSize = 0;
            this.radModeFMN.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeFMN.Name = "radModeFMN";
            this.toolTip1.SetToolTip(this.radModeFMN, resources.GetString("radModeFMN.ToolTip"));
            this.radModeFMN.CheckedChanged += new System.EventHandler(this.radModeFMN_CheckedChanged);
            this.radModeFMN.MouseUp += new System.Windows.Forms.MouseEventHandler(this.radModeFMN_MouseUp);
            // 
            // radModeDIGU
            // 
            resources.ApplyResources(this.radModeDIGU, "radModeDIGU");
            this.radModeDIGU.FlatAppearance.BorderSize = 0;
            this.radModeDIGU.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeDIGU.Name = "radModeDIGU";
            this.toolTip1.SetToolTip(this.radModeDIGU, resources.GetString("radModeDIGU.ToolTip"));
            this.radModeDIGU.CheckedChanged += new System.EventHandler(this.radModeDIGU_CheckedChanged);
            // 
            // radModeDRM
            // 
            resources.ApplyResources(this.radModeDRM, "radModeDRM");
            this.radModeDRM.FlatAppearance.BorderSize = 0;
            this.radModeDRM.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeDRM.Name = "radModeDRM";
            this.toolTip1.SetToolTip(this.radModeDRM, resources.GetString("radModeDRM.ToolTip"));
            this.radModeDRM.CheckedChanged += new System.EventHandler(this.radModeDRM_CheckedChanged);
            // 
            // radModeDIGL
            // 
            resources.ApplyResources(this.radModeDIGL, "radModeDIGL");
            this.radModeDIGL.FlatAppearance.BorderSize = 0;
            this.radModeDIGL.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeDIGL.Name = "radModeDIGL";
            this.toolTip1.SetToolTip(this.radModeDIGL, resources.GetString("radModeDIGL.ToolTip"));
            this.radModeDIGL.CheckedChanged += new System.EventHandler(this.radModeDIGL_CheckedChanged);
            // 
            // radModeSPEC
            // 
            resources.ApplyResources(this.radModeSPEC, "radModeSPEC");
            this.radModeSPEC.FlatAppearance.BorderSize = 0;
            this.radModeSPEC.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radModeSPEC.Name = "radModeSPEC";
            this.toolTip1.SetToolTip(this.radModeSPEC, resources.GetString("radModeSPEC.ToolTip"));
            this.radModeSPEC.CheckedChanged += new System.EventHandler(this.radModeSPEC_CheckedChanged);
            // 
            // comboRX2Band
            // 
            this.comboRX2Band.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboRX2Band.DisplayMember = "0";
            this.comboRX2Band.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboRX2Band.DropDownWidth = 56;
            resources.ApplyResources(this.comboRX2Band, "comboRX2Band");
            this.comboRX2Band.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboRX2Band.Items.AddRange(new object[] {
            resources.GetString("comboRX2Band.Items"),
            resources.GetString("comboRX2Band.Items1"),
            resources.GetString("comboRX2Band.Items2"),
            resources.GetString("comboRX2Band.Items3"),
            resources.GetString("comboRX2Band.Items4"),
            resources.GetString("comboRX2Band.Items5"),
            resources.GetString("comboRX2Band.Items6"),
            resources.GetString("comboRX2Band.Items7"),
            resources.GetString("comboRX2Band.Items8"),
            resources.GetString("comboRX2Band.Items9"),
            resources.GetString("comboRX2Band.Items10"),
            resources.GetString("comboRX2Band.Items11"),
            resources.GetString("comboRX2Band.Items12"),
            resources.GetString("comboRX2Band.Items13"),
            resources.GetString("comboRX2Band.Items14"),
            resources.GetString("comboRX2Band.Items15"),
            resources.GetString("comboRX2Band.Items16"),
            resources.GetString("comboRX2Band.Items17"),
            resources.GetString("comboRX2Band.Items18"),
            resources.GetString("comboRX2Band.Items19"),
            resources.GetString("comboRX2Band.Items20"),
            resources.GetString("comboRX2Band.Items21"),
            resources.GetString("comboRX2Band.Items22"),
            resources.GetString("comboRX2Band.Items23"),
            resources.GetString("comboRX2Band.Items24"),
            resources.GetString("comboRX2Band.Items25"),
            resources.GetString("comboRX2Band.Items26")});
            this.comboRX2Band.Name = "comboRX2Band";
            this.toolTip1.SetToolTip(this.comboRX2Band, resources.GetString("comboRX2Band.ToolTip"));
            this.comboRX2Band.SelectedIndexChanged += new System.EventHandler(this.comboRX2Band_SelectedIndexChanged);
            // 
            // txtWheelTune
            // 
            this.txtWheelTune.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.txtWheelTune.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.txtWheelTune.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtWheelTune, "txtWheelTune");
            this.txtWheelTune.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.txtWheelTune.Name = "txtWheelTune";
            this.txtWheelTune.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtWheelTune, resources.GetString("txtWheelTune.ToolTip"));
            this.txtWheelTune.GotFocus += new System.EventHandler(this.HideFocus);
            this.txtWheelTune.MouseDown += new System.Windows.Forms.MouseEventHandler(this.WheelTune_MouseDown);
            // 
            // chkPower
            // 
            resources.ApplyResources(this.chkPower, "chkPower");
            this.chkPower.BackColor = System.Drawing.SystemColors.Control;
            this.chkPower.FlatAppearance.BorderSize = 0;
            this.chkPower.Name = "chkPower";
            this.toolTip1.SetToolTip(this.chkPower, resources.GetString("chkPower.ToolTip"));
            this.chkPower.UseVisualStyleBackColor = false;
            this.chkPower.CheckedChanged += new System.EventHandler(this.chkPower_CheckedChanged);
            // 
            // comboMeterTXMode
            // 
            this.comboMeterTXMode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboMeterTXMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboMeterTXMode.DropDownWidth = 72;
            this.comboMeterTXMode.ForeColor = System.Drawing.SystemColors.ControlDark;
            resources.ApplyResources(this.comboMeterTXMode, "comboMeterTXMode");
            this.comboMeterTXMode.Name = "comboMeterTXMode";
            this.toolTip1.SetToolTip(this.comboMeterTXMode, resources.GetString("comboMeterTXMode.ToolTip"));
            this.comboMeterTXMode.SelectedIndexChanged += new System.EventHandler(this.comboMeterTXMode_SelectedIndexChanged);
            // 
            // comboMeterRXMode
            // 
            this.comboMeterRXMode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboMeterRXMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboMeterRXMode.DropDownWidth = 72;
            this.comboMeterRXMode.ForeColor = System.Drawing.SystemColors.ControlDark;
            resources.ApplyResources(this.comboMeterRXMode, "comboMeterRXMode");
            this.comboMeterRXMode.Name = "comboMeterRXMode";
            this.toolTip1.SetToolTip(this.comboMeterRXMode, resources.GetString("comboMeterRXMode.ToolTip"));
            this.comboMeterRXMode.SelectedIndexChanged += new System.EventHandler(this.comboMeterRXMode_SelectedIndexChanged);
            // 
            // chkSquelch
            // 
            resources.ApplyResources(this.chkSquelch, "chkSquelch");
            this.chkSquelch.FlatAppearance.BorderSize = 0;
            this.chkSquelch.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkSquelch.Name = "chkSquelch";
            this.toolTip1.SetToolTip(this.chkSquelch, resources.GetString("chkSquelch.ToolTip"));
            this.chkSquelch.CheckedChanged += new System.EventHandler(this.chkSquelch_CheckedChanged);
            // 
            // btnMemoryQuickRestore
            // 
            this.btnMemoryQuickRestore.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnMemoryQuickRestore, "btnMemoryQuickRestore");
            this.btnMemoryQuickRestore.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnMemoryQuickRestore.Name = "btnMemoryQuickRestore";
            this.toolTip1.SetToolTip(this.btnMemoryQuickRestore, resources.GetString("btnMemoryQuickRestore.ToolTip"));
            this.btnMemoryQuickRestore.Click += new System.EventHandler(this.btnMemoryQuickRestore_Click);
            // 
            // btnMemoryQuickSave
            // 
            this.btnMemoryQuickSave.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnMemoryQuickSave, "btnMemoryQuickSave");
            this.btnMemoryQuickSave.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnMemoryQuickSave.Name = "btnMemoryQuickSave";
            this.toolTip1.SetToolTip(this.btnMemoryQuickSave, resources.GetString("btnMemoryQuickSave.ToolTip"));
            this.btnMemoryQuickSave.Click += new System.EventHandler(this.btnMemoryQuickSave_Click);
            // 
            // txtMemoryQuick
            // 
            this.txtMemoryQuick.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.txtMemoryQuick.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.txtMemoryQuick.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtMemoryQuick, "txtMemoryQuick");
            this.txtMemoryQuick.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.txtMemoryQuick.Name = "txtMemoryQuick";
            this.txtMemoryQuick.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtMemoryQuick, resources.GetString("txtMemoryQuick.ToolTip"));
            // 
            // chkVFOLock
            // 
            resources.ApplyResources(this.chkVFOLock, "chkVFOLock");
            this.chkVFOLock.FlatAppearance.BorderSize = 0;
            this.chkVFOLock.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkVFOLock.Name = "chkVFOLock";
            this.toolTip1.SetToolTip(this.chkVFOLock, resources.GetString("chkVFOLock.ToolTip"));
            this.chkVFOLock.CheckedChanged += new System.EventHandler(this.chkVFOLock_CheckedChanged);
            // 
            // chkVFOSync
            // 
            resources.ApplyResources(this.chkVFOSync, "chkVFOSync");
            this.chkVFOSync.FlatAppearance.BorderSize = 0;
            this.chkVFOSync.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkVFOSync.Name = "chkVFOSync";
            this.toolTip1.SetToolTip(this.chkVFOSync, resources.GetString("chkVFOSync.ToolTip"));
            this.chkVFOSync.CheckedChanged += new System.EventHandler(this.chkVFOSync_CheckedChanged);
            // 
            // chkFullDuplex
            // 
            resources.ApplyResources(this.chkFullDuplex, "chkFullDuplex");
            this.chkFullDuplex.FlatAppearance.BorderSize = 0;
            this.chkFullDuplex.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkFullDuplex.Name = "chkFullDuplex";
            this.toolTip1.SetToolTip(this.chkFullDuplex, resources.GetString("chkFullDuplex.ToolTip"));
            this.chkFullDuplex.CheckedChanged += new System.EventHandler(this.chkFullDuplex_CheckedChanged);
            // 
            // btnTuneStepChangeLarger
            // 
            this.btnTuneStepChangeLarger.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnTuneStepChangeLarger, "btnTuneStepChangeLarger");
            this.btnTuneStepChangeLarger.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnTuneStepChangeLarger.Name = "btnTuneStepChangeLarger";
            this.toolTip1.SetToolTip(this.btnTuneStepChangeLarger, resources.GetString("btnTuneStepChangeLarger.ToolTip"));
            this.btnTuneStepChangeLarger.Click += new System.EventHandler(this.btnChangeTuneStepLarger_Click);
            // 
            // btnTuneStepChangeSmaller
            // 
            this.btnTuneStepChangeSmaller.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnTuneStepChangeSmaller, "btnTuneStepChangeSmaller");
            this.btnTuneStepChangeSmaller.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnTuneStepChangeSmaller.Name = "btnTuneStepChangeSmaller";
            this.toolTip1.SetToolTip(this.btnTuneStepChangeSmaller, resources.GetString("btnTuneStepChangeSmaller.ToolTip"));
            this.btnTuneStepChangeSmaller.Click += new System.EventHandler(this.btnChangeTuneStepSmaller_Click);
            // 
            // chkBCI
            // 
            resources.ApplyResources(this.chkBCI, "chkBCI");
            this.chkBCI.FlatAppearance.BorderSize = 0;
            this.chkBCI.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkBCI.Name = "chkBCI";
            this.toolTip1.SetToolTip(this.chkBCI, resources.GetString("chkBCI.ToolTip"));
            this.chkBCI.CheckedChanged += new System.EventHandler(this.chkBCI_CheckedChanged);
            // 
            // chkSplitDisplay
            // 
            resources.ApplyResources(this.chkSplitDisplay, "chkSplitDisplay");
            this.chkSplitDisplay.Name = "chkSplitDisplay";
            this.toolTip1.SetToolTip(this.chkSplitDisplay, resources.GetString("chkSplitDisplay.ToolTip"));
            this.chkSplitDisplay.CheckedChanged += new System.EventHandler(this.chkSplitDisplay_CheckedChanged);
            // 
            // comboDisplayModeTop
            // 
            this.comboDisplayModeTop.BackColor = System.Drawing.SystemColors.Window;
            this.comboDisplayModeTop.DisplayMember = "0";
            this.comboDisplayModeTop.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboDisplayModeTop.DropDownWidth = 88;
            this.comboDisplayModeTop.ForeColor = System.Drawing.SystemColors.WindowText;
            resources.ApplyResources(this.comboDisplayModeTop, "comboDisplayModeTop");
            this.comboDisplayModeTop.Items.AddRange(new object[] {
            resources.GetString("comboDisplayModeTop.Items"),
            resources.GetString("comboDisplayModeTop.Items1"),
            resources.GetString("comboDisplayModeTop.Items2")});
            this.comboDisplayModeTop.Name = "comboDisplayModeTop";
            this.toolTip1.SetToolTip(this.comboDisplayModeTop, resources.GetString("comboDisplayModeTop.ToolTip"));
            this.comboDisplayModeTop.SelectedIndexChanged += new System.EventHandler(this.comboDisplayModeTop_SelectedIndexChanged);
            // 
            // comboDisplayModeBottom
            // 
            this.comboDisplayModeBottom.BackColor = System.Drawing.SystemColors.Window;
            this.comboDisplayModeBottom.DisplayMember = "0";
            this.comboDisplayModeBottom.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboDisplayModeBottom.DropDownWidth = 88;
            this.comboDisplayModeBottom.ForeColor = System.Drawing.SystemColors.WindowText;
            resources.ApplyResources(this.comboDisplayModeBottom, "comboDisplayModeBottom");
            this.comboDisplayModeBottom.Items.AddRange(new object[] {
            resources.GetString("comboDisplayModeBottom.Items"),
            resources.GetString("comboDisplayModeBottom.Items1"),
            resources.GetString("comboDisplayModeBottom.Items2")});
            this.comboDisplayModeBottom.Name = "comboDisplayModeBottom";
            this.toolTip1.SetToolTip(this.comboDisplayModeBottom, resources.GetString("comboDisplayModeBottom.ToolTip"));
            this.comboDisplayModeBottom.SelectedIndexChanged += new System.EventHandler(this.comboDisplayModeBottom_SelectedIndexChanged);
            // 
            // chkRX2SR
            // 
            resources.ApplyResources(this.chkRX2SR, "chkRX2SR");
            this.chkRX2SR.BackColor = System.Drawing.Color.Yellow;
            this.chkRX2SR.Checked = true;
            this.chkRX2SR.CheckState = System.Windows.Forms.CheckState.Checked;
            this.chkRX2SR.FlatAppearance.BorderSize = 0;
            this.chkRX2SR.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2SR.Name = "chkRX2SR";
            this.toolTip1.SetToolTip(this.chkRX2SR, resources.GetString("chkRX2SR.ToolTip"));
            this.chkRX2SR.UseVisualStyleBackColor = false;
            this.chkRX2SR.CheckedChanged += new System.EventHandler(this.chkRX2SR_CheckedChanged);
            // 
            // chkRX2NB2
            // 
            resources.ApplyResources(this.chkRX2NB2, "chkRX2NB2");
            this.chkRX2NB2.FlatAppearance.BorderSize = 0;
            this.chkRX2NB2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2NB2.Name = "chkRX2NB2";
            this.toolTip1.SetToolTip(this.chkRX2NB2, resources.GetString("chkRX2NB2.ToolTip"));
            this.chkRX2NB2.CheckedChanged += new System.EventHandler(this.chkRX2NB2_CheckedChanged);
            this.chkRX2NB2.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkRX2NB2_MouseDown);
            // 
            // chkRX2NB
            // 
            resources.ApplyResources(this.chkRX2NB, "chkRX2NB");
            this.chkRX2NB.FlatAppearance.BorderSize = 0;
            this.chkRX2NB.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2NB.Name = "chkRX2NB";
            this.toolTip1.SetToolTip(this.chkRX2NB, resources.GetString("chkRX2NB.ToolTip"));
            this.chkRX2NB.CheckedChanged += new System.EventHandler(this.chkRX2NB_CheckedChanged);
            this.chkRX2NB.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkRX2NB_MouseDown);
            // 
            // chkRX2ANF
            // 
            resources.ApplyResources(this.chkRX2ANF, "chkRX2ANF");
            this.chkRX2ANF.FlatAppearance.BorderSize = 0;
            this.chkRX2ANF.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2ANF.Name = "chkRX2ANF";
            this.toolTip1.SetToolTip(this.chkRX2ANF, resources.GetString("chkRX2ANF.ToolTip"));
            this.chkRX2ANF.CheckedChanged += new System.EventHandler(this.chkRX2ANF_CheckedChanged);
            this.chkRX2ANF.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkRX2ANF_MouseDown);
            // 
            // chkRX2NR
            // 
            resources.ApplyResources(this.chkRX2NR, "chkRX2NR");
            this.chkRX2NR.FlatAppearance.BorderSize = 0;
            this.chkRX2NR.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2NR.Name = "chkRX2NR";
            this.toolTip1.SetToolTip(this.chkRX2NR, resources.GetString("chkRX2NR.ToolTip"));
            this.chkRX2NR.CheckedChanged += new System.EventHandler(this.chkRX2NR_CheckedChanged);
            this.chkRX2NR.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkRX2NR_MouseDown);
            // 
            // chkRX2BIN
            // 
            resources.ApplyResources(this.chkRX2BIN, "chkRX2BIN");
            this.chkRX2BIN.FlatAppearance.BorderSize = 0;
            this.chkRX2BIN.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2BIN.Name = "chkRX2BIN";
            this.toolTip1.SetToolTip(this.chkRX2BIN, resources.GetString("chkRX2BIN.ToolTip"));
            this.chkRX2BIN.CheckedChanged += new System.EventHandler(this.chkRX2BIN_CheckedChanged);
            // 
            // comboRX2AGC
            // 
            this.comboRX2AGC.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboRX2AGC.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboRX2AGC.DropDownWidth = 48;
            this.comboRX2AGC.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.comboRX2AGC, "comboRX2AGC");
            this.comboRX2AGC.Name = "comboRX2AGC";
            this.toolTip1.SetToolTip(this.comboRX2AGC, resources.GetString("comboRX2AGC.ToolTip"));
            this.comboRX2AGC.SelectedIndexChanged += new System.EventHandler(this.comboRX2AGC_SelectedIndexChanged);
            // 
            // lblRX2AGC
            // 
            this.lblRX2AGC.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblRX2AGC, "lblRX2AGC");
            this.lblRX2AGC.Name = "lblRX2AGC";
            this.toolTip1.SetToolTip(this.lblRX2AGC, resources.GetString("lblRX2AGC.ToolTip"));
            // 
            // comboRX2MeterMode
            // 
            this.comboRX2MeterMode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboRX2MeterMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboRX2MeterMode.DropDownWidth = 72;
            this.comboRX2MeterMode.ForeColor = System.Drawing.SystemColors.ControlDark;
            resources.ApplyResources(this.comboRX2MeterMode, "comboRX2MeterMode");
            this.comboRX2MeterMode.Name = "comboRX2MeterMode";
            this.toolTip1.SetToolTip(this.comboRX2MeterMode, resources.GetString("comboRX2MeterMode.ToolTip"));
            this.comboRX2MeterMode.SelectedIndexChanged += new System.EventHandler(this.comboRX2MeterMode_SelectedIndexChanged);
            // 
            // lblRX2RF
            // 
            this.lblRX2RF.BackColor = System.Drawing.Color.Transparent;
            this.lblRX2RF.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblRX2RF, "lblRX2RF");
            this.lblRX2RF.Name = "lblRX2RF";
            this.toolTip1.SetToolTip(this.lblRX2RF, resources.GetString("lblRX2RF.ToolTip"));
            // 
            // chkRX2Squelch
            // 
            resources.ApplyResources(this.chkRX2Squelch, "chkRX2Squelch");
            this.chkRX2Squelch.FlatAppearance.BorderSize = 0;
            this.chkRX2Squelch.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2Squelch.Name = "chkRX2Squelch";
            this.toolTip1.SetToolTip(this.chkRX2Squelch, resources.GetString("chkRX2Squelch.ToolTip"));
            this.chkRX2Squelch.CheckedChanged += new System.EventHandler(this.chkRX2Squelch_CheckedChanged);
            // 
            // chkRX2Preamp
            // 
            resources.ApplyResources(this.chkRX2Preamp, "chkRX2Preamp");
            this.chkRX2Preamp.FlatAppearance.BorderSize = 0;
            this.chkRX2Preamp.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2Preamp.Name = "chkRX2Preamp";
            this.toolTip1.SetToolTip(this.chkRX2Preamp, resources.GetString("chkRX2Preamp.ToolTip"));
            this.chkRX2Preamp.CheckedChanged += new System.EventHandler(this.chkRX2Preamp_CheckedChanged);
            // 
            // chkRX2DisplayAVG
            // 
            resources.ApplyResources(this.chkRX2DisplayAVG, "chkRX2DisplayAVG");
            this.chkRX2DisplayAVG.FlatAppearance.BorderSize = 0;
            this.chkRX2DisplayAVG.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkRX2DisplayAVG.Name = "chkRX2DisplayAVG";
            this.toolTip1.SetToolTip(this.chkRX2DisplayAVG, resources.GetString("chkRX2DisplayAVG.ToolTip"));
            this.chkRX2DisplayAVG.CheckedChanged += new System.EventHandler(this.chkRX2DisplayAVG_CheckedChanged);
            // 
            // radDisplayZoom05
            // 
            resources.ApplyResources(this.radDisplayZoom05, "radDisplayZoom05");
            this.radDisplayZoom05.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom05.ForeColor = System.Drawing.Color.White;
            this.radDisplayZoom05.Name = "radDisplayZoom05";
            this.radDisplayZoom05.TabStop = true;
            this.toolTip1.SetToolTip(this.radDisplayZoom05, resources.GetString("radDisplayZoom05.ToolTip"));
            this.radDisplayZoom05.UseVisualStyleBackColor = true;
            this.radDisplayZoom05.CheckedChanged += new System.EventHandler(this.radDisplayZoom05_CheckedChanged);
            // 
            // radDisplayZoom4x
            // 
            resources.ApplyResources(this.radDisplayZoom4x, "radDisplayZoom4x");
            this.radDisplayZoom4x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom4x.ForeColor = System.Drawing.Color.White;
            this.radDisplayZoom4x.Name = "radDisplayZoom4x";
            this.radDisplayZoom4x.TabStop = true;
            this.toolTip1.SetToolTip(this.radDisplayZoom4x, resources.GetString("radDisplayZoom4x.ToolTip"));
            this.radDisplayZoom4x.UseVisualStyleBackColor = true;
            this.radDisplayZoom4x.CheckedChanged += new System.EventHandler(this.radDisplayZoom4x_CheckedChanged);
            // 
            // radDisplayZoom2x
            // 
            resources.ApplyResources(this.radDisplayZoom2x, "radDisplayZoom2x");
            this.radDisplayZoom2x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom2x.ForeColor = System.Drawing.Color.White;
            this.radDisplayZoom2x.Name = "radDisplayZoom2x";
            this.radDisplayZoom2x.TabStop = true;
            this.toolTip1.SetToolTip(this.radDisplayZoom2x, resources.GetString("radDisplayZoom2x.ToolTip"));
            this.radDisplayZoom2x.UseVisualStyleBackColor = true;
            this.radDisplayZoom2x.CheckedChanged += new System.EventHandler(this.radDisplayZoom2x_CheckedChanged);
            // 
            // radDisplayZoom1x
            // 
            resources.ApplyResources(this.radDisplayZoom1x, "radDisplayZoom1x");
            this.radDisplayZoom1x.FlatAppearance.BorderSize = 0;
            this.radDisplayZoom1x.ForeColor = System.Drawing.Color.White;
            this.radDisplayZoom1x.Name = "radDisplayZoom1x";
            this.radDisplayZoom1x.TabStop = true;
            this.toolTip1.SetToolTip(this.radDisplayZoom1x, resources.GetString("radDisplayZoom1x.ToolTip"));
            this.radDisplayZoom1x.UseVisualStyleBackColor = true;
            this.radDisplayZoom1x.CheckedChanged += new System.EventHandler(this.radDisplayZoom1x_CheckedChanged);
            // 
            // btnFMMemory
            // 
            this.btnFMMemory.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFMMemory, "btnFMMemory");
            this.btnFMMemory.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnFMMemory.Name = "btnFMMemory";
            this.toolTip1.SetToolTip(this.btnFMMemory, resources.GetString("btnFMMemory.ToolTip"));
            this.btnFMMemory.Click += new System.EventHandler(this.btnFMMemory_Click);
            // 
            // btnFMMemoryUp
            // 
            this.btnFMMemoryUp.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFMMemoryUp, "btnFMMemoryUp");
            this.btnFMMemoryUp.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnFMMemoryUp.Name = "btnFMMemoryUp";
            this.toolTip1.SetToolTip(this.btnFMMemoryUp, resources.GetString("btnFMMemoryUp.ToolTip"));
            this.btnFMMemoryUp.Click += new System.EventHandler(this.btnFMMemoryUp_Click);
            // 
            // btnFMMemoryDown
            // 
            this.btnFMMemoryDown.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnFMMemoryDown, "btnFMMemoryDown");
            this.btnFMMemoryDown.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.btnFMMemoryDown.Name = "btnFMMemoryDown";
            this.toolTip1.SetToolTip(this.btnFMMemoryDown, resources.GetString("btnFMMemoryDown.ToolTip"));
            this.btnFMMemoryDown.Click += new System.EventHandler(this.btnFMMemoryDown_Click);
            // 
            // chkVAC2
            // 
            resources.ApplyResources(this.chkVAC2, "chkVAC2");
            this.chkVAC2.FlatAppearance.BorderSize = 0;
            this.chkVAC2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.chkVAC2.Name = "chkVAC2";
            this.toolTip1.SetToolTip(this.chkVAC2, resources.GetString("chkVAC2.ToolTip"));
            this.chkVAC2.CheckedChanged += new System.EventHandler(this.chkVAC2_CheckedChanged);
            this.chkVAC2.MouseDown += new System.Windows.Forms.MouseEventHandler(this.chkVAC2_MouseDown);
            // 
            // txtDisplayPeakOffset
            // 
            this.txtDisplayPeakOffset.BackColor = System.Drawing.Color.Black;
            this.txtDisplayPeakOffset.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayPeakOffset.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayPeakOffset, "txtDisplayPeakOffset");
            this.txtDisplayPeakOffset.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayPeakOffset.Name = "txtDisplayPeakOffset";
            this.txtDisplayPeakOffset.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtDisplayPeakOffset, resources.GetString("txtDisplayPeakOffset.ToolTip"));
            this.txtDisplayPeakOffset.Click += new System.EventHandler(this.txtDisplayPeakOffset_TextChanged);
            this.txtDisplayPeakOffset.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // txtDisplayCursorOffset
            // 
            this.txtDisplayCursorOffset.BackColor = System.Drawing.Color.Black;
            this.txtDisplayCursorOffset.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayCursorOffset.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayCursorOffset, "txtDisplayCursorOffset");
            this.txtDisplayCursorOffset.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayCursorOffset.Name = "txtDisplayCursorOffset";
            this.txtDisplayCursorOffset.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtDisplayCursorOffset, resources.GetString("txtDisplayCursorOffset.ToolTip"));
            this.txtDisplayCursorOffset.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // txtDisplayCursorPower
            // 
            this.txtDisplayCursorPower.BackColor = System.Drawing.Color.Black;
            this.txtDisplayCursorPower.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayCursorPower.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayCursorPower, "txtDisplayCursorPower");
            this.txtDisplayCursorPower.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayCursorPower.Name = "txtDisplayCursorPower";
            this.txtDisplayCursorPower.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtDisplayCursorPower, resources.GetString("txtDisplayCursorPower.ToolTip"));
            // 
            // txtDisplayCursorFreq
            // 
            this.txtDisplayCursorFreq.BackColor = System.Drawing.Color.Black;
            this.txtDisplayCursorFreq.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayCursorFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayCursorFreq, "txtDisplayCursorFreq");
            this.txtDisplayCursorFreq.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayCursorFreq.Name = "txtDisplayCursorFreq";
            this.txtDisplayCursorFreq.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtDisplayCursorFreq, resources.GetString("txtDisplayCursorFreq.ToolTip"));
            // 
            // txtDisplayPeakPower
            // 
            this.txtDisplayPeakPower.BackColor = System.Drawing.Color.Black;
            this.txtDisplayPeakPower.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayPeakPower.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayPeakPower, "txtDisplayPeakPower");
            this.txtDisplayPeakPower.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayPeakPower.Name = "txtDisplayPeakPower";
            this.txtDisplayPeakPower.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtDisplayPeakPower, resources.GetString("txtDisplayPeakPower.ToolTip"));
            this.txtDisplayPeakPower.Click += new System.EventHandler(this.txtDisplayPeakPower_TextChanged);
            // 
            // txtDisplayPeakFreq
            // 
            this.txtDisplayPeakFreq.BackColor = System.Drawing.Color.Black;
            this.txtDisplayPeakFreq.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDisplayPeakFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDisplayPeakFreq, "txtDisplayPeakFreq");
            this.txtDisplayPeakFreq.ForeColor = System.Drawing.Color.DodgerBlue;
            this.txtDisplayPeakFreq.Name = "txtDisplayPeakFreq";
            this.txtDisplayPeakFreq.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtDisplayPeakFreq, resources.GetString("txtDisplayPeakFreq.ToolTip"));
            this.txtDisplayPeakFreq.Click += new System.EventHandler(this.txtDisplayPeakFreq_TextChanged);
            // 
            // autoBrightBox
            // 
            this.autoBrightBox.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.autoBrightBox, "autoBrightBox");
            this.autoBrightBox.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.autoBrightBox.Cursor = System.Windows.Forms.Cursors.Default;
            this.autoBrightBox.ForeColor = System.Drawing.SystemColors.Info;
            this.autoBrightBox.Name = "autoBrightBox";
            this.autoBrightBox.ReadOnly = true;
            this.autoBrightBox.TabStop = false;
            this.toolTip1.SetToolTip(this.autoBrightBox, resources.GetString("autoBrightBox.ToolTip"));
            this.autoBrightBox.Click += new System.EventHandler(this.autoBrightBox_Click);
            this.autoBrightBox.MouseDown += new System.Windows.Forms.MouseEventHandler(this.autoBrightBox_MouseDown);
            this.autoBrightBox.MouseUp += new System.Windows.Forms.MouseEventHandler(this.autoBrightBox_MouseUp);
            // 
            // radBandGN13
            // 
            resources.ApplyResources(this.radBandGN13, "radBandGN13");
            this.radBandGN13.FlatAppearance.BorderSize = 0;
            this.radBandGN13.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN13.Name = "radBandGN13";
            this.radBandGN13.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN13, resources.GetString("radBandGN13.ToolTip"));
            this.radBandGN13.UseVisualStyleBackColor = true;
            this.radBandGN13.Click += new System.EventHandler(this.radBandGEN13_Click);
            this.radBandGN13.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN13_MouseDown);
            // 
            // radBandGN12
            // 
            resources.ApplyResources(this.radBandGN12, "radBandGN12");
            this.radBandGN12.FlatAppearance.BorderSize = 0;
            this.radBandGN12.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN12.Name = "radBandGN12";
            this.radBandGN12.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN12, resources.GetString("radBandGN12.ToolTip"));
            this.radBandGN12.UseVisualStyleBackColor = false;
            this.radBandGN12.Click += new System.EventHandler(this.radBandGEN12_Click);
            this.radBandGN12.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN12_MouseDown);
            // 
            // radBandGN11
            // 
            resources.ApplyResources(this.radBandGN11, "radBandGN11");
            this.radBandGN11.FlatAppearance.BorderSize = 0;
            this.radBandGN11.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN11.Name = "radBandGN11";
            this.radBandGN11.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN11, resources.GetString("radBandGN11.ToolTip"));
            this.radBandGN11.UseVisualStyleBackColor = true;
            this.radBandGN11.Click += new System.EventHandler(this.radBandGEN11_Click);
            this.radBandGN11.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN11_MouseDown);
            // 
            // radBandGN10
            // 
            resources.ApplyResources(this.radBandGN10, "radBandGN10");
            this.radBandGN10.FlatAppearance.BorderSize = 0;
            this.radBandGN10.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN10.Name = "radBandGN10";
            this.radBandGN10.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN10, resources.GetString("radBandGN10.ToolTip"));
            this.radBandGN10.UseVisualStyleBackColor = true;
            this.radBandGN10.Click += new System.EventHandler(this.radBandGEN10_Click);
            this.radBandGN10.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN10_MouseDown);
            // 
            // radBandGN9
            // 
            resources.ApplyResources(this.radBandGN9, "radBandGN9");
            this.radBandGN9.FlatAppearance.BorderSize = 0;
            this.radBandGN9.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN9.Name = "radBandGN9";
            this.radBandGN9.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN9, resources.GetString("radBandGN9.ToolTip"));
            this.radBandGN9.UseVisualStyleBackColor = true;
            this.radBandGN9.Click += new System.EventHandler(this.radBandGEN9_Click);
            this.radBandGN9.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN9_MouseDown);
            // 
            // radBandGN8
            // 
            resources.ApplyResources(this.radBandGN8, "radBandGN8");
            this.radBandGN8.FlatAppearance.BorderSize = 0;
            this.radBandGN8.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN8.Name = "radBandGN8";
            this.radBandGN8.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN8, resources.GetString("radBandGN8.ToolTip"));
            this.radBandGN8.UseVisualStyleBackColor = true;
            this.radBandGN8.Click += new System.EventHandler(this.radBandGEN8_Click);
            this.radBandGN8.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN8_MouseDown);
            // 
            // radBandGN7
            // 
            resources.ApplyResources(this.radBandGN7, "radBandGN7");
            this.radBandGN7.FlatAppearance.BorderSize = 0;
            this.radBandGN7.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN7.Name = "radBandGN7";
            this.radBandGN7.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN7, resources.GetString("radBandGN7.ToolTip"));
            this.radBandGN7.UseVisualStyleBackColor = true;
            this.radBandGN7.Click += new System.EventHandler(this.radBandGEN7_CheckedChanged);
            this.radBandGN7.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN7_MouseDown);
            // 
            // radBandGN6
            // 
            resources.ApplyResources(this.radBandGN6, "radBandGN6");
            this.radBandGN6.FlatAppearance.BorderSize = 0;
            this.radBandGN6.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN6.Name = "radBandGN6";
            this.radBandGN6.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN6, resources.GetString("radBandGN6.ToolTip"));
            this.radBandGN6.UseVisualStyleBackColor = true;
            this.radBandGN6.Click += new System.EventHandler(this.radBandGEN6_Click);
            this.radBandGN6.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN6_MouseDown);
            // 
            // radBandGN5
            // 
            resources.ApplyResources(this.radBandGN5, "radBandGN5");
            this.radBandGN5.FlatAppearance.BorderSize = 0;
            this.radBandGN5.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN5.Name = "radBandGN5";
            this.radBandGN5.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN5, resources.GetString("radBandGN5.ToolTip"));
            this.radBandGN5.UseVisualStyleBackColor = true;
            this.radBandGN5.Click += new System.EventHandler(this.radBandGEN5_Click);
            this.radBandGN5.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN5_MouseDown);
            // 
            // radBandGN4
            // 
            resources.ApplyResources(this.radBandGN4, "radBandGN4");
            this.radBandGN4.FlatAppearance.BorderSize = 0;
            this.radBandGN4.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN4.Name = "radBandGN4";
            this.radBandGN4.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN4, resources.GetString("radBandGN4.ToolTip"));
            this.radBandGN4.UseVisualStyleBackColor = true;
            this.radBandGN4.Click += new System.EventHandler(this.radBandGEN4_Click);
            this.radBandGN4.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN4_MouseDown);
            // 
            // radBandGN3
            // 
            resources.ApplyResources(this.radBandGN3, "radBandGN3");
            this.radBandGN3.FlatAppearance.BorderSize = 0;
            this.radBandGN3.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN3.Name = "radBandGN3";
            this.radBandGN3.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN3, resources.GetString("radBandGN3.ToolTip"));
            this.radBandGN3.UseVisualStyleBackColor = true;
            this.radBandGN3.Click += new System.EventHandler(this.radBandGEN3_Click);
            this.radBandGN3.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN3_MouseDown);
            // 
            // radBandGN2
            // 
            resources.ApplyResources(this.radBandGN2, "radBandGN2");
            this.radBandGN2.FlatAppearance.BorderSize = 0;
            this.radBandGN2.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN2.Name = "radBandGN2";
            this.radBandGN2.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN2, resources.GetString("radBandGN2.ToolTip"));
            this.radBandGN2.UseVisualStyleBackColor = true;
            this.radBandGN2.Click += new System.EventHandler(this.radBandGEN2_Click);
            this.radBandGN2.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN2_MouseDown);
            // 
            // radBandGN1
            // 
            resources.ApplyResources(this.radBandGN1, "radBandGN1");
            this.radBandGN1.FlatAppearance.BorderSize = 0;
            this.radBandGN1.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN1.Name = "radBandGN1";
            this.radBandGN1.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN1, resources.GetString("radBandGN1.ToolTip"));
            this.radBandGN1.UseVisualStyleBackColor = true;
            this.radBandGN1.Click += new System.EventHandler(this.radBandGEN1_Click);
            this.radBandGN1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN1_MouseDown);
            // 
            // radBandGN0
            // 
            resources.ApplyResources(this.radBandGN0, "radBandGN0");
            this.radBandGN0.FlatAppearance.BorderSize = 0;
            this.radBandGN0.ForeColor = System.Drawing.Color.Yellow;
            this.radBandGN0.Name = "radBandGN0";
            this.radBandGN0.TabStop = true;
            this.toolTip1.SetToolTip(this.radBandGN0, resources.GetString("radBandGN0.ToolTip"));
            this.radBandGN0.UseVisualStyleBackColor = true;
            this.radBandGN0.Click += new System.EventHandler(this.radBandGEN0_Click);
            this.radBandGN0.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandGN0_MouseDown);
            // 
            // regBox1
            // 
            this.regBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.regBox1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.regBox1.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.regBox1, "regBox1");
            this.regBox1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.regBox1.Name = "regBox1";
            this.regBox1.ReadOnly = true;
            this.toolTip1.SetToolTip(this.regBox1, resources.GetString("regBox1.ToolTip"));
            this.regBox1.TextChanged += new System.EventHandler(this.regBox1_TextChanged);
            this.regBox1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.regBox1_MouseDown);
            this.regBox1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.regBox_MouseUp);
            // 
            // regBox
            // 
            this.regBox.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.regBox.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.regBox.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.regBox, "regBox");
            this.regBox.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.regBox.Name = "regBox";
            this.regBox.ReadOnly = true;
            this.toolTip1.SetToolTip(this.regBox, resources.GetString("regBox.ToolTip"));
            this.regBox.MouseDown += new System.Windows.Forms.MouseEventHandler(this.regBox1_MouseDown);
            this.regBox.MouseUp += new System.Windows.Forms.MouseEventHandler(this.regBox_MouseUp);
            // 
            // lblAntRX2
            // 
            resources.ApplyResources(this.lblAntRX2, "lblAntRX2");
            this.lblAntRX2.ForeColor = System.Drawing.Color.White;
            this.lblAntRX2.Name = "lblAntRX2";
            this.toolTip1.SetToolTip(this.lblAntRX2, resources.GetString("lblAntRX2.ToolTip"));
            this.lblAntRX2.Click += new System.EventHandler(this.lblAntRX2_Click);
            // 
            // lblAntRX1
            // 
            resources.ApplyResources(this.lblAntRX1, "lblAntRX1");
            this.lblAntRX1.ForeColor = System.Drawing.Color.White;
            this.lblAntRX1.Name = "lblAntRX1";
            this.toolTip1.SetToolTip(this.lblAntRX1, resources.GetString("lblAntRX1.ToolTip"));
            this.lblAntRX1.Click += new System.EventHandler(this.lblAntRX1_Click);
            this.lblAntRX1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lblAntRX1_MouseDown);
            // 
            // lblAntTX
            // 
            resources.ApplyResources(this.lblAntTX, "lblAntTX");
            this.lblAntTX.ForeColor = System.Drawing.Color.White;
            this.lblAntTX.Name = "lblAntTX";
            this.toolTip1.SetToolTip(this.lblAntTX, resources.GetString("lblAntTX.ToolTip"));
            this.lblAntTX.Click += new System.EventHandler(this.lblAntTX_Click);
            // 
            // labelTS4
            // 
            this.labelTS4.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.labelTS4.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.labelTS4.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.labelTS4, "labelTS4");
            this.labelTS4.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.labelTS4.Name = "labelTS4";
            this.toolTip1.SetToolTip(this.labelTS4, resources.GetString("labelTS4.ToolTip"));
            this.labelTS4.Click += new System.EventHandler(this.labelTS4_Click);
            this.labelTS4.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // labelTS3
            // 
            this.labelTS3.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.labelTS3.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.labelTS3.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.labelTS3, "labelTS3");
            this.labelTS3.ForeColor = System.Drawing.Color.White;
            this.labelTS3.Name = "labelTS3";
            this.toolTip1.SetToolTip(this.labelTS3, resources.GetString("labelTS3.ToolTip"));
            this.labelTS3.Click += new System.EventHandler(this.labelTS3_Click);
            this.labelTS3.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // comboMeterTX1Mode
            // 
            this.comboMeterTX1Mode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboMeterTX1Mode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboMeterTX1Mode.DropDownWidth = 72;
            this.comboMeterTX1Mode.ForeColor = System.Drawing.SystemColors.ControlDark;
            resources.ApplyResources(this.comboMeterTX1Mode, "comboMeterTX1Mode");
            this.comboMeterTX1Mode.Name = "comboMeterTX1Mode";
            this.toolTip1.SetToolTip(this.comboMeterTX1Mode, resources.GetString("comboMeterTX1Mode.ToolTip"));
            this.comboMeterTX1Mode.SelectedIndexChanged += new System.EventHandler(this.comboMeterTX1Mode_SelectedIndexChanged);
            // 
            // chkRX1MUTE
            // 
            resources.ApplyResources(this.chkRX1MUTE, "chkRX1MUTE");
            this.chkRX1MUTE.Name = "chkRX1MUTE";
            this.toolTip1.SetToolTip(this.chkRX1MUTE, resources.GetString("chkRX1MUTE.ToolTip"));
            // 
            // ptbCWSpeed
            // 
            resources.ApplyResources(this.ptbCWSpeed, "ptbCWSpeed");
            this.ptbCWSpeed.HeadImage = null;
            this.ptbCWSpeed.LargeChange = 1;
            this.ptbCWSpeed.Maximum = 60;
            this.ptbCWSpeed.Minimum = 1;
            this.ptbCWSpeed.Name = "ptbCWSpeed";
            this.ptbCWSpeed.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbCWSpeed.SmallChange = 1;
            this.ptbCWSpeed.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbCWSpeed, resources.GetString("ptbCWSpeed.ToolTip"));
            this.ptbCWSpeed.Value = 25;
            this.ptbCWSpeed.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbCWSpeed_Scroll);
            // 
            // ptbRX2Pan
            // 
            resources.ApplyResources(this.ptbRX2Pan, "ptbRX2Pan");
            this.ptbRX2Pan.HeadImage = null;
            this.ptbRX2Pan.LargeChange = 1;
            this.ptbRX2Pan.Maximum = 100;
            this.ptbRX2Pan.Minimum = 0;
            this.ptbRX2Pan.Name = "ptbRX2Pan";
            this.ptbRX2Pan.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbRX2Pan.SmallChange = 1;
            this.ptbRX2Pan.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRX2Pan, resources.GetString("ptbRX2Pan.ToolTip"));
            this.ptbRX2Pan.Value = 50;
            this.ptbRX2Pan.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRX2Pan_Scroll);
            // 
            // ptbRX2Gain
            // 
            resources.ApplyResources(this.ptbRX2Gain, "ptbRX2Gain");
            this.ptbRX2Gain.HeadImage = null;
            this.ptbRX2Gain.LargeChange = 1;
            this.ptbRX2Gain.Maximum = 100;
            this.ptbRX2Gain.Minimum = 0;
            this.ptbRX2Gain.Name = "ptbRX2Gain";
            this.ptbRX2Gain.Orientation = System.Windows.Forms.Orientation.Vertical;
            this.ptbRX2Gain.SmallChange = 1;
            this.ptbRX2Gain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRX2Gain, resources.GetString("ptbRX2Gain.ToolTip"));
            this.ptbRX2Gain.Value = 100;
            this.ptbRX2Gain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRX2Gain_Scroll);
            // 
            // ptbRX1Gain
            // 
            resources.ApplyResources(this.ptbRX1Gain, "ptbRX1Gain");
            this.ptbRX1Gain.HeadImage = null;
            this.ptbRX1Gain.LargeChange = 1;
            this.ptbRX1Gain.Maximum = 100;
            this.ptbRX1Gain.Minimum = 0;
            this.ptbRX1Gain.Name = "ptbRX1Gain";
            this.ptbRX1Gain.Orientation = System.Windows.Forms.Orientation.Vertical;
            this.ptbRX1Gain.SmallChange = 1;
            this.ptbRX1Gain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRX1Gain, resources.GetString("ptbRX1Gain.ToolTip"));
            this.ptbRX1Gain.Value = 100;
            this.ptbRX1Gain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRX1Gain_Scroll);
            // 
            // ptbPanSubRX
            // 
            resources.ApplyResources(this.ptbPanSubRX, "ptbPanSubRX");
            this.ptbPanSubRX.HeadImage = null;
            this.ptbPanSubRX.LargeChange = 1;
            this.ptbPanSubRX.Maximum = 100;
            this.ptbPanSubRX.Minimum = 0;
            this.ptbPanSubRX.Name = "ptbPanSubRX";
            this.ptbPanSubRX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbPanSubRX.SmallChange = 1;
            this.ptbPanSubRX.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbPanSubRX, resources.GetString("ptbPanSubRX.ToolTip"));
            this.ptbPanSubRX.Value = 50;
            this.ptbPanSubRX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbPanSubRX_Scroll);
            // 
            // ptbRX0Gain
            // 
            resources.ApplyResources(this.ptbRX0Gain, "ptbRX0Gain");
            this.ptbRX0Gain.HeadImage = null;
            this.ptbRX0Gain.LargeChange = 1;
            this.ptbRX0Gain.Maximum = 100;
            this.ptbRX0Gain.Minimum = 0;
            this.ptbRX0Gain.Name = "ptbRX0Gain";
            this.ptbRX0Gain.Orientation = System.Windows.Forms.Orientation.Vertical;
            this.ptbRX0Gain.SmallChange = 1;
            this.ptbRX0Gain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRX0Gain, resources.GetString("ptbRX0Gain.ToolTip"));
            this.ptbRX0Gain.Value = 100;
            this.ptbRX0Gain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRX0Gain_Scroll);
            // 
            // ptbPanMainRX
            // 
            resources.ApplyResources(this.ptbPanMainRX, "ptbPanMainRX");
            this.ptbPanMainRX.HeadImage = null;
            this.ptbPanMainRX.LargeChange = 1;
            this.ptbPanMainRX.Maximum = 100;
            this.ptbPanMainRX.Minimum = 0;
            this.ptbPanMainRX.Name = "ptbPanMainRX";
            this.ptbPanMainRX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbPanMainRX.SmallChange = 1;
            this.ptbPanMainRX.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbPanMainRX, resources.GetString("ptbPanMainRX.ToolTip"));
            this.ptbPanMainRX.Value = 50;
            this.ptbPanMainRX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbPanMainRX_Scroll);
            // 
            // ptbPWR
            // 
            resources.ApplyResources(this.ptbPWR, "ptbPWR");
            this.ptbPWR.HeadImage = null;
            this.ptbPWR.LargeChange = 1;
            this.ptbPWR.Maximum = 100;
            this.ptbPWR.Minimum = 0;
            this.ptbPWR.Name = "ptbPWR";
            this.ptbPWR.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbPWR.SmallChange = 1;
            this.ptbPWR.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbPWR, resources.GetString("ptbPWR.ToolTip"));
            this.ptbPWR.Value = 50;
            this.ptbPWR.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbPWR_Scroll);
            // 
            // ptbRF
            // 
            resources.ApplyResources(this.ptbRF, "ptbRF");
            this.ptbRF.HeadImage = null;
            this.ptbRF.LargeChange = 1;
            this.ptbRF.Maximum = 120;
            this.ptbRF.Minimum = -20;
            this.ptbRF.Name = "ptbRF";
            this.ptbRF.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbRF.SmallChange = 1;
            this.ptbRF.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbRF, resources.GetString("ptbRF.ToolTip"));
            this.ptbRF.Value = 90;
            this.ptbRF.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRF_Scroll);
            // 
            // ptbAF
            // 
            resources.ApplyResources(this.ptbAF, "ptbAF");
            this.ptbAF.HeadImage = null;
            this.ptbAF.LargeChange = 1;
            this.ptbAF.Maximum = 100;
            this.ptbAF.Minimum = 0;
            this.ptbAF.Name = "ptbAF";
            this.ptbAF.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbAF.SmallChange = 1;
            this.ptbAF.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbAF, resources.GetString("ptbAF.ToolTip"));
            this.ptbAF.Value = 50;
            this.ptbAF.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbAF_Scroll);
            // 
            // ptbVACTXGain
            // 
            resources.ApplyResources(this.ptbVACTXGain, "ptbVACTXGain");
            this.ptbVACTXGain.HeadImage = null;
            this.ptbVACTXGain.LargeChange = 1;
            this.ptbVACTXGain.Maximum = 40;
            this.ptbVACTXGain.Minimum = -40;
            this.ptbVACTXGain.Name = "ptbVACTXGain";
            this.ptbVACTXGain.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbVACTXGain.SmallChange = 1;
            this.ptbVACTXGain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbVACTXGain, resources.GetString("ptbVACTXGain.ToolTip"));
            this.ptbVACTXGain.Value = 0;
            this.ptbVACTXGain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbVACTXGain_Scroll);
            // 
            // ptbVACRXGain
            // 
            resources.ApplyResources(this.ptbVACRXGain, "ptbVACRXGain");
            this.ptbVACRXGain.HeadImage = null;
            this.ptbVACRXGain.LargeChange = 1;
            this.ptbVACRXGain.Maximum = 40;
            this.ptbVACRXGain.Minimum = -40;
            this.ptbVACRXGain.Name = "ptbVACRXGain";
            this.ptbVACRXGain.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbVACRXGain.SmallChange = 1;
            this.ptbVACRXGain.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbVACRXGain, resources.GetString("ptbVACRXGain.ToolTip"));
            this.ptbVACRXGain.Value = 0;
            this.ptbVACRXGain.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbVACRXGain_Scroll);
            // 
            // ptbDisplayZoom
            // 
            resources.ApplyResources(this.ptbDisplayZoom, "ptbDisplayZoom");
            this.ptbDisplayZoom.HeadImage = null;
            this.ptbDisplayZoom.LargeChange = 1;
            this.ptbDisplayZoom.Maximum = 240;
            this.ptbDisplayZoom.Minimum = 10;
            this.ptbDisplayZoom.Name = "ptbDisplayZoom";
            this.ptbDisplayZoom.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbDisplayZoom.SmallChange = 1;
            this.ptbDisplayZoom.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbDisplayZoom, resources.GetString("ptbDisplayZoom.ToolTip"));
            this.ptbDisplayZoom.Value = 150;
            this.ptbDisplayZoom.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbDisplayZoom_Scroll);
            // 
            // ptbDisplayPan
            // 
            resources.ApplyResources(this.ptbDisplayPan, "ptbDisplayPan");
            this.ptbDisplayPan.HeadImage = null;
            this.ptbDisplayPan.LargeChange = 1;
            this.ptbDisplayPan.Maximum = 1000;
            this.ptbDisplayPan.Minimum = 0;
            this.ptbDisplayPan.Name = "ptbDisplayPan";
            this.ptbDisplayPan.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbDisplayPan.SmallChange = 1;
            this.ptbDisplayPan.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbDisplayPan, resources.GetString("ptbDisplayPan.ToolTip"));
            this.ptbDisplayPan.Value = 500;
            this.ptbDisplayPan.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbDisplayPan_Scroll);
            this.ptbDisplayPan.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ptbDisplayPan_MouseDown);
            this.ptbDisplayPan.MouseUp += new System.Windows.Forms.MouseEventHandler(this.ptbDisplayPan_MouseUp);
            // 
            // ptbFilterShift
            // 
            resources.ApplyResources(this.ptbFilterShift, "ptbFilterShift");
            this.ptbFilterShift.HeadImage = null;
            this.ptbFilterShift.LargeChange = 1;
            this.ptbFilterShift.Maximum = 1000;
            this.ptbFilterShift.Minimum = -1000;
            this.ptbFilterShift.Name = "ptbFilterShift";
            this.ptbFilterShift.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbFilterShift.SmallChange = 1;
            this.ptbFilterShift.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbFilterShift, resources.GetString("ptbFilterShift.ToolTip"));
            this.ptbFilterShift.Value = 0;
            this.ptbFilterShift.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbFilterShift_Scroll);
            // 
            // ptbFilterWidth
            // 
            resources.ApplyResources(this.ptbFilterWidth, "ptbFilterWidth");
            this.ptbFilterWidth.HeadImage = null;
            this.ptbFilterWidth.LargeChange = 1;
            this.ptbFilterWidth.Maximum = 15000;
            this.ptbFilterWidth.Minimum = 0;
            this.ptbFilterWidth.Name = "ptbFilterWidth";
            this.ptbFilterWidth.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbFilterWidth.SmallChange = 1;
            this.ptbFilterWidth.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbFilterWidth, resources.GetString("ptbFilterWidth.ToolTip"));
            this.ptbFilterWidth.Value = 10;
            this.ptbFilterWidth.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbFilterWidth_Scroll);
            // 
            // picMultiMeterDigital
            // 
            this.picMultiMeterDigital.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.picMultiMeterDigital, "picMultiMeterDigital");
            this.picMultiMeterDigital.Name = "picMultiMeterDigital";
            this.picMultiMeterDigital.TabStop = false;
            this.toolTip1.SetToolTip(this.picMultiMeterDigital, resources.GetString("picMultiMeterDigital.ToolTip"));
            this.picMultiMeterDigital.Paint += new System.Windows.Forms.PaintEventHandler(this.picMultiMeterDigital_Paint);
            this.picMultiMeterDigital.MouseUp += new System.Windows.Forms.MouseEventHandler(this.picMultiMeterDigital_MouseUp);
            // 
            // picRX2Meter
            // 
            this.picRX2Meter.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.picRX2Meter, "picRX2Meter");
            this.picRX2Meter.Name = "picRX2Meter";
            this.picRX2Meter.TabStop = false;
            this.toolTip1.SetToolTip(this.picRX2Meter, resources.GetString("picRX2Meter.ToolTip"));
            this.picRX2Meter.Click += new System.EventHandler(this.picRX2Meter_MouseUp);
            this.picRX2Meter.Paint += new System.Windows.Forms.PaintEventHandler(this.picRX2Meter_Paint);
            this.picRX2Meter.MouseUp += new System.Windows.Forms.MouseEventHandler(this.picRX2Meter_MouseUp);
            // 
            // txtNOAA2
            // 
            this.txtNOAA2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.txtNOAA2.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtNOAA2.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtNOAA2, "txtNOAA2");
            this.txtNOAA2.ForeColor = System.Drawing.Color.White;
            this.txtNOAA2.Name = "txtNOAA2";
            this.txtNOAA2.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtNOAA2, resources.GetString("txtNOAA2.ToolTip"));
            this.txtNOAA2.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtNOAA_MouseDown);
            this.txtNOAA2.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // txtNOAA
            // 
            this.txtNOAA.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.txtNOAA.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtNOAA.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtNOAA, "txtNOAA");
            this.txtNOAA.ForeColor = System.Drawing.Color.White;
            this.txtNOAA.Name = "txtNOAA";
            this.txtNOAA.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtNOAA, resources.GetString("txtNOAA.ToolTip"));
            this.txtNOAA.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtNOAA_MouseDown);
            this.txtNOAA.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // lblDisplayZoom
            // 
            this.lblDisplayZoom.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblDisplayZoom, "lblDisplayZoom");
            this.lblDisplayZoom.Name = "lblDisplayZoom";
            this.toolTip1.SetToolTip(this.lblDisplayZoom, resources.GetString("lblDisplayZoom.ToolTip"));
            this.lblDisplayZoom.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lblDisplayZoom_MouseDown);
            // 
            // lblDisplayPan
            // 
            this.lblDisplayPan.BackColor = System.Drawing.Color.Black;
            this.lblDisplayPan.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblDisplayPan, "lblDisplayPan");
            this.lblDisplayPan.Name = "lblDisplayPan";
            this.toolTip1.SetToolTip(this.lblDisplayPan, resources.GetString("lblDisplayPan.ToolTip"));
            this.lblDisplayPan.UseVisualStyleBackColor = false;
            this.lblDisplayPan.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lblDisplayPan_MouseDown);
            // 
            // udTXFilterLow
            // 
            this.udTXFilterLow.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            resources.ApplyResources(this.udTXFilterLow, "udTXFilterLow");
            this.udTXFilterLow.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udTXFilterLow.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udTXFilterLow.Maximum = new decimal(new int[] {
            20000,
            0,
            0,
            0});
            this.udTXFilterLow.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udTXFilterLow.Name = "udTXFilterLow";
            this.toolTip1.SetToolTip(this.udTXFilterLow, resources.GetString("udTXFilterLow.ToolTip"));
            this.udTXFilterLow.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udTXFilterLow.ValueChanged += new System.EventHandler(this.udTXFilterLow_ValueChanged);
            // 
            // udTXFilterHigh
            // 
            this.udTXFilterHigh.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            resources.ApplyResources(this.udTXFilterHigh, "udTXFilterHigh");
            this.udTXFilterHigh.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.udTXFilterHigh.Increment = new decimal(new int[] {
            10,
            0,
            0,
            0});
            this.udTXFilterHigh.Maximum = new decimal(new int[] {
            20000,
            0,
            0,
            0});
            this.udTXFilterHigh.Minimum = new decimal(new int[] {
            0,
            0,
            0,
            0});
            this.udTXFilterHigh.Name = "udTXFilterHigh";
            this.toolTip1.SetToolTip(this.udTXFilterHigh, resources.GetString("udTXFilterHigh.ToolTip"));
            this.udTXFilterHigh.Value = new decimal(new int[] {
            6000,
            0,
            0,
            0});
            this.udTXFilterHigh.ValueChanged += new System.EventHandler(this.udTXFilterHigh_ValueChanged);
            // 
            // chkBoxMuteSpk
            // 
            resources.ApplyResources(this.chkBoxMuteSpk, "chkBoxMuteSpk");
            this.chkBoxMuteSpk.Name = "chkBoxMuteSpk";
            this.toolTip1.SetToolTip(this.chkBoxMuteSpk, resources.GetString("chkBoxMuteSpk.ToolTip"));
            this.chkBoxMuteSpk.CheckedChanged += new System.EventHandler(this.chkBoxMuteSpk_CheckedChanged);
            // 
            // chkBoxDrive
            // 
            resources.ApplyResources(this.chkBoxDrive, "chkBoxDrive");
            this.chkBoxDrive.Name = "chkBoxDrive";
            this.toolTip1.SetToolTip(this.chkBoxDrive, resources.GetString("chkBoxDrive.ToolTip"));
            this.chkBoxDrive.CheckedChanged += new System.EventHandler(this.chkBoxDrive_CheckedChanged);
            // 
            // lblPWR
            // 
            resources.ApplyResources(this.lblPWR, "lblPWR");
            this.lblPWR.ForeColor = System.Drawing.Color.White;
            this.lblPWR.Name = "lblPWR";
            this.toolTip1.SetToolTip(this.lblPWR, resources.GetString("lblPWR.ToolTip"));
            this.lblPWR.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lblPWR_MouseDown);
            // 
            // labelTS5
            // 
            this.labelTS5.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.labelTS5, "labelTS5");
            this.labelTS5.Name = "labelTS5";
            this.toolTip1.SetToolTip(this.labelTS5, resources.GetString("labelTS5.ToolTip"));
            this.labelTS5.MouseUp += new System.Windows.Forms.MouseEventHandler(this.labelTS5_MouseUp);
            // 
            // textBox1
            // 
            resources.ApplyResources(this.textBox1, "textBox1");
            this.textBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.textBox1.Cursor = System.Windows.Forms.Cursors.Default;
            this.textBox1.ForeColor = System.Drawing.Color.LightYellow;
            this.textBox1.HideSelection = false;
            this.textBox1.Name = "textBox1";
            this.textBox1.TabStop = false;
            this.toolTip1.SetToolTip(this.textBox1, resources.GetString("textBox1.ToolTip"));
            this.textBox1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.textBox1_MouseDown);
            this.textBox1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.textBox1_MouseUp);
            this.textBox1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // buttonAdd
            // 
            resources.ApplyResources(this.buttonAdd, "buttonAdd");
            this.buttonAdd.BackColor = System.Drawing.SystemColors.ButtonFace;
            this.buttonAdd.ForeColor = System.Drawing.Color.Black;
            this.buttonAdd.Name = "buttonAdd";
            this.toolTip1.SetToolTip(this.buttonAdd, resources.GetString("buttonAdd.ToolTip"));
            this.buttonAdd.UseVisualStyleBackColor = false;
            this.buttonAdd.Click += new System.EventHandler(this.buttonAdd_Click);
            // 
            // buttonSort
            // 
            resources.ApplyResources(this.buttonSort, "buttonSort");
            this.buttonSort.BackColor = System.Drawing.SystemColors.ButtonFace;
            this.buttonSort.ForeColor = System.Drawing.Color.Black;
            this.buttonSort.Name = "buttonSort";
            this.toolTip1.SetToolTip(this.buttonSort, resources.GetString("buttonSort.ToolTip"));
            this.buttonSort.UseVisualStyleBackColor = false;
            this.buttonSort.Click += new System.EventHandler(this.buttonSort_Click);
            // 
            // buttonDel
            // 
            resources.ApplyResources(this.buttonDel, "buttonDel");
            this.buttonDel.BackColor = System.Drawing.SystemColors.ButtonFace;
            this.buttonDel.ForeColor = System.Drawing.Color.Black;
            this.buttonDel.Name = "buttonDel";
            this.toolTip1.SetToolTip(this.buttonDel, resources.GetString("buttonDel.ToolTip"));
            this.buttonDel.UseVisualStyleBackColor = false;
            this.buttonDel.Click += new System.EventHandler(this.buttonDel_Click);
            // 
            // txtTimer
            // 
            this.txtTimer.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.txtTimer.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtTimer.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtTimer, "txtTimer");
            this.txtTimer.ForeColor = System.Drawing.Color.White;
            this.txtTimer.Name = "txtTimer";
            this.txtTimer.ReadOnly = true;
            this.toolTip1.SetToolTip(this.txtTimer, resources.GetString("txtTimer.ToolTip"));
            this.txtTimer.KeyDown += new System.Windows.Forms.KeyEventHandler(this.txtTimer_KeyDown);
            this.txtTimer.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtTimer_MouseDown);
            this.txtTimer.MouseUp += new System.Windows.Forms.MouseEventHandler(this.txtTimer_MouseUp);
            this.txtTimer.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // buttonCQ
            // 
            resources.ApplyResources(this.buttonCQ, "buttonCQ");
            this.buttonCQ.BackColor = System.Drawing.Color.Blue;
            this.buttonCQ.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.buttonCQ.Name = "buttonCQ";
            this.toolTip1.SetToolTip(this.buttonCQ, resources.GetString("buttonCQ.ToolTip"));
            this.buttonCQ.UseVisualStyleBackColor = false;
            this.buttonCQ.Click += new System.EventHandler(this.btnTrack_Click);
            // 
            // buttonCall
            // 
            resources.ApplyResources(this.buttonCall, "buttonCall");
            this.buttonCall.BackColor = System.Drawing.Color.Blue;
            this.buttonCall.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.buttonCall.Name = "buttonCall";
            this.toolTip1.SetToolTip(this.buttonCall, resources.GetString("buttonCall.ToolTip"));
            this.buttonCall.UseVisualStyleBackColor = false;
            this.buttonCall.Click += new System.EventHandler(this.buttonCall_Click);
            // 
            // ptbTune
            // 
            this.ptbTune.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.ptbTune, "ptbTune");
            this.ptbTune.HeadImage = null;
            this.ptbTune.LargeChange = 1;
            this.ptbTune.Maximum = 100;
            this.ptbTune.Minimum = 0;
            this.ptbTune.Name = "ptbTune";
            this.ptbTune.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbTune.SmallChange = 1;
            this.ptbTune.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbTune, resources.GetString("ptbTune.ToolTip"));
            this.ptbTune.Value = 50;
            this.ptbTune.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbTune_Scroll);
            // 
            // lblTUNE
            // 
            resources.ApplyResources(this.lblTUNE, "lblTUNE");
            this.lblTUNE.ForeColor = System.Drawing.Color.White;
            this.lblTUNE.Name = "lblTUNE";
            this.toolTip1.SetToolTip(this.lblTUNE, resources.GetString("lblTUNE.ToolTip"));
            this.lblTUNE.MouseUp += new System.Windows.Forms.MouseEventHandler(this.lblTUNE_MouseUp);
            // 
            // ptbMON
            // 
            resources.ApplyResources(this.ptbMON, "ptbMON");
            this.ptbMON.HeadImage = null;
            this.ptbMON.LargeChange = 1;
            this.ptbMON.Maximum = 100;
            this.ptbMON.Minimum = 0;
            this.ptbMON.Name = "ptbMON";
            this.ptbMON.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbMON.SmallChange = 1;
            this.ptbMON.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbMON, resources.GetString("ptbMON.ToolTip"));
            this.ptbMON.Value = 50;
            this.ptbMON.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbMON_Scroll);
            // 
            // lblMON
            // 
            this.lblMON.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblMON, "lblMON");
            this.lblMON.Name = "lblMON";
            this.toolTip1.SetToolTip(this.lblMON, resources.GetString("lblMON.ToolTip"));
            this.lblMON.MouseUp += new System.Windows.Forms.MouseEventHandler(this.lblMON_MouseUp);
            // 
            // lblAF
            // 
            this.lblAF.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblAF, "lblAF");
            this.lblAF.Name = "lblAF";
            this.toolTip1.SetToolTip(this.lblAF, resources.GetString("lblAF.ToolTip"));
            this.lblAF.MouseUp += new System.Windows.Forms.MouseEventHandler(this.lblAF_MouseUp);
            // 
            // ptbMic
            // 
            resources.ApplyResources(this.ptbMic, "ptbMic");
            this.ptbMic.HeadImage = null;
            this.ptbMic.LargeChange = 1;
            this.ptbMic.Maximum = 70;
            this.ptbMic.Minimum = 0;
            this.ptbMic.Name = "ptbMic";
            this.ptbMic.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbMic.SmallChange = 1;
            this.ptbMic.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbMic, resources.GetString("ptbMic.ToolTip"));
            this.ptbMic.Value = 10;
            this.ptbMic.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbMic_Scroll);
            this.ptbMic.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ptbMic_MouseDown);
            // 
            // ptbNoiseGate
            // 
            resources.ApplyResources(this.ptbNoiseGate, "ptbNoiseGate");
            this.ptbNoiseGate.HeadImage = null;
            this.ptbNoiseGate.LargeChange = 1;
            this.ptbNoiseGate.Maximum = 0;
            this.ptbNoiseGate.Minimum = -160;
            this.ptbNoiseGate.Name = "ptbNoiseGate";
            this.ptbNoiseGate.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbNoiseGate.SmallChange = 1;
            this.ptbNoiseGate.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbNoiseGate, resources.GetString("ptbNoiseGate.ToolTip"));
            this.ptbNoiseGate.Value = -40;
            this.ptbNoiseGate.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbNoiseGate_Scroll);
            // 
            // ptbCPDR
            // 
            resources.ApplyResources(this.ptbCPDR, "ptbCPDR");
            this.ptbCPDR.HeadImage = null;
            this.ptbCPDR.LargeChange = 1;
            this.ptbCPDR.Maximum = 10;
            this.ptbCPDR.Minimum = 0;
            this.ptbCPDR.Name = "ptbCPDR";
            this.ptbCPDR.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbCPDR.SmallChange = 1;
            this.ptbCPDR.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbCPDR, resources.GetString("ptbCPDR.ToolTip"));
            this.ptbCPDR.Value = 1;
            this.ptbCPDR.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbCPDR_Scroll);
            this.ptbCPDR.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ptbCPDR_MouseDown);
            // 
            // ptbDX
            // 
            resources.ApplyResources(this.ptbDX, "ptbDX");
            this.ptbDX.HeadImage = null;
            this.ptbDX.LargeChange = 1;
            this.ptbDX.Maximum = 10;
            this.ptbDX.Minimum = 0;
            this.ptbDX.Name = "ptbDX";
            this.ptbDX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbDX.SmallChange = 1;
            this.ptbDX.TabStop = false;
            this.toolTip1.SetToolTip(this.ptbDX, resources.GetString("ptbDX.ToolTip"));
            this.ptbDX.Value = 10;
            this.ptbDX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbDX_Scroll);
            this.ptbDX.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ptbDX_MouseDown);
            // 
            // comboCWTXProfile
            // 
            this.comboCWTXProfile.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboCWTXProfile.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboCWTXProfile.DropDownWidth = 96;
            resources.ApplyResources(this.comboCWTXProfile, "comboCWTXProfile");
            this.comboCWTXProfile.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.comboCWTXProfile.Name = "comboCWTXProfile";
            this.toolTip1.SetToolTip(this.comboCWTXProfile, resources.GetString("comboCWTXProfile.ToolTip"));
            this.comboCWTXProfile.SelectedIndexChanged += new System.EventHandler(this.comboCWTXProfile_SelectedIndexChanged);
            this.comboCWTXProfile.MouseDown += new System.Windows.Forms.MouseEventHandler(this.comboCWTXProfile_MouseDown);
            // 
            // timer_clock
            // 
            this.timer_clock.Enabled = true;
            this.timer_clock.Tick += new System.EventHandler(this.timer_clock_Tick);
            // 
            // contextMenuStripFilterRX1
            // 
            this.contextMenuStripFilterRX1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItemRX1FilterConfigure,
            this.toolStripMenuItemRX1FilterReset});
            this.contextMenuStripFilterRX1.Name = "contextMenuStripFilterRX1";
            resources.ApplyResources(this.contextMenuStripFilterRX1, "contextMenuStripFilterRX1");
            // 
            // toolStripMenuItemRX1FilterConfigure
            // 
            this.toolStripMenuItemRX1FilterConfigure.Name = "toolStripMenuItemRX1FilterConfigure";
            resources.ApplyResources(this.toolStripMenuItemRX1FilterConfigure, "toolStripMenuItemRX1FilterConfigure");
            this.toolStripMenuItemRX1FilterConfigure.Click += new System.EventHandler(this.toolStripMenuItemRX1FilterConfigure_Click);
            // 
            // toolStripMenuItemRX1FilterReset
            // 
            this.toolStripMenuItemRX1FilterReset.Name = "toolStripMenuItemRX1FilterReset";
            resources.ApplyResources(this.toolStripMenuItemRX1FilterReset, "toolStripMenuItemRX1FilterReset");
            this.toolStripMenuItemRX1FilterReset.Click += new System.EventHandler(this.toolStripMenuItemRX1FilterReset_Click);
            // 
            // contextMenuStripFilterRX2
            // 
            this.contextMenuStripFilterRX2.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItemRX2FilterConfigure,
            this.toolStripMenuItemRX2FilterReset});
            this.contextMenuStripFilterRX2.Name = "contextMenuStripFilterRX2";
            resources.ApplyResources(this.contextMenuStripFilterRX2, "contextMenuStripFilterRX2");
            // 
            // toolStripMenuItemRX2FilterConfigure
            // 
            this.toolStripMenuItemRX2FilterConfigure.Name = "toolStripMenuItemRX2FilterConfigure";
            resources.ApplyResources(this.toolStripMenuItemRX2FilterConfigure, "toolStripMenuItemRX2FilterConfigure");
            this.toolStripMenuItemRX2FilterConfigure.Click += new System.EventHandler(this.toolStripMenuItemRX2FilterConfigure_Click);
            // 
            // toolStripMenuItemRX2FilterReset
            // 
            this.toolStripMenuItemRX2FilterReset.Name = "toolStripMenuItemRX2FilterReset";
            resources.ApplyResources(this.toolStripMenuItemRX2FilterReset, "toolStripMenuItemRX2FilterReset");
            this.toolStripMenuItemRX2FilterReset.Click += new System.EventHandler(this.toolStripMenuItemRX2FilterReset_Click);
            // 
            // timer_navigate
            // 
            this.timer_navigate.Tick += new System.EventHandler(this.timer_navigate_Tick);
            // 
            // timer2
            // 
            this.timer2.Interval = 200;
            this.timer2.Tick += new System.EventHandler(this.timer2_Tick);
            // 
            // contextMenuStripNotch
            // 
            this.contextMenuStripNotch.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripNotchDelete,
            this.toolStripNotchRemember,
            this.toolStripSeparator1,
            this.toolStripNotchNormal,
            this.toolStripNotchDeep,
            this.toolStripNotchVeryDeep});
            this.contextMenuStripNotch.Name = "contextMenuStripNotch";
            resources.ApplyResources(this.contextMenuStripNotch, "contextMenuStripNotch");
            // 
            // toolStripNotchDelete
            // 
            this.toolStripNotchDelete.Name = "toolStripNotchDelete";
            resources.ApplyResources(this.toolStripNotchDelete, "toolStripNotchDelete");
            this.toolStripNotchDelete.Click += new System.EventHandler(this.toolStripNotchDelete_Click);
            // 
            // toolStripNotchRemember
            // 
            this.toolStripNotchRemember.Name = "toolStripNotchRemember";
            resources.ApplyResources(this.toolStripNotchRemember, "toolStripNotchRemember");
            this.toolStripNotchRemember.Click += new System.EventHandler(this.toolStripNotchRemember_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            resources.ApplyResources(this.toolStripSeparator1, "toolStripSeparator1");
            // 
            // toolStripNotchNormal
            // 
            this.toolStripNotchNormal.Name = "toolStripNotchNormal";
            resources.ApplyResources(this.toolStripNotchNormal, "toolStripNotchNormal");
            this.toolStripNotchNormal.Click += new System.EventHandler(this.toolStripNotchNormal_Click);
            // 
            // toolStripNotchDeep
            // 
            this.toolStripNotchDeep.Checked = true;
            this.toolStripNotchDeep.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolStripNotchDeep.Name = "toolStripNotchDeep";
            resources.ApplyResources(this.toolStripNotchDeep, "toolStripNotchDeep");
            this.toolStripNotchDeep.Click += new System.EventHandler(this.toolStripNotchDeep_Click);
            // 
            // toolStripNotchVeryDeep
            // 
            this.toolStripNotchVeryDeep.Name = "toolStripNotchVeryDeep";
            resources.ApplyResources(this.toolStripNotchVeryDeep, "toolStripNotchVeryDeep");
            this.toolStripNotchVeryDeep.Click += new System.EventHandler(this.toolStripNotchVeryDeep_Click);
            // 
            // timerNotchZoom
            // 
            this.timerNotchZoom.Interval = 1000;
            this.timerNotchZoom.Tick += new System.EventHandler(this.timerNotchZoom_Tick);
            // 
            // menuStrip1
            // 
            resources.ApplyResources(this.menuStrip1, "menuStrip1");
            this.menuStrip1.BackColor = System.Drawing.Color.Transparent;
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.setupToolStripMenuItem,
            this.memoryToolStripMenuItem,
            this.waveToolStripMenuItem,
            this.equalizerToolStripMenuItem,
            this.xVTRsToolStripMenuItem,
            this.cWXToolStripMenuItem,
            this.uCBToolStripMenuItem,
            this.mixerToolStripMenuItem,
            this.antennaToolStripMenuItem,
            this.relaysToolStripMenuItem,
            this.aTUToolStripMenuItem,
            this.flexControlToolStripMenuItem,
            this.eSCToolStripMenuItem,
            this.GrayMenuItem,
            this.TXIDMenuItem,
            this.callsignTextBox,
            this.ScanMenuItem,
            this.spotterMenu,
            this.trackMenuItem1,
            this.herosToolStripMenuItem,
            this.aboutToolStripMenuItem,
            this.remoteProfilesToolStripMenuItem,
            this.reportBugToolStripMenuItem});
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.ShowItemToolTips = true;
            // 
            // setupToolStripMenuItem
            // 
            this.setupToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.setupToolStripMenuItem.Name = "setupToolStripMenuItem";
            resources.ApplyResources(this.setupToolStripMenuItem, "setupToolStripMenuItem");
            this.setupToolStripMenuItem.Click += new System.EventHandler(this.setupToolStripMenuItem_Click);
            // 
            // memoryToolStripMenuItem
            // 
            this.memoryToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.memoryToolStripMenuItem.Name = "memoryToolStripMenuItem";
            resources.ApplyResources(this.memoryToolStripMenuItem, "memoryToolStripMenuItem");
            this.memoryToolStripMenuItem.Click += new System.EventHandler(this.memoryToolStripMenuItem_Click);
            // 
            // waveToolStripMenuItem
            // 
            this.waveToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.waveToolStripMenuItem.Name = "waveToolStripMenuItem";
            resources.ApplyResources(this.waveToolStripMenuItem, "waveToolStripMenuItem");
            this.waveToolStripMenuItem.Click += new System.EventHandler(this.waveToolStripMenuItem_Click);
            // 
            // equalizerToolStripMenuItem
            // 
            this.equalizerToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.equalizerToolStripMenuItem.Name = "equalizerToolStripMenuItem";
            resources.ApplyResources(this.equalizerToolStripMenuItem, "equalizerToolStripMenuItem");
            this.equalizerToolStripMenuItem.Click += new System.EventHandler(this.equalizerToolStripMenuItem_Click);
            // 
            // xVTRsToolStripMenuItem
            // 
            this.xVTRsToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.xVTRsToolStripMenuItem.Name = "xVTRsToolStripMenuItem";
            resources.ApplyResources(this.xVTRsToolStripMenuItem, "xVTRsToolStripMenuItem");
            this.xVTRsToolStripMenuItem.Click += new System.EventHandler(this.xVTRsToolStripMenuItem_Click);
            // 
            // cWXToolStripMenuItem
            // 
            this.cWXToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.cWXToolStripMenuItem.Name = "cWXToolStripMenuItem";
            resources.ApplyResources(this.cWXToolStripMenuItem, "cWXToolStripMenuItem");
            this.cWXToolStripMenuItem.Click += new System.EventHandler(this.cWXToolStripMenuItem_Click);
            // 
            // uCBToolStripMenuItem
            // 
            this.uCBToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.uCBToolStripMenuItem.Name = "uCBToolStripMenuItem";
            resources.ApplyResources(this.uCBToolStripMenuItem, "uCBToolStripMenuItem");
            this.uCBToolStripMenuItem.Click += new System.EventHandler(this.uCBToolStripMenuItem_Click);
            // 
            // mixerToolStripMenuItem
            // 
            this.mixerToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.mixerToolStripMenuItem.Name = "mixerToolStripMenuItem";
            resources.ApplyResources(this.mixerToolStripMenuItem, "mixerToolStripMenuItem");
            this.mixerToolStripMenuItem.Click += new System.EventHandler(this.mixerToolStripMenuItem_Click);
            // 
            // antennaToolStripMenuItem
            // 
            this.antennaToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.antennaToolStripMenuItem.Name = "antennaToolStripMenuItem";
            resources.ApplyResources(this.antennaToolStripMenuItem, "antennaToolStripMenuItem");
            this.antennaToolStripMenuItem.Click += new System.EventHandler(this.antennaToolStripMenuItem_Click);
            // 
            // relaysToolStripMenuItem
            // 
            this.relaysToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.relaysToolStripMenuItem.Name = "relaysToolStripMenuItem";
            resources.ApplyResources(this.relaysToolStripMenuItem, "relaysToolStripMenuItem");
            this.relaysToolStripMenuItem.Click += new System.EventHandler(this.relaysToolStripMenuItem_Click);
            // 
            // aTUToolStripMenuItem
            // 
            this.aTUToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.aTUToolStripMenuItem.Name = "aTUToolStripMenuItem";
            resources.ApplyResources(this.aTUToolStripMenuItem, "aTUToolStripMenuItem");
            this.aTUToolStripMenuItem.Click += new System.EventHandler(this.aTUToolStripMenuItem_Click);
            // 
            // flexControlToolStripMenuItem
            // 
            this.flexControlToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.flexControlToolStripMenuItem.Name = "flexControlToolStripMenuItem";
            resources.ApplyResources(this.flexControlToolStripMenuItem, "flexControlToolStripMenuItem");
            this.flexControlToolStripMenuItem.Click += new System.EventHandler(this.flexControlToolStripMenuItem_Click);
            // 
            // eSCToolStripMenuItem
            // 
            resources.ApplyResources(this.eSCToolStripMenuItem, "eSCToolStripMenuItem");
            this.eSCToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.eSCToolStripMenuItem.Name = "eSCToolStripMenuItem";
            this.eSCToolStripMenuItem.Click += new System.EventHandler(this.eSCToolStripMenuItem_Click);
            // 
            // GrayMenuItem
            // 
            this.GrayMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.GrayMenuItem.Name = "GrayMenuItem";
            resources.ApplyResources(this.GrayMenuItem, "GrayMenuItem");
            this.GrayMenuItem.Click += new System.EventHandler(this.GrayMenuItem_Click);
            // 
            // TXIDMenuItem
            // 
            resources.ApplyResources(this.TXIDMenuItem, "TXIDMenuItem");
            this.TXIDMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.TXIDMenuItem.Name = "TXIDMenuItem";
            this.TXIDMenuItem.CheckedChanged += new System.EventHandler(this.TXIDMenuItem_CheckedChanged);
            this.TXIDMenuItem.MouseDown += new System.Windows.Forms.MouseEventHandler(this.TXIDMenuItem_MouseDown);
            this.TXIDMenuItem.MouseHover += new System.EventHandler(this.TXIDMenuItem_MouseHover);
            // 
            // callsignTextBox
            // 
            resources.ApplyResources(this.callsignTextBox, "callsignTextBox");
            this.callsignTextBox.BackColor = System.Drawing.Color.WhiteSmoke;
            this.callsignTextBox.Name = "callsignTextBox";
            this.callsignTextBox.Overflow = System.Windows.Forms.ToolStripItemOverflow.Never;
            this.callsignTextBox.Leave += new System.EventHandler(this.callsignTextBox_Leave);
            this.callsignTextBox.MouseDown += new System.Windows.Forms.MouseEventHandler(this.callsignTextBox_MouseDown);
            this.callsignTextBox.MouseEnter += new System.EventHandler(this.callsignTextBox_MouseEnter);
            this.callsignTextBox.MouseLeave += new System.EventHandler(this.callsignTextBox_MouseLeave);
            this.callsignTextBox.TextChanged += new System.EventHandler(this.callsignTextBox_TextChanged_1);
            // 
            // ScanMenuItem
            // 
            this.ScanMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.ScanMenuItem.Name = "ScanMenuItem";
            resources.ApplyResources(this.ScanMenuItem, "ScanMenuItem");
            this.ScanMenuItem.Click += new System.EventHandler(this.ScanMenuItem_Click);
            // 
            // spotterMenu
            // 
            resources.ApplyResources(this.spotterMenu, "spotterMenu");
            this.spotterMenu.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.spotterMenu.Name = "spotterMenu";
            this.spotterMenu.CheckedChanged += new System.EventHandler(this.spotterMenu_CheckedChanged);
            this.spotterMenu.Click += new System.EventHandler(this.spotterMenu_Click);
            this.spotterMenu.MouseDown += new System.Windows.Forms.MouseEventHandler(this.spotterMenu_MouseDown);
            // 
            // trackMenuItem1
            // 
            resources.ApplyResources(this.trackMenuItem1, "trackMenuItem1");
            this.trackMenuItem1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.trackMenuItem1.Name = "trackMenuItem1";
            this.trackMenuItem1.Click += new System.EventHandler(this.trackMenuItem1_Click);
            this.trackMenuItem1.MouseEnter += new System.EventHandler(this.trackMenuItem1_MouseEnter);
            this.trackMenuItem1.MouseLeave += new System.EventHandler(this.trackMenuItem1_MouseLeave);
            // 
            // herosToolStripMenuItem
            // 
            this.herosToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.herosToolStripMenuItem.Name = "herosToolStripMenuItem";
            resources.ApplyResources(this.herosToolStripMenuItem, "herosToolStripMenuItem");
            this.herosToolStripMenuItem.Click += new System.EventHandler(this.herosToolStripMenuItem_Click);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
            resources.ApplyResources(this.aboutToolStripMenuItem, "aboutToolStripMenuItem");
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // remoteProfilesToolStripMenuItem
            // 
            this.remoteProfilesToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.remoteProfilesToolStripMenuItem.Name = "remoteProfilesToolStripMenuItem";
            resources.ApplyResources(this.remoteProfilesToolStripMenuItem, "remoteProfilesToolStripMenuItem");
            this.remoteProfilesToolStripMenuItem.Click += new System.EventHandler(this.remoteProfilesToolStripMenuItem_Click);
            // 
            // reportBugToolStripMenuItem
            // 
            this.reportBugToolStripMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.reportBugToolStripMenuItem.Name = "reportBugToolStripMenuItem";
            resources.ApplyResources(this.reportBugToolStripMenuItem, "reportBugToolStripMenuItem");
            this.reportBugToolStripMenuItem.Click += new System.EventHandler(this.reportBugToolStripMenuItem_Click);
            // 
            // openFileDialog1
            // 
            this.openFileDialog1.FileName = "QuickAudio";
            // 
            // picRX2Squelch
            // 
            this.picRX2Squelch.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picRX2Squelch, "picRX2Squelch");
            this.picRX2Squelch.Name = "picRX2Squelch";
            this.picRX2Squelch.TabStop = false;
            this.picRX2Squelch.Paint += new System.Windows.Forms.PaintEventHandler(this.picRX2Squelch_Paint);
            // 
            // picSquelch
            // 
            this.picSquelch.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picSquelch, "picSquelch");
            this.picSquelch.Name = "picSquelch";
            this.picSquelch.TabStop = false;
            this.picSquelch.Paint += new System.Windows.Forms.PaintEventHandler(this.picSquelch_Paint);
            // 
            // panelBandHF
            // 
            resources.ApplyResources(this.panelBandHF, "panelBandHF");
            this.panelBandHF.BackColor = System.Drawing.Color.Transparent;
            this.panelBandHF.Controls.Add(this.radBandGEN);
            this.panelBandHF.Controls.Add(this.radBandWWV);
            this.panelBandHF.Controls.Add(this.radBand2);
            this.panelBandHF.Controls.Add(this.radBand6);
            this.panelBandHF.Controls.Add(this.radBand10);
            this.panelBandHF.Controls.Add(this.radBand12);
            this.panelBandHF.Controls.Add(this.radBand15);
            this.panelBandHF.Controls.Add(this.radBand17);
            this.panelBandHF.Controls.Add(this.radBand20);
            this.panelBandHF.Controls.Add(this.radBand30);
            this.panelBandHF.Controls.Add(this.radBand40);
            this.panelBandHF.Controls.Add(this.radBand60);
            this.panelBandHF.Controls.Add(this.radBand160);
            this.panelBandHF.Controls.Add(this.radBand80);
            this.panelBandHF.Controls.Add(this.btnBandVHF);
            this.panelBandHF.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelBandHF.Name = "panelBandHF";
            this.panelBandHF.VisibleChanged += new System.EventHandler(this.panelBandHF_VisibleChanged);
            this.panelBandHF.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // panelBandVHF
            // 
            resources.ApplyResources(this.panelBandVHF, "panelBandVHF");
            this.panelBandVHF.BackColor = System.Drawing.Color.Transparent;
            this.panelBandVHF.Controls.Add(this.radBandVHF13);
            this.panelBandVHF.Controls.Add(this.radBandVHF12);
            this.panelBandVHF.Controls.Add(this.radBandVHF11);
            this.panelBandVHF.Controls.Add(this.radBandVHF10);
            this.panelBandVHF.Controls.Add(this.radBandVHF9);
            this.panelBandVHF.Controls.Add(this.radBandVHF8);
            this.panelBandVHF.Controls.Add(this.radBandVHF7);
            this.panelBandVHF.Controls.Add(this.radBandVHF6);
            this.panelBandVHF.Controls.Add(this.radBandVHF5);
            this.panelBandVHF.Controls.Add(this.radBandVHF4);
            this.panelBandVHF.Controls.Add(this.radBandVHF3);
            this.panelBandVHF.Controls.Add(this.radBandVHF2);
            this.panelBandVHF.Controls.Add(this.radBandVHF1);
            this.panelBandVHF.Controls.Add(this.radBandVHF0);
            this.panelBandVHF.Controls.Add(this.btnBandHF);
            this.panelBandVHF.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelBandVHF.Name = "panelBandVHF";
            this.panelBandVHF.VisibleChanged += new System.EventHandler(this.panelBandVHF_VisibleChanged);
            this.panelBandVHF.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // radBandVHF13
            // 
            resources.ApplyResources(this.radBandVHF13, "radBandVHF13");
            this.radBandVHF13.FlatAppearance.BorderSize = 0;
            this.radBandVHF13.ForeColor = System.Drawing.Color.White;
            this.radBandVHF13.Name = "radBandVHF13";
            this.radBandVHF13.TabStop = true;
            this.radBandVHF13.UseVisualStyleBackColor = true;
            this.radBandVHF13.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF13.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF13_MouseDown);
            // 
            // radBandVHF12
            // 
            resources.ApplyResources(this.radBandVHF12, "radBandVHF12");
            this.radBandVHF12.FlatAppearance.BorderSize = 0;
            this.radBandVHF12.ForeColor = System.Drawing.Color.White;
            this.radBandVHF12.Name = "radBandVHF12";
            this.radBandVHF12.TabStop = true;
            this.radBandVHF12.UseVisualStyleBackColor = true;
            this.radBandVHF12.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF12.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF12_MouseDown);
            // 
            // radBandVHF11
            // 
            resources.ApplyResources(this.radBandVHF11, "radBandVHF11");
            this.radBandVHF11.FlatAppearance.BorderSize = 0;
            this.radBandVHF11.ForeColor = System.Drawing.Color.White;
            this.radBandVHF11.Name = "radBandVHF11";
            this.radBandVHF11.TabStop = true;
            this.radBandVHF11.UseVisualStyleBackColor = true;
            this.radBandVHF11.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF11.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF11_MouseDown);
            // 
            // radBandVHF10
            // 
            resources.ApplyResources(this.radBandVHF10, "radBandVHF10");
            this.radBandVHF10.FlatAppearance.BorderSize = 0;
            this.radBandVHF10.ForeColor = System.Drawing.Color.White;
            this.radBandVHF10.Name = "radBandVHF10";
            this.radBandVHF10.TabStop = true;
            this.radBandVHF10.UseVisualStyleBackColor = true;
            this.radBandVHF10.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF10.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF10_MouseDown);
            // 
            // radBandVHF9
            // 
            resources.ApplyResources(this.radBandVHF9, "radBandVHF9");
            this.radBandVHF9.FlatAppearance.BorderSize = 0;
            this.radBandVHF9.ForeColor = System.Drawing.Color.White;
            this.radBandVHF9.Name = "radBandVHF9";
            this.radBandVHF9.TabStop = true;
            this.radBandVHF9.UseVisualStyleBackColor = true;
            this.radBandVHF9.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF9.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF9_MouseDown);
            // 
            // radBandVHF8
            // 
            resources.ApplyResources(this.radBandVHF8, "radBandVHF8");
            this.radBandVHF8.FlatAppearance.BorderSize = 0;
            this.radBandVHF8.ForeColor = System.Drawing.Color.White;
            this.radBandVHF8.Name = "radBandVHF8";
            this.radBandVHF8.TabStop = true;
            this.radBandVHF8.UseVisualStyleBackColor = true;
            this.radBandVHF8.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF8.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF8_MouseDown);
            // 
            // radBandVHF7
            // 
            resources.ApplyResources(this.radBandVHF7, "radBandVHF7");
            this.radBandVHF7.FlatAppearance.BorderSize = 0;
            this.radBandVHF7.ForeColor = System.Drawing.Color.White;
            this.radBandVHF7.Name = "radBandVHF7";
            this.radBandVHF7.TabStop = true;
            this.radBandVHF7.UseVisualStyleBackColor = true;
            this.radBandVHF7.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF7.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF7_MouseDown);
            // 
            // radBandVHF6
            // 
            resources.ApplyResources(this.radBandVHF6, "radBandVHF6");
            this.radBandVHF6.FlatAppearance.BorderSize = 0;
            this.radBandVHF6.ForeColor = System.Drawing.Color.White;
            this.radBandVHF6.Name = "radBandVHF6";
            this.radBandVHF6.TabStop = true;
            this.radBandVHF6.UseVisualStyleBackColor = true;
            this.radBandVHF6.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF6.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF6_MouseDown);
            // 
            // radBandVHF5
            // 
            resources.ApplyResources(this.radBandVHF5, "radBandVHF5");
            this.radBandVHF5.FlatAppearance.BorderSize = 0;
            this.radBandVHF5.ForeColor = System.Drawing.Color.White;
            this.radBandVHF5.Name = "radBandVHF5";
            this.radBandVHF5.TabStop = true;
            this.radBandVHF5.UseVisualStyleBackColor = true;
            this.radBandVHF5.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF5.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF5_MouseDown);
            // 
            // radBandVHF4
            // 
            resources.ApplyResources(this.radBandVHF4, "radBandVHF4");
            this.radBandVHF4.FlatAppearance.BorderSize = 0;
            this.radBandVHF4.ForeColor = System.Drawing.Color.White;
            this.radBandVHF4.Name = "radBandVHF4";
            this.radBandVHF4.TabStop = true;
            this.radBandVHF4.UseVisualStyleBackColor = true;
            this.radBandVHF4.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF4.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF4_MouseDown);
            // 
            // radBandVHF3
            // 
            resources.ApplyResources(this.radBandVHF3, "radBandVHF3");
            this.radBandVHF3.FlatAppearance.BorderSize = 0;
            this.radBandVHF3.ForeColor = System.Drawing.Color.White;
            this.radBandVHF3.Name = "radBandVHF3";
            this.radBandVHF3.TabStop = true;
            this.radBandVHF3.UseVisualStyleBackColor = true;
            this.radBandVHF3.CheckedChanged += new System.EventHandler(this.radBandVHF3_CheckedChanged);
            this.radBandVHF3.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF3.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF3_MouseDown);
            // 
            // radBandVHF2
            // 
            resources.ApplyResources(this.radBandVHF2, "radBandVHF2");
            this.radBandVHF2.FlatAppearance.BorderSize = 0;
            this.radBandVHF2.ForeColor = System.Drawing.Color.White;
            this.radBandVHF2.Name = "radBandVHF2";
            this.radBandVHF2.TabStop = true;
            this.radBandVHF2.UseVisualStyleBackColor = true;
            this.radBandVHF2.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF2.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF2_MouseDown);
            // 
            // radBandVHF1
            // 
            resources.ApplyResources(this.radBandVHF1, "radBandVHF1");
            this.radBandVHF1.FlatAppearance.BorderSize = 0;
            this.radBandVHF1.ForeColor = System.Drawing.Color.White;
            this.radBandVHF1.Name = "radBandVHF1";
            this.radBandVHF1.TabStop = true;
            this.radBandVHF1.UseVisualStyleBackColor = true;
            this.radBandVHF1.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF1_MouseDown);
            // 
            // radBandVHF0
            // 
            resources.ApplyResources(this.radBandVHF0, "radBandVHF0");
            this.radBandVHF0.FlatAppearance.BorderSize = 0;
            this.radBandVHF0.ForeColor = System.Drawing.Color.White;
            this.radBandVHF0.Name = "radBandVHF0";
            this.radBandVHF0.TabStop = true;
            this.radBandVHF0.UseVisualStyleBackColor = true;
            this.radBandVHF0.Click += new System.EventHandler(this.radBandVHF_Click);
            this.radBandVHF0.MouseDown += new System.Windows.Forms.MouseEventHandler(this.radBandVHF0_MouseDown);
            // 
            // btnBandHF
            // 
            this.btnBandHF.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnBandHF, "btnBandHF");
            this.btnBandHF.ForeColor = System.Drawing.Color.Yellow;
            this.btnBandHF.Name = "btnBandHF";
            this.btnBandHF.Click += new System.EventHandler(this.btnBandHF_Click);
            // 
            // grpVFOB
            // 
            resources.ApplyResources(this.grpVFOB, "grpVFOB");
            this.grpVFOB.BackColor = System.Drawing.Color.Transparent;
            this.grpVFOB.Controls.Add(this.chkVFOBTX);
            this.grpVFOB.Controls.Add(this.panelVFOBHover);
            this.grpVFOB.Controls.Add(this.txtVFOBLSD);
            this.grpVFOB.Controls.Add(this.txtVFOBMSD);
            this.grpVFOB.Controls.Add(this.txtVFOBBand);
            this.grpVFOB.Controls.Add(this.txtVFOBFreq);
            this.grpVFOB.ForeColor = System.Drawing.Color.White;
            this.grpVFOB.Name = "grpVFOB";
            this.grpVFOB.Paint += new System.Windows.Forms.PaintEventHandler(this.grpVFOB_Paint);
            this.grpVFOB.MouseHover += new System.EventHandler(this.grpVFOB_MouseHover);
            // 
            // panelVFOBHover
            // 
            this.panelVFOBHover.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.panelVFOBHover, "panelVFOBHover");
            this.panelVFOBHover.Name = "panelVFOBHover";
            this.panelVFOBHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelVFOBHover_Paint);
            this.panelVFOBHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelVFOBHover_MouseMove);
            // 
            // txtVFOBLSD
            // 
            this.txtVFOBLSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOBLSD.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOBLSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOBLSD, "txtVFOBLSD");
            this.txtVFOBLSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOBLSD.Name = "txtVFOBLSD";
            this.txtVFOBLSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOBLSD_MouseDown);
            this.txtVFOBLSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOBLSD_MouseMove);
            // 
            // txtVFOBMSD
            // 
            this.txtVFOBMSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOBMSD.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOBMSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOBMSD, "txtVFOBMSD");
            this.txtVFOBMSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOBMSD.Name = "txtVFOBMSD";
            this.txtVFOBMSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOBMSD_MouseDown);
            this.txtVFOBMSD.MouseLeave += new System.EventHandler(this.txtVFOBMSD_MouseLeave);
            this.txtVFOBMSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOBMSD_MouseMove);
            // 
            // txtVFOBBand
            // 
            this.txtVFOBBand.BackColor = System.Drawing.Color.Black;
            this.txtVFOBBand.BorderStyle = System.Windows.Forms.BorderStyle.None;
            resources.ApplyResources(this.txtVFOBBand, "txtVFOBBand");
            this.txtVFOBBand.ForeColor = System.Drawing.Color.Green;
            this.txtVFOBBand.Name = "txtVFOBBand";
            this.txtVFOBBand.ReadOnly = true;
            this.txtVFOBBand.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // txtVFOBFreq
            // 
            this.txtVFOBFreq.BackColor = System.Drawing.Color.Black;
            this.txtVFOBFreq.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOBFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOBFreq, "txtVFOBFreq");
            this.txtVFOBFreq.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOBFreq.Name = "txtVFOBFreq";
            this.txtVFOBFreq.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtVFOBFreq_KeyPress);
            this.txtVFOBFreq.LostFocus += new System.EventHandler(this.txtVFOBFreq_LostFocus);
            this.txtVFOBFreq.MouseLeave += new System.EventHandler(this.txtVFOBFreq_MouseLeave);
            this.txtVFOBFreq.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOBFreq_MouseMove);
            // 
            // grpVFOA
            // 
            resources.ApplyResources(this.grpVFOA, "grpVFOA");
            this.grpVFOA.BackColor = System.Drawing.Color.Transparent;
            this.grpVFOA.Controls.Add(this.chkVFOATX);
            this.grpVFOA.Controls.Add(this.panelVFOASubHover);
            this.grpVFOA.Controls.Add(this.panelVFOAHover);
            this.grpVFOA.Controls.Add(this.txtVFOALSD);
            this.grpVFOA.Controls.Add(this.txtVFOABand);
            this.grpVFOA.Controls.Add(this.txtVFOAMSD);
            this.grpVFOA.Controls.Add(this.txtVFOAFreq);
            this.grpVFOA.Controls.Add(this.btnHidden);
            this.grpVFOA.ForeColor = System.Drawing.Color.White;
            this.grpVFOA.Name = "grpVFOA";
            this.grpVFOA.Paint += new System.Windows.Forms.PaintEventHandler(this.grpVFOA_Paint);
            this.grpVFOA.MouseHover += new System.EventHandler(this.grpVFOA_MouseHover);
            // 
            // panelVFOASubHover
            // 
            this.panelVFOASubHover.BackColor = System.Drawing.Color.Black;
            this.panelVFOASubHover.ForeColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.panelVFOASubHover, "panelVFOASubHover");
            this.panelVFOASubHover.Name = "panelVFOASubHover";
            this.panelVFOASubHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelVFOASubHover_Paint);
            this.panelVFOASubHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelVFOASubHover_MouseMove);
            // 
            // panelVFOAHover
            // 
            this.panelVFOAHover.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.panelVFOAHover, "panelVFOAHover");
            this.panelVFOAHover.Name = "panelVFOAHover";
            this.panelVFOAHover.Paint += new System.Windows.Forms.PaintEventHandler(this.panelVFOAHover_Paint);
            this.panelVFOAHover.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panelVFOAHover_MouseMove);
            // 
            // txtVFOALSD
            // 
            this.txtVFOALSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOALSD.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOALSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOALSD, "txtVFOALSD");
            this.txtVFOALSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOALSD.Name = "txtVFOALSD";
            this.txtVFOALSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOALSD_MouseDown);
            this.txtVFOALSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOALSD_MouseMove);
            // 
            // txtVFOABand
            // 
            this.txtVFOABand.BackColor = System.Drawing.Color.Black;
            this.txtVFOABand.BorderStyle = System.Windows.Forms.BorderStyle.None;
            resources.ApplyResources(this.txtVFOABand, "txtVFOABand");
            this.txtVFOABand.ForeColor = System.Drawing.Color.Green;
            this.txtVFOABand.Name = "txtVFOABand";
            this.txtVFOABand.ReadOnly = true;
            this.txtVFOABand.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtVFOABand_KeyPress);
            this.txtVFOABand.LostFocus += new System.EventHandler(this.txtVFOABand_LostFocus);
            this.txtVFOABand.MouseLeave += new System.EventHandler(this.txtVFOABand_MouseLeave);
            this.txtVFOABand.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOABand_MouseMove);
            // 
            // txtVFOAMSD
            // 
            this.txtVFOAMSD.BackColor = System.Drawing.Color.Black;
            this.txtVFOAMSD.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOAMSD.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOAMSD, "txtVFOAMSD");
            this.txtVFOAMSD.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOAMSD.Name = "txtVFOAMSD";
            this.txtVFOAMSD.MouseDown += new System.Windows.Forms.MouseEventHandler(this.txtVFOAMSD_MouseDown);
            this.txtVFOAMSD.MouseLeave += new System.EventHandler(this.txtVFOAMSD_MouseLeave);
            this.txtVFOAMSD.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOAMSD_MouseMove);
            // 
            // txtVFOAFreq
            // 
            this.txtVFOAFreq.BackColor = System.Drawing.Color.Black;
            this.txtVFOAFreq.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtVFOAFreq.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtVFOAFreq, "txtVFOAFreq");
            this.txtVFOAFreq.ForeColor = System.Drawing.Color.Olive;
            this.txtVFOAFreq.Name = "txtVFOAFreq";
            this.txtVFOAFreq.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtVFOAFreq_KeyPress);
            this.txtVFOAFreq.LostFocus += new System.EventHandler(this.txtVFOAFreq_LostFocus);
            this.txtVFOAFreq.MouseLeave += new System.EventHandler(this.txtVFOAFreq_MouseLeave);
            this.txtVFOAFreq.MouseMove += new System.Windows.Forms.MouseEventHandler(this.txtVFOAFreq_MouseMove);
            // 
            // btnHidden
            // 
            resources.ApplyResources(this.btnHidden, "btnHidden");
            this.btnHidden.Name = "btnHidden";
            // 
            // panelDisplay2
            // 
            resources.ApplyResources(this.panelDisplay2, "panelDisplay2");
            this.panelDisplay2.BackColor = System.Drawing.Color.Transparent;
            this.panelDisplay2.Controls.Add(this.btnTNFAdd);
            this.panelDisplay2.Controls.Add(this.chkTNF);
            this.panelDisplay2.Controls.Add(this.chkDisplayPeak);
            this.panelDisplay2.Controls.Add(this.comboDisplayMode);
            this.panelDisplay2.Controls.Add(this.chkDisplayAVG);
            this.panelDisplay2.Controls.Add(this.label6);
            this.panelDisplay2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelDisplay2.Name = "panelDisplay2";
            // 
            // label6
            // 
            resources.ApplyResources(this.label6, "label6");
            this.label6.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.label6.Name = "label6";
            // 
            // ptbRX2Squelch
            // 
            this.ptbRX2Squelch.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.ptbRX2Squelch, "ptbRX2Squelch");
            this.ptbRX2Squelch.HeadImage = null;
            this.ptbRX2Squelch.LargeChange = 1;
            this.ptbRX2Squelch.Maximum = 0;
            this.ptbRX2Squelch.Minimum = -160;
            this.ptbRX2Squelch.Name = "ptbRX2Squelch";
            this.ptbRX2Squelch.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbRX2Squelch.SmallChange = 1;
            this.ptbRX2Squelch.TabStop = false;
            this.ptbRX2Squelch.Value = -150;
            this.ptbRX2Squelch.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbRX2Squelch_Scroll);
            // 
            // panelOptions
            // 
            resources.ApplyResources(this.panelOptions, "panelOptions");
            this.panelOptions.BackColor = System.Drawing.Color.Transparent;
            this.panelOptions.Controls.Add(this.label1);
            this.panelOptions.Controls.Add(this.checkBoxID);
            this.panelOptions.Controls.Add(this.chkFWCATU);
            this.panelOptions.Controls.Add(this.chkFWCATUBypass);
            this.panelOptions.Controls.Add(this.ckQuickPlay);
            this.panelOptions.Controls.Add(this.chkMON);
            this.panelOptions.Controls.Add(this.ckQuickRec);
            this.panelOptions.Controls.Add(this.chkMUT);
            this.panelOptions.Controls.Add(this.chkMOX);
            this.panelOptions.Controls.Add(this.chkTUN);
            this.panelOptions.Controls.Add(this.chkX2TR);
            this.panelOptions.Controls.Add(this.comboTuneMode);
            this.panelOptions.Controls.Add(this.chkBoxMuteSpk);
            this.panelOptions.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelOptions.Name = "panelOptions";
            this.panelOptions.Paint += new System.Windows.Forms.PaintEventHandler(this.panelOptions_Paint);
            // 
            // panelTSBandStack
            // 
            resources.ApplyResources(this.panelTSBandStack, "panelTSBandStack");
            this.panelTSBandStack.BackColor = System.Drawing.Color.Transparent;
            this.panelTSBandStack.Controls.Add(this.textBox1);
            this.panelTSBandStack.Controls.Add(this.buttonAdd);
            this.panelTSBandStack.Controls.Add(this.buttonSort);
            this.panelTSBandStack.Controls.Add(this.buttonDel);
            this.panelTSBandStack.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelTSBandStack.Name = "panelTSBandStack";
            this.panelTSBandStack.Paint += new System.Windows.Forms.PaintEventHandler(this.panelTSBandStack_Paint);
            // 
            // panelModeSpecificFM
            // 
            resources.ApplyResources(this.panelModeSpecificFM, "panelModeSpecificFM");
            this.panelModeSpecificFM.BackColor = System.Drawing.Color.Transparent;
            this.panelModeSpecificFM.Controls.Add(this.chkFMTXLow);
            this.panelModeSpecificFM.Controls.Add(this.btnFMMemory);
            this.panelModeSpecificFM.Controls.Add(this.lblFMMemory);
            this.panelModeSpecificFM.Controls.Add(this.btnFMMemoryUp);
            this.panelModeSpecificFM.Controls.Add(this.btnFMMemoryDown);
            this.panelModeSpecificFM.Controls.Add(this.comboFMMemory);
            this.panelModeSpecificFM.Controls.Add(this.radFMDeviation2kHz);
            this.panelModeSpecificFM.Controls.Add(this.lblFMOffset);
            this.panelModeSpecificFM.Controls.Add(this.udFMOffset);
            this.panelModeSpecificFM.Controls.Add(this.chkFMTXRev);
            this.panelModeSpecificFM.Controls.Add(this.lblFMDeviation);
            this.panelModeSpecificFM.Controls.Add(this.radFMDeviation5kHz);
            this.panelModeSpecificFM.Controls.Add(this.comboFMCTCSS);
            this.panelModeSpecificFM.Controls.Add(this.chkFMCTCSS);
            this.panelModeSpecificFM.Controls.Add(this.chkFMTXSimplex);
            this.panelModeSpecificFM.Controls.Add(this.chkFMTXHigh);
            this.panelModeSpecificFM.Controls.Add(this.ptbFMMic);
            this.panelModeSpecificFM.Controls.Add(this.lblMicValFM);
            this.panelModeSpecificFM.Controls.Add(this.lblFMMic);
            this.panelModeSpecificFM.Controls.Add(this.labelTS7);
            this.panelModeSpecificFM.Controls.Add(this.comboFMTXProfile);
            this.panelModeSpecificFM.Name = "panelModeSpecificFM";
            this.panelModeSpecificFM.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // lblFMMemory
            // 
            this.lblFMMemory.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblFMMemory, "lblFMMemory");
            this.lblFMMemory.Name = "lblFMMemory";
            // 
            // comboFMMemory
            // 
            this.comboFMMemory.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.comboFMMemory.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboFMMemory.DropDownWidth = 96;
            this.comboFMMemory.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.comboFMMemory, "comboFMMemory");
            this.comboFMMemory.Name = "comboFMMemory";
            this.comboFMMemory.SelectedIndexChanged += new System.EventHandler(this.comboFMMemory_SelectedIndexChanged);
            // 
            // lblFMOffset
            // 
            resources.ApplyResources(this.lblFMOffset, "lblFMOffset");
            this.lblFMOffset.ForeColor = System.Drawing.Color.White;
            this.lblFMOffset.Name = "lblFMOffset";
            // 
            // lblFMDeviation
            // 
            resources.ApplyResources(this.lblFMDeviation, "lblFMDeviation");
            this.lblFMDeviation.ForeColor = System.Drawing.Color.White;
            this.lblFMDeviation.Name = "lblFMDeviation";
            // 
            // ptbFMMic
            // 
            resources.ApplyResources(this.ptbFMMic, "ptbFMMic");
            this.ptbFMMic.HeadImage = null;
            this.ptbFMMic.LargeChange = 1;
            this.ptbFMMic.Maximum = 70;
            this.ptbFMMic.Minimum = 0;
            this.ptbFMMic.Name = "ptbFMMic";
            this.ptbFMMic.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbFMMic.SmallChange = 1;
            this.ptbFMMic.TabStop = false;
            this.ptbFMMic.Value = 10;
            this.ptbFMMic.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbFMMic_Scroll);
            // 
            // lblMicValFM
            // 
            resources.ApplyResources(this.lblMicValFM, "lblMicValFM");
            this.lblMicValFM.ForeColor = System.Drawing.Color.White;
            this.lblMicValFM.Name = "lblMicValFM";
            // 
            // lblFMMic
            // 
            resources.ApplyResources(this.lblFMMic, "lblFMMic");
            this.lblFMMic.ForeColor = System.Drawing.Color.White;
            this.lblFMMic.Name = "lblFMMic";
            // 
            // labelTS7
            // 
            this.labelTS7.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.labelTS7, "labelTS7");
            this.labelTS7.Name = "labelTS7";
            // 
            // panelModeSpecificCW
            // 
            resources.ApplyResources(this.panelModeSpecificCW, "panelModeSpecificCW");
            this.panelModeSpecificCW.BackColor = System.Drawing.Color.Transparent;
            this.panelModeSpecificCW.Controls.Add(this.labelTS6);
            this.panelModeSpecificCW.Controls.Add(this.comboCWTXProfile);
            this.panelModeSpecificCW.Controls.Add(this.ptbCWSpeed);
            this.panelModeSpecificCW.Controls.Add(this.udCWPitch);
            this.panelModeSpecificCW.Controls.Add(this.lblCWSpeed);
            this.panelModeSpecificCW.Controls.Add(this.grpSemiBreakIn);
            this.panelModeSpecificCW.Controls.Add(this.lblCWPitchFreq);
            this.panelModeSpecificCW.Controls.Add(this.chkShowTXCWFreq);
            this.panelModeSpecificCW.Controls.Add(this.chkCWSidetone);
            this.panelModeSpecificCW.Controls.Add(this.chkCWIambic);
            this.panelModeSpecificCW.Name = "panelModeSpecificCW";
            this.panelModeSpecificCW.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // labelTS6
            // 
            this.labelTS6.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.labelTS6, "labelTS6");
            this.labelTS6.Name = "labelTS6";
            // 
            // lblCWSpeed
            // 
            this.lblCWSpeed.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblCWSpeed, "lblCWSpeed");
            this.lblCWSpeed.Name = "lblCWSpeed";
            // 
            // grpSemiBreakIn
            // 
            this.grpSemiBreakIn.Controls.Add(this.udCWBreakInDelay);
            this.grpSemiBreakIn.Controls.Add(this.lblCWBreakInDelay);
            this.grpSemiBreakIn.Controls.Add(this.chkCWBreakInEnabled);
            this.grpSemiBreakIn.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.grpSemiBreakIn, "grpSemiBreakIn");
            this.grpSemiBreakIn.Name = "grpSemiBreakIn";
            this.grpSemiBreakIn.TabStop = false;
            // 
            // lblCWBreakInDelay
            // 
            this.lblCWBreakInDelay.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblCWBreakInDelay, "lblCWBreakInDelay");
            this.lblCWBreakInDelay.Name = "lblCWBreakInDelay";
            // 
            // lblCWPitchFreq
            // 
            this.lblCWPitchFreq.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblCWPitchFreq, "lblCWPitchFreq");
            this.lblCWPitchFreq.Name = "lblCWPitchFreq";
            // 
            // panelModeSpecificPhone
            // 
            resources.ApplyResources(this.panelModeSpecificPhone, "panelModeSpecificPhone");
            this.panelModeSpecificPhone.BackColor = System.Drawing.Color.Transparent;
            this.panelModeSpecificPhone.Controls.Add(this.labelTS2);
            this.panelModeSpecificPhone.Controls.Add(this.labelTS1);
            this.panelModeSpecificPhone.Controls.Add(this.udTXFilterLow);
            this.panelModeSpecificPhone.Controls.Add(this.udTXFilterHigh);
            this.panelModeSpecificPhone.Controls.Add(this.ptbMic);
            this.panelModeSpecificPhone.Controls.Add(this.picNoiseGate);
            this.panelModeSpecificPhone.Controls.Add(this.lblNoiseGateVal);
            this.panelModeSpecificPhone.Controls.Add(this.ptbNoiseGate);
            this.panelModeSpecificPhone.Controls.Add(this.picVOX);
            this.panelModeSpecificPhone.Controls.Add(this.ptbVOX);
            this.panelModeSpecificPhone.Controls.Add(this.lblVOXVal);
            this.panelModeSpecificPhone.Controls.Add(this.ptbCPDR);
            this.panelModeSpecificPhone.Controls.Add(this.lblCPDRVal);
            this.panelModeSpecificPhone.Controls.Add(this.ptbDX);
            this.panelModeSpecificPhone.Controls.Add(this.lblDXVal);
            this.panelModeSpecificPhone.Controls.Add(this.lblMicVal);
            this.panelModeSpecificPhone.Controls.Add(this.lblMIC);
            this.panelModeSpecificPhone.Controls.Add(this.chkShowTXFilter);
            this.panelModeSpecificPhone.Controls.Add(this.chkDX);
            this.panelModeSpecificPhone.Controls.Add(this.lblTransmitProfile);
            this.panelModeSpecificPhone.Controls.Add(this.chkTXEQ);
            this.panelModeSpecificPhone.Controls.Add(this.comboTXProfile);
            this.panelModeSpecificPhone.Controls.Add(this.chkRXEQ);
            this.panelModeSpecificPhone.Controls.Add(this.chkCPDR);
            this.panelModeSpecificPhone.Controls.Add(this.chkVOX);
            this.panelModeSpecificPhone.Controls.Add(this.chkNoiseGate);
            this.panelModeSpecificPhone.Name = "panelModeSpecificPhone";
            this.panelModeSpecificPhone.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // labelTS2
            // 
            this.labelTS2.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.labelTS2, "labelTS2");
            this.labelTS2.Name = "labelTS2";
            // 
            // labelTS1
            // 
            this.labelTS1.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.labelTS1, "labelTS1");
            this.labelTS1.Name = "labelTS1";
            // 
            // picNoiseGate
            // 
            this.picNoiseGate.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picNoiseGate, "picNoiseGate");
            this.picNoiseGate.Name = "picNoiseGate";
            this.picNoiseGate.TabStop = false;
            this.picNoiseGate.Paint += new System.Windows.Forms.PaintEventHandler(this.picNoiseGate_Paint);
            // 
            // lblNoiseGateVal
            // 
            resources.ApplyResources(this.lblNoiseGateVal, "lblNoiseGateVal");
            this.lblNoiseGateVal.ForeColor = System.Drawing.Color.White;
            this.lblNoiseGateVal.Name = "lblNoiseGateVal";
            // 
            // picVOX
            // 
            this.picVOX.BackColor = System.Drawing.SystemColors.ControlText;
            resources.ApplyResources(this.picVOX, "picVOX");
            this.picVOX.Name = "picVOX";
            this.picVOX.TabStop = false;
            this.picVOX.Paint += new System.Windows.Forms.PaintEventHandler(this.picVOX_Paint);
            // 
            // ptbVOX
            // 
            resources.ApplyResources(this.ptbVOX, "ptbVOX");
            this.ptbVOX.HeadImage = null;
            this.ptbVOX.LargeChange = 1;
            this.ptbVOX.Maximum = 500;
            this.ptbVOX.Minimum = 0;
            this.ptbVOX.Name = "ptbVOX";
            this.ptbVOX.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbVOX.SmallChange = 1;
            this.ptbVOX.TabStop = false;
            this.ptbVOX.Value = 100;
            this.ptbVOX.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbVOX_Scroll);
            this.ptbVOX.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ptbVOX_MouseDown);
            // 
            // lblVOXVal
            // 
            resources.ApplyResources(this.lblVOXVal, "lblVOXVal");
            this.lblVOXVal.ForeColor = System.Drawing.Color.White;
            this.lblVOXVal.Name = "lblVOXVal";
            // 
            // lblCPDRVal
            // 
            resources.ApplyResources(this.lblCPDRVal, "lblCPDRVal");
            this.lblCPDRVal.ForeColor = System.Drawing.Color.White;
            this.lblCPDRVal.Name = "lblCPDRVal";
            // 
            // lblDXVal
            // 
            resources.ApplyResources(this.lblDXVal, "lblDXVal");
            this.lblDXVal.ForeColor = System.Drawing.Color.White;
            this.lblDXVal.Name = "lblDXVal";
            // 
            // lblMicVal
            // 
            resources.ApplyResources(this.lblMicVal, "lblMicVal");
            this.lblMicVal.ForeColor = System.Drawing.Color.White;
            this.lblMicVal.Name = "lblMicVal";
            // 
            // lblMIC
            // 
            resources.ApplyResources(this.lblMIC, "lblMIC");
            this.lblMIC.ForeColor = System.Drawing.Color.White;
            this.lblMIC.Name = "lblMIC";
            // 
            // lblTransmitProfile
            // 
            this.lblTransmitProfile.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblTransmitProfile, "lblTransmitProfile");
            this.lblTransmitProfile.Name = "lblTransmitProfile";
            // 
            // panelAntenna
            // 
            resources.ApplyResources(this.panelAntenna, "panelAntenna");
            this.panelAntenna.BackColor = System.Drawing.Color.Transparent;
            this.panelAntenna.Controls.Add(this.lblAntRX2);
            this.panelAntenna.Controls.Add(this.lblAntRX1);
            this.panelAntenna.Controls.Add(this.lblAntTX);
            this.panelAntenna.Name = "panelAntenna";
            this.panelAntenna.Paint += new System.Windows.Forms.PaintEventHandler(this.panelAntenna_Paint);
            // 
            // panelRX2Filter
            // 
            resources.ApplyResources(this.panelRX2Filter, "panelRX2Filter");
            this.panelRX2Filter.BackColor = System.Drawing.Color.Transparent;
            this.panelRX2Filter.ContextMenuStrip = this.contextMenuStripFilterRX2;
            this.panelRX2Filter.Controls.Add(this.udRX2FilterHigh);
            this.panelRX2Filter.Controls.Add(this.radRX2Filter1);
            this.panelRX2Filter.Controls.Add(this.udRX2FilterLow);
            this.panelRX2Filter.Controls.Add(this.lblRX2FilterHigh);
            this.panelRX2Filter.Controls.Add(this.lblRX2FilterLow);
            this.panelRX2Filter.Controls.Add(this.radRX2Filter2);
            this.panelRX2Filter.Controls.Add(this.radRX2FilterVar2);
            this.panelRX2Filter.Controls.Add(this.radRX2Filter3);
            this.panelRX2Filter.Controls.Add(this.radRX2FilterVar1);
            this.panelRX2Filter.Controls.Add(this.radRX2Filter4);
            this.panelRX2Filter.Controls.Add(this.radRX2Filter7);
            this.panelRX2Filter.Controls.Add(this.radRX2Filter5);
            this.panelRX2Filter.Controls.Add(this.radRX2Filter6);
            this.panelRX2Filter.Name = "panelRX2Filter";
            this.panelRX2Filter.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // radRX2Filter1
            // 
            resources.ApplyResources(this.radRX2Filter1, "radRX2Filter1");
            this.radRX2Filter1.FlatAppearance.BorderSize = 0;
            this.radRX2Filter1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2Filter1.Name = "radRX2Filter1";
            this.radRX2Filter1.CheckedChanged += new System.EventHandler(this.radRX2Filter1_CheckedChanged);
            // 
            // lblRX2FilterHigh
            // 
            this.lblRX2FilterHigh.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblRX2FilterHigh, "lblRX2FilterHigh");
            this.lblRX2FilterHigh.Name = "lblRX2FilterHigh";
            // 
            // lblRX2FilterLow
            // 
            this.lblRX2FilterLow.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblRX2FilterLow, "lblRX2FilterLow");
            this.lblRX2FilterLow.Name = "lblRX2FilterLow";
            // 
            // radRX2Filter2
            // 
            resources.ApplyResources(this.radRX2Filter2, "radRX2Filter2");
            this.radRX2Filter2.FlatAppearance.BorderSize = 0;
            this.radRX2Filter2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2Filter2.Name = "radRX2Filter2";
            this.radRX2Filter2.CheckedChanged += new System.EventHandler(this.radRX2Filter2_CheckedChanged);
            // 
            // radRX2FilterVar2
            // 
            resources.ApplyResources(this.radRX2FilterVar2, "radRX2FilterVar2");
            this.radRX2FilterVar2.FlatAppearance.BorderSize = 0;
            this.radRX2FilterVar2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2FilterVar2.Name = "radRX2FilterVar2";
            this.radRX2FilterVar2.CheckedChanged += new System.EventHandler(this.radRX2FilterVar2_CheckedChanged);
            // 
            // radRX2Filter3
            // 
            resources.ApplyResources(this.radRX2Filter3, "radRX2Filter3");
            this.radRX2Filter3.FlatAppearance.BorderSize = 0;
            this.radRX2Filter3.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2Filter3.Name = "radRX2Filter3";
            this.radRX2Filter3.CheckedChanged += new System.EventHandler(this.radRX2Filter3_CheckedChanged);
            // 
            // radRX2FilterVar1
            // 
            resources.ApplyResources(this.radRX2FilterVar1, "radRX2FilterVar1");
            this.radRX2FilterVar1.FlatAppearance.BorderSize = 0;
            this.radRX2FilterVar1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2FilterVar1.Name = "radRX2FilterVar1";
            this.radRX2FilterVar1.CheckedChanged += new System.EventHandler(this.radRX2FilterVar1_CheckedChanged);
            // 
            // radRX2Filter4
            // 
            resources.ApplyResources(this.radRX2Filter4, "radRX2Filter4");
            this.radRX2Filter4.FlatAppearance.BorderSize = 0;
            this.radRX2Filter4.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2Filter4.Name = "radRX2Filter4";
            this.radRX2Filter4.CheckedChanged += new System.EventHandler(this.radRX2Filter4_CheckedChanged);
            // 
            // radRX2Filter7
            // 
            resources.ApplyResources(this.radRX2Filter7, "radRX2Filter7");
            this.radRX2Filter7.FlatAppearance.BorderSize = 0;
            this.radRX2Filter7.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2Filter7.Name = "radRX2Filter7";
            this.radRX2Filter7.CheckedChanged += new System.EventHandler(this.radRX2Filter7_CheckedChanged);
            // 
            // radRX2Filter5
            // 
            resources.ApplyResources(this.radRX2Filter5, "radRX2Filter5");
            this.radRX2Filter5.FlatAppearance.BorderSize = 0;
            this.radRX2Filter5.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2Filter5.Name = "radRX2Filter5";
            this.radRX2Filter5.CheckedChanged += new System.EventHandler(this.radRX2Filter5_CheckedChanged);
            // 
            // radRX2Filter6
            // 
            resources.ApplyResources(this.radRX2Filter6, "radRX2Filter6");
            this.radRX2Filter6.FlatAppearance.BorderSize = 0;
            this.radRX2Filter6.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radRX2Filter6.Name = "radRX2Filter6";
            this.radRX2Filter6.CheckedChanged += new System.EventHandler(this.radRX2Filter6_CheckedChanged);
            // 
            // panelRX2Mode
            // 
            resources.ApplyResources(this.panelRX2Mode, "panelRX2Mode");
            this.panelRX2Mode.BackColor = System.Drawing.Color.Transparent;
            this.panelRX2Mode.Controls.Add(this.radRX2ModeAM);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeLSB);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeSAM);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeCWL);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeDSB);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeUSB);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeCWU);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeFMN);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeDIGU);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeDRM);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeDIGL);
            this.panelRX2Mode.Controls.Add(this.radRX2ModeSPEC);
            this.panelRX2Mode.Name = "panelRX2Mode";
            this.panelRX2Mode.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // panelRX2Display
            // 
            resources.ApplyResources(this.panelRX2Display, "panelRX2Display");
            this.panelRX2Display.BackColor = System.Drawing.Color.Transparent;
            this.panelRX2Display.Controls.Add(this.chkRX2DisplayPeak);
            this.panelRX2Display.Controls.Add(this.comboRX2DisplayMode);
            this.panelRX2Display.Controls.Add(this.chkRX2DisplayAVG);
            this.panelRX2Display.Name = "panelRX2Display";
            // 
            // panelRX2Mixer
            // 
            resources.ApplyResources(this.panelRX2Mixer, "panelRX2Mixer");
            this.panelRX2Mixer.BackColor = System.Drawing.Color.Transparent;
            this.panelRX2Mixer.Controls.Add(this.ptbRX2Pan);
            this.panelRX2Mixer.Controls.Add(this.ptbRX2Gain);
            this.panelRX2Mixer.Controls.Add(this.lblRX2Pan);
            this.panelRX2Mixer.Controls.Add(this.lblRX2Vol);
            this.panelRX2Mixer.Controls.Add(this.lblRX2Mute);
            this.panelRX2Mixer.Controls.Add(this.chkRX2Mute);
            this.panelRX2Mixer.Controls.Add(this.chkRX1MUTE);
            this.panelRX2Mixer.Name = "panelRX2Mixer";
            // 
            // lblRX2Pan
            // 
            resources.ApplyResources(this.lblRX2Pan, "lblRX2Pan");
            this.lblRX2Pan.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.lblRX2Pan.Name = "lblRX2Pan";
            // 
            // lblRX2Vol
            // 
            resources.ApplyResources(this.lblRX2Vol, "lblRX2Vol");
            this.lblRX2Vol.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.lblRX2Vol.Name = "lblRX2Vol";
            // 
            // lblRX2Mute
            // 
            resources.ApplyResources(this.lblRX2Mute, "lblRX2Mute");
            this.lblRX2Mute.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.lblRX2Mute.Name = "lblRX2Mute";
            // 
            // panelMultiRX
            // 
            resources.ApplyResources(this.panelMultiRX, "panelMultiRX");
            this.panelMultiRX.BackColor = System.Drawing.Color.Transparent;
            this.panelMultiRX.Controls.Add(this.label5);
            this.panelMultiRX.Controls.Add(this.label3);
            this.panelMultiRX.Controls.Add(this.label4);
            this.panelMultiRX.Controls.Add(this.label2);
            this.panelMultiRX.Controls.Add(this.ptbRX1Gain);
            this.panelMultiRX.Controls.Add(this.ptbPanSubRX);
            this.panelMultiRX.Controls.Add(this.ptbRX0Gain);
            this.panelMultiRX.Controls.Add(this.ptbPanMainRX);
            this.panelMultiRX.Controls.Add(this.chkPanSwap);
            this.panelMultiRX.Controls.Add(this.chkEnableMultiRX);
            this.panelMultiRX.Name = "panelMultiRX";
            // 
            // label5
            // 
            resources.ApplyResources(this.label5, "label5");
            this.label5.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.label5.Name = "label5";
            // 
            // label3
            // 
            resources.ApplyResources(this.label3, "label3");
            this.label3.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.label3.Name = "label3";
            // 
            // label4
            // 
            resources.ApplyResources(this.label4, "label4");
            this.label4.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.label4.Name = "label4";
            // 
            // label2
            // 
            resources.ApplyResources(this.label2, "label2");
            this.label2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.label2.Name = "label2";
            // 
            // panelDSP
            // 
            resources.ApplyResources(this.panelDSP, "panelDSP");
            this.panelDSP.BackColor = System.Drawing.Color.Transparent;
            this.panelDSP.Controls.Add(this.chkSR);
            this.panelDSP.Controls.Add(this.chkNR);
            this.panelDSP.Controls.Add(this.chkDSPNB2);
            this.panelDSP.Controls.Add(this.chkBIN);
            this.panelDSP.Controls.Add(this.chkNB);
            this.panelDSP.Controls.Add(this.chkANF);
            this.panelDSP.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelDSP.Name = "panelDSP";
            // 
            // panelVFO
            // 
            resources.ApplyResources(this.panelVFO, "panelVFO");
            this.panelVFO.BackColor = System.Drawing.Color.Transparent;
            this.panelVFO.Controls.Add(this.chkVAC2);
            this.panelVFO.Controls.Add(this.btnZeroBeat);
            this.panelVFO.Controls.Add(this.chkVFOSplit);
            this.panelVFO.Controls.Add(this.btnRITReset);
            this.panelVFO.Controls.Add(this.btnXITReset);
            this.panelVFO.Controls.Add(this.udRIT);
            this.panelVFO.Controls.Add(this.btnIFtoVFO);
            this.panelVFO.Controls.Add(this.chkRIT);
            this.panelVFO.Controls.Add(this.btnVFOSwap);
            this.panelVFO.Controls.Add(this.chkXIT);
            this.panelVFO.Controls.Add(this.btnVFOBtoA);
            this.panelVFO.Controls.Add(this.udXIT);
            this.panelVFO.Controls.Add(this.btnVFOAtoB);
            this.panelVFO.Controls.Add(this.chkVAC1);
            this.panelVFO.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelVFO.Name = "panelVFO";
            // 
            // lblCPUMeter
            // 
            this.lblCPUMeter.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.lblCPUMeter.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.lblCPUMeter.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.lblCPUMeter, "lblCPUMeter");
            this.lblCPUMeter.ForeColor = System.Drawing.Color.White;
            this.lblCPUMeter.Name = "lblCPUMeter";
            this.lblCPUMeter.Click += new System.EventHandler(this.lblCPUMeter_Click);
            this.lblCPUMeter.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // panelDateTime
            // 
            resources.ApplyResources(this.panelDateTime, "panelDateTime");
            this.panelDateTime.BackColor = System.Drawing.Color.Transparent;
            this.panelDateTime.Controls.Add(this.txtTimer);
            this.panelDateTime.Controls.Add(this.txtNOAA2);
            this.panelDateTime.Controls.Add(this.txtNOAA);
            this.panelDateTime.Controls.Add(this.labelTS4);
            this.panelDateTime.Controls.Add(this.labelTS3);
            this.panelDateTime.Controls.Add(this.txtTime);
            this.panelDateTime.Controls.Add(this.txtDate);
            this.panelDateTime.Controls.Add(this.lblCPUMeter);
            this.panelDateTime.Name = "panelDateTime";
            this.panelDateTime.Paint += new System.Windows.Forms.PaintEventHandler(this.panelDateTime_Paint);
            // 
            // txtTime
            // 
            this.txtTime.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.txtTime.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtTime.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtTime, "txtTime");
            this.txtTime.ForeColor = System.Drawing.Color.White;
            this.txtTime.Name = "txtTime";
            this.txtTime.ReadOnly = true;
            this.txtTime.MouseDown += new System.Windows.Forms.MouseEventHandler(this.DateTime_MouseDown);
            this.txtTime.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // txtDate
            // 
            this.txtDate.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(46)))), ((int)(((byte)(46)))), ((int)(((byte)(46)))));
            this.txtDate.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtDate.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtDate, "txtDate");
            this.txtDate.ForeColor = System.Drawing.Color.White;
            this.txtDate.Name = "txtDate";
            this.txtDate.ReadOnly = true;
            this.txtDate.MouseDown += new System.Windows.Forms.MouseEventHandler(this.DateTime_MouseDown);
            this.txtDate.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.labelTS4_MouseWheel);
            // 
            // panelSoundControls
            // 
            resources.ApplyResources(this.panelSoundControls, "panelSoundControls");
            this.panelSoundControls.BackColor = System.Drawing.Color.Transparent;
            this.panelSoundControls.Controls.Add(this.ptbMON);
            this.panelSoundControls.Controls.Add(this.lblMON);
            this.panelSoundControls.Controls.Add(this.lblTUNE);
            this.panelSoundControls.Controls.Add(this.ptbTune);
            this.panelSoundControls.Controls.Add(this.chkBoxDrive);
            this.panelSoundControls.Controls.Add(this.comboAGC);
            this.panelSoundControls.Controls.Add(this.ptbPWR);
            this.panelSoundControls.Controls.Add(this.ptbRF);
            this.panelSoundControls.Controls.Add(this.ptbAF);
            this.panelSoundControls.Controls.Add(this.lblAF);
            this.panelSoundControls.Controls.Add(this.lblAGC);
            this.panelSoundControls.Controls.Add(this.lblPreamp);
            this.panelSoundControls.Controls.Add(this.comboPreamp);
            this.panelSoundControls.Controls.Add(this.lblRF);
            this.panelSoundControls.Controls.Add(this.lblPWR);
            this.panelSoundControls.Controls.Add(this.chkRX1Preamp);
            this.panelSoundControls.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelSoundControls.Name = "panelSoundControls";
            // 
            // lblPreamp
            // 
            this.lblPreamp.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblPreamp, "lblPreamp");
            this.lblPreamp.Name = "lblPreamp";
            // 
            // panelModeSpecificDigital
            // 
            resources.ApplyResources(this.panelModeSpecificDigital, "panelModeSpecificDigital");
            this.panelModeSpecificDigital.BackColor = System.Drawing.Color.Transparent;
            this.panelModeSpecificDigital.Controls.Add(this.chkShowDigTXFilter);
            this.panelModeSpecificDigital.Controls.Add(this.lblVACTXIndicator);
            this.panelModeSpecificDigital.Controls.Add(this.lblVACRXIndicator);
            this.panelModeSpecificDigital.Controls.Add(this.ptbVACTXGain);
            this.panelModeSpecificDigital.Controls.Add(this.comboDigTXProfile);
            this.panelModeSpecificDigital.Controls.Add(this.ptbVACRXGain);
            this.panelModeSpecificDigital.Controls.Add(this.lblDigTXProfile);
            this.panelModeSpecificDigital.Controls.Add(this.lblRXGain);
            this.panelModeSpecificDigital.Controls.Add(this.grpVACStereo);
            this.panelModeSpecificDigital.Controls.Add(this.lblTXGain);
            this.panelModeSpecificDigital.Controls.Add(this.grpDIGSampleRate);
            this.panelModeSpecificDigital.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelModeSpecificDigital.Name = "panelModeSpecificDigital";
            this.panelModeSpecificDigital.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // lblVACTXIndicator
            // 
            this.lblVACTXIndicator.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblVACTXIndicator, "lblVACTXIndicator");
            this.lblVACTXIndicator.Name = "lblVACTXIndicator";
            // 
            // lblVACRXIndicator
            // 
            this.lblVACRXIndicator.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblVACRXIndicator, "lblVACRXIndicator");
            this.lblVACRXIndicator.Name = "lblVACRXIndicator";
            // 
            // lblDigTXProfile
            // 
            this.lblDigTXProfile.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblDigTXProfile, "lblDigTXProfile");
            this.lblDigTXProfile.Name = "lblDigTXProfile";
            // 
            // lblRXGain
            // 
            this.lblRXGain.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblRXGain, "lblRXGain");
            this.lblRXGain.Name = "lblRXGain";
            // 
            // grpVACStereo
            // 
            this.grpVACStereo.Controls.Add(this.chkVACStereo);
            this.grpVACStereo.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.grpVACStereo, "grpVACStereo");
            this.grpVACStereo.Name = "grpVACStereo";
            this.grpVACStereo.TabStop = false;
            // 
            // lblTXGain
            // 
            this.lblTXGain.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblTXGain, "lblTXGain");
            this.lblTXGain.Name = "lblTXGain";
            // 
            // grpDIGSampleRate
            // 
            this.grpDIGSampleRate.Controls.Add(this.comboVACSampleRate);
            this.grpDIGSampleRate.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.grpDIGSampleRate, "grpDIGSampleRate");
            this.grpDIGSampleRate.Name = "grpDIGSampleRate";
            this.grpDIGSampleRate.TabStop = false;
            // 
            // panelDisplay
            // 
            resources.ApplyResources(this.panelDisplay, "panelDisplay");
            this.panelDisplay.BackColor = System.Drawing.Color.Transparent;
            this.panelDisplay.Controls.Add(this.picDisplay);
            this.panelDisplay.Controls.Add(this.buttonCall);
            this.panelDisplay.Controls.Add(this.radDisplayZoom4x);
            this.panelDisplay.Controls.Add(this.radDisplayZoom2x);
            this.panelDisplay.Controls.Add(this.radDisplayZoom1x);
            this.panelDisplay.Controls.Add(this.panelTSBandStack);
            this.panelDisplay.Controls.Add(this.radDisplayZoom05);
            this.panelDisplay.Controls.Add(this.ptbDisplayZoom);
            this.panelDisplay.Controls.Add(this.ptbDisplayPan);
            this.panelDisplay.Controls.Add(this.txtDisplayPeakOffset);
            this.panelDisplay.Controls.Add(this.txtDisplayCursorOffset);
            this.panelDisplay.Controls.Add(this.autoBrightBox);
            this.panelDisplay.Controls.Add(this.txtDisplayCursorPower);
            this.panelDisplay.Controls.Add(this.lblDisplayZoom);
            this.panelDisplay.Controls.Add(this.txtDisplayCursorFreq);
            this.panelDisplay.Controls.Add(this.txtDisplayPeakPower);
            this.panelDisplay.Controls.Add(this.btnDisplayPanCenter);
            this.panelDisplay.Controls.Add(this.txtDisplayPeakFreq);
            this.panelDisplay.Controls.Add(this.lblDisplayPan);
            this.panelDisplay.Controls.Add(this.buttonCQ);
            this.panelDisplay.Name = "panelDisplay";
            // 
            // picDisplay
            // 
            this.picDisplay.BackColor = System.Drawing.Color.Black;
            resources.ApplyResources(this.picDisplay, "picDisplay");
            this.picDisplay.Cursor = System.Windows.Forms.Cursors.Cross;
            this.picDisplay.Name = "picDisplay";
            this.picDisplay.TabStop = false;
            this.picDisplay.Paint += new System.Windows.Forms.PaintEventHandler(this.picDisplay_Paint);
            this.picDisplay.DoubleClick += new System.EventHandler(this.picDisplay_DoubleClick);
            this.picDisplay.MouseDown += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseDown);
            this.picDisplay.MouseLeave += new System.EventHandler(this.picDisplay_MouseLeave);
            this.picDisplay.MouseMove += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseMove);
            this.picDisplay.MouseUp += new System.Windows.Forms.MouseEventHandler(this.picDisplay_MouseUp);
            this.picDisplay.Resize += new System.EventHandler(this.picDisplay_Resize);
            // 
            // panelFilter
            // 
            resources.ApplyResources(this.panelFilter, "panelFilter");
            this.panelFilter.BackColor = System.Drawing.Color.Transparent;
            this.panelFilter.ContextMenuStrip = this.contextMenuStripFilterRX1;
            this.panelFilter.Controls.Add(this.ptbFilterShift);
            this.panelFilter.Controls.Add(this.ptbFilterWidth);
            this.panelFilter.Controls.Add(this.btnFilterShiftReset);
            this.panelFilter.Controls.Add(this.udFilterHigh);
            this.panelFilter.Controls.Add(this.radFilter1);
            this.panelFilter.Controls.Add(this.udFilterLow);
            this.panelFilter.Controls.Add(this.lblFilterHigh);
            this.panelFilter.Controls.Add(this.lblFilterLow);
            this.panelFilter.Controls.Add(this.lblFilterWidth);
            this.panelFilter.Controls.Add(this.radFilterVar2);
            this.panelFilter.Controls.Add(this.radFilterVar1);
            this.panelFilter.Controls.Add(this.radFilter10);
            this.panelFilter.Controls.Add(this.lblFilterShift);
            this.panelFilter.Controls.Add(this.radFilter9);
            this.panelFilter.Controls.Add(this.radFilter8);
            this.panelFilter.Controls.Add(this.radFilter2);
            this.panelFilter.Controls.Add(this.radFilter7);
            this.panelFilter.Controls.Add(this.radFilter3);
            this.panelFilter.Controls.Add(this.radFilter6);
            this.panelFilter.Controls.Add(this.radFilter4);
            this.panelFilter.Controls.Add(this.radFilter5);
            this.panelFilter.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelFilter.Name = "panelFilter";
            this.panelFilter.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // radFilter1
            // 
            resources.ApplyResources(this.radFilter1, "radFilter1");
            this.radFilter1.FlatAppearance.BorderSize = 0;
            this.radFilter1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter1.Name = "radFilter1";
            this.radFilter1.CheckedChanged += new System.EventHandler(this.radFilter1_CheckedChanged);
            // 
            // lblFilterHigh
            // 
            this.lblFilterHigh.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblFilterHigh, "lblFilterHigh");
            this.lblFilterHigh.Name = "lblFilterHigh";
            // 
            // lblFilterLow
            // 
            this.lblFilterLow.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblFilterLow, "lblFilterLow");
            this.lblFilterLow.Name = "lblFilterLow";
            // 
            // lblFilterWidth
            // 
            this.lblFilterWidth.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblFilterWidth, "lblFilterWidth");
            this.lblFilterWidth.Name = "lblFilterWidth";
            // 
            // radFilterVar2
            // 
            resources.ApplyResources(this.radFilterVar2, "radFilterVar2");
            this.radFilterVar2.FlatAppearance.BorderSize = 0;
            this.radFilterVar2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilterVar2.Name = "radFilterVar2";
            this.radFilterVar2.CheckedChanged += new System.EventHandler(this.radFilterVar2_CheckedChanged);
            // 
            // radFilterVar1
            // 
            resources.ApplyResources(this.radFilterVar1, "radFilterVar1");
            this.radFilterVar1.FlatAppearance.BorderSize = 0;
            this.radFilterVar1.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilterVar1.Name = "radFilterVar1";
            this.radFilterVar1.CheckedChanged += new System.EventHandler(this.radFilterVar1_CheckedChanged);
            // 
            // radFilter10
            // 
            resources.ApplyResources(this.radFilter10, "radFilter10");
            this.radFilter10.FlatAppearance.BorderSize = 0;
            this.radFilter10.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter10.Name = "radFilter10";
            this.radFilter10.CheckedChanged += new System.EventHandler(this.radFilter10_CheckedChanged);
            // 
            // lblFilterShift
            // 
            this.lblFilterShift.ForeColor = System.Drawing.Color.White;
            resources.ApplyResources(this.lblFilterShift, "lblFilterShift");
            this.lblFilterShift.Name = "lblFilterShift";
            // 
            // radFilter9
            // 
            resources.ApplyResources(this.radFilter9, "radFilter9");
            this.radFilter9.FlatAppearance.BorderSize = 0;
            this.radFilter9.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter9.Name = "radFilter9";
            this.radFilter9.CheckedChanged += new System.EventHandler(this.radFilter9_CheckedChanged);
            // 
            // radFilter8
            // 
            resources.ApplyResources(this.radFilter8, "radFilter8");
            this.radFilter8.FlatAppearance.BorderSize = 0;
            this.radFilter8.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter8.Name = "radFilter8";
            this.radFilter8.CheckedChanged += new System.EventHandler(this.radFilter8_CheckedChanged);
            // 
            // radFilter2
            // 
            resources.ApplyResources(this.radFilter2, "radFilter2");
            this.radFilter2.FlatAppearance.BorderSize = 0;
            this.radFilter2.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter2.Name = "radFilter2";
            this.radFilter2.CheckedChanged += new System.EventHandler(this.radFilter2_CheckedChanged);
            // 
            // radFilter7
            // 
            resources.ApplyResources(this.radFilter7, "radFilter7");
            this.radFilter7.FlatAppearance.BorderSize = 0;
            this.radFilter7.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter7.Name = "radFilter7";
            this.radFilter7.CheckedChanged += new System.EventHandler(this.radFilter7_CheckedChanged);
            // 
            // radFilter3
            // 
            resources.ApplyResources(this.radFilter3, "radFilter3");
            this.radFilter3.FlatAppearance.BorderSize = 0;
            this.radFilter3.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter3.Name = "radFilter3";
            this.radFilter3.CheckedChanged += new System.EventHandler(this.radFilter3_CheckedChanged);
            // 
            // radFilter6
            // 
            resources.ApplyResources(this.radFilter6, "radFilter6");
            this.radFilter6.FlatAppearance.BorderSize = 0;
            this.radFilter6.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter6.Name = "radFilter6";
            this.radFilter6.CheckedChanged += new System.EventHandler(this.radFilter6_CheckedChanged);
            // 
            // radFilter4
            // 
            resources.ApplyResources(this.radFilter4, "radFilter4");
            this.radFilter4.FlatAppearance.BorderSize = 0;
            this.radFilter4.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter4.Name = "radFilter4";
            this.radFilter4.CheckedChanged += new System.EventHandler(this.radFilter4_CheckedChanged);
            // 
            // radFilter5
            // 
            resources.ApplyResources(this.radFilter5, "radFilter5");
            this.radFilter5.FlatAppearance.BorderSize = 0;
            this.radFilter5.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.radFilter5.Name = "radFilter5";
            this.radFilter5.CheckedChanged += new System.EventHandler(this.radFilter5_CheckedChanged);
            // 
            // panelMode
            // 
            resources.ApplyResources(this.panelMode, "panelMode");
            this.panelMode.BackColor = System.Drawing.Color.Transparent;
            this.panelMode.Controls.Add(this.radModeAM);
            this.panelMode.Controls.Add(this.radModeLSB);
            this.panelMode.Controls.Add(this.radModeSAM);
            this.panelMode.Controls.Add(this.radModeCWL);
            this.panelMode.Controls.Add(this.radModeDSB);
            this.panelMode.Controls.Add(this.radModeUSB);
            this.panelMode.Controls.Add(this.radModeCWU);
            this.panelMode.Controls.Add(this.radModeFMN);
            this.panelMode.Controls.Add(this.radModeDIGU);
            this.panelMode.Controls.Add(this.radModeDRM);
            this.panelMode.Controls.Add(this.radModeDIGL);
            this.panelMode.Controls.Add(this.radModeSPEC);
            this.panelMode.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            this.panelMode.Name = "panelMode";
            this.panelMode.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // grpMultimeter
            // 
            resources.ApplyResources(this.grpMultimeter, "grpMultimeter");
            this.grpMultimeter.BackColor = System.Drawing.Color.Transparent;
            this.grpMultimeter.Controls.Add(this.comboMeterTXMode);
            this.grpMultimeter.Controls.Add(this.picMultiMeterDigital);
            this.grpMultimeter.Controls.Add(this.lblMultiSMeter);
            this.grpMultimeter.Controls.Add(this.comboMeterRXMode);
            this.grpMultimeter.Controls.Add(this.txtMultiText);
            this.grpMultimeter.ForeColor = System.Drawing.Color.White;
            this.grpMultimeter.Name = "grpMultimeter";
            this.grpMultimeter.Paint += new System.Windows.Forms.PaintEventHandler(this.grpMultimeter_Paint);
            // 
            // lblMultiSMeter
            // 
            resources.ApplyResources(this.lblMultiSMeter, "lblMultiSMeter");
            this.lblMultiSMeter.Name = "lblMultiSMeter";
            // 
            // txtMultiText
            // 
            this.txtMultiText.BackColor = System.Drawing.Color.Black;
            this.txtMultiText.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtMultiText.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtMultiText, "txtMultiText");
            this.txtMultiText.ForeColor = System.Drawing.Color.Yellow;
            this.txtMultiText.Name = "txtMultiText";
            this.txtMultiText.ReadOnly = true;
            this.txtMultiText.ShortcutsEnabled = false;
            this.txtMultiText.GotFocus += new System.EventHandler(this.HideFocus);
            // 
            // lblTuneStep
            // 
            this.lblTuneStep.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblTuneStep, "lblTuneStep");
            this.lblTuneStep.Name = "lblTuneStep";
            // 
            // grpVFOBetween
            // 
            resources.ApplyResources(this.grpVFOBetween, "grpVFOBetween");
            this.grpVFOBetween.BackColor = System.Drawing.Color.Transparent;
            this.grpVFOBetween.Controls.Add(this.labelTS5);
            this.grpVFOBetween.Controls.Add(this.regBox1);
            this.grpVFOBetween.Controls.Add(this.regBox);
            this.grpVFOBetween.Controls.Add(this.lblTuneStep);
            this.grpVFOBetween.Controls.Add(this.chkVFOSync);
            this.grpVFOBetween.Controls.Add(this.chkFullDuplex);
            this.grpVFOBetween.Controls.Add(this.btnTuneStepChangeLarger);
            this.grpVFOBetween.Controls.Add(this.btnTuneStepChangeSmaller);
            this.grpVFOBetween.Controls.Add(this.chkVFOLock);
            this.grpVFOBetween.Controls.Add(this.txtWheelTune);
            this.grpVFOBetween.Controls.Add(this.btnMemoryQuickRestore);
            this.grpVFOBetween.Controls.Add(this.btnMemoryQuickSave);
            this.grpVFOBetween.Controls.Add(this.txtMemoryQuick);
            this.grpVFOBetween.Name = "grpVFOBetween";
            this.grpVFOBetween.Paint += new System.Windows.Forms.PaintEventHandler(this.grpVFOBetween_Paint);
            // 
            // lblDisplayModeTop
            // 
            resources.ApplyResources(this.lblDisplayModeTop, "lblDisplayModeTop");
            this.lblDisplayModeTop.Name = "lblDisplayModeTop";
            // 
            // lblDisplayModeBottom
            // 
            resources.ApplyResources(this.lblDisplayModeBottom, "lblDisplayModeBottom");
            this.lblDisplayModeBottom.Name = "lblDisplayModeBottom";
            // 
            // grpDisplaySplit
            // 
            this.grpDisplaySplit.Controls.Add(this.chkSplitDisplay);
            this.grpDisplaySplit.Controls.Add(this.comboDisplayModeTop);
            this.grpDisplaySplit.Controls.Add(this.comboDisplayModeBottom);
            this.grpDisplaySplit.Controls.Add(this.lblDisplayModeTop);
            this.grpDisplaySplit.Controls.Add(this.lblDisplayModeBottom);
            resources.ApplyResources(this.grpDisplaySplit, "grpDisplaySplit");
            this.grpDisplaySplit.Name = "grpDisplaySplit";
            this.grpDisplaySplit.TabStop = false;
            // 
            // chkRX2
            // 
            resources.ApplyResources(this.chkRX2, "chkRX2");
            this.chkRX2.FlatAppearance.BorderSize = 0;
            this.chkRX2.Name = "chkRX2";
            this.chkRX2.CheckedChanged += new System.EventHandler(this.chkRX2_CheckedChanged);
            // 
            // grpRX2Meter
            // 
            resources.ApplyResources(this.grpRX2Meter, "grpRX2Meter");
            this.grpRX2Meter.BackColor = System.Drawing.Color.Transparent;
            this.grpRX2Meter.Controls.Add(this.picRX2Meter);
            this.grpRX2Meter.Controls.Add(this.comboMeterTX1Mode);
            this.grpRX2Meter.Controls.Add(this.lblRX2Meter);
            this.grpRX2Meter.Controls.Add(this.comboRX2MeterMode);
            this.grpRX2Meter.Controls.Add(this.txtRX2Meter);
            this.grpRX2Meter.ForeColor = System.Drawing.Color.White;
            this.grpRX2Meter.Name = "grpRX2Meter";
            this.grpRX2Meter.Paint += new System.Windows.Forms.PaintEventHandler(this.grpRX2Meter_Paint);
            this.grpRX2Meter.MouseUp += new System.Windows.Forms.MouseEventHandler(this.picRX2Meter_MouseUp);
            // 
            // lblRX2Meter
            // 
            resources.ApplyResources(this.lblRX2Meter, "lblRX2Meter");
            this.lblRX2Meter.Name = "lblRX2Meter";
            // 
            // txtRX2Meter
            // 
            this.txtRX2Meter.BackColor = System.Drawing.Color.Black;
            this.txtRX2Meter.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.txtRX2Meter.Cursor = System.Windows.Forms.Cursors.Default;
            resources.ApplyResources(this.txtRX2Meter, "txtRX2Meter");
            this.txtRX2Meter.ForeColor = System.Drawing.Color.Yellow;
            this.txtRX2Meter.Name = "txtRX2Meter";
            this.txtRX2Meter.ReadOnly = true;
            // 
            // lblRX2Band
            // 
            this.lblRX2Band.BackColor = System.Drawing.Color.Transparent;
            this.lblRX2Band.ForeColor = System.Drawing.SystemColors.ControlLightLight;
            resources.ApplyResources(this.lblRX2Band, "lblRX2Band");
            this.lblRX2Band.Name = "lblRX2Band";
            // 
            // panelBandGN
            // 
            resources.ApplyResources(this.panelBandGN, "panelBandGN");
            this.panelBandGN.BackColor = System.Drawing.Color.Transparent;
            this.panelBandGN.Controls.Add(this.radBandGN13);
            this.panelBandGN.Controls.Add(this.radBandGN12);
            this.panelBandGN.Controls.Add(this.radBandGN11);
            this.panelBandGN.Controls.Add(this.radBandGN10);
            this.panelBandGN.Controls.Add(this.radBandGN9);
            this.panelBandGN.Controls.Add(this.radBandGN8);
            this.panelBandGN.Controls.Add(this.radBandGN7);
            this.panelBandGN.Controls.Add(this.radBandGN6);
            this.panelBandGN.Controls.Add(this.radBandGN5);
            this.panelBandGN.Controls.Add(this.radBandGN4);
            this.panelBandGN.Controls.Add(this.radBandGN3);
            this.panelBandGN.Controls.Add(this.radBandGN2);
            this.panelBandGN.Controls.Add(this.radBandGN1);
            this.panelBandGN.Controls.Add(this.radBandGN0);
            this.panelBandGN.Controls.Add(this.btnBandHF1);
            this.panelBandGN.Name = "panelBandGN";
            this.panelBandGN.VisibleChanged += new System.EventHandler(this.panelBandGN_VisibleChanged);
            this.panelBandGN.Paint += new System.Windows.Forms.PaintEventHandler(this.panelRing_Paint);
            // 
            // btnBandHF1
            // 
            this.btnBandHF1.FlatAppearance.BorderSize = 0;
            resources.ApplyResources(this.btnBandHF1, "btnBandHF1");
            this.btnBandHF1.ForeColor = System.Drawing.Color.OrangeRed;
            this.btnBandHF1.Name = "btnBandHF1";
            this.btnBandHF1.Click += new System.EventHandler(this.btnBandHF_Click);
            // 
            // panelRX2DSP
            // 
            resources.ApplyResources(this.panelRX2DSP, "panelRX2DSP");
            this.panelRX2DSP.BackColor = System.Drawing.Color.Transparent;
            this.panelRX2DSP.Controls.Add(this.chkRX2NB2);
            this.panelRX2DSP.Controls.Add(this.chkRX2NR);
            this.panelRX2DSP.Controls.Add(this.chkRX2NB);
            this.panelRX2DSP.Controls.Add(this.lblRX2AGC);
            this.panelRX2DSP.Controls.Add(this.chkRX2ANF);
            this.panelRX2DSP.Controls.Add(this.comboRX2AGC);
            this.panelRX2DSP.Controls.Add(this.chkRX2SR);
            this.panelRX2DSP.Controls.Add(this.chkRX2BIN);
            this.panelRX2DSP.Name = "panelRX2DSP";
            // 
            // ptbSquelch
            // 
            this.ptbSquelch.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.ptbSquelch, "ptbSquelch");
            this.ptbSquelch.HeadImage = null;
            this.ptbSquelch.LargeChange = 1;
            this.ptbSquelch.Maximum = 0;
            this.ptbSquelch.Minimum = -160;
            this.ptbSquelch.Name = "ptbSquelch";
            this.ptbSquelch.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.ptbSquelch.SmallChange = 1;
            this.ptbSquelch.TabStop = false;
            this.ptbSquelch.Value = -150;
            this.ptbSquelch.Scroll += new PowerSDR.PrettyTrackBar.ScrollHandler(this.ptbSquelch_Scroll);
            // 
            // imageList1
            // 
            this.imageList1.ColorDepth = System.Windows.Forms.ColorDepth.Depth8Bit;
            resources.ApplyResources(this.imageList1, "imageList1");
            this.imageList1.TransparentColor = System.Drawing.Color.Transparent;
            // 
            // VFODialA
            // 
            this.VFODialA.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.VFODialA, "VFODialA");
            this.VFODialA.Name = "VFODialA";
            this.VFODialA.TabStop = false;
            // 
            // VFODialB
            // 
            this.VFODialB.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.VFODialB, "VFODialB");
            this.VFODialB.Name = "VFODialB";
            this.VFODialB.TabStop = false;
            // 
            // VFODialAA
            // 
            this.VFODialAA.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.VFODialAA, "VFODialAA");
            this.VFODialAA.Image = global::PowerSDR.Properties.Resources.arrowA;
            this.VFODialAA.Name = "VFODialAA";
            this.VFODialAA.TabStop = false;
            // 
            // VFODialBB
            // 
            this.VFODialBB.BackColor = System.Drawing.Color.Transparent;
            resources.ApplyResources(this.VFODialBB, "VFODialBB");
            this.VFODialBB.Image = global::PowerSDR.Properties.Resources.arrowB;
            this.VFODialBB.Name = "VFODialBB";
            this.VFODialBB.TabStop = false;
            // 
            // Console
            // 
            resources.ApplyResources(this, "$this");
            this.BackColor = System.Drawing.SystemColors.ControlDark;
            this.Controls.Add(this.VFODialBB);
            this.Controls.Add(this.VFODialAA);
            this.Controls.Add(this.grpVFOBetween);
            this.Controls.Add(this.panelBandHF);
            this.Controls.Add(this.panelBandVHF);
            this.Controls.Add(this.grpVFOB);
            this.Controls.Add(this.grpVFOA);
            this.Controls.Add(this.menuStrip1);
            this.Controls.Add(this.panelDisplay2);
            this.Controls.Add(this.picRX2Squelch);
            this.Controls.Add(this.ptbRX2Squelch);
            this.Controls.Add(this.ptbRX2RF);
            this.Controls.Add(this.panelOptions);
            this.Controls.Add(this.panelMode);
            this.Controls.Add(this.panelAntenna);
            this.Controls.Add(this.panelFilter);
            this.Controls.Add(this.panelRX2Filter);
            this.Controls.Add(this.panelRX2Mode);
            this.Controls.Add(this.panelRX2Display);
            this.Controls.Add(this.panelRX2DSP);
            this.Controls.Add(this.panelRX2Mixer);
            this.Controls.Add(this.panelMultiRX);
            this.Controls.Add(this.panelDSP);
            this.Controls.Add(this.panelVFO);
            this.Controls.Add(this.panelDateTime);
            this.Controls.Add(this.panelSoundControls);
            this.Controls.Add(this.comboRX2Band);
            this.Controls.Add(this.lblRX2Band);
            this.Controls.Add(this.chkRX2Preamp);
            this.Controls.Add(this.chkRX2Squelch);
            this.Controls.Add(this.lblRX2RF);
            this.Controls.Add(this.grpRX2Meter);
            this.Controls.Add(this.grpDisplaySplit);
            this.Controls.Add(this.chkBCI);
            this.Controls.Add(this.picSquelch);
            this.Controls.Add(this.grpMultimeter);
            this.Controls.Add(this.chkPower);
            this.Controls.Add(this.chkSquelch);
            this.Controls.Add(this.chkRX2);
            this.Controls.Add(this.panelDisplay);
            this.Controls.Add(this.ptbSquelch);
            this.Controls.Add(this.panelBandGN);
            this.Controls.Add(this.panelModeSpecificPhone);
            this.Controls.Add(this.panelModeSpecificDigital);
            this.Controls.Add(this.panelModeSpecificFM);
            this.Controls.Add(this.panelModeSpecificCW);
            this.Controls.Add(this.VFODialA);
            this.Controls.Add(this.VFODialB);
            this.KeyPreview = true;
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "Console";
            this.Closing += new System.ComponentModel.CancelEventHandler(this.Console_Closing);
            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.Console_KeyDown);
            this.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.Console_KeyPress);
            this.KeyUp += new System.Windows.Forms.KeyEventHandler(this.Console_KeyUp);
            this.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.Console_MouseWheel);
            this.Resize += new System.EventHandler(this.Console_Resize);
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2RF)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFMOffset)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWPitch)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udCWBreakInDelay)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRX2FilterHigh)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRX2FilterLow)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udRIT)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udXIT)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFilterHigh)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udFilterLow)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCWSpeed)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2Pan)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2Gain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX1Gain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanSubRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX0Gain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPanMainRX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbPWR)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbRF)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbAF)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACTXGain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVACRXGain)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayZoom)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDisplayPan)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterShift)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbFilterWidth)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picMultiMeterDigital)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picRX2Meter)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udTXFilterLow)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.udTXFilterHigh)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbTune)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbMON)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbMic)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbNoiseGate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbCPDR)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbDX)).EndInit();
            this.contextMenuStripFilterRX1.ResumeLayout(false);
            this.contextMenuStripFilterRX2.ResumeLayout(false);
            this.contextMenuStripNotch.ResumeLayout(false);
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picRX2Squelch)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picSquelch)).EndInit();
            this.panelBandHF.ResumeLayout(false);
            this.panelBandVHF.ResumeLayout(false);
            this.grpVFOB.ResumeLayout(false);
            this.grpVFOB.PerformLayout();
            this.grpVFOA.ResumeLayout(false);
            this.grpVFOA.PerformLayout();
            this.panelDisplay2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.ptbRX2Squelch)).EndInit();
            this.panelOptions.ResumeLayout(false);
            this.panelTSBandStack.ResumeLayout(false);
            this.panelTSBandStack.PerformLayout();
            this.panelModeSpecificFM.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.ptbFMMic)).EndInit();
            this.panelModeSpecificCW.ResumeLayout(false);
            this.grpSemiBreakIn.ResumeLayout(false);
            this.panelModeSpecificPhone.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.picNoiseGate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.picVOX)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ptbVOX)).EndInit();
            this.panelAntenna.ResumeLayout(false);
            this.panelRX2Filter.ResumeLayout(false);
            this.panelRX2Mode.ResumeLayout(false);
            this.panelRX2Display.ResumeLayout(false);
            this.panelRX2Mixer.ResumeLayout(false);
            this.panelMultiRX.ResumeLayout(false);
            this.panelDSP.ResumeLayout(false);
            this.panelVFO.ResumeLayout(false);
            this.panelDateTime.ResumeLayout(false);
            this.panelSoundControls.ResumeLayout(false);
            this.panelModeSpecificDigital.ResumeLayout(false);
            this.grpVACStereo.ResumeLayout(false);
            this.grpDIGSampleRate.ResumeLayout(false);
            this.panelDisplay.ResumeLayout(false);
            this.panelDisplay.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.picDisplay)).EndInit();
            this.panelFilter.ResumeLayout(false);
            this.panelMode.ResumeLayout(false);
            this.grpMultimeter.ResumeLayout(false);
            this.grpMultimeter.PerformLayout();
            this.grpVFOBetween.ResumeLayout(false);
            this.grpVFOBetween.PerformLayout();
            this.grpDisplaySplit.ResumeLayout(false);
            this.grpRX2Meter.ResumeLayout(false);
            this.grpRX2Meter.PerformLayout();
            this.panelBandGN.ResumeLayout(false);
            this.panelRX2DSP.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.ptbSquelch)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialA)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialB)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialAA)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.VFODialBB)).EndInit();
            this.ResumeLayout(false);

        } // InitializeComponent()

        #endregion

        #region Main
        // ======================================================
        // Main
        // ======================================================

        [STAThread]
        static void Main(string[] args)
        {
       


            string app_data_path = "";
            string app_data_path1 = ""; // ke9ns add for original 2.7.2 folder

            foreach (string s in args)
            {
                if (s.StartsWith("-datapath:"))
                {
                    string path = s.Trim().Substring(s.Trim().IndexOf(":") + 1);

                    if (path.EndsWith("\"")) path = path.Substring(0, path.Length - 1);

                    if (!path.EndsWith("\\")) path += "\\";
#if (DEBUG)
                    path += "Debug\\";
#endif
                    if (Directory.Exists(path))
                        app_data_path = path;
                    else
                    {
                        DialogResult dr = MessageBox.Show("-datapath: command line option found, but the folder specified was not found.\n" +
                            "Would you like to create this folder?  If not, the default folder will be used.\n\n" +
                            "(" + s + ")",
                            "Command Line Option: Create Folder?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                        if (dr == DialogResult.Yes)
                        {
                            Directory.CreateDirectory(path);
                            app_data_path = path;
                        }
                    }
                }
            }


            //---------------------------------------------------------------------------------
            // ke9ns info:    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)  ==   %userprofile%\AppData\Roaming


            if (app_data_path == "")
            {
                Assembly assembly = Assembly.GetExecutingAssembly();
                FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
                string version = fvi.FileVersion.Substring(0, fvi.FileVersion.LastIndexOf("."));
             //   app_data_path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)  + "\\FlexRadio Systems\\PowerSDR v" + version + "\\"; // ke9ns 2.8.0
                app_data_path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\PowerSDR v2.8.0\\"; // ke9ns add to copy over the old 2.7.2 folder into 2.8.0
                app_data_path1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\PowerSDR v2.7.2\\"; // ke9ns add to copy over the old 2.7.2 folder into 2.8.0

#if (DEBUG)
                app_data_path += "Debug\\";
#endif
            }

            try 
			{
				if(!File.Exists(app_data_path + "wisdom"))  // look for %userprofile%\AppData\Roaming\FlexRadio Systems\PowerSDR v2.8.0\wisdom
                {
                    // Need to create the directory in %appdata% before we go run wisdom


                    if (!Directory.Exists(app_data_path)) 
                    {
                        Directory.CreateDirectory(app_data_path);   // create the new folder for the database and quickaudio:  %userprofile%\AppData\Roaming\FlexRadio Systems\PowerSDR v2.8.0\
                    }

                  
                    if (Directory.Exists(app_data_path1)) // if 2.7.2 folder exists then copy is contents to new  2.8.0 folder
                    {
                      //  MessageBox.Show("Found your 2.7.2 database and quickaudio files folder.\nFiles will be copied over so you dont lose anything.");

                        DialogResult dr = MessageBox.Show("Found your 2.7.2 database and quickaudio files folder.\nFiles will be copied over so you dont lose anything.",
                          "Option:Copy 2.7.2 database and files to 2.8.0 Folder?",
                          MessageBoxButtons.YesNo,
                          MessageBoxIcon.Question);

                        if (dr == DialogResult.Yes)
                        {

                            foreach (string dirPath in Directory.GetDirectories(app_data_path1, "*", SearchOption.AllDirectories))
                                Directory.CreateDirectory(dirPath.Replace(app_data_path1, app_data_path));

                            //Copy all the files & Replaces any files with the same name
                            foreach (string newPath in Directory.GetFiles(app_data_path1, "*.*", SearchOption.AllDirectories))
                                File.Copy(newPath, newPath.Replace(app_data_path1, app_data_path), true);

                        }
                    }
                    else
                    {
                        MessageBox.Show("No previous 2.7.2 folder found\nA new database file will be created and additional files will be installed");

                    }

                
                    // ke9ns memory does not need to be copied, its back up 1 folder level in the  %userprofile%\AppData\Roaming\FlexRadio Systems\ folder

                    //-------------------------------------------------------------------------------------------
                    // ke9ns add copy voacap and ke9ns folders from program files to roaming folder (THIS IS REQUIRED)

                    string path = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\FlexRadio Systems\\PowerSDR";  // ke9ns this is the ProgramData folder
                                                                                                                                                 // Application.StartupPath  = \Program Files (x86)\FlexRadio Systems\PowerSDR v2.8.0

                    try
                    {
                        File.Copy(path + "\\ke9ns\\SWL.csv", app_data_path + "SWL.csv", true);
                    }
                    catch(Exception)
                    {

                    }
                    try
                    {
                        File.Copy(path + "\\ke9ns\\SWL2.csv", app_data_path + "SWL2.csv", true);
                    }
                    catch (Exception)
                    {

                    }
                    try
                    {
                        File.Copy(path + "\\ke9ns\\DXLOC.txt", app_data_path + "DXLOC.txt", true);
                    }
                    catch (Exception)
                    {

                    }
                    try
                    {
                        File.Copy(path + "\\ke9ns\\test24.bmp", app_data_path + "test24.bmp", true);
                    }
                    catch (Exception)
                    {

                    }
                    try
                    {
                        File.Copy(path + "\\ke9ns\\OP.bmp", app_data_path + "OP.bmp", true);
                    }
                    catch (Exception)
                    {

                    }
                    try
                    {
                        File.Copy(path + "\\ke9ns\\arrl.bmp", app_data_path + "arrl.bmp", true);
                    }
                    catch (Exception)
                    {

                    }
                    try
                    {
                        File.Copy(path + "\\ke9ns\\PowerSDR TX Waterfall ID.pdf", app_data_path + "PowerSDR TX Waterfall ID.pdf", true);
                    }
                    catch (Exception)
                    {

                    }

                    try
                    {
                        File.Copy(path + "\\ke9ns\\PowerSDR ke9ns v2.8 features.pdf", app_data_path + "PowerSDR ke9ns v2.8 features.pdf", true);
                    }
                    catch (Exception)
                    {

                    }
                   

                    foreach (string dirPath in Directory.GetDirectories(path + "\\itshfbc", "*", SearchOption.AllDirectories))
                        Directory.CreateDirectory(dirPath.Replace(path + "\\itshfbc", app_data_path + "\\itshfbc"));
                   
                    foreach (string newPath in Directory.GetFiles(path + "\\itshfbc", "*.*", SearchOption.AllDirectories))
                        File.Copy(newPath, newPath.Replace(path + "\\itshfbc", app_data_path + "\\itshfbc"), true);

                  
                    //-------------------------------------------------------------------------------------------------

                    Process p = Process.Start(Application.StartupPath + "\\fftw_wisdom.exe", "\"" + app_data_path);

                    MessageBox.Show("Running one time optimization.  Please wait patiently for " +
                        "this process to finish.\nTypically the optimization takes no more than 3-5 minutes.",
                        "Optimizing...",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);

                    p.WaitForExit();

                /*    foreach (string dirPath in Directory.GetDirectories(SourcePath, "*",
                        SearchOption.AllDirectories))
                        Directory.CreateDirectory(dirPath.Replace(SourcePath, DestinationPath));

                    //Copy all the files & Replaces any files with the same name
                    foreach (string newPath in Directory.GetFiles(SourcePath, "*.*",
                        SearchOption.AllDirectories))
                        File.Copy(newPath, newPath.Replace(SourcePath, DestinationPath), true);
                */

                } 
/*				else 
				{
					string path = "wisdom";
					using (StreamReader sr = new StreamReader(path)) 
					{
						char [] block = new char[12];
						sr.ReadBlock(block,0,11);
						Debug.WriteLine("the block is "+block + "so let's check it");
						if (block.ToString() != "(fftw-3.2al")
						{
							sr.Close();
							File.Delete(Application.StartupPath+"\\wisdom");
							Process p = Process.Start(Application.StartupPath+"\\fftw_wisdom.exe");
							MessageBox.Show("Running one time optimization.  Wisdom is from wrong version. Please wait patiently for "+
								"this process to finish.\nTypically the optimization takes no more than 3-5 minutes.",
								"Optimizing...",
								MessageBoxButtons.OK,
								MessageBoxIcon.Information);
							p.WaitForExit();
						}
					}

				} */
                try
                {
                    if (!CheckForOpenProcesses()) // ke9ns check if another powersdr instance is running
                        return;
                }
                catch (Exception)
                {

                }
				Application.EnableVisualStyles(); 
				Application.DoEvents(); 
				
				//Application.Run(new Console(args));
				// wjt hacked
				theConsole = new Console(args);

				Application.Run(theConsole);
			}
			catch(Exception ex)
			{
				string msg = ex.Message+"\n\n"+ex.StackTrace.ToString();
				if(ex.InnerException != null) msg += "\n\n"+ex.InnerException.Message;
				MessageBox.Show(msg, "Fatal Error",
					MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
		} // main 

#endregion

#region Misc Routines
		// ======================================================
		// Misc Routines
		// ======================================================

		private void InitConsole()
		{

             

#if (DEBUG)
            uCBToolStripMenuItem.Visible = true;
			//button1.Visible = true;
#endif

#if (NO_TNF)
            btnTNFAdd.Visible = false;
            this.Controls.Remove(btnTNFAdd);
            btnTNFAdd = null;

            chkTNF.Visible = false;
            this.Controls.Remove(chkTNF);
            chkTNF = null;
#endif

            // EHR add nav support
            try
            {
                TDxDevice = new TDxInput.DeviceClass();
                TDxSensor = TDxDevice.Sensor;
                TDxDevice.Connect();
                if (TDxDevice.IsConnected)
                {
                    this.timer_navigate.Interval = 100; // 100mseconds
                    this.timer_navigate.Enabled = true;
                }
            }
            catch (Exception)
            {
                //MessageBox.Show("SpaceNavigator not installed.", "No Navigator",
                //MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            // EHR end

			Thread.Sleep(100);
			UpdateBandStackRegisters();

			Audio.console = this;
			//FWCMidi.console = this;
            FWC.console = this;
			Display.console = this;  //

            Http.console = this;                   // ke9ns add

           
            Setup.console = this;                 // ke9ns add  setup.cs to this console so setup can talk to console
            IDBOX.console = this;                 // ke9ns add IDBOX to this console
            TOTBOX.console = this;                 // ke9ns add TOTBOX to this console


            SpotControl.console = this;           // ke9ns add  spot.cs to this console so spot can talk to console
            ScanControl.console = this;           // ke9ns add  scan.cs to this console so scan can talk to console
            StackControl.console = this;          // ke9ns add  stack.cs to this console so stack can talk to console
            SwlControl.console = this;            // ke9ns add  swl.cs to this console so stack can talk to console

            helpbox.console = this;            // ke9ns add  helpbox.cs to this console so stack can talk to console

            if (hid_init) Flex1500.Console = this;

			chkDSPNB2.Enabled = true;

			vfoa_hover_digit = -1;
			vfob_hover_digit = -1;

			rx1_ant_by_band = new FWCAnt[(int)Band.LAST];

			for(int i=0; i<(int)Band.LAST; i++) rx1_ant_by_band[i] = FWCAnt.ANT1;

			rx2_ant_by_band = new FWCAnt[(int)Band.LAST];
			for(int i=0; i<(int)Band.LAST; i++) rx2_ant_by_band[i] = FWCAnt.RX2IN;
			tx_ant_by_band = new FWCAnt[(int)Band.LAST];
			for(int i=0; i<(int)Band.LAST; i++) tx_ant_by_band[i] = FWCAnt.ANT1;			
			rx1_loop_by_band = new bool[(int)Band.LAST];
			rx1_preamp_by_band = new PreampMode[(int)Band.LAST];
            rx_ant_1500_by_band = new HIDAnt[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++) rx_ant_1500_by_band[i] = HIDAnt.PA;
            tx_ant_1500_by_band = new HIDAnt[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++) tx_ant_1500_by_band[i] = HIDAnt.PA;

            for (int i = 0; i < (int)Band.LAST; i++)
            {
                switch (current_model)
                {
                    case Model.FLEX1500:
                        switch ((Band)i)
                        {
                            case Band.B160M:
                            case Band.B80M:
                            case Band.B60M:
                            case Band.B40M:
                            case Band.B20M:
                                rx1_preamp_by_band[i] = (PreampMode)FLEX1500PreampMode.ZERO;
                                break;
                            case Band.B17M:
                            case Band.B15M:
                                rx1_preamp_by_band[i] = (PreampMode)FLEX1500PreampMode.PLUS_10;
                                break;
                            case Band.B12M:
                            case Band.B10M:
                                rx1_preamp_by_band[i] = (PreampMode)FLEX1500PreampMode.PLUS_20;
                                break;
                            case Band.B6M:
                                rx1_preamp_by_band[i] = (PreampMode)FLEX1500PreampMode.PLUS_30;
                                break;
                            default:
                                rx1_preamp_by_band[i] = (PreampMode)FLEX1500PreampMode.ZERO;
                                break;
                        }
                        break;
                    case Model.FLEX3000:
                        switch ((Band)i)
                        {
                            case Band.B6M:
                            case Band.B10M:
                                rx1_preamp_by_band[i] = PreampMode.HIGH;
                                break;
                            case Band.B12M:
                            case Band.B15M:
                                rx1_preamp_by_band[i] = PreampMode.MED;
                                break;
                            default:
                                rx1_preamp_by_band[i] = PreampMode.LOW;
                                break;
                        }
                        break;
                    case Model.FLEX5000:
                        switch ((Band)i)
                        {
                            case Band.B6M:
                            case Band.B10M:
                            case Band.B12M:
                            case Band.B15M:
                                rx1_preamp_by_band[i] = PreampMode.HIGH;
                                break;
                            default:
                                rx1_preamp_by_band[i] = PreampMode.OFF;
                                break;
                        }
                        break;						
                    default:
                        rx1_preamp_by_band[i] = PreampMode.HIGH;
                        break;
                }
            }
			
            rx2_preamp_by_band = new PreampMode[(int)Band.LAST];
			for(int i=0; i<(int)Band.LAST; i++) rx2_preamp_by_band[i] = PreampMode.HIGH;
			
            power_by_band = new int[(int)Band.LAST];
			for(int i=0; i<(int)Band.LAST; i++) power_by_band[i] = 50;

            fm_tx_offset_by_band_mhz = new double[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++) // setup default FM offsets
            {
                switch ((Band)i)
                {
                    case Band.B6M: fm_tx_offset_by_band_mhz[i]  = 1; break; // 1MHz
                    case Band.B10M: fm_tx_offset_by_band_mhz[i] = 0.1;  break; // 100kHz
                    case Band.VHF0: fm_tx_offset_by_band_mhz[i] = 0.6;  break; // 600kHz
                    case Band.VHF1: fm_tx_offset_by_band_mhz[i] = 5; break; // 5MHz
                    default: fm_tx_offset_by_band_mhz[i] = 0.1; break; // 100kHz
                }
            }

            rx1_agct_by_band = new int[(int)Band.LAST];
			rx2_agct_by_band = new int[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++)
            {
                switch ((Band)i)
                {
                    case Band.B160M:
                    case Band.B80M:
                    case Band.B60M:
                        rx1_agct_by_band[i] = 75;
                        rx2_agct_by_band[i] = 75;
                        break;
                    case Band.B40M:
                    case Band.B30M:
                        rx1_agct_by_band[i] = 80;
                        rx2_agct_by_band[i] = 80;
                        break;
                    case Band.B20M:
                    case Band.B17M:
                        rx1_agct_by_band[i] = 85;
                        rx2_agct_by_band[i] = 85;
                        break;
                    case Band.B10M:
                        rx1_agct_by_band[i] = 95;
                        rx2_agct_by_band[i] = 95;
                        break;
                    case Band.B6M:
                        switch (current_model)
                        {
                            case Model.FLEX3000:
                                rx1_agct_by_band[i] = 100;
                                break;
                            default:
                                rx1_agct_by_band[i] = 110;
                                break;
                        }
                        rx2_agct_by_band[i] = 110;
                        break;
                    default:
                        rx1_agct_by_band[i] = 90;
                        rx2_agct_by_band[i] = 90;
                        break;
                }
            }
			tx1_by_band = new bool[(int)Band.LAST];
			tx2_by_band = new bool[(int)Band.LAST];
			tx3_by_band = new bool[(int)Band.LAST];

            for (int i = 0; i < (int)Band.LAST; i++)
            {
                tx1_by_band[i] = tx2_by_band[i] = tx3_by_band[i] = true;
            }

			vhf_text = new RadioButtonTS[15];
			vhf_text[0] = radBandVHF0;
			vhf_text[1] = radBandVHF1;
			vhf_text[2] = radBandVHF2;
			vhf_text[3] = radBandVHF3;
			vhf_text[4] = radBandVHF4;
			vhf_text[5] = radBandVHF5;
			vhf_text[6] = radBandVHF6;
			vhf_text[7] = radBandVHF7;
			vhf_text[8] = radBandVHF8;
			vhf_text[9] = radBandVHF9;
			vhf_text[10] = radBandVHF10;
			vhf_text[11] = radBandVHF11;
			vhf_text[12] = radBandVHF12;
			vhf_text[13] = radBandVHF13; //  vhf_text[index].Enabled = b;


         //   gen_text = new RadioButtonTS[15];  // ke9ns add dont know why yet
         //   gen_text[0] = radBandGEN0;
         //   gen_text[1] = radBandGEN1;
          //  gen_text[2] = radBandGEN2;
         //   gen_text[3] = radBandGEN3;
         //   gen_text[4] = radBandGEN4;
         //   gen_text[5] = radBandGEN5;
          //  gen_text[6] = radBandGEN6;
          //  gen_text[7] = radBandGEN7;
          //  gen_text[8] = radBandGEN8;
          //  gen_text[9] = radBandGEN9;
         //   gen_text[10] = radBandGEN10;
         //   gen_text[11] = radBandGEN11;
        //    gen_text[12] = radBandGEN12;
         //   gen_text[13] = radBandGEN13;



            radBandGN0.Enabled = true; // ke9ns add turn on all the buttons for GEN SWL
            radBandGN1.Enabled = true;
            radBandGN2.Enabled = true;
            radBandGN3.Enabled = true;
            radBandGN4.Enabled = true;
            radBandGN5.Enabled = true;
            radBandGN6.Enabled = true;
            radBandGN7.Enabled = true;
            radBandGN8.Enabled = true;
            radBandGN9.Enabled = true;
            radBandGN10.Enabled = true;
            radBandGN11.Enabled = true;
            radBandGN12.Enabled = true;
            radBandGN13.Enabled = true;



            vhf_power_table = new float[freqs_2m.Length];

            for (int i = 0; i < vhf_power_table.Length; i++)
            {
                vhf_power_table[i] = 0.0f;
            }
            uhf_power_table = new float[freqs_70cm.Length];

            for (int i = 0; i < vhf_power_table.Length; i++)
            {
                uhf_power_table[i] = 0.0f;
            }

			power_table = new float[(int)Band.LAST][];


            for (int i = 0; i < (int)Band.LAST; i++)
            {
                power_table[i] = new float[13];
            }

			rx1_image_gain_table = new float[(int)Band.LAST];
			rx1_image_phase_table = new float[(int)Band.LAST];
			rx2_image_gain_table = new float[(int)Band.LAST];
			rx2_image_phase_table = new float[(int)Band.LAST];
			tx_image_gain_table = new float[(int)Band.LAST];
			tx_image_phase_table = new float[(int)Band.LAST];

            tx_carrier_cal = new SortedDictionary<double, uint>();

			pa_bias_table = new int[4][]; // 4 groups of 8 pot settings
			for(int i=0; i<4; i++)
			{
				pa_bias_table[i] = new int[8];
				for(int j=0; j<8; j++)
					pa_bias_table[i][j] = 0;
			}

			rx1_level_table = new float[(int)Band.LAST][]; // 3 settings per band (display_offset, preamp, multimeter offset)
            switch (current_model)
            {
                case Model.FLEX3000:
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        rx1_level_table[i] = new float[3];
                        rx1_level_table[i][0] = -71.0f;	// setup defaults;
                        rx1_level_table[i][1] = 19.8f;
                        rx1_level_table[i][2] = -26.0f;
                    }
                    break;
                case Model.FLEX1500:
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        rx1_level_table[i] = new float[3];
                        rx1_level_table[i][0] = -90.0f;	// setup defaults;
                        rx1_level_table[i][1] = 19.8f;
                        rx1_level_table[i][2] = 0.0f;
                    }
                    break;
                default:
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        rx1_level_table[i] = new float[3];
                        rx1_level_table[i][0] = -59.2f;	// setup defaults;
                        rx1_level_table[i][1] = -13.5f;
                        rx1_level_table[i][2] = -32.0f;
                    }
                    break;
            }

			rx2_level_table = new float[(int)Band.LAST][]; // 3 settings per band (display_offset, preamp, multimeter offset)
			for(int i=0; i<(int)Band.LAST; i++)
			{
				rx2_level_table[i] = new float[3];
				rx2_level_table[i][0] = -59.2f;	// setup defaults;
				rx2_level_table[i][1] = -13.5f;	
				rx2_level_table[i][2] = -32.0f;
			}

			pa_bridge_table = new float[(int)Band.LAST][];
			for(int i=0; i<(int)Band.LAST; i++)
			{
				pa_bridge_table[i] = new float[6]; // 1, 2, 5, 10, 20, 90
				for(int j=0; j<6; j++)
					pa_bridge_table[i][j] = 0.0f;
			}

			swr_table = new float[(int)Band.LAST];
			for(int i=0; i<(int)Band.LAST; i++)
				swr_table[i] = 1.0f;

            atu_swr_table = new float[(int)Band.LAST];
            for (int i = 0; i < (int)Band.LAST; i++)
                atu_swr_table[i] = 1.0f;

            uhf_level_table = new float[2];
            //uhf_level_table[0] = ??? // TODO: add default values
            //uhf_level_table[1] = ???

            vhf_level_table = new float[2];
            //vhf_level_table[0] = ???
            //vhf_level_table[1] = ???

			atu_tuning = false;
			tune_power = 10;
			calibrating = false;

			// get culture specific decimal separator
			separator = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;

			last_band = "";						// initialize bandstack

            tune_step_list = new List<TuneStep>();  // initialize wheel tuning list array
            tune_step_list.Add(new TuneStep(1, "1Hz")); //0
            tune_step_list.Add(new TuneStep(10, "10Hz")); //1
            tune_step_list.Add(new TuneStep(50, "50Hz")); //2
            tune_step_list.Add(new TuneStep(100, "100Hz")); //3
            tune_step_list.Add(new TuneStep(250, "250Hz"));
            tune_step_list.Add(new TuneStep(500, "500Hz"));
            tune_step_list.Add(new TuneStep(1000, "1kHz")); //6
            tune_step_list.Add(new TuneStep(2500, "2.5kHz"));
            tune_step_list.Add(new TuneStep(5000, "5kHz"));
            tune_step_list.Add(new TuneStep(6250, "6.25kHz"));
            tune_step_list.Add(new TuneStep(9000, "9kHz"));
            tune_step_list.Add(new TuneStep(10000, "10kHz"));
            tune_step_list.Add(new TuneStep(12500, "12.5kHz"));
            tune_step_list.Add(new TuneStep(15000, "15kHz"));
            tune_step_list.Add(new TuneStep(20000, "20kHz"));
            tune_step_list.Add(new TuneStep(25000, "25kHz"));
            tune_step_list.Add(new TuneStep(30000, "30kHz"));
            tune_step_list.Add(new TuneStep(50000, "50kHz"));
            tune_step_list.Add(new TuneStep(100000, "100kHz"));
            tune_step_list.Add(new TuneStep(250000, "250kHz"));
            tune_step_list.Add(new TuneStep(500000, "500kHz"));
            tune_step_list.Add(new TuneStep(1000000, "1MHz"));
            tune_step_list.Add(new TuneStep(10000000, "10MHz"));

            tune_step_index = 2;


          //  setupForm.tune_step_index2 = 2; // ke9ns add
             

            meter_text_history = new float[multimeter_text_peak_samples];

			current_meter_data = -200.0f;

			rx1_preamp_offset = new float[5];
			rx1_preamp_offset[(int)PreampMode.OFF] = 10.0f;
			rx1_preamp_offset[(int)PreampMode.LOW] = 0.0f;
			rx1_preamp_offset[(int)PreampMode.MED] = -16.0f;
			rx1_preamp_offset[(int)PreampMode.HIGH] = -26.0f;
            rx1_preamp_offset[(int)PreampMode.LAST] = -36.0f;

			rx2_preamp_offset = new float[4];
			rx2_preamp_offset[(int)PreampMode.OFF] = 0.0f;
			rx2_preamp_offset[(int)PreampMode.HIGH] = -14.0f;            // ke9ns mod  was 14.0f should be -14  not +14
                                                                         // when set to +14 it would cause the waterfall signal to jump up

			this.ActiveControl = chkPower;		// Power has focus initially

			Display.Target = picDisplay;
			Display.Init();						// Initialize Display variables
			InitDisplayModes();					// Initialize Display Modes
			InitAGCModes();						// Initialize AGC Modes
			InitMultiMeterModes();              // Initialize MultiMeter Modes

            ProcessSampleThreadController[] pstc = new ProcessSampleThreadController[3];
			audio_process_thread = new Thread[3];
			for (uint proc_thread=0;proc_thread<3;proc_thread++)
			{
				pstc[proc_thread] = new ProcessSampleThreadController(proc_thread);
				audio_process_thread[proc_thread] = new Thread( new ThreadStart(pstc[proc_thread].ProcessSampleThread));
				audio_process_thread[proc_thread].Name = "Audio Process Thread "+proc_thread.ToString();
				audio_process_thread[proc_thread].Priority = ThreadPriority.Highest;
				audio_process_thread[proc_thread].IsBackground = true;
				audio_process_thread[proc_thread].Start();
				
				/*				DttSP.SetThreadCom(proc_thread);

								audio_process_thread = new Thread(	// create audio process thread
									new ThreadStart(DttSP.ProcessSamplesThread));
								audio_process_thread.Name = "Audio Process Thread ";
								audio_process_thread.Priority = ThreadPriority.Highest;
								audio_process_thread.IsBackground = true;
								audio_process_thread.Start();
				*/
			}

		//	if(current_model == Model.SDR1000)              hw = new HW(0x378);				// create hardware object

            //BT 5/3/10 moved siolistener to last init item to prevent default data
            //being sent via CAT
            //EW 5/20/10 undid this change due to crashes when the secondary Keyer input was set to CAT
			siolisten = new SIOListenerII(this);
            siolisten1 = new SIOListenerIII(this); // ke9ns add for rotor control

            CWSensorItem.Init();
            CWPTT.Init();
            CWPTT.MoxChanged += new CWPTT.MoxCallback(SetConsoleMox);
            CWPTT.MuteChanged += new CWPTT.MuteCallback(SetTRMute);

			eqForm = new EQForm(this);

			InitFilterPresets();                // Initialize filter values

           
            StackForm = new StackControl(this);     // ke9ns add communicate with bandstack controls
            SwlForm = new SwlControl(this);         // ke9ns add communicate with swl list controls
            helpboxForm = new helpbox(this);         // ke9ns add communicate with helpbox list controls

            httpFile = new Http(this);              // ke9ns add

            httpServer = new HttpServer(this);      // rn3kk add
           
            setupForm = new Setup(this);        // ke9ns  create Setup form (needed so you can send data to setup form) Repeat for any form you want to send data too

            skin1 = new Skin(this);
           
              IDBOXForm = new IDBOX(this);         // ke9ns create id timer message box now

              IDBOXForm.Show();
              IDBOXForm.Close();



            TOTBOXForm = new TOTBOX(this);         // ke9ns create TOT timer message box now

            TOTBOXForm.Show();
            TOTBOXForm.Close();


            setupForm.StartPosition = FormStartPosition.Manual;
			
			switch(current_model)
			{
			//	 case Model.SDR1000:
				//	Hdw.Init();							// Power down hardware
				//	Hdw.StandBy();						// initialize hardware device
				//	break;
					/*case Model.SDRX:
						if(fwc_init)
						{
							byte mask;
							FWC.GetRXPresentMask(out mask);
							for(int i=0; i<8; i++)
							{
								if((mask>>i & 1) == 1)
								{
									fwc_index = i;
									break;
								}
							}
						}
						break;*/
				case Model.FLEX5000:
					if(fwc_init)
						fwcMixForm = new FWCMixForm(this);
					break;
				case Model.FLEX3000:
					if(fwc_init)
						flex3000MixerForm = new FLEX3000MixerForm(this);
					break;
                case Model.FLEX1500:
                    if (hid_init)
                        flex1500MixerForm = new FLEX1500MixerForm(this);
                    break;
			}

			//SetupForm.GetTxProfiles();
			UpdateTXProfile(setupForm.TXProfile);

			Common.RestoreForm(eqForm, "EQForm", false);

            vuForm = new VUForm(this);
			xvtrForm = new XVTRForm(this);
            ucbForm = new UCBForm(this);

			WaveForm = new WaveControl(this);   // create Wave form
         
            WaveForm.StartPosition = FormStartPosition.Manual;

            ScanForm = new ScanControl(this);   // ke9ns add create Scan form
            ScanForm.StartPosition = FormStartPosition.Manual;


            flexControlBasicForm = new FlexControlBasicForm(this);
            flexControlAdvancedForm = new FlexControlAdvancedForm(this);

            memoryList = MemoryList.Restore();
            memoryList.CheckVersion();


            dxmemList = DXMemList.Restore1(); // ke9ns add for dx spotter
            dxmemList.CheckVersion1(); // ke9ns add


            InitMemoryFrontPanel();

			//rx1_filter = Filter.F2600;            

			//RX1AGCMode = AGCMode.MED;				// Initialize front panel controls
			comboPreamp.Text = "High";
			chkRX1Preamp.Checked = true;
			vfob_dsp_mode = DSPMode.LSB;
			vfob_filter = Filter.F3;
			comboDisplayMode.Text = "Panadapter";
			comboRX2DisplayMode.Text = "Panadapter";
			comboMeterRXMode.SelectedIndex = 0;
			comboRX2MeterMode.SelectedIndex = 0;
			comboTuneMode.SelectedIndex = 0;
			quick_save_filter = Filter.F3;
			quick_save_mode = DSPMode.LSB;
			ptbPWR.Value = 50;
            ptbTune.Value = 10; // ke9ns add
			btnDisplayPanCenter_Click(this, EventArgs.Empty);
			comboTXProfile.Text = setupForm.TXProfile;
			comboDigTXProfile.Text = setupForm.TXProfile;
            comboFMTXProfile.Text = setupForm.TXProfile;
            comboCWTXProfile.Text = setupForm.TXProfile;  // ke9ns add
            comboFMCTCSS.Text = "100.0";
			
			GetState();                         // recall saved state

          

            chkFullDuplex.Checked = false;
			if(rx1_dsp_mode == DSPMode.FIRST || rx1_dsp_mode == DSPMode.LAST)
				radModeSAM.Checked = true;
			if(rx2_dsp_mode == DSPMode.FIRST || rx2_dsp_mode == DSPMode.LAST)
				radRX2ModeSAM.Checked = true;
			if(rx1_filter == Filter.FIRST || rx1_filter == Filter.LAST ||
				(rx1_filter == Filter.NONE && rx1_dsp_mode != DSPMode.DRM && rx1_dsp_mode != DSPMode.SPEC))
				radFilter3.Checked = true;
			if(rx2_filter == Filter.FIRST || rx2_filter == Filter.LAST ||
				(rx2_filter == Filter.NONE && rx2_dsp_mode != DSPMode.DRM && rx2_dsp_mode != DSPMode.SPEC))
				radRX2Filter3.Checked = true;

			chkVFOATX_CheckedChanged(this, EventArgs.Empty);
			chkVFOBTX_CheckedChanged(this, EventArgs.Empty);

			txtVFOAFreq_LostFocus(this, EventArgs.Empty);

			if(fwc_init && !run_setup_wizard &&
				(current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
			{
				CheckCalData();
				if(!FWCEEPROM.TRXChecksumPresent)
					WriteTRXChecksums();
				VerifyTRXChecksums();
				if(fwcAntForm != null && !fwcAntForm.IsDisposed)
				{
                    Debug.WriteLine("1rx1_band " + rx1_band);

                    fwcAntForm.SetBand(rx1_band);
					fwcAntForm.CurrentAntMode = current_ant_mode;
					fwcAntForm.RX1Ant = rx1_ant;
					fwcAntForm.RX1Loop = rx1_loop;
					fwcAntForm.RX2Ant = rx2_ant;
					fwcAntForm.TXAnt = tx_ant;
				}
				RX1Ant = rx1_ant;
				if(FWCEEPROM.RX2OK)
				{
					CheckRX2CalData();
					if(!FWCEEPROM.RX2ChecksumPresent)
						WriteRX2Checksums();
					VerifyRX2Checksums();
					RX2Ant = rx2_ant;
				}
			}
            else if (hid_init && !run_setup_wizard && current_model == Model.FLEX1500)
            {
                Check1500CalData();
                Verify1500Checksums();

                if (hidAntForm != null && !hidAntForm.IsDisposed)
                {
                    hidAntForm.SetBand(rx1_band);
                    hidAntForm.CurrentAntMode = current_ant_mode;
                    hidAntForm.RXAnt = rx_ant_1500;
                    hidAntForm.TXAnt = tx_ant_1500;
                }
                RXAnt1500 = rx_ant_1500;
                TXAnt1500 = tx_ant_1500;
            }
            else PAPresent = pa_present;

			if(comboAGC.SelectedIndex < 0)
				RX1AGCMode = AGCMode.MED;
			if(comboRX2AGC.SelectedIndex < 0)
				comboRX2AGC.Text = "Med";
			txtVFOBFreq_LostFocus(this, EventArgs.Empty);
			txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            ptbTune_Scroll(this, EventArgs.Empty); // ke9ns add		
            ptbPWR_Scroll(this, EventArgs.Empty);

            ptbMON_Scroll(this, EventArgs.Empty); // ke9ns add

            ptbAF_Scroll(this, EventArgs.Empty);
            ptbSquelch_Scroll(this, EventArgs.Empty);
			ptbMic_Scroll(this, EventArgs.Empty);
            ptbDX_Scroll(this, EventArgs.Empty);
            ptbCPDR_Scroll(this, EventArgs.Empty);
            ptbVOX_Scroll(this, EventArgs.Empty);
            ptbNoiseGate_Scroll(this, EventArgs.Empty);
            ptbCWSpeed_Scroll(this, EventArgs.Empty);
            ptbPanMainRX_Scroll(this, EventArgs.Empty);
            ptbPanSubRX_Scroll(this, EventArgs.Empty);
            ptbRX2RF_Scroll(this, EventArgs.Empty);
            ptbRX2Squelch_Scroll(this, EventArgs.Empty);
            initializing = false;
			RX1PreampMode = rx1_preamp_mode;
			RX2PreampMode = rx2_preamp_mode;
            initializing = true;
			ptbDisplayZoom_Scroll(this, EventArgs.Empty);
			ptbRX0Gain_Scroll(this, EventArgs.Empty);
			ptbRX1Gain_Scroll(this, EventArgs.Empty);
			ptbPanMainRX_Scroll(this, EventArgs.Empty);
			ptbPanSubRX_Scroll(this, EventArgs.Empty);
			ptbRX2Pan_Scroll(this, EventArgs.Empty);
			ptbRX2Gain_Scroll(this, EventArgs.Empty);
			chkRX2Preamp_CheckedChanged(this, EventArgs.Empty);
            ptbRF_Scroll(this, EventArgs.Empty);
            ptbVACRXGain_Scroll(this, EventArgs.Empty);
            ptbVACTXGain_Scroll(this, EventArgs.Empty);


			CalcDisplayFreq();

			tune_step_index--;					// Setup wheel tuning
			ChangeTuneStepUp();

            setupForm.tune_step_index2--;   // ke9ns add
            setupForm.ChangeTuneStepUp2(); // ke9ns add


            UpdateDisplayOffsets();

			setupForm.initCATandPTTprops();   // wjt added -- get console props setup for cat and ptt 
			if ( CmdLineArgs != null ) 
			{ 
				for ( int i = 0; i < CmdLineArgs.Length; i++ ) 
				{

				}
			}

			if(comboMeterTXMode.Items.Count > 0 && comboMeterTXMode.SelectedIndex < 0)	comboMeterTXMode.SelectedIndex = 0;

            if (comboMeterTX1Mode.Items.Count > 0 && comboMeterTX1Mode.SelectedIndex < 0) comboMeterTX1Mode.SelectedIndex = 0; // ke9ns add


            chkMOX.Enabled = false;

            //SyncDSP();

			if(this.setupForm.FlexProfilerInstalled)
				remoteProfilesToolStripMenuItem.Visible = true;

            //EW 5/20/10 Moved this back up to where it was before to prevent crashes
            //siolisten = new SIOListenerII(this);

            if ((current_model == Model.FLEX1500) && !db_exists)    // for 1500 display centering
            {
                if_freq = 0.003800;
                setupForm.IFFreq = if_freq;
                chkSR.Checked = false;
                radDisplayZoom05.Checked = true;
            }

            SetCurrentFlexControlMode(null, current_flexcontrol_mode);

            if (flexcontrol_autodetect)  FlexControlScan();

		} //Initconsole

        private void FlexControlScan()
        {
            Thread t = new Thread(new ThreadStart(FlexControlScan_ThreadFunction));
            t.Name = "FlexControl Scan";
            t.IsBackground = true;
            t.Priority = ThreadPriority.Normal;
            t.Start();
        }


        //===============================================================
        // ke9ns thread
        private void FlexControlScan_ThreadFunction()
        {
            FlexControlManager.Rescan();

            if (FlexControlManager.DeviceCount == 0) return;
            
            if (flexControlBasicForm.FlexControl == null)    flexControlBasicForm.FlexControl = FlexControlManager.GetFlexControl(0);
                    
            if (flexControlAdvancedForm.FlexControl == null)    flexControlAdvancedForm.FlexControl = FlexControlManager.GetFlexControl(0);

        } // FlexControlScan_ThreadFunction()



        private void SyncDSP()
        {
            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    DSPRX dsp_rx = dsp.GetDSPRX(i, j);
                    dsp_rx.Update = true;
                    dsp_rx.Force = true;
                    dsp_rx.BufferSize = dsp_rx.BufferSize;
                    dsp_rx.Force = false;
                }
            }

            for (int i = 0; i < 1; i++)
            {
                DSPTX dsp_tx = dsp.GetDSPTX(i);
                dsp_tx.Update = true;
                dsp_tx.Force = true;
                dsp_tx.BufferSize = dsp_tx.BufferSize;
                dsp_tx.Force = false;
            }

            DSP.SyncStatic();

            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    DSPRX dsp_rx = dsp.GetDSPRX(i, j);
                    dsp_rx.Update = false;
                    dsp_rx.Force = true;
                    dsp_rx.Update = true;
                    dsp_rx.Force = false;
                }
            }

            for (int i = 0; i < 1; i++)
            {
                DSPTX dsp_tx = dsp.GetDSPTX(i);
                dsp_tx.Update = false;
                dsp_tx.Force = true;
                dsp_tx.Update = true;
                dsp_tx.Force = false;
            }
        }

		public void ExitConsole()
		{
           
            Debug.WriteLine("((((((((TERMINATE PROGRM 1))))))))))))))))");

            vfodial = false; // ke9ns add to terminal the dial routine
            N1MM_ON = false; // ke9ns add to shut off N1MM

            try
            {   // always close Pal as it was open to detect radios
                //if (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)
                {
                    Pal.Exit();
                    FWCMidi.Close();
                }
            }
            catch (Exception)
            {

            }

          

            if (SaveTXProfileOnExit == true)    // save the tx profile
            {
                setupForm.SaveTXProfileData();
            }


         
            if (setupForm != null)		// make sure Setup form is deallocated
				setupForm.Dispose();

            if (IDBOXForm != null)   // ke9ns add
                IDBOXForm.Dispose();


            if (TOTBOXForm != null)  // ke9ns add
                TOTBOXForm.Dispose();

            // ke9ns add
            if (SpotForm != null)      // make sure spotter form is deallocated
                   SpotForm.Dispose();

            // ke9ns add
             if (ScanForm != null)      // make sure scanner form is deallocated
                  ScanForm.Dispose();

             //  if (StackForm != null)      // make sure bandstack form is deallocated
              //    StackForm.Dispose();

          //  if (cwxForm != null)            // make sure CWX form is deallocated
             //   cwxForm.Dispose();

            chkPower.Checked = false;	// make sure power is off		
			ckQuickRec.Checked = false; // make sure recording is stopped
			
			//			if(draw_display_thread != null)
			//				draw_display_thread.Abort();
			
			//Parallel.ExitPortTalk();	// close parallel port driver
			PA19.PA_Terminate();		// terminate audio interface
			DB.Exit();					// close and save database
			//Mixer.RestoreState();		// restore initial mixer state
			DttSP.Exit();				// deallocate DSP variables
            
            // release PowerSDR Mutex from instance that created it
            try
            {
                if (psdr2_mutex_exists)
                {
                    psdr2_mutex.ReleaseMutex();
                }
            }
            catch (Exception)
            {
                
            }

            //  System.Windows.Forms.Application.Exit();

            Debug.WriteLine("((((((((TERMINATE PROGRM 2))))))))))))))))");

        } // exit console here



        //==============================================================================================
        //==============================================================================================
        //ke9ns   SAVE in DATABASE 
        //==============================================================================================
        //==============================================================================================
        public void SaveState()
		{
            // Automatically saves all control settings to the database in the tab
            // pages on this form of the following types: CheckBox, ComboBox,
            // NumericUpDown, RadioButton, TextBox, and TrackBar (slider)

           

            string s;
			chkPower.Checked = false;       // turn off the power first

            //-------------------------------------------------------------------
            // ke9ns add  create database to store my stuff in

            string file_name2 = AppDataPath + "ke9ns8.dat"; // save data for my mods

            FileStream stream2 = new FileStream(file_name2, FileMode.Create); // open BMP  file
            BinaryWriter writer2 = new BinaryWriter(stream2);

        //    if (Audio.MON_PRE == 1) Debug.WriteLine("Saving PRE = 1");
        //    else Debug.WriteLine("Saving PRE = 0");

            writer2.Write((double)WaterfallLowThresholdMic);      // TX low level waterfall threshold
            writer2.Write(setupForm.checkWaterMoveSize.Checked);  // large waterfall move
            writer2.Write(Display.GrayScale);                    // color or grayscale watetfall
            writer2.Write((byte)WaveForm.BandL);                 // save mode for check of valid waterfall ID later  // RX1DSPMode != BandL
            writer2.Write(Display.PW_AVG);                       // save avgP or avgB  RX1
            writer2.Write(Display.PW_AVG2);                      // save avgp or avgB RX2
            writer2.Write(Audio.MON_PRE);                        // save MONitor pre or post audio

            if (setupForm.gridBoxTS.Checked == true) Display.GridOff = 1; // gridlines OFF
            else Display.GridOff = 0; // gridlines ON

            writer2.Write(Display.GridOff);                      // save panadapter grid on/off
            writer2.Write(WaveControl.QAC);                      // QUickaudio file #

            writer2.Write(SpotControl.nameB);               // name for dx spotter
            writer2.Write(SpotControl.callB);               // call sign for dx spotter
            writer2.Write(SpotControl.nodeB);               // node  for dx spotter
            writer2.Write(SpotControl.portB);               // port for dx spotter

            writer2.Write(callsign);                             // callsign for waterfall ID
            writer2.Write(lastcallsign);                         // last callsign test for valid waterfall ID

            writer2.Write((byte)PAON);                           // temp/volts on/off console display
            writer2.Write((byte)noaaON);                          // space weather console display

            writer2.Write((byte)setupForm.tune_step_index2);      // save Powermate knob index

            writer2.Write("end");

            //  writer2.Write(callsign);                  // callsign test
            //  writer2.Write(Display.samplesPerSecondL);  // last samplerate


            writer2.Close();    // close  file
            stream2.Close();   // close stream
                               //   Debug.WriteLine("save database file on exit");

            PAON = 0;       // shut down PAON thread
            //--------------------------------------------------------------------

         //   Debug.WriteLine("-nameB " + SpotControl.nameB);
         //   Debug.WriteLine("-portB " + SpotControl.portB);
          //  Debug.WriteLine("-callB " + SpotControl.callB);
          //  Debug.WriteLine("-nodeB " + SpotControl.nodeB);






            //   Debug.WriteLine("mic " + WaterfallLowThresholdMic);
            //   Debug.WriteLine("large " + setupForm.checkWaterMoveSize.Checked);
            //   Debug.WriteLine("call " + callsign);
            //   Debug.WriteLine("callL " + LastCall);

            ArrayList a = new ArrayList();     // storage for saving everything


			foreach(Control c in this.Controls)			// For each control
			{
                // if it is a groupbox or panel, check for sub controls
				if(c.GetType() == typeof(GroupBoxTS) || c.GetType() == typeof(PanelTS))		
				{
					foreach(Control c2 in c.Controls)	// for each sub-control
					{	// check to see if it is a value type we need to save
						if(c2.Enabled)
						{
                            if (c2.GetType() == typeof(CheckBoxTS))
                                a.Add(c2.Name + "/" + ((CheckBoxTS)c2).Checked.ToString());
                            else if (c2.GetType() == typeof(ComboBoxTS))
                            {
                                if (((ComboBoxTS)c2).Items.Count > 0)
                                    a.Add(c2.Name + "/" + ((ComboBoxTS)c2).Text);
                            }
                            else if (c2.GetType() == typeof(NumericUpDownTS))
                                a.Add(c2.Name + "/" + ((NumericUpDownTS)c2).Value.ToString());
                            else if (c2.GetType() == typeof(RadioButtonTS))
                                a.Add(c2.Name + "/" + ((RadioButtonTS)c2).Checked.ToString());
                            else if (c2.GetType() == typeof(TextBoxTS))
                            {
                                if (((TextBoxTS)c2).ReadOnly == false)
                                    a.Add(c2.Name + "/" + ((TextBoxTS)c2).Text);
                            }
                            else if (c2.GetType() == typeof(TrackBarTS))
                                a.Add(c2.Name + "/" + ((TrackBarTS)c2).Value.ToString());
                            else if (c2.GetType() == typeof(PrettyTrackBar))
                                a.Add(c2.Name + "/" + ((PrettyTrackBar)c2).Value.ToString());
#if (DEBUG)
                            else if (c2.GetType() == typeof(GroupBox) ||
                                c2.GetType() == typeof(CheckBox) ||
                                c2.GetType() == typeof(ComboBox) ||
                                c2.GetType() == typeof(NumericUpDown) ||
                                c2.GetType() == typeof(RadioButton) ||
                                c2.GetType() == typeof(TextBox) ||
                                c2.GetType() == typeof(TrackBar))
                                Debug.WriteLine(c2.Name + " needs to be converted to a Thread Safe control.");
#endif
						}
					}
				}
				else // it is not a group box
				{	// check to see if it is a value type we need to save
					if(c.Enabled)
					{
						if(c.GetType() == typeof(CheckBoxTS))
							a.Add(c.Name+"/"+((CheckBoxTS)c).Checked.ToString());
						else if(c.GetType() == typeof(ComboBoxTS))
						{
							if(((ComboBoxTS)c).SelectedIndex >= 0)
								a.Add(c.Name+"/"+((ComboBoxTS)c).Text);
						}
						else if(c.GetType() == typeof(NumericUpDownTS))
							a.Add(c.Name+"/"+((NumericUpDownTS)c).Value.ToString());
						else if(c.GetType() == typeof(RadioButtonTS))
							a.Add(c.Name+"/"+((RadioButtonTS)c).Checked.ToString());
						else if(c.GetType() == typeof(TextBoxTS))
						{
							if(((TextBoxTS)c).ReadOnly == false)
								a.Add(c.Name+"/"+((TextBoxTS)c).Text);
						}
						else if(c.GetType() == typeof(TrackBarTS))
							a.Add(c.Name+"/"+((TrackBarTS)c).Value.ToString());
                        else if (c.GetType() == typeof(PrettyTrackBar))
                            a.Add(c.Name + "/" + ((PrettyTrackBar)c).Value.ToString());
#if (DEBUG)
						else if(c.GetType() == typeof(GroupBox) ||
							c.GetType() == typeof(CheckBox) ||
							c.GetType() == typeof(ComboBox) ||
							c.GetType() == typeof(NumericUpDown) ||
							c.GetType() == typeof(RadioButton) ||
							c.GetType() == typeof(TextBox) ||
							c.GetType() == typeof(TrackBar))
							Debug.WriteLine(c.Name+" needs to be converted to a Thread Safe control.");
#endif
					}
				}
			}

            string ver_num = TitleBar.GetVerNum();

			a.Add("current_datetime_mode/"+ (int)current_datetime_mode);
			a.Add("rx1_display_cal_offset/"+rx1_display_cal_offset.ToString("f3"));
			a.Add("rx1_meter_cal_offset/"+rx1_meter_cal_offset);

			a.Add("txtMemoryQuick/"+ txtMemoryQuick.Text);		// save quick memory settings
			a.Add("quick_save_mode/"+(int)quick_save_mode);
			a.Add("quick_save_filter/"+(int)quick_save_filter);

            a.Add("hid_last_cal_date_time/" + hid_last_cal_date_time);
            a.Add("hid_serial_num/" + hid_serial_num);
            a.Add("hid_trx_serial_num/" + hid_trx_serial_num);

			a.Add("fwc_last_cal_date_time/"+fwc_last_cal_date_time);
			a.Add("fwc_serial_num/"+fwc_serial_num);
			a.Add("fwc_trx_serial_num/"+fwc_trx_serial_num);

			a.Add("rx2_last_cal_date_time/"+rx2_last_cal_date_time);
			a.Add("rx2_serial_num/"+rx2_serial_num);
			a.Add("rx2_trx_match_serial/"+rx2_trx_match_serial);

            //FM Squelch Save
            a.Add("rx1_squelch_on/" + rx1_squelch_on);
            a.Add("rx1_squelch_threshold_scroll/" + rx1_squelch_threshold_scroll);
            a.Add("rx1_fm_squelch_threshold_scroll/" + rx1_fm_squelch_threshold_scroll);

            a.Add("rx2_squelch_on/" + rx2_squelch_on);            
            a.Add("rx2_squelch_threshold_scroll/"+rx2_squelch_threshold_scroll);
            a.Add("rx2_fm_squelch_threshold_scroll/"+rx2_fm_squelch_threshold_scroll);

            a.Add("current_flex_control_mode/" + current_flexcontrol_mode.ToString());
            a.Add("flexcontrol_autodetect/" + flexcontrol_autodetect);

            a.Add("waterfall_high_threshold_160m/" + waterfall_high_threshold_160m);
            a.Add("waterfall_low_threshold_160m/" + waterfall_low_threshold_160m);
            a.Add("waterfall_high_threshold_80m/" + waterfall_high_threshold_80m);
            a.Add("waterfall_low_threshold_80m/" + waterfall_low_threshold_80m);
            a.Add("waterfall_high_threshold_60m/" + waterfall_high_threshold_60m);
            a.Add("waterfall_low_threshold_60m/" + waterfall_low_threshold_60m);
            a.Add("waterfall_high_threshold_40m/" + waterfall_high_threshold_40m);
            a.Add("waterfall_low_threshold_40m/" + waterfall_low_threshold_40m);
            a.Add("waterfall_high_threshold_30m/" + waterfall_high_threshold_30m);
            a.Add("waterfall_low_threshold_30m/" + waterfall_low_threshold_30m);
            a.Add("waterfall_high_threshold_20m/" + waterfall_high_threshold_20m);
            a.Add("waterfall_low_threshold_20m/" + waterfall_low_threshold_20m);
            a.Add("waterfall_high_threshold_17m/" + waterfall_high_threshold_17m);
            a.Add("waterfall_low_threshold_17m/" + waterfall_low_threshold_17m);
            a.Add("waterfall_high_threshold_15m/" + waterfall_high_threshold_15m);
            a.Add("waterfall_low_threshold_15m/" + waterfall_low_threshold_15m);
            a.Add("waterfall_high_threshold_12m/" + waterfall_high_threshold_12m);
            a.Add("waterfall_low_threshold_12m/" + waterfall_low_threshold_12m);
            a.Add("waterfall_high_threshold_10m/" + waterfall_high_threshold_10m);
            a.Add("waterfall_low_threshold_10m/" + waterfall_low_threshold_10m);
            a.Add("waterfall_high_threshold_6m/" + waterfall_high_threshold_6m);
            a.Add("waterfall_low_threshold_6m/" + waterfall_low_threshold_6m);
            a.Add("waterfall_high_threshold_wwv/" + waterfall_high_threshold_wwv);
            a.Add("waterfall_low_threshold_wwv/" + waterfall_low_threshold_wwv);
            a.Add("waterfall_high_threshold_gen/" + waterfall_high_threshold_gen);
            a.Add("waterfall_low_threshold_gen/" + waterfall_low_threshold_gen);
            a.Add("waterfall_high_threshold_xvtr/" + waterfall_high_threshold_xvtr);
            a.Add("waterfall_low_threshold_xvtr/" + waterfall_low_threshold_xvtr);
            a.Add("waterfall_update_period/" + waterfall_update_period);
            a.Add("lsb_txprofile/" + lsb_txprofile);
            a.Add("usb_txprofile/" + usb_txprofile);
            a.Add("dsb_txprofile/" + dsb_txprofile);
            a.Add("cwl_txprofile/" + cwl_txprofile);
            a.Add("cwu_txprofile/" + cwu_txprofile);
            a.Add("fm_txprofile/" + fm_txprofile);
            a.Add("am_txprofile/" + am_txprofile);
            a.Add("sam_txprofile/" + sam_txprofile);
            a.Add("spec_txprofile/" + spec_txprofile);
            a.Add("digl_txprofile/" + digl_txprofile);
            a.Add("digu_txprofile/" + digu_txprofile);
            a.Add("drm_txprofile/" + drm_txprofile);

			for(int m=(int)DSPMode.FIRST+1; m<(int)DSPMode.LAST; m++)
			{	// save filter settings per mode
				for(Filter f=Filter.FIRST+1; f<Filter.LAST; f++)
				{
					a.Add("rx1_filters["+m.ToString()+"]["+((int)f).ToString()+"]/"+rx1_filters[m].ToString(f));
				}
				a.Add("last_rx1_filter["+m.ToString()+"]/"+rx1_filters[m].LastFilter.ToString());
			}

			for(int m=(int)DSPMode.FIRST+1; m<(int)DSPMode.LAST; m++)
			{	// save filter settings per mode
				for(Filter f=Filter.FIRST+1; f<Filter.LAST; f++)
				{
					a.Add("rx2_filters["+m.ToString()+"]["+((int)f).ToString()+"]/"+rx2_filters[m].ToString(f));
				}
				a.Add("last_rx2_filter["+m.ToString()+"]/"+rx2_filters[m].LastFilter.ToString());
			}

#if (!NO_TNF)
            for (int i = 0; i < NotchList.List.Count; i++)
            {
                // only save off the permanent notches (ones where a right-click remember has been performed)
                if (NotchList.List[i].Permanent)
                {
                    a.Add("notchlist[" + i + "]/" + NotchList.List[i].ToString());
                }
            }
#endif

			for(int i=0; i < (int)Band.LAST; i++)
			{
				s = "power_table["+i+"]/";
				for(int j=0; j<13; j++)
					s += power_table[i][j].ToString("f4")+"|";
				s = s.Substring(0, s.Length-1);
				a.Add(s);
			}
            
            s = "vhf_power_table/";
            for (int j = 0; j < vhf_power_table.Length; j++)
                s += vhf_power_table[j].ToString("f4") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "uhf_power_table/";
            for (int j = 0; j < uhf_power_table.Length; j++)
               s += uhf_power_table[j].ToString("f4") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "tx_carrier_cal/";
            foreach (KeyValuePair<double, uint> pair in tx_carrier_cal)
                s += Math.Round(pair.Key, 3).ToString("f3") + "#" + pair.Value.ToString("X") + "|";
            s = s.Substring(0, s.Length - 1); // remove last '|'
            a.Add(s);

			for(int i=0; i<4; i++)
			{
				s = "pa_bias_table["+i+"]/";
				for(int j=0; j<8; j++)
					s += pa_bias_table[i][j].ToString()+"|";
				s = s.Substring(0, s.Length-1);
				a.Add(s);
			}

			for(int i=0; i<(int)Band.LAST; i++)
			{
				s = "rx1_level_table["+i+"]/";
				for(int j=0; j<3; j++)
					s += rx1_level_table[i][j].ToString("f3")+"|";
				s = s.Substring(0, s.Length-1);
				a.Add(s);
			}

			for(int i=0; i<(int)Band.LAST; i++)
			{
				s = "rx2_level_table["+i+"]/";
				for(int j=0; j<3; j++)
					s += rx2_level_table[i][j].ToString("f3")+"|";
				s = s.Substring(0, s.Length-1);
				a.Add(s);
			}

			if(FWCEEPROM.RX2OK)
			{
				a.Add("rx2_res_offset/"+rx2_res_offset.ToString("f6"));
			}

			for(int i=0; i<(int)Band.LAST; i++)
			{		
				s = "pa_bridge_table["+i+"]/";
				for(int j=0; j<6; j++)
					s += pa_bridge_table[i][j].ToString("f4")+"|";
				s = s.Substring(0, s.Length-1);
				a.Add(s);
			}
	
			for(int i=0; i<(int)Band.LAST; i++)
			{
				s = "swr_table["+i+"]/";
				s += swr_table[i].ToString("f4");
				a.Add(s);
			}

            for (int i = 0; i < (int)Band.LAST; i++)
            {
                s = "atu_swr_table[" + i + "]/";
                s += atu_swr_table[i].ToString("f4");
                a.Add(s);
            }

            s = "vhf_level_table/";
            for (int i = 0; i < 2; i++)
                s += vhf_level_table[i].ToString("f1") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

            s = "uhf_level_table/";
            for (int i = 0; i < 2; i++)
                s += uhf_level_table[i].ToString("f1") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

			a.Add("current_ant_mode/"+((int)current_ant_mode).ToString());
			a.Add("rx1_ant/"+((int)rx1_ant).ToString());
			s = "rx1_ant_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += ((int)rx1_ant_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);
			a.Add("rx1_loop/"+rx1_loop.ToString());

			a.Add("rx2_ant/"+((int)rx2_ant).ToString());
			s = "rx2_ant_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += ((int)rx2_ant_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			a.Add("tx_ant/"+((int)tx_ant).ToString());
			s = "tx_ant_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += ((int)tx_ant_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

            a.Add("rx_ant_1500/"+((int)rx_ant_1500).ToString());
            s = "rx_ant_1500_by_band/";
            for(int i=0; i<(int)Band.LAST; i++)
                s += ((int)rx_ant_1500_by_band[i]).ToString()+"|";
            s = s.Substring(0, s.Length-1);
            a.Add(s);

            a.Add("tx_ant_1500/"+((int)tx_ant_1500).ToString());
            s = "tx_ant_1500_by_band/";
            for(int i=0; i<(int)Band.LAST; i++)
                s += ((int)tx_ant_1500_by_band[i]).ToString()+"|";
            s = s.Substring(0, s.Length-1);
            a.Add(s);

			s = "rx1_loop_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += Convert.ToUInt16(rx1_loop_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			rx1_preamp_by_band[(int)rx1_band] = rx1_preamp_mode;
            for (int i = 0; i < (int)Band.LAST; i++)
            {
                if (rx1_preamp_by_band[i] == PreampMode.FIRST)
                    rx1_preamp_by_band[i] = PreampMode.OFF;
            }
			s = "rx1_preamp_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += ((int)rx1_preamp_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			rx2_preamp_by_band[(int)rx2_band] = rx2_preamp_mode;
			s = "rx2_preamp_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += ((int)rx2_preamp_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "power_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += power_by_band[i].ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

            s = "fm_tx_offset_by_band_mhz/";
            for (int i = 0; i < (int)Band.LAST; i++)
                s += fm_tx_offset_by_band_mhz[i].ToString("R") + "|";
            s = s.Substring(0, s.Length - 1);
            a.Add(s);

			s = "rx1_agct_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += rx1_agct_by_band[i].ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "rx2_agct_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += rx2_agct_by_band[i].ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "tx1_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += Convert.ToUInt16(tx1_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "tx2_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += Convert.ToUInt16(tx2_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "tx3_by_band/";
			for(int i=0; i<(int)Band.LAST; i++)
				s += Convert.ToUInt16(tx3_by_band[i]).ToString()+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "rx1_image_gain_table/";
			for(int i=0; i<=(int)Band.B6M; i++)
				s += rx1_image_gain_table[i].ToString("R")+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "rx1_image_phase_table/";
			for(int i=0; i<=(int)Band.B6M; i++)
				s += rx1_image_phase_table[i].ToString("R")+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "rx2_image_gain_table/";
			for(int i=0; i<=(int)Band.B6M; i++)
				s += rx2_image_gain_table[i].ToString("R")+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "rx2_image_phase_table/";
			for(int i=0; i<=(int)Band.B6M; i++)
				s += rx2_image_phase_table[i].ToString("R")+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "tx_image_gain_table/";
			for(int i=0; i<=(int)Band.B6M; i++)
				s += tx_image_gain_table[i].ToString("R")+"|";
			s = s.Substring(0, s.Length-1);
			a.Add(s);

			s = "tx_image_phase_table/";
			for(int i=0; i<=(int)Band.B6M; i++)
				s += tx_image_phase_table[i].ToString("R")+"|";
			s = s.Substring(0, s.Length-1);
            a.Add(s);

			a.Add("rx1_level_checksum/"+rx1_level_checksum.ToString());
			a.Add("rx1_image_gain_checksum/"+rx1_image_gain_checksum.ToString());
			a.Add("rx1_image_phase_checksum/"+rx1_image_phase_checksum.ToString());
			a.Add("tx_image_gain_checksum/"+tx_image_gain_checksum.ToString());
			a.Add("tx_image_phase_checksum/"+tx_image_phase_checksum.ToString());
			a.Add("tx_carrier_checksum/"+tx_carrier_checksum.ToString());
			a.Add("pa_bias_checksum/"+pa_bias_checksum.ToString());
			a.Add("pa_bridge_checksum/"+pa_bridge_checksum.ToString());
			a.Add("pa_power_checksum/"+pa_power_checksum.ToString());
			a.Add("pa_swr_checksum/"+pa_swr_checksum.ToString());
            a.Add("atu_swr_checksum/" + atu_swr_checksum.ToString());
			a.Add("rx2_level_checksum/"+rx2_level_checksum.ToString());
			a.Add("rx2_image_gain_checksum/"+rx2_image_gain_checksum.ToString());
			a.Add("rx2_image_phase_checksum/"+rx2_image_phase_checksum.ToString());
            

            //------------------------------------------------------------------------
            // ke9ns      this saves the stuff here
			try
			{
				StreamWriter writer = new StreamWriter(app_data_path + "power.csv"); // "\\power.csv"

                writer.WriteLine("Band, 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100");

                for (int i=1; i <= (int)Band.B6M; i++)
				{
					writer.Write(((Band)i).ToString()+",");
					for(int j=0; j < 13; j++)
						writer.Write(power_table[i][j].ToString("f4")+",");
					writer.WriteLine("");
				}
				writer.Close();
			}
			catch(Exception)
			{
				MessageBox.Show("Error writing power.csv file.  Please make sure this file is not open and try again.",
					"Error writing power.csv",
					MessageBoxButtons.OK,
					MessageBoxIcon.Error);
			}

			/*try
			{
				StreamWriter writer = new StreamWriter(app_data_path+"\\rx1_level.csv");
				writer.WriteLine("Band, 0, 1, 2");
				for(int i=1; i<=(int)Band.B6M; i++)
				{
					writer.Write(((Band)i).ToString()+",");
					for(int j=0; j<3; j++)
						writer.Write(rx1_level_table[i][j].ToString("f10")+",");
					writer.WriteLine("");
				}
				writer.Close();
			}
			catch(Exception)
			{
				MessageBox.Show("Error writing rx1_level.csv file.  Please make sure this file is not open and try again.",
					"Error writing rx1_level.csv",
					MessageBoxButtons.OK,
					MessageBoxIcon.Error);
			}*/

			a.Add("rx2_fixed_gain/"+rx2_fixed_gain.ToString());
			a.Add("rx2_max_gain/"+rx2_max_gain.ToString());

			a.Add("band_160m_index/"+band_160m_index.ToString());
			a.Add("band_80m_index/"+band_80m_index.ToString());
			a.Add("band_60m_index/"+band_60m_index.ToString());
			a.Add("band_40m_index/"+band_40m_index.ToString());
			a.Add("band_30m_index/"+band_30m_index.ToString());
			a.Add("band_20m_index/"+band_20m_index.ToString());
			a.Add("band_17m_index/"+band_17m_index.ToString());
			a.Add("band_15m_index/"+band_15m_index.ToString());
			a.Add("band_12m_index/"+band_12m_index.ToString());
			a.Add("band_10m_index/"+band_10m_index.ToString());
			a.Add("band_6m_index/"+band_6m_index.ToString());
			a.Add("band_2m_index/"+band_2m_index.ToString());
			a.Add("band_wwv_index/"+band_wwv_index.ToString());
			a.Add("band_gen_index/"+band_gen_index.ToString());


            a.Add("band_LMF_index/" + band_LMF_index.ToString()); // ke9ns add
            a.Add("band_120m_index/" + band_120m_index.ToString());
            a.Add("band_90m_index/" + band_90m_index.ToString());
            a.Add("band_61m_index/" + band_61m_index.ToString());
            a.Add("band_49m_index/" + band_49m_index.ToString());
            a.Add("band_41m_index/" + band_41m_index.ToString());
            a.Add("band_31m_index/" + band_31m_index.ToString());
            a.Add("band_25m_index/" + band_25m_index.ToString());
            a.Add("band_22m_index/" + band_22m_index.ToString());
            a.Add("band_19m_index/" + band_19m_index.ToString());
            a.Add("band_16m_index/" + band_16m_index.ToString());
            a.Add("band_14m_index/" + band_14m_index.ToString());
            a.Add("band_13m_index/" + band_13m_index.ToString());
            a.Add("band_11m_index/" + band_11m_index.ToString());

            a.Add("band_vhf0_index/"+band_vhf0_index.ToString());
			a.Add("band_vhf1_index/"+band_vhf1_index.ToString());
			a.Add("band_vhf2_index/"+band_vhf2_index.ToString());
			a.Add("band_vhf3_index/"+band_vhf3_index.ToString());
			a.Add("band_vhf4_index/"+band_vhf4_index.ToString());
			a.Add("band_vhf5_index/"+band_vhf5_index.ToString());
			a.Add("band_vhf6_index/"+band_vhf6_index.ToString());
			a.Add("band_vhf7_index/"+band_vhf7_index.ToString());
			a.Add("band_vhf8_index/"+band_vhf8_index.ToString());
			a.Add("band_vhf9_index/"+band_vhf9_index.ToString());
			a.Add("band_vhf10_index/"+band_vhf10_index.ToString());
			a.Add("band_vhf11_index/"+band_vhf11_index.ToString());
			a.Add("band_vhf12_index/"+band_vhf12_index.ToString());
			a.Add("band_vhf13_index/"+band_vhf13_index.ToString());



            for (int i=(int)PreampMode.FIRST+1; i < (int)PreampMode.LAST; i++)
				a.Add("rx1_preamp_offset["+i.ToString()+"]/"+rx1_preamp_offset[i].ToString("f3"));

			//a.Add("fwc_preamp_offset/"+fwc_preamp_offset.ToString());
			/*for(int i=0; i<32; i++)
				a.Add("fwc_att_offset["+i.ToString()+"]/"+fwc_att_offset[i].ToString());*/

			a.Add("wheel_tune_index/"+tune_step_index.ToString());      // Save wheel tune value

          

            a.Add("vfob_dsp_mode/"+((int)vfob_dsp_mode).ToString());	// Save VFO B values
			a.Add("vfob_filter/"+((int)vfob_filter).ToString());
			
            a.Add("console_zaximize/" +this.WindowState.ToString()); // ke9ns add for max detectino

            a.Add("console_top/"+this.Top.ToString());		            // save form positions
			a.Add("console_left/"+this.Left.ToString());
			a.Add("console_width/"+this.Width.ToString());
			a.Add("console_height/"+this.Height.ToString());
			a.Add("setup_top/"+setupForm.Top.ToString());
			a.Add("setup_left/"+setupForm.Left.ToString());
            a.Add("saved_rx_only/" + saved_rx_only.ToString());
            a.Add("mon_recall/" + mon_recall.ToString());

			a.Add("Version/"+this.Text);		    // save the current title bar string
            a.Add("VersionNumber/" + ver_num);      // PowerSDR version number in a.b.c format
            a.Add("RadioType/" + CurrentModel);     // radio model string (ex. FLEX1500)
            a.Add("BandTextID/" + current_region);  // TURF Region
            a.Add("Opened/" + extended);            // has the radio been opened?

            DB.PurgeNotches();                      // remove old notches from DB
			DB.SaveVars("State", ref a);		    // save the values to the DB

		}  // end of save state here


        public static byte moninit = 1;               // ke9ns used for chkMON startup

        //=======================================================================================
        //=======================================================================================
        // ke9ns mod  LOAD UP DATABASE into PowerSDR 
        //=======================================================================================
        //=======================================================================================
        public void GetState()
        {
            // Automatically restores all controls from the database in the
            // tab pages on this form of the following types: CheckBox, ComboBox,
            // NumericUpDown, RadioButton, TextBox, and TrackBar (slider)


            //--------------------------------------------------------
            // ke9ns add  open up database for my stuff  here
           // AppDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\";
            string file_name3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\" + "mem.bak"; // save original Memory.xml file just in case T10
            string file_name4 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\FlexRadio Systems\\" + "memory.xml"; // save original Memory.xml file just in case T10

            if ((!File.Exists(file_name3)) && (File.Exists(file_name4)))
            {
                Debug.WriteLine("Backing up Memory file 1 time");

                System.IO.File.Copy(file_name4, file_name3); // old > new

            }


            string file_name2 = AppDataPath + "ke9ns8.dat"; // save data for my mods


            if (!File.Exists(file_name2))
            {

                Debug.WriteLine("Create new database file");

                FileStream stream2 = new FileStream(file_name2, FileMode.Create); // open BMP  file
                BinaryWriter writer2 = new BinaryWriter(stream2);

                writer2.Write((double)WaterfallLowThresholdMic);      // TX low level waterfall threshold
                writer2.Write(setupForm.checkWaterMoveSize.Checked);  // large waterfall move
                writer2.Write(Display.GrayScale);                    // color or grayscale watetfall
                writer2.Write((byte)WaveForm.BandL);                 // save mode for check of valid waterfall ID later  // RX1DSPMode != BandL
                writer2.Write(Display.PW_AVG);                       // save avgP or avgB  RX1
                writer2.Write(Display.PW_AVG2);                      // save avgp or avgB RX2
                writer2.Write(Audio.MON_PRE);                        // save MONitor pre or post audio
                writer2.Write(Display.GridOff);                      // save panadapter grid on/off
                writer2.Write(WaveControl.QAC);                      // QUickaudio file #

                writer2.Write(SpotControl.nameB);               // name for dx spotter
                writer2.Write(SpotControl.callB);               // call sign for dx spotter
                writer2.Write(SpotControl.nodeB);               // node  for dx spotter
                writer2.Write(SpotControl.portB);               // port for dx spotter

            
                writer2.Write(callsign);                             // callsign for waterfall ID
                writer2.Write(lastcallsign);                         // last callsign test for valid waterfall ID

                writer2.Write((byte)PAON);                           // temp/volts on/off console display
                writer2.Write((byte)noaaON);                          // space weather console display

                writer2.Write((byte)setupForm.tune_step_index2);      // save Powermate knob index

                writer2.Write("end");


                writer2.Close();    // close  file
                stream2.Close();   // close stream
                Debug.WriteLine("Create new database file");

            }
            else // yes ke9ns.dat file does exist
            {

                FileStream stream2 = new FileStream(file_name2, FileMode.Open); // open ke9ns file
                BinaryReader reader2 = new BinaryReader(stream2);

                WaterfallLowThresholdMic = (float)reader2.ReadDouble();            //  TX low level waterfall threshold
                setupForm.checkWaterMoveSize.Checked = reader2.ReadBoolean();      // large waterfall move
                Display.GrayScale = reader2.ReadByte();                            // color or grayscale waterfall 
                WaveForm.BandL = (DSPMode)reader2.ReadByte();                      // for check of valid waterfall id
                Display.PW_AVG = reader2.ReadByte();                               // avgP or avgB RX1
                Display.PW_AVG2 = reader2.ReadByte();                              // avgP or avgB RX2
                Audio.MON_PRE = reader2.ReadByte();                                // MONitor pre or post
                Display.GridOff = reader2.ReadByte();                              // panadapter grid on / off
                WaveControl.QAC = reader2.ReadInt32();                             // QUickaudio file #

                SpotControl.DXNAME = reader2.ReadString();                     // name for dx spotter
                SpotControl.DXCALL = reader2.ReadString();                     // call sign for dx spotter
                SpotControl.DXNODE = reader2.ReadString();                     // node for dx spotter
                SpotControl.DXPORT = reader2.ReadString();                     // port for dx spotter
         

                callsign = reader2.ReadString();                                   // callsign for waterfall ID
                lastcallsign = reader2.ReadString();                               // last callsign test of waterfall ID valid

                PAON = reader2.ReadByte();                                       // temp/volt on/off display
                noaaON = reader2.ReadByte();                                // space weather console display

                try
                {
                    setupForm.tune_step_index2 = reader2.ReadByte();            // Powermate knob index
                }
                catch(Exception)
                {
                    setupForm.tune_step_index2 = 2;
                    setupForm.tune_step_index2--;   // ke9ns add
                    setupForm.ChangeTuneStepUp2(); // ke9ns add


                }

                reader2.Close();    // close  file
                stream2.Close();   // close stream
                                   //   Debug.WriteLine("Read database file");

            } // yes ke9ns.dat file does exist


            //ke9ns add
            if (setupForm.chkBoxHTTP.Checked == true)
            {
              //   HttpServer2(); // ke9ns  start server

                Debug.WriteLine("ke9ns8 httplaunch");

                HttpServer = true;

             //  httpFile.HttpServer1();

            }

         //   Debug.WriteLine("1nameB " + SpotControl.nameB);
         //   Debug.WriteLine("1portB " + SpotControl.portB);
         //   Debug.WriteLine("1callB " + SpotControl.callB);
         //    Debug.WriteLine("1nodeB " + SpotControl.nodeB);

            if (Display.GridOff == 1)
            {
                setupForm.gridBoxTS.CheckedChanged -= setupForm.gridBoxTS_CheckedChanged;  // ke9ns turn off checkchanged temporarily    // ke9ns turn off valuechanged temporarily 
                setupForm.gridBoxTS.Checked = true;
                setupForm.gridBoxTS.CheckedChanged += setupForm.gridBoxTS_CheckedChanged;


            }

            //  if (Audio.MON_PRE == 1)
            //  {

            //   Audio.MON_PRE = 2;// initial startup

            //   chkMON.CheckedChanged -= chkMON_CheckedChanged;
            //    chkMON.Text = "MONpr";
            //   panelDisplay.Invalidate();
            //   chkMON.Invalidate();
            //   panelDisplay.Update();
            //    chkMON.CheckedChanged -= chkMON_CheckedChanged;

            //  }
            //  else
            //  {
            //   Debug.WriteLine("recall PRE = 0");
            //  Audio.MON_PRE = 1;

            //  chkMON.CheckedChanged -= chkMON_CheckedChanged;
            //   chkMON.Text = "MONps";
            //    panelDisplay.Invalidate();
            //  chkMON.Invalidate();
            //   panelDisplay.Update();
            //  chkMON.CheckedChanged += chkMON_CheckedChanged;

            // }




            if (Display.PW_AVG == 1)
            {
              //  Debug.WriteLine("avgP ");
             
                chkDisplayAVG.CheckedChanged -= chkDisplayAVG_CheckedChanged; // turn eventoff
              //  chkDisplayAVG.Checked = true;
                 chkDisplayAVG.Enabled = true;

                chkDisplayAVG.Text = "AvgP"; // ke9ns 
                panelDisplay.Invalidate();
                chkDisplayAVG.Invalidate();
                panelDisplay.Update();

                chkDisplayAVG.CheckedChanged += chkDisplayAVG_CheckedChanged; // turn eventoff


            }
            else
            {
              //  chkDisplayAVG.Text = "AvgB"; // ke9ns 

            }
            if (Display.PW_AVG2 == 1)
            {
                // Debug.WriteLine("avgP ");

                chkRX2DisplayAVG.CheckedChanged -= chkRX2DisplayAVG_CheckedChanged; // turn eventoff
              //  chkRX2DisplayAVG.Checked = true;

               chkRX2DisplayAVG.Enabled = true;

                chkRX2DisplayAVG.Text = "AvgP"; // ke9ns 
                panelRX2Display.Invalidate();
                chkRX2DisplayAVG.Invalidate();

                panelRX2Display.Update();
                chkRX2DisplayAVG.CheckedChanged += chkRX2DisplayAVG_CheckedChanged; // turn eventoff

            }
            else
            {
               // chkRX2DisplayAVG.Text = "AvgB"; // ke9ns 

            }

            if (Display.GrayScale == 1)
            {
                this.GrayMenuItem.Text = "ColorWtr";
               
            }
            if (setupForm.checkWaterMoveSize.Checked)
            {
                Display.WMS = 1;
            }
            callsignTextBox.Text = callsign;

            if ((callsign == lastcallsign) && (WaveForm.BandL == RX1DSPMode))
            {
              
                callsignTextBox.BackColor = Color.MediumSpringGreen;  // green if you created it or its still a valid wave
                menuStrip1.Invalidate();
                menuStrip1.Update();
            }



            //  Debug.WriteLine("mic " + WaterfallLowThresholdMic);
            //  Debug.WriteLine("large " + setupForm.checkWaterMoveSize.Checked);
            //  Debug.WriteLine("large " + Display.WMS);
            //  Debug.WriteLine("call " + callsign);
            //  Debug.WriteLine("callL " + LastCall);


            ArrayList a1 = DB.GetVars("WaveOptions");                          // Get the saved list of controls
            a1.Sort();

            foreach (string s in a1)             // string is in the format "name,value"
            {
                string[] vals = s.Split('/');
                if (vals.Length > 2)
                {
                    for (int i = 2; i < vals.Length; i++)
                        vals[1] += "/" + vals[i];
                }

                string name = vals[0];
                string val = vals[1];

                if (name.StartsWith("chkQuickAudioFolder"))
                {
                    // Debug.WriteLine("val======= " + val);

                    if (val.Contains("True"))  WaveForm.chkQuickAudioFolder.Checked = true;
              

                }
            }
                    //--------------------------------------------------------kes9ns mod end
                    //=========================================================================================================




            ArrayList checkbox_list = new ArrayList();
			ArrayList combobox_list = new ArrayList();
			ArrayList numericupdown_list = new ArrayList();
			ArrayList radiobutton_list = new ArrayList();
			ArrayList textbox_list = new ArrayList();
			ArrayList trackbar_list = new ArrayList();
            ArrayList prettytrackbar_list = new ArrayList();

			//ArrayList controls = new ArrayList();	// list of controls to restore
			foreach(Control c in this.Controls)
			{
                // if control is a groupbox or panel, retrieve all subcontrols
				if(c.GetType() == typeof(GroupBoxTS) || c.GetType() == typeof(PanelTS))
				{
					foreach(Control c2 in c.Controls)
					{
						if(c2.Enabled)
						{
                            if (c2.GetType() == typeof(CheckBoxTS))			// the control is a CheckBox
                                checkbox_list.Add(c2);
                            else if (c2.GetType() == typeof(ComboBoxTS))		// the control is a ComboBox
                                combobox_list.Add(c2);
                            else if (c2.GetType() == typeof(NumericUpDownTS))	// the control is a NumericUpDown
                                numericupdown_list.Add(c2);
                            else if (c2.GetType() == typeof(RadioButtonTS))	// the control is a RadioButton
                                radiobutton_list.Add(c2);
                            else if (c2.GetType() == typeof(TextBoxTS))		// the control is a TextBox
                                textbox_list.Add(c2);
                            else if (c2.GetType() == typeof(TrackBarTS))		// the control is a TrackBar (slider)
                                trackbar_list.Add(c2);
                            else if (c2.GetType() == typeof(PrettyTrackBar))
                                prettytrackbar_list.Add(c2);
						}
					}						
				}
				else
				{
					if(c.Enabled)
					{
						if(c.GetType() == typeof(CheckBoxTS))				// the control is a CheckBox
							checkbox_list.Add(c);
						else if(c.GetType() == typeof(ComboBoxTS))		// the control is a ComboBox
							combobox_list.Add(c);
						else if(c.GetType() == typeof(NumericUpDownTS))	// the control is a NumericUpDown
							numericupdown_list.Add(c);
						else if(c.GetType() == typeof(RadioButtonTS))		// the control is a RadioButton
							radiobutton_list.Add(c);
						else if(c.GetType() == typeof(TextBoxTS))			// the control is a TextBox
							textbox_list.Add(c);
						else if(c.GetType() == typeof(TrackBarTS))		// the control is a TrackBar (slider)
							trackbar_list.Add(c);
                        else if (c.GetType() == typeof(PrettyTrackBar))
                            prettytrackbar_list.Add(c);
					}
				}
			}
        


            //=============================================================================================

            ArrayList a = DB.GetVars("State");							// Get the saved list of controls
			a.Sort();
			int num_controls = checkbox_list.Count + combobox_list.Count +
				numericupdown_list.Count + radiobutton_list.Count +
				textbox_list.Count + trackbar_list.Count;

			foreach(string s in a)				// string is in the format "name,value"
			{
				string[] vals = s.Split('/');
				if(vals.Length > 2)
				{
					for(int i=2; i<vals.Length; i++)
						vals[1] += "/"+vals[i];
				}

				string name = vals[0];
				string val = vals[1];
				int num = 0;

				if(name.StartsWith("rx1_filters["))
				{
					int start = name.IndexOf("[")+1;
					int length = name.IndexOf("]")-start;
					int mode_index = Int32.Parse(name.Substring(start, length));

					start = name.LastIndexOf("[")+1;
					length = name.LastIndexOf("]")-start;
					int filter_mode = Int32.Parse(name.Substring(start, length));

					length = val.IndexOf(":");
					string n = val.Substring(0, length);

                    if (!val.Contains("|"))
                        val = val.Replace(",", "|");

					start = val.IndexOf(":")+2;
					length = val.IndexOf("|")-start;
					int low = Int32.Parse(val.Substring(start, length));

					start = val.IndexOf("|")+1;
					int high = Int32.Parse(val.Substring(start));
					
					rx1_filters[mode_index].SetFilter((Filter)filter_mode, low, high, n);
				}
				else if(name.StartsWith("rx2_filters["))
				{
					int start = name.IndexOf("[")+1;
					int length = name.IndexOf("]")-start;
					int mode_index = Int32.Parse(name.Substring(start, length));

					start = name.LastIndexOf("[")+1;
					length = name.LastIndexOf("]")-start;
					int filter_mode = Int32.Parse(name.Substring(start, length));

					length = val.IndexOf(":");
					string n = val.Substring(0, length);

                    if (!val.Contains("|"))
                        val = val.Replace(",", "|");

					start = val.IndexOf(":")+2;
					length = val.IndexOf("|")-start;
					int low = Int32.Parse(val.Substring(start, length));

					start = val.IndexOf("|")+1;
					int high = Int32.Parse(val.Substring(start));
					
					rx2_filters[mode_index].SetFilter((Filter)filter_mode, low, high, n);
				}
#if (!NO_TNF)
                else if (name.StartsWith("notchlist"))
                {
                    NotchList.List.Add(Notch.Parse(val));
                }
#endif
                else if (name.StartsWith("last_rx1_filter["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int mode_index = Int32.Parse(name.Substring(start, length));

                    rx1_filters[mode_index].LastFilter = (Filter)Enum.Parse(typeof(Filter), val);
                }
                else if (name.StartsWith("last_rx2_filter["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int mode_index = Int32.Parse(name.Substring(start, length));

                    rx2_filters[mode_index].LastFilter = (Filter)Enum.Parse(typeof(Filter), val);
                }
                else if (name.StartsWith("rx1_preamp_offset["))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = Int32.Parse(name.Substring(start, length));

                    rx1_preamp_offset[index] = (float)Math.Round(float.Parse(val), 3);
                }
                /*else if(name.StartsWith("fwc_att_offset"))
                {
                    int start = name.IndexOf("[")+1;
                    int length = name.IndexOf("]")-start;
                    int index = int.Parse(name.Substring(start, length));

                    fwc_att_offset[index] = float.Parse(val);
                }*/
                else if (name.StartsWith("power_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 13 && i < list.Length; i++)
                        power_table[index][i] = (float)Math.Round(float.Parse(list[i]), 4);
                }
                else if (name.StartsWith("vhf_power_table"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < list.Length; i++)
                        vhf_power_table[i] = (float)Math.Round(float.Parse(list[i]), 4);
                }
                else if (name.StartsWith("uhf_power_table"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < list.Length; i++)
                        uhf_power_table[i] = (float)Math.Round(float.Parse(list[i]), 4);
                }
                else if (name.StartsWith("tx_carrier_cal"))
                {
                    string[] pairs = val.Split('|');
                    tx_carrier_cal.Clear();
                    foreach (string p in pairs)
                    {
                        int index = p.IndexOf("#");
                        double freq = Math.Round(double.Parse(p.Substring(0, index)), 3);
                        uint x = uint.Parse(p.Substring(index + 1), NumberStyles.HexNumber);

                        if (tx_carrier_cal.ContainsKey(freq))
                            tx_carrier_cal[freq] = x;
                        else
                            tx_carrier_cal.Add(freq, x);
                    }
                }
                else if (name.StartsWith("pa_bias_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 8 && i < list.Length; i++)
                        pa_bias_table[index][i] = int.Parse(list[i]);

                    if (fwc_init && index == 0 &&
                        (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                    {
                        if (flex5000DebugForm != null && !flex5000DebugForm.IsDisposed)
                        {
                            for (int i = 0; i < 8; i++)
                                flex5000DebugForm.SetPAPot(i, (byte)pa_bias_table[index][i]);
                        }
                    }
                }
                else if (name.StartsWith("rx1_level_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 3; i++)
                        rx1_level_table[index][i] = (float)Math.Round(float.Parse(list[i]), 3);
                }
                else if (name.StartsWith("rx2_level_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 3; i++)
                        rx2_level_table[index][i] = (float)Math.Round(float.Parse(list[i]), 3);
                }
                else if (name.StartsWith("pa_bridge_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    string[] list = val.Split('|');
                    for (int i = 0; i < 6; i++)
                        pa_bridge_table[index][i] = (float)Math.Round(float.Parse(list[i]), 4);
                }
                else if (name.StartsWith("swr_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    swr_table[index] = (float)Math.Round(float.Parse(val), 4);
                }
                else if (name.StartsWith("atu_swr_table"))
                {
                    int start = name.IndexOf("[") + 1;
                    int length = name.IndexOf("]") - start;
                    int index = int.Parse(name.Substring(start, length));

                    atu_swr_table[index] = (float)Math.Round(float.Parse(val), 4);
                }
                else if (name.StartsWith("vhf_level_table"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < 2; i++)
                        vhf_level_table[i] = float.Parse(list[i]);
                }
                else if (name.StartsWith("uhf_level_table"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < 2; i++)
                        uhf_level_table[i] = float.Parse(list[i]);
                }
                else if (name.StartsWith("rx1_ant_by_band"))  // ke9ns when you add bands, you need to add more values inside xml
                {
                    string[] list = val.Split('|');

                  
                        for (int i = 0; i < (int)Band.LAST; i++)
                        {
                            if (i < list.Length) // ke9ns add to prevent index out of bounds
                            {
                                rx1_ant_by_band[i] = (FWCAnt)int.Parse(list[i]);
                            }
                            else Debug.WriteLine("index short");
                        }
                }
                else if (name.StartsWith("rx2_ant_by_band"))
                {
                    string[] list = val.Split('|');

                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            rx2_ant_by_band[i] = (FWCAnt)int.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("tx_ant_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            tx_ant_by_band[i] = (FWCAnt)int.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("rx_ant_1500_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            rx_ant_1500_by_band[i] = (HIDAnt)int.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("tx_ant_1500_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            tx_ant_1500_by_band[i] = (HIDAnt)int.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("rx1_loop_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            rx1_loop_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("rx1_preamp_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            rx1_preamp_by_band[i] = (PreampMode)(int.Parse(list[i]));
                        }
                        else Debug.WriteLine("index short");

                        if (rx1_preamp_by_band[i] == PreampMode.FIRST)  rx1_preamp_by_band[i] = PreampMode.OFF;
                    }
                }
                else if (name.StartsWith("rx2_preamp_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            rx2_preamp_by_band[i] = (PreampMode)(int.Parse(list[i]));
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("power_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            power_by_band[i] = int.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("fm_tx_offset_by_band_mhz"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            fm_tx_offset_by_band_mhz[i] = double.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("rx1_agct_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            rx1_agct_by_band[i] = int.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("rx2_agct_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            rx2_agct_by_band[i] = int.Parse(list[i]);
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("tx1_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            tx1_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("tx2_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            tx2_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                        }
                        else Debug.WriteLine("index short");
                    }
                }
                else if (name.StartsWith("tx3_by_band"))
                {
                    string[] list = val.Split('|');
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        if (i < list.Length)
                        {
                            tx3_by_band[i] = Convert.ToBoolean(int.Parse(list[i]));
                        }
                        else Debug.WriteLine("index short");
                    }
                }

             
                switch (name)
				{
					case "rx2_res_offset":
						rx2_res_offset = float.Parse(val);
						break;
					case "current_ant_mode":
						current_ant_mode = (AntMode)int.Parse(val);
						break;
					/*case "rx1_ant":
						rx1_ant = (FWCAnt)int.Parse(val);
						break;
					case "rx1_loop":
						rx1_loop = bool.Parse(val);
						break;
					case "rx2_ant":
						rx2_ant = (FWCAnt)int.Parse(val);
						break;
					case "tx_ant":
						tx_ant = (FWCAnt)int.Parse(val);
						break;*/
					case "fwc_preamp_offset":
						fwc_preamp_offset = float.Parse(val);
						break;
					case "fwc_last_cal_date_time":
						fwc_last_cal_date_time = long.Parse(val);
						break;
                    case "hid_last_cal_date_time":
                        hid_last_cal_date_time = long.Parse(val);
                        break;
					case "fwc_serial_num":
						fwc_serial_num = uint.Parse(val);
						break;
                    case "hid_serial_num":
                        hid_serial_num = uint.Parse(val);
                        break;
					case "fwc_trx_serial_num":
						fwc_trx_serial_num = uint.Parse(val);
						break;
                    case "hid_trx_serial_num":
                        hid_trx_serial_num = uint.Parse(val);
                        break;
					case "rx2_last_cal_date_time":
						rx2_last_cal_date_time = long.Parse(val);
						break;
					case "rx2_serial_num":
						rx2_serial_num = uint.Parse(val);
						break;
					case "rx2_trx_match_serial":
						rx2_trx_match_serial = uint.Parse(val);
						break;
					case "rx2_fixed_gain":
						rx2_fixed_gain = int.Parse(val);
						break;
					case "rx2_max_gain":
						rx2_max_gain = int.Parse(val);
						break;
					case "band_160m_index":
						band_160m_index = Int32.Parse(val);
						break;
					case "band_80m_index":
						band_80m_index = Int32.Parse(val);
						break;
					case "band_60m_index":
						band_60m_index = Int32.Parse(val);
						break;
					case "band_40m_index":
						band_40m_index = Int32.Parse(val);
						break;
					case "band_30m_index":
						band_30m_index = Int32.Parse(val);
						break;
					case "band_20m_index":
						band_20m_index = Int32.Parse(val);
						break;
					case "band_17m_index":
						band_17m_index = Int32.Parse(val);
						break;
					case "band_15m_index":
						band_15m_index = Int32.Parse(val);
						break;
					case "band_12m_index":
						band_12m_index = Int32.Parse(val);
						break;
					case "band_10m_index":
						band_10m_index = Int32.Parse(val);
						break;
					case "band_6m_index":
						band_6m_index = Int32.Parse(val);
						break;
					case "band_2m_index":
						band_2m_index = Int32.Parse(val);
						break;
					case "band_wwv_index":
						band_wwv_index = Int32.Parse(val);
						break;
					case "band_gen_index":
						band_gen_index = Int32.Parse(val);
						break;


                    case "band_LMF_index":                     // ke9ns add
                        band_LMF_index = Int32.Parse(val);
                        break;
                    case "band_120m_index":
                        band_120m_index = Int32.Parse(val);
                        break;
                    case "band_90m_index":
                        band_90m_index = Int32.Parse(val);
                        break;
                    case "band_61m_index":
                        band_61m_index = Int32.Parse(val);
                        break;
                    case "band_49m_index":
                        band_49m_index = Int32.Parse(val);
                        break;
                    case "band_41m_index":
                        band_41m_index = Int32.Parse(val);
                        break;
                    case "band_31m_index":
                        band_31m_index = Int32.Parse(val);
                        break;
                    case "band_25m_index":
                        band_25m_index = Int32.Parse(val);
                        break;
                    case "band_22m_index":
                        band_22m_index = Int32.Parse(val);
                        break;
                    case "band_19m_index":
                        band_19m_index = Int32.Parse(val);
                        break;
                    case "band_16m_index":
                        band_16m_index = Int32.Parse(val);
                        break;
                    case "band_14m_index":
                        band_14m_index = Int32.Parse(val);
                        break;
                    case "band_13m_index":
                        band_13m_index = Int32.Parse(val);
                        break;
                    case "band_11m_index":
                        band_11m_index = Int32.Parse(val);
                        break;

                   case "band_vhf0_index":
						band_vhf0_index = Int32.Parse(val);
						break;
					case "band_vhf1_index":
						band_vhf1_index = Int32.Parse(val);
						break;
					case "band_vhf2_index":
						band_vhf2_index = Int32.Parse(val);
						break;
					case "band_vhf3_index":
						band_vhf3_index = Int32.Parse(val);
						break;
					case "band_vhf4_index":
						band_vhf4_index = Int32.Parse(val);
						break;
					case "band_vhf5_index":
						band_vhf5_index = Int32.Parse(val);
						break;
					case "band_vhf6_index":
						band_vhf6_index = Int32.Parse(val);
						break;
					case "band_vhf7_index":
						band_vhf7_index = Int32.Parse(val);
						break;
					case "band_vhf8_index":
						band_vhf8_index = Int32.Parse(val);
						break;
					case "band_vhf9_index":
						band_vhf9_index = Int32.Parse(val);
						break;
					case "band_vhf10_index":
						band_vhf10_index = Int32.Parse(val);
						break;
					case "band_vhf11_index":
						band_vhf11_index = Int32.Parse(val);
						break;
					case "band_vhf12_index":
						band_vhf12_index = Int32.Parse(val);
						break;
					case "band_vhf13_index":
						band_vhf13_index = Int32.Parse(val);
						break;


					case "current_datetime_mode":
						CurrentDateTimeMode = (DateTimeMode)(Int32.Parse(val));
						break;
					case "wheel_tune_index":
						tune_step_index = Int32.Parse(val);
						break;
					case "txtMemoryQuick":
						txtMemoryQuick.Text = val;
						break;
					case "rx1_display_cal_offset":
						RX1DisplayCalOffset = float.Parse(val);
						break;
					case "rx1_meter_cal_offset":
						rx1_meter_cal_offset = float.Parse(val);
						break;
					case "quick_save_mode":
						quick_save_mode = (DSPMode)(Int32.Parse(val));
						break;
					case "quick_save_filter":
						quick_save_filter = (Filter)(Int32.Parse(val));
						break;
					case "vfob_dsp_mode":
						vfob_dsp_mode = (DSPMode)(Int32.Parse(val));
						break;
					case "vfob_filter":
						vfob_filter = (Filter)(Int32.Parse(val));
						break;
                    case "console_zaximize":  //   a.Add("console_zaximize/" +this.WindowState.ToString()); // ke9ns add for maximum form size detection _z so it loads after the top -8 and left 1912 settings
                    
                        if (val == "Maximized")
                        {
                            this.WindowState = FormWindowState.Maximized;
                            Debug.WriteLine("MAXIMUM1");
                        }
                        break;
					case "console_top":
						num = Int32.Parse(val);
                                         
                            this.Top = num;
                            Debug.WriteLine("TOPP" + num);
                      
                        break;
					case "console_left":
						num = Int32.Parse(val);
                      
                            this.Left = num;
                            Debug.WriteLine("LEFTT" + num);
                     
                        break;
					case "console_width":
                     
                            if (dpi <= 96) this.Width = int.Parse(val);
                        Debug.WriteLine("WIDTHH" + val);
                      
                        break;
					case "console_height":
                     
                            if (dpi <= 96) this.Height = int.Parse(val);
                        Debug.WriteLine("HEIGHTT" + val);
                    
                        break;
					case "setup_top":
						num = Int32.Parse(val);
						/*if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Height && Screen.AllScreens.Length == 1))
							num = 0;*/
						setupForm.Top = num;
						break;
					case "setup_left":
						num = Int32.Parse(val);
						/*if((num < 0) || (num > Screen.PrimaryScreen.Bounds.Width && Screen.AllScreens.Length == 1))
							num = 0;*/
						setupForm.Left = num;
						break;					
					case "SetupWizard":
						if(val == "1")
							run_setup_wizard = false;
						break;
                    case "show_alpha_warning":
                        show_alpha_warning = bool.Parse(val);
                        break;
                    case "show_beta_warning":
                        show_beta_warning = bool.Parse(val);
                        break;
                    case "show_mobile_warning":
                        show_mobile_warning = bool.Parse(val);
                        break;
					case "rx1_image_gain_table":
						string[] list = val.Split('|');
						for(int i=0; i<=(int)Band.B6M && i < list.Length; i++)
							rx1_image_gain_table[i] = float.Parse(list[i]);
						break;
					case "rx1_image_phase_table":
						list = val.Split('|');
						for(int i=0; i<=(int)Band.B6M && i < list.Length; i++)
							rx1_image_phase_table[i] = float.Parse(list[i]);
						break;
					case "rx2_image_gain_table":
						list = val.Split('|');
						for(int i=0; i<=(int)Band.B6M && i < list.Length; i++)
							rx2_image_gain_table[i] = float.Parse(list[i]);
						break;
					case "rx2_image_phase_table":
						list = val.Split('|');
						for(int i=0; i<=(int)Band.B6M && i < list.Length; i++)
							rx2_image_phase_table[i] = float.Parse(list[i]);
						break;
					case "tx_image_gain_table":
						list = val.Split('|');
						for(int i=0; i<=(int)Band.B6M && i < list.Length; i++)
							tx_image_gain_table[i] = float.Parse(list[i]);
						break;
					case "tx_image_phase_table":
						list = val.Split('|');
						for(int i=0; i<=(int)Band.B6M && i < list.Length; i++)
							tx_image_phase_table[i] = float.Parse(list[i]);
						break;                   
					case "rx1_level_checksum":
						rx1_level_checksum = byte.Parse(val);
						break;
					case "rx1_image_gain_checksum":
						rx1_image_gain_checksum = byte.Parse(val);
						break;
					case "rx1_image_phase_checksum":
						rx1_image_phase_checksum = byte.Parse(val);
						break;
					case "tx_image_gain_checksum":
						tx_image_gain_checksum = byte.Parse(val);
						break;
					case "tx_image_phase_checksum":
						tx_image_phase_checksum = byte.Parse(val);
						break;
					case "tx_carrier_checksum":
						tx_carrier_checksum = byte.Parse(val);
						break;
					case "pa_bias_checksum":
						pa_bias_checksum = byte.Parse(val);
						break;
					case "pa_bridge_checksum":
						pa_bridge_checksum = byte.Parse(val);
						break;
					case "pa_power_checksum":
						pa_power_checksum = byte.Parse(val);
						break;
					case "pa_swr_checksum":
						pa_swr_checksum = byte.Parse(val);
						break;
                    case "atu_swr_checksum":
                        atu_swr_checksum = byte.Parse(val);
                        break;
					case "rx2_level_checksum":
						rx2_level_checksum = byte.Parse(val);
						break;
					case "rx2_image_gain_checksum":
						rx2_image_gain_checksum = byte.Parse(val);
						break;
					case "rx2_image_phase_checksum":
						rx2_image_phase_checksum = byte.Parse(val);
						break;
                    case "saved_rx_only":
                        saved_rx_only = bool.Parse(val);
                        break;
                    case "mon_recall":
                        mon_recall = bool.Parse(val);
                        break;
                    case "rx1_squelch_on":
                        rx1_squelch_on = bool.Parse(val);
                        break;
                    case "rx1_squelch_threshold_scroll":
                        rx1_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "rx1_fm_squelch_threshold_scroll":
                        rx1_fm_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "rx2_squelch_on":
                        rx1_squelch_on = bool.Parse(val);
                        break;
                    case "rx2_squelch_threshold_scroll":
                        rx2_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "rx2_fm_squelch_threshold_scroll":
                        rx2_fm_squelch_threshold_scroll = int.Parse(val);
                        break;
                    case "current_flex_control_mode":
                        current_flexcontrol_mode = (FlexControlMode)Enum.Parse(typeof(FlexControlMode), val);
                        break;
                    case "flexcontrol_autodetect":
                        flexcontrol_autodetect = bool.Parse(val);
                        break;
                    case "waterfall_high_threshold_160m":
                        waterfall_high_threshold_160m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_160m":
                        waterfall_low_threshold_160m = float.Parse(val);
                        waterfall_lowRX2_threshold_160m = float.Parse(val); // ke9ns
                        break;
                    case "waterfall_high_threshold_80m":
                        waterfall_high_threshold_80m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_80m":
                        waterfall_low_threshold_80m = float.Parse(val);
                        waterfall_lowRX2_threshold_80m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_60m":
                        waterfall_high_threshold_60m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_60m":
                        waterfall_low_threshold_60m = float.Parse(val);
                        waterfall_lowRX2_threshold_60m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_40m":
                        waterfall_high_threshold_40m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_40m":
                        waterfall_low_threshold_40m = float.Parse(val);
                        waterfall_lowRX2_threshold_40m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_30m":
                        waterfall_high_threshold_30m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_30m":
                        waterfall_low_threshold_30m = float.Parse(val);
                        waterfall_lowRX2_threshold_40m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_20m":
                        waterfall_high_threshold_20m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_20m":
                        waterfall_low_threshold_20m = float.Parse(val);
                        waterfall_lowRX2_threshold_40m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_17m":
                        waterfall_high_threshold_17m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_17m":
                        waterfall_low_threshold_17m = float.Parse(val);
                        waterfall_lowRX2_threshold_17m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_15m":
                        waterfall_high_threshold_15m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_15m":
                        waterfall_low_threshold_15m = float.Parse(val);
                        waterfall_lowRX2_threshold_15m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_12m":
                        waterfall_high_threshold_12m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_12m":
                        waterfall_low_threshold_12m = float.Parse(val);
                        waterfall_lowRX2_threshold_12m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_10m":
                        waterfall_high_threshold_10m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_10m":
                        waterfall_low_threshold_10m = float.Parse(val);
                        waterfall_lowRX2_threshold_10m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_6m":
                        waterfall_high_threshold_6m = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_6m":
                        waterfall_low_threshold_6m = float.Parse(val);
                        waterfall_lowRX2_threshold_6m = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_wwv":
                        waterfall_high_threshold_wwv = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_wwv":
                        waterfall_low_threshold_wwv = float.Parse(val);
                        waterfall_lowRX2_threshold_wwv = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_gen":
                        waterfall_high_threshold_gen = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_gen":
                        waterfall_low_threshold_gen = float.Parse(val);
                        waterfall_lowRX2_threshold_gen = float.Parse(val);
                        break;
                    case "waterfall_high_threshold_xvtr":
                        waterfall_high_threshold_xvtr = float.Parse(val);
                        break;
                    case "waterfall_low_threshold_xvtr":
                        waterfall_low_threshold_xvtr = float.Parse(val);
                        waterfall_lowRX2_threshold_xvtr = float.Parse(val);
                        break;
                    case "waterfall_update_period":
                        waterfall_update_period = int.Parse(val);
                        Display.WaterfallUpdatePeriod = waterfall_update_period;
                        break;
                    case "lsb_txprofile":
                        lsb_txprofile = val;
                        break;
                    case "usb_txprofile":
                        usb_txprofile = val;
                        break;
                    case "dsb_txprofile":
                        dsb_txprofile = val;
                        break;
                    case "cwl_txprofile":
                        cwl_txprofile = val;
                        break;
                    case "cwu_txprofile":
                        cwu_txprofile = val;
                        break;
                    case "fm_txprofile":
                        fm_txprofile = val;
                        break;
                    case "am_txprofile":
                        am_txprofile = val;
                        break;
                    case "sam_txprofile":
                        sam_txprofile = val;
                        break;
                    case "spec_txprofile":
                        spec_txprofile = val;
                        break;
                    case "digu_txprofile":
                        digu_txprofile = val;
                        break;
                    case "digl_txprofile":
                        digl_txprofile = val;
                        break;
                    case "drm_txprofile":
                        drm_txprofile = val;
                        break;
				}
			} // foreach item in the XML file here get items with state in name




             //==============================================================================================================================
			// restore saved values to the controls
			foreach(string s in a)				// string is in the format "name,value"
			{
				string[] vals = s.Split('/');
				string name = vals[0];
				string val = vals[1];

				if(s.StartsWith("chk"))			// control is a CheckBox
				{
					for(int i=0; i<checkbox_list.Count; i++)
					{	// look through each control to find the matching name
						CheckBoxTS c = (CheckBoxTS)checkbox_list[i];
						if(c.Name.Equals(name))		// name found
						{
							c.Checked = bool.Parse(val);	// restore value
							i = checkbox_list.Count+1;
						}
						if(i == checkbox_list.Count)
							MessageBox.Show("Control not found: "+name, "GetState Error",
								MessageBoxButtons.OK, MessageBoxIcon.Warning);
					}
				}
				else if(s.StartsWith("combo"))	// control is a ComboBox
				{
					for(int i=0; i<combobox_list.Count; i++)
					{	// look through each control to find the matching name
						ComboBoxTS c = (ComboBoxTS)combobox_list[i];
						if(c.Name.Equals(name))		// name found
						{
							c.Text = val;	// restore value
							i = combobox_list.Count+1;
						}
						if(i == combobox_list.Count)
							MessageBox.Show("Control not found: "+name, "GetState Error",
								MessageBoxButtons.OK, MessageBoxIcon.Warning);
					}
				}
				else if(s.StartsWith("ud"))
				{
					for(int i=0; i<numericupdown_list.Count; i++)
					{	// look through each control to find the matching name
						NumericUpDownTS c = (NumericUpDownTS)numericupdown_list[i];
						if(c.Name.Equals(name))		// name found
						{
							decimal num = decimal.Parse(val);

							if(num > c.Maximum) num = c.Maximum;		// check endpoints
							else if(num < c.Minimum) num = c.Minimum;
							c.Value = num;			// restore value
							i = numericupdown_list.Count+1;
						}
						if(i == numericupdown_list.Count)
							MessageBox.Show("Control not found: "+name, "GetState Error",
								MessageBoxButtons.OK, MessageBoxIcon.Warning);	
					}
				}
				else if(s.StartsWith("rad"))
				{	// look through each control to find the matching name
					for(int i=0; i<radiobutton_list.Count; i++)
					{
						RadioButtonTS c = (RadioButtonTS)radiobutton_list[i];
						if(c.Name.Equals(name))		// name found
						{
							if(!val.ToLower().Equals("true") && !val.ToLower().Equals("false"))
								val = "True";
							c.Checked = bool.Parse(val);	// restore value
							i = radiobutton_list.Count+1;
						}
						if(i == radiobutton_list.Count)
							MessageBox.Show("Control not found: "+name, "GetState Error",
								MessageBoxButtons.OK, MessageBoxIcon.Warning);
					}
				}
				else if(s.StartsWith("txt"))
				{	// look through each control to find the matching name
					for(int i=0; i<textbox_list.Count; i++)
					{
						TextBoxTS c = (TextBoxTS)textbox_list[i];
						if(c.Name.Equals(name))		// name found
						{
							c.Text = val;	// restore value
							i = textbox_list.Count+1;
						}
						if(i == textbox_list.Count)
							MessageBox.Show("Control not found: "+name, "GetState Error",
								MessageBoxButtons.OK, MessageBoxIcon.Warning);
					}
				}
				else if(s.StartsWith("tb"))
				{
					// look through each control to find the matching name
					for(int i=0; i<trackbar_list.Count; i++)
					{
						TrackBarTS c = (TrackBarTS)trackbar_list[i];
						if(c.Name.Equals(name))		// name found
						{
							c.Value = Int32.Parse(val);
							i = trackbar_list.Count+1;
						}
						if(i == trackbar_list.Count)
							MessageBox.Show("Control not found: "+name, "GetState Error",
								MessageBoxButtons.OK, MessageBoxIcon.Warning);
					}
				}
                else if (s.StartsWith("ptb"))
                {
                    // look through each control to find the matching name
                    for (int i = 0; i < prettytrackbar_list.Count; i++)
                    {
                        PrettyTrackBar c = (PrettyTrackBar)prettytrackbar_list[i];
                        if (c.Name.Equals(name))		// name found
                        {
                            c.Value = Int32.Parse(val);
                            i = prettytrackbar_list.Count + 1;
                        }
                        if (i == prettytrackbar_list.Count)
                            MessageBox.Show("Control not found: " + name, "GetState Error",
                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }

			}

      
            Common.ForceFormOnScreen(this);
			Common.ForceFormOnScreen(setupForm);

            tempVFOAFreq = VFOAFreq; // ke9ns add get CTUN ready quickly
          
        } // getstate

        private string VerToString(uint ver)
        {
            string s = "";
            s += ((byte)(ver >> 24)).ToString() + ".";
            s += ((byte)(ver >> 16)).ToString() + ".";
            s += ((byte)(ver >> 8)).ToString() + ".";
            s += ((byte)(ver >> 0)).ToString();
            return s;
        }

        private bool LessThan1GBRam()
        {
            bool ret = true;
            double installed_ram = 0;
            try
            {
                ObjectQuery objectQuery = new ObjectQuery("select * from Win32_PhysicalMemory");
                ManagementObjectSearcher searcher = new ManagementObjectSearcher(objectQuery);
                ManagementObjectCollection vals = searcher.Get();
                foreach (ManagementObject val in vals)
                {
                    installed_ram += System.Convert.ToDouble(val.GetPropertyValue("Capacity"));
                }
                if ((installed_ram / 1073741824) > 1) ret = false;
            }
            catch (Exception)
            {
                ret = false;
            }
            return ret;
        }

        //=============================================================
        // ke9ns add 01/04/17 From Eric
        // Firmware upate: Flex-5000 2017-01-04 2.1.4.4   Added 60m to several EU regions
        // Firmware upate: Flex-3000 2017-01-04 2.1.4.4   Added 60m to several EU regions
        // Firmware upate: Flex-1500 2017-01-04 0.5.3.13   Added 60m to several EU regions


        // ke9ns add 05/08/17 From Eric and Tim to align with FRSRegions in SmartSDR
        // Firmware upate: Flex-5000 2017-05-07 2.1.4.5   
        // Firmware upate: Flex-3000 2017-05-07 2.1.4.5   
        // Firmware upate: Flex-1500 2017-05-07 0.5.3.14   


        private uint GetMinVersion(Model m)
        {
            uint MIN_VERSION = 0;
            switch(m)
            {
                case Model.FLEX5000: MIN_VERSION = 0x02010405; break; // was 0x02010309 was 0x02010404
                case Model.FLEX3000: MIN_VERSION = 0x02010405; break; // was 0x02010307 was 0x02010404
                case Model.FLEX1500: MIN_VERSION = 0x0005030E; break;  // was 0x0005030A was 0x0005030D
            }
            return MIN_VERSION;
        }

        private uint GetMaxVersion(Model m)
        {
            uint MAX_VERSION = 0;
            switch(m)
            {
                case Model.FLEX5000: MAX_VERSION = 0x0201FFFF; break;  // 0x0201FFFF
                case Model.FLEX3000: MAX_VERSION = 0x0201FFFF; break;  //  0x0201FFFF
                case Model.FLEX1500: MAX_VERSION = 0x0005FFFF; break;  // 0x0005FFFF
            }
            return MAX_VERSION;
        }

		private void InitRadio()
		{
			uint val;
			FWC.GetFirmwareRev(out val);

            if (val == 0)
			{
				Splash.HideForm();
				MessageBox.Show("Error communicating with the radio.  Please reload PowerSDR to try again.\n"+
					"Note that starting PowerSDR too quickly after powering on the radio can cause this problem.",
					"Error: Radio Communication Problem",
					MessageBoxButtons.OK,
					MessageBoxIcon.Error);
				fwc_init = false;
				return;
			}

            uint MIN_VERSION = GetMinVersion(current_model);
            uint MAX_VERSION = GetMaxVersion(current_model);

            if (val < MIN_VERSION || val > MAX_VERSION) // revs outside of v2.1.*.*
            {                        
                Splash.HideForm();
                DialogResult dr = MessageBox.Show("A radio firmware update is required in order to continue.\n" +
                    "(Looked for v"+VerToString(MIN_VERSION)+" and found v" + VerToString(val) + ")\n\n" +
                    "Would you like to update your firmware now?\n" +
                    "If not, PowerSDR will be closed.",
                    "Update Firmware Now?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);

                if (dr == DialogResult.No)
                {
                    Process.GetCurrentProcess().Kill(); // program ends here
                    return; // this is just for code clarity
                }

                Application.DoEvents(); // clear the dialog sooner

                LoadFWCFirmware(VerToString(MIN_VERSION));
            }

			FWC.Initialize();
            FWC.SetTRXPreamp(false);

            if (current_model == Model.FLEX3000)  FWC.SetRXAttn(false);

		} // InitRadio();

        private void InitFLEX1500()
        {
            if(!hid_init || current_model != Model.FLEX1500) return;
            uint val;
            USBHID.GetFirmwareRev(out val);
            if (val == 0)
            {
                Splash.HideForm();
                MessageBox.Show("Error communicating with the radio.  Please reload PowerSDR to try again.",
                    "Error: Radio Communication Problem",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                hid_init = false;
                return;
            }

            uint MIN_VERSION = GetMinVersion(current_model);
            uint MAX_VERSION = GetMaxVersion(current_model);
            if (val < MIN_VERSION || val > MAX_VERSION)
            {
                Splash.HideForm();
                DialogResult dr = MessageBox.Show(
                    "A radio firmware update is required in order to continue.\n" +
                    "(Looked for v" + VerToString(MIN_VERSION) + " and found v" + VerToString(val) + ")\n\n" +
                    "Would you like to update your firmware now?\n" +
                    "If not, PowerSDR will be closed.",
                    "Update Firmware Now?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);

                if (dr == DialogResult.No)
                {
                    Process.GetCurrentProcess().Kill();
                    return;
                }

                Application.DoEvents(); // clear the dialog sooner

                Load1500Firmware(VerToString(MIN_VERSION));
                USBHID.Initialize();
                USBHID.SetPreamp(FLEX1500PreampMode.ZERO);
                //USBHID.WriteI2C2Value(0x30, 0x0C, 0x50);
            }
        }

        private void LoadFWCFirmware(string version)
        {
            // load firmware image
            string path = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)
                + "\\FlexRadio Systems\\FLEX Firmware\\";

            string file_name = path;
            switch (current_model)
            {
                case Model.FLEX5000: file_name = path + "FLEX-5000\\FLEX-5000_Firmware_v"; break;
                case Model.FLEX3000: file_name = path + "FLEX-3000\\FLEX-3000_Firmware_v"; break;
            }

            file_name += version + ".bin";

            if (!File.Exists(file_name))
            {
                DialogResult dr = MessageBox.Show(
                    "Unable to locate the firmware file in the default location.\n" +
                    "Would you like to try to locate the file manually?\n" +
                    "Otherwise, the application will close.\n\n" +
                    "(Default Path: " + file_name +")",
                    "Try to locate file?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);

                if (dr == DialogResult.No)
                    Process.GetCurrentProcess().Kill();

                OpenFileDialog dialog = new OpenFileDialog();
                dialog.Filter = "Firmware files (*.bin)|*.bin|All files (*.*)|*.*";
                dialog.Multiselect = false;
                dialog.InitialDirectory = file_name.Substring(0, file_name.LastIndexOf("\\") + 1);
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    file_name = dialog.FileName;
                }

                if (!File.Exists(file_name))
                {
                    MessageBox.Show("File not chosen.  The program will now close");
                    Process.GetCurrentProcess().Kill();
                    return; // this is just for code clarity
                }
            }

            string tool_path = path + "tool.exe";

            if (!File.Exists(tool_path))
            {
                MessageBox.Show("Firmware Update tool not found.  Please contact support.\n\n"+
                    "(Looked in "+tool_path+")",
                    "Error: Update Tool Not Found",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                Process.GetCurrentProcess().Kill();
                return;
            }

            ProcessStartInfo proc_info = new ProcessStartInfo();
            proc_info.FileName = tool_path;
            proc_info.Arguments = "\"dfu" + file_name + "\"";
            proc_info.CreateNoWindow = true;
            proc_info.UseShellExecute = false;
            proc_info.RedirectStandardOutput = true;
            proc_info.WindowStyle = ProcessWindowStyle.Hidden;

            Progress p = new Progress("Firmware Update");
            p.PercentDigits = 0;
            p.SetPercent(0.0f);
            p.Show();
            p.Focus();
            Application.DoEvents();

            using (Process proc = Process.Start(proc_info))
            {
                StreamReader reader = proc.StandardOutput;
                string result = "";
                while ((result = reader.ReadLine()) != null)
                {
                    if (result.Contains("Uploading Binary"))
                    {
                        int start = result.IndexOf(":") + 1;
                        int end = result.IndexOf("%");
                        int progress = int.Parse(result.Substring(start, end - start));
                        p.SetPercent(progress / 100.0f * 0.33f);
                        Application.DoEvents();
                    }
                    else if (result.Contains("Programing Flash Image"))
                    {
                        int start = result.IndexOf(":") + 1;
                        int end = result.IndexOf("%");
                        int progress = int.Parse(result.Substring(start, end - start));
                        p.SetPercent(0.33f + progress / 100.0f * 0.67f);
                        Application.DoEvents();
                    }
                }
            }

            Thread.Sleep(3000); // wait for radio to reboot

            p.Hide();
            Application.DoEvents();

            MessageBox.Show("Update complete.  The program will now close.\n" +
                         "Please restart PowerSDR to continue.",
                         "Restart Required",
                         MessageBoxButtons.OK,
                         MessageBoxIcon.Information);

            Process.GetCurrentProcess().Kill(); 
            return; // this is just for code clarity
            

            /*Thread.Sleep(2000); // wait for computer to redetect

            if (radio_to_use == null) return;

            // reinitialize Pal interface
            Pal.Exit();
            Pal.Init();
            Thread.Sleep(2000);

            // check that new version is within acceptable range
            uint val;
            FWC.GetFirmwareRev(out val);
            if (val < GetMinVersion(current_model) || val > GetMaxVersion(current_model))
            {
                MessageBox.Show("The firmware revision chosen does not meet the requirements of this\n"+
                    "version of PowerSDR.  Please obtain firmware v" + version + " and try again.",
                    "Error: Firmware Revision",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                Process.GetCurrentProcess().Kill();
                return;
            }*/
        }

        private void Load1500Firmware(string version)
        {
            string file_name = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) +
                    "\\FlexRadio Systems\\FLEX Firmware\\FLEX-1500\\FLEX-1500_Firmware_v" + version + ".bin";

            if (!File.Exists(file_name))
            {
                DialogResult dr = MessageBox.Show(
                    "Unable to locate the firmware file in the default location.\n" +
                    "Would you like to try to locate the file manually?\n"+
                    "Otherwise, the application will close.\n\n" +
                    "(Default Path: " + file_name,
                    "Try to locate file?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question);

                if (dr == DialogResult.No)
                    Process.GetCurrentProcess().Kill();

                OpenFileDialog dialog = new OpenFileDialog();
                dialog.Filter = "Firmware files (*.bin)|*.bin|All files (*.*)|*.*";
                dialog.Multiselect = false;
                dialog.InitialDirectory = file_name.Substring(0, file_name.LastIndexOf("\\") + 1);
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    file_name = dialog.FileName;
                }

                if (!File.Exists(file_name))
                {
                    MessageBox.Show("File not chosen.  The program will now close");
                    Process.GetCurrentProcess().Kill();
                }
            }

            FileStream fs = File.Open(file_name, FileMode.Open, FileAccess.Read);
            BinaryReader reader = new BinaryReader(fs);

            int total_writes = (int)Math.Ceiling(fs.Length / 32.0);
            int write_count = 0;

            byte[] data = new byte[32];
            byte[] check = new byte[32];
            ushort offset = 0;
            bool eof = false;

            Progress p = new Progress("Firmware Update");
            p.PercentDigits = 0;
            p.SetPercent(0.0f);
            p.Show();
            p.Focus();
            Application.DoEvents();

            do
            {
                int num_read = reader.Read(data, 0, 32);
                bool validated = true;
                int count = 0;

                if (num_read == 0) break;
                do
                {
                    count++;
                    Flex1500.WriteEEPROM(offset, data);
                    Thread.Sleep(10);

                    Flex1500.ReadEEPROM(offset, (byte)num_read, out check);

                    validated = true;
                    for (int i = 0; i < num_read; i++)
                    {
                        if (check[i] != data[i])
                        {
                            validated = false;
                            break;
                        }
                    }
                }
                while (!validated && count < 10);

                if (count == 10)
                    MessageBox.Show("Error writing firmware (0x" + offset.ToString("X").PadLeft(4, '0') + ")");

                offset += (ushort)num_read;
                eof = (num_read != 32);

                p.SetPercent(++write_count / (float)total_writes);
                Application.DoEvents();
            } while (!eof);

            p.Hide();
            Application.DoEvents();
            reader.Close();
            fs.Close();

            uint old_ver;
            USBHID.GetFirmwareRev(out old_ver);

            Thread.Sleep(500);
            Flex1500.StopListener(); // keep old object from causing problems

            // pause to allow reboot
            MessageBox.Show("Please cycle power to the radio for the firmware change to take effect.",
                "Cycle Power",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);

            // reconnect the radio
            uint new_ver = old_ver;
                        
            p.Text = "Cycle Radio Power...";
            p.SetPercent(0.0f);
            p.Show();
            p.Focus();
            Application.DoEvents();
            int wait_count = 0;

            // wait for radio to be powered off
            while (Flex1500.IsRadioPresent())
            {
                Thread.Sleep(1000);
                p.SetPercent(++wait_count / 60.0f);
                Application.DoEvents();
                if (wait_count > 60)
                {
                    p.Hide();
                    Application.DoEvents();
                    break;
                }
            }

            if (wait_count > 60) // timeout
            {
                MessageBox.Show("Still waiting for radio power to be cycled...");
                p.SetPercent(0.0f);
                p.Show();
                p.Focus();
                wait_count = 0;

                while (Flex1500.IsRadioPresent())
                {
                    Thread.Sleep(1000);
                    p.SetPercent(++wait_count / 60.0f);
                    Application.DoEvents();
                    if (wait_count > 60)
                    {
                        p.Hide();
                        Application.DoEvents();
                        break;
                    }
                }

                if (wait_count > 60)
                {
                    MessageBox.Show("Detecting radio power cycle failed.  The program will now close.");
                    Process.GetCurrentProcess().Kill();
                }
            }

            // by here, the radio has at least detached.  Time to look for it again.
            p.SetPercent(0.0f);
            wait_count = 0;
            while (!Flex1500.SetActiveRadio(radio_to_use.SerialNumber))
            {
                Thread.Sleep(1000);
                p.SetPercent(++wait_count / 60.0f);
                Application.DoEvents();
                if (wait_count > 60)
                {
                    p.Hide();
                    Application.DoEvents();
                    break;
                }
            }

            if (wait_count > 60) // timeout
            {
                MessageBox.Show("Still waiting for radio power to be cycled...");
                p.SetPercent(0.0f);
                p.Show();
                p.Focus();
                wait_count = 0;

                while (!Flex1500.SetActiveRadio(radio_to_use.SerialNumber))
                {
                    Thread.Sleep(1000);
                    p.SetPercent(++wait_count / 60.0f);
                    Application.DoEvents();
                    if (wait_count > 60)
                    {
                        p.Hide();
                        Application.DoEvents();
                        break;
                    }
                }

                if (wait_count > 60)
                {
                    MessageBox.Show("Detecting radio power cycle failed.  The program will now close.");
                    Process.GetCurrentProcess().Kill();
                }
            }

            p.Hide();
            Application.DoEvents();

            // radio has been rebooted -- verify new version
            USBHID.GetFirmwareRev(out new_ver);
            if (VerToString(new_ver) == version)
                return;

            // should never get here
            MessageBox.Show("An error occurred while attempting to update the radio firmware.\n" +
                "If this is the first time this message has appeared, please try again.\n" +
                "Otherwise, please contact our support team using the information at\n" +
                "http://www.flexradio.com.",
                "Firmware Update Error",
                MessageBoxButtons.OK,
                MessageBoxIcon.Error);

            Process.GetCurrentProcess().Kill();
        }

		private void CheckCalData()
		{
			if(!fwc_init || (current_model != Model.FLEX5000 && current_model != Model.FLEX3000)) return;
			if(FWCEEPROM.LastCalDateTime == unchecked((long)0xffffffffffffffff))
			{
				//MessageBox.Show("No Calibration Date/Time Found.");
				return;
			}

			if(fwc_serial_num != FWCEEPROM.SerialNumber)
			{
				if(fwc_serial_num != 0)
				{
					/*string old_s = FWCEEPROM.SerialToString(fwc_serial_num);
					string new_s = FWCEEPROM.SerialToString(FWCEEPROM.SerialNumber);

					Splash.HideForm();
					DialogResult dr = MessageBox.Show("New Radio Detected: Old Serial: "+old_s+"  New Serial: "+new_s+"\n"+
						"Do you want to update the PowerSDR calibration data from the EEPROM?\n"+
						"(Note that this may take as long as 90 seconds)",
						"New Radio: Update Cal?",
						MessageBoxButtons.YesNo,
						MessageBoxIcon.Question);

					if(dr == DialogResult.No) return;*/
				}
				else
				{
					/*MessageBox.Show("Please wait patiently while a one-time transfer of the\n"+
						"calibration data from the EEPROM is performed.  This\n"+
						"can take as long as 90 seconds.  Click OK to continue.",
						"Please wait for Cal Data Transfer",
						MessageBoxButtons.OK,
						MessageBoxIcon.Information);*/
				}
			}
			else if(fwc_trx_serial_num != FWCEEPROM.TRXSerial)
			{
				/*string old_s = FWCEEPROM.SerialToString(fwc_trx_serial_num);
				string new_s = FWCEEPROM.SerialToString(FWCEEPROM.TRXSerial);

				Splash.HideForm();
				DialogResult dr = MessageBox.Show("New Radio Detected: Old TRX Serial: "+old_s+"  New Serial: "+new_s+"\n"+
					"Do you want to update the PowerSDR calibration data from the EEPROM?\n"+
					"(Note that this may take as long as 90 seconds)",
					"New Radio: Update Cal?",
					MessageBoxButtons.YesNo,
					MessageBoxIcon.Question);

				if(dr == DialogResult.No) return;*/
			}
			else if(fwc_last_cal_date_time < FWCEEPROM.LastCalDateTime)
			{
				/*try
				{
					DateTime old_date = DateTime.FromFileTimeUtc(fwc_last_cal_date_time);
					string old_d = old_date.ToShortDateString()+" "+old_date.ToShortTimeString();
					DateTime new_date = DateTime.FromFileTimeUtc(FWCEEPROM.LastCalDateTime);
					string new_d = new_date.ToShortDateString()+" "+new_date.ToShortTimeString();
				
					Splash.HideForm();
					DialogResult dr = MessageBox.Show("Updated Calibration Data Detected:  Old: "+old_d+"  New: "+new_d+"\n"+
						"Do you want to update the PowerSDR calibration data from the EEPROM?\n"+
						"(Note that this may take as long as 90 seconds)",
						"New Data: Update Cal?",
						MessageBoxButtons.YesNo,
						MessageBoxIcon.Question);

					if(dr == DialogResult.No) return;
				}
				catch(Exception) { }*/
			}
			else return;

			// download cal data from EEPROM
			RestoreCalData();
		}

        private void Check1500CalData()
        {
            if (!hid_init || current_model != Model.FLEX1500) return;
            if (HIDEEPROM.LastCalDateTime == unchecked((long)0xffffffffffffffff))
            {
                //MessageBox.Show("No Calibration Date/Time Found.");
                return;
            }

            if (hid_serial_num == HIDEEPROM.SerialNumber &&
                hid_trx_serial_num == HIDEEPROM.TRXSerial &&
                hid_last_cal_date_time >= HIDEEPROM.LastCalDateTime)
                return;

            // download cal data from EEPROM
            Restore1500CalData();
        }

		private void CheckRX2CalData()
		{
			if(!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;
			if(FWCEEPROM.LastRX2CalDateTime == unchecked((long)0xffffffffffffffff))
			{
				//MessageBox.Show("No Calibration Date/Time Found.");
				return;
			}

			if(rx2_serial_num != FWCEEPROM.RX2Serial)
			{
				if(rx2_serial_num != 0)
				{
					/*string old_s = FWCEEPROM.SerialToString(rx2_serial_num);
					string new_s = FWCEEPROM.SerialToString(FWCEEPROM.RX2Serial);

					Splash.HideForm();
					DialogResult dr = MessageBox.Show("New RX2 Detected: Old Serial: "+old_s+"  New Serial: "+new_s+"\n"+
						"Do you want to update the PowerSDR calibration data from the EEPROM?\n"+
						"(Note that this may take as long as 30 seconds)",
						"New RX2: Update Cal?",
						MessageBoxButtons.YesNo,
						MessageBoxIcon.Question);

					if(dr == DialogResult.No) return;*/
				}
				else
				{
					/*MessageBox.Show("Please wait patiently while a one-time transfer of the\n"+
						 "RX2 calibration data from the EEPROM is performed.  This\n"+
						 "can take as long as 30 seconds.  Click OK to continue.",
						 "Please wait for Cal Data Transfer",
						 MessageBoxButtons.OK,
						 MessageBoxIcon.Information);*/
				}
			}
			else if(rx2_last_cal_date_time < FWCEEPROM.LastRX2CalDateTime)
			{
				/*try
				{
					DateTime old_date = DateTime.FromFileTimeUtc(rx2_last_cal_date_time);
					string old_d = old_date.ToShortDateString()+" "+old_date.ToShortTimeString();
					DateTime new_date = DateTime.FromFileTimeUtc(FWCEEPROM.LastRX2CalDateTime);
					string new_d = new_date.ToShortDateString()+" "+new_date.ToShortTimeString();
				
					Splash.HideForm();
					DialogResult dr = MessageBox.Show("Updated RX2 Calibration Data Detected:  Old: "+old_d+"  New: "+new_d+"\n"+
						"Do you want to update the PowerSDR calibration data from the EEPROM?\n"+
						"(Note that this may take as long as 30 seconds)",
						"New Data: Update Cal?",
						MessageBoxButtons.YesNo,
						MessageBoxIcon.Question);

					if(dr == DialogResult.No) return;
				}
				catch(Exception) { }*/
			}
			else return;

			// download cal data from EEPROM
			RX2RestoreCalData();
		}

		public void SyncCalDateTime()
		{
            switch (current_model)
            {
                case Model.FLEX5000:
                case Model.FLEX3000:
                    fwc_serial_num = FWCEEPROM.SerialNumber;
                    fwc_trx_serial_num = FWCEEPROM.TRXSerial;
                    fwc_last_cal_date_time = FWCEEPROM.LastCalDateTime;
                    break;
                case Model.FLEX1500:
                    hid_serial_num = HIDEEPROM.SerialNumber;
                    hid_trx_serial_num = HIDEEPROM.TRXSerial;
                    hid_last_cal_date_time = HIDEEPROM.LastCalDateTime;
                    break;
            }
		}

		public void RX2SyncCalDateTime()
		{
			rx2_serial_num = FWCEEPROM.RX2Serial;
			rx2_last_cal_date_time = FWCEEPROM.LastRX2CalDateTime;
		}

		public void WriteTRXChecksums()
		{
			rx1_level_checksum = Checksum.Calc(rx1_level_table);
			FWCEEPROM.WriteRXLevelChecksum(rx1_level_checksum);

			rx1_image_gain_checksum = Checksum.CalcHF(rx1_image_gain_table);
			FWCEEPROM.WriteRXImageGainChecksum(rx1_image_gain_checksum);

			rx1_image_phase_checksum = Checksum.CalcHF(rx1_image_phase_table);
			FWCEEPROM.WriteRXImagePhaseChecksum(rx1_image_phase_checksum);

			tx_image_gain_checksum = Checksum.CalcHF(tx_image_gain_table);
			FWCEEPROM.WriteTXImageGainChecksum(tx_image_gain_checksum);

			tx_image_phase_checksum = Checksum.CalcHF(tx_image_phase_table);
			FWCEEPROM.WriteTXImagePhaseChecksum(tx_image_phase_checksum);

			tx_carrier_checksum = Checksum.Calc(tx_carrier_cal);
			FWCEEPROM.WriteTXCarrierChecksum(tx_carrier_checksum);

            if (FWCEEPROM.PAOK)
            {
                pa_bias_checksum = Checksum.Calc(pa_bias_table, false);
                FWCEEPROM.WritePABiasChecksum(pa_bias_checksum);

                pa_bridge_checksum = Checksum.Calc(pa_bridge_table);
                FWCEEPROM.WritePABridgeChecksum(pa_bridge_checksum);

                pa_power_checksum = Checksum.Calc(power_table);
                FWCEEPROM.WritePAPowerChecksum(pa_power_checksum);

                pa_swr_checksum = Checksum.CalcHF(swr_table);
                FWCEEPROM.WritePASWRChecksum(pa_swr_checksum);

                if (current_model == Model.FLEX3000)
                {
                    atu_swr_checksum = Checksum.CalcHF(atu_swr_table);
                    FWCEEPROM.WriteATUSWRChecksum(atu_swr_checksum);
                }
            }

            if (FWCEEPROM.VUOK)
            {
                vu_level_checksum = Checksum.Calc(vhf_level_table, uhf_level_table);
                FWCEEPROM.WriteVULevelChecksum(vu_level_checksum);

                vu_power_checksum = Checksum.Calc(vhf_power_table, uhf_power_table);
                FWCEEPROM.WriteVUPowerChecksum(vu_power_checksum);
            }

			FWCEEPROM.TRXChecksumPresent = true;
		}

        public void Verify1500Checksums()
        {
            byte calc = 0, eeprom = 0;
            bool error_flag = false;
            string error = "";

            eeprom = HIDEEPROM.ReadRXLevelChecksum();
            calc = Checksum.Calc(rx1_level_table);
            if (rx1_level_checksum != eeprom ||
                rx1_level_checksum != calc)
            {
                error_flag = true;
                error += "RX1 Level Checksum Error " +
                    "DB: " + rx1_level_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + "\n";
            }

            eeprom = HIDEEPROM.ReadRXImageGainChecksum();
            calc = Checksum.CalcHF(rx1_image_gain_table);
            if (rx1_image_gain_checksum != eeprom ||
                rx1_image_gain_checksum != calc)
            {
                error_flag = true;
                error += "RX Image Gain Checksum Error " +
                    "DB: " + rx1_image_gain_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + "\n"; ;
            }

            eeprom = HIDEEPROM.ReadRXImagePhaseChecksum();
            calc = Checksum.CalcHF(rx1_image_phase_table);
            if (rx1_image_phase_checksum != eeprom ||
                rx1_image_phase_checksum != calc)
            {
                error_flag = true;
                error += "RX1 Image Phase Checksum Error " +
                    "DB: " + rx1_image_phase_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + "\n";
            }

            eeprom = HIDEEPROM.ReadTXImageGainChecksum();
            calc = Checksum.CalcHF(tx_image_gain_table);
            if (tx_image_gain_checksum != eeprom ||
                tx_image_gain_checksum != calc)
            {
                error_flag = true;
                error += "TX Image Gain Checksum Error " +
                    "DB: " + tx_image_gain_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + "\n";
            }

            eeprom = HIDEEPROM.ReadTXImagePhaseChecksum();
            calc = Checksum.CalcHF(tx_image_phase_table);
            if (tx_image_phase_checksum != eeprom ||
                tx_image_phase_checksum != calc)
            {
                error_flag = true;
                error += "TX Image Phase Checksum Error " +
                    "DB: " + tx_image_phase_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + "\n";
            }

            eeprom = HIDEEPROM.ReadPAPowerChecksum();
            calc = Checksum.Calc(power_table);
            if (pa_power_checksum != eeprom ||
                pa_power_checksum != calc)
            {
                error_flag = true;
                error += "PA Power Checksum Error " +
                    "DB: " + pa_power_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + "\n";
            }

            if (error_flag)
            {
                TextWriter writer = new StreamWriter(app_data_path + "checksum_error.log", true);    //  "\\checksum_error.log"
                string s = DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToShortTimeString();
                writer.WriteLine(s + "  " + error);
                writer.Close();
            }
        }

        public void VerifyTRXChecksums()
        {
            byte calc = 0, eeprom = 0;
            bool error_flag = false;
            string error = "";

            eeprom = FWCEEPROM.ReadRXLevelChecksum();
            calc = Checksum.Calc(rx1_level_table);
            if (rx1_level_checksum != eeprom ||
                rx1_level_checksum != calc)
            {
                error_flag = true;
                error += "RX1 Level Checksum Error " +
                    "DB: " + rx1_level_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            eeprom = FWCEEPROM.ReadRXImageGainChecksum();
            calc = Checksum.CalcHF(rx1_image_gain_table);
            if (rx1_image_gain_checksum != eeprom ||
                rx1_image_gain_checksum != calc)
            {
                error_flag = true;
                error += "RX1 Image Gain Checksum Error " +
                    "DB: " + rx1_image_gain_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            eeprom = FWCEEPROM.ReadRXImagePhaseChecksum();
            calc = Checksum.CalcHF(rx1_image_phase_table);
            if (rx1_image_phase_checksum != eeprom ||
                rx1_image_phase_checksum != calc)
            {
                error_flag = true;
                error += "RX1 Image Phase Checksum Error " +
                    "DB: " + rx1_image_phase_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            eeprom = FWCEEPROM.ReadTXImageGainChecksum();
            calc = Checksum.CalcHF(tx_image_gain_table);
            if (tx_image_gain_checksum != eeprom ||
                tx_image_gain_checksum != calc)
            {
                error_flag = true;
                error += "TX Image Gain Checksum Error " +
                    "DB: " + tx_image_gain_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            eeprom = FWCEEPROM.ReadTXImagePhaseChecksum();
            calc = Checksum.CalcHF(tx_image_phase_table);
            if (tx_image_phase_checksum != eeprom ||
                tx_image_phase_checksum != calc)
            {
                error_flag = true;
                error += "TX Image Phase Checksum Error " +
                    "DB: " + tx_image_phase_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            eeprom = FWCEEPROM.ReadTXCarrierChecksum();
            calc = Checksum.Calc(tx_carrier_cal);
            if (tx_carrier_checksum != eeprom ||
                tx_carrier_checksum != calc)
            {
                error_flag = true;
                error += "TX Carrier Checksum Error " +
                    "DB: " + tx_carrier_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            if (FWCEEPROM.PAOK)
            {
                eeprom = FWCEEPROM.ReadPABiasChecksum();
                calc = Checksum.Calc(pa_bias_table, false);
                if (pa_bias_checksum != eeprom ||
                    pa_bias_checksum != calc)
                {
                    error_flag = true;
                    error += "PA Bias Checksum Error " +
                        "DB: " + pa_bias_checksum.ToString("X") +
                        " EEPROM: " + eeprom.ToString("X") +
                        " Calculated: " + calc.ToString("X") + " | \n";
                }

                eeprom = FWCEEPROM.ReadPABridgeChecksum();
                calc = Checksum.Calc(pa_bridge_table);
                if (pa_bridge_checksum != eeprom ||
                    pa_bridge_checksum != calc)
                {
                    error_flag = true;
                    error += "PA Bridge Checksum Error " +
                        "DB: " + pa_bridge_checksum.ToString("X") +
                        " EEPROM: " + eeprom.ToString("X") +
                        " Calculated: " + calc.ToString("X") + " | \n";
                }

                eeprom = FWCEEPROM.ReadPAPowerChecksum();
                calc = Checksum.Calc(power_table);
                if (pa_power_checksum != eeprom ||
                    pa_power_checksum != calc)
                {
                    error_flag = true;
                    error += "PA Power Checksum Error " +
                        "DB: " + pa_power_checksum.ToString("X") +
                        " EEPROM: " + eeprom.ToString("X") +
                        " Calculated: " + calc.ToString("X") + " | \n";
                }

                eeprom = FWCEEPROM.ReadPASWRChecksum();
                calc = Checksum.CalcHF(swr_table);
                if (pa_swr_checksum != eeprom ||
                    pa_swr_checksum != calc)
                {
                    error_flag = true;
                    error += "PA SWR Checksum Error " +
                        "DB: " + pa_swr_checksum.ToString("X") +
                        " EEPROM: " + eeprom.ToString("X") +
                        " Calculated: " + calc.ToString("X") + " | \n";
                }

                if (current_model == Model.FLEX3000)
                {
                    eeprom = FWCEEPROM.ReadATUSWRChecksum();
                    calc = Checksum.CalcHF(atu_swr_table);
                    if (atu_swr_checksum != eeprom ||
                        atu_swr_checksum != calc)
                    {
                        error_flag = true;
                        error += "ATU SWR Checksum Error " +
                            "DB: " + atu_swr_checksum.ToString("X") +
                            " EEPROM: " + eeprom.ToString("X") +
                            " CAlculated: " + calc.ToString("X") + " | \n";
                    }
                }
            }

            if (current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
            {
                eeprom = FWCEEPROM.ReadVULevelChecksum();
                calc = Checksum.Calc(vhf_level_table, uhf_level_table);
                if (vu_level_checksum != eeprom ||
                    vu_level_checksum != calc)
                {
                    error_flag = true;
                    error += "VU Level Checksum Error " +
                        "DB: " + vu_level_checksum.ToString("X") +
                        " EEPROM: " + eeprom.ToString("X") +
                        " Calculated: " + calc.ToString("X") + " | \n";
                }

                eeprom = FWCEEPROM.ReadVUPowerChecksum();
                calc = Checksum.Calc(vhf_power_table, uhf_power_table);
                if (vu_power_checksum != eeprom ||
                    vu_power_checksum != calc)
                {
                    error_flag = true;
                    error += "VU Power Checksum Error " +
                        "DB: " + vu_level_checksum.ToString("X") +
                        " EEPROM: " + eeprom.ToString("X") +
                        " Calculated: " + calc.ToString("X") + " | \n";
                }
            }

            if (error_flag)
            {
                TextWriter writer = new StreamWriter(app_data_path + "checksum_error.log", true); // "\\checksum_error.log"
                string s = DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToShortTimeString();
                writer.WriteLine(s + "  " + error);
                writer.Close();
                FWCEEPROM.TRXChecksumPresent = false;
            }
        }

		public void WriteRX2Checksums()
		{
			rx2_level_checksum = Checksum.Calc(rx2_level_table);
			FWCEEPROM.WriteRX2LevelChecksum(rx2_level_checksum);

			rx2_image_gain_checksum = Checksum.CalcHF(rx2_image_gain_table);
			FWCEEPROM.WriteRX2ImageGainChecksum(rx2_image_gain_checksum);

			rx2_image_phase_checksum = Checksum.CalcHF(rx2_image_phase_table);
			FWCEEPROM.WriteRX2ImagePhaseChecksum(rx2_image_phase_checksum);

			FWCEEPROM.RX2ChecksumPresent = true;
		}

        public void VerifyRX2Checksums()
        {
            byte calc = 0, eeprom = 0;
            bool error_flag = false;
            string error = "";

            eeprom = FWCEEPROM.ReadRX2LevelChecksum();
            calc = Checksum.Calc(rx2_level_table);
            if (rx2_level_checksum != eeprom ||
                rx2_level_checksum != calc)
            {
                error_flag = true;
                error += "RX2 Level Checksum Error " +
                    "DB: " + rx2_level_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            eeprom = FWCEEPROM.ReadRX2ImageGainChecksum();
            calc = Checksum.CalcHF(rx2_image_gain_table);
            if (rx2_image_gain_checksum != eeprom ||
                rx2_image_gain_checksum != calc)
            {
                error_flag = true;
                error += "RX2 Image Gain Checksum Error " +
                    "DB: " + rx2_image_gain_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            eeprom = FWCEEPROM.ReadRX2ImagePhaseChecksum();
            calc = Checksum.CalcHF(rx2_image_phase_table);
            if (rx2_image_phase_checksum != eeprom ||
                rx2_image_phase_checksum != calc)
            {
                error_flag = true;
                error += "RX2 Image Phase Checksum Error.\n" +
                    "DB: " + rx2_image_phase_checksum.ToString("X") +
                    " EEPROM: " + eeprom.ToString("X") +
                    " Calculated: " + calc.ToString("X") + " | \n";
            }

            if (error_flag)
            {
                TextWriter writer = new StreamWriter(app_data_path + "checksum_error.log", true); //"\\checksum_error.log"
                string s = DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToShortTimeString();
                writer.WriteLine(s + "  " + error);
                writer.Close();
                FWCEEPROM.RX2ChecksumPresent = false;
            }
        }

        public void Restore1500CalData()
        {
            int checksum_error = 0;
            bool error_flag = false;
            string error = "";
            Progress p = new Progress("Retrieving Calibration Data from EEPROM");
            p.SetPercent(0.0f);
            this.Invoke(new MethodInvoker(p.Show));
            Application.DoEvents();
            float total_reads = 7.0f;
            int count = 0;

            checksum_error = 0;
            while (true)
            {
                HIDEEPROM.ReadPAPower(power_table); // 1 read
                pa_power_checksum = Checksum.Calc(power_table);
                if (Checksum.Match(power_table, HIDEEPROM.ReadPAPowerChecksum())) break;

                checksum_error++;
                if (checksum_error > 2)
                {
                    error_flag = true;
                    error += "PA Power Checksum verification error.\n" +
                        "DB: " + pa_power_checksum.ToString("X") +
                        " EEPROM: " + HIDEEPROM.ReadPAPowerChecksum().ToString("X") +
                        " Calculated: " + Checksum.Calc(power_table).ToString("X") + "\n";
                    break;
                }
            }
            p.SetPercent((count += 1) / total_reads);
            Application.DoEvents();


            checksum_error = 0;
            while (true)
            {
                HIDEEPROM.ReadRXLevel(rx1_level_table); // 2 reads
                rx1_level_checksum = Checksum.Calc(rx1_level_table);
                if (Checksum.Match(rx1_level_table, HIDEEPROM.ReadRXLevelChecksum())) break;

                checksum_error++;
                if (checksum_error > 2)
                {
                    error_flag = true;
                    error += "RX1 Level Checksum verification error.\n" +
                        "DB: " + rx1_level_checksum.ToString("X") +
                        " EEPROM: " + HIDEEPROM.ReadRXLevelChecksum().ToString("X") +
                        " Calculated: " + Checksum.Calc(rx1_level_table).ToString("X") + "\n";
                    break;
                }
            }
            p.SetPercent((count += 2) / total_reads);
            Application.DoEvents();

            checksum_error = 0;
            while (true)
            {
                HIDEEPROM.ReadRXImage(rx1_image_gain_table, rx1_image_phase_table); // 22 reads
                rx1_image_gain_checksum = Checksum.CalcHF(rx1_image_gain_table);
                rx1_image_phase_checksum = Checksum.CalcHF(rx1_image_phase_table);
                if (Checksum.MatchHF(rx1_image_gain_table, HIDEEPROM.ReadRXImageGainChecksum()) &&
                    Checksum.MatchHF(rx1_image_phase_table, HIDEEPROM.ReadRXImagePhaseChecksum()))
                    break;

                checksum_error++;
                if (checksum_error > 2)
                {
                    error_flag = true;
                    error += "RX Image Gain/Phase Checksum verification error.\n" +
                        "DB: " + rx1_image_gain_checksum.ToString("X") + "/" + rx1_image_phase_checksum.ToString("X")+
                        " EEPROM: " + HIDEEPROM.ReadRXImageGainChecksum().ToString("X") + "/" + HIDEEPROM.ReadRXImagePhaseChecksum().ToString("X")+
                        " Calculated: " + Checksum.CalcHF(rx1_image_gain_table).ToString("X") + "/" + Checksum.CalcHF(rx1_image_phase_table).ToString("X")+"\n";
                    break;
                }
            }
            p.SetPercent((count += 2) / total_reads);
            Application.DoEvents();

            checksum_error = 0;
            while (true)
            {
                HIDEEPROM.ReadTXImage(tx_image_gain_table, tx_image_phase_table); // 22 reads
                tx_image_gain_checksum = Checksum.CalcHF(tx_image_gain_table);
                tx_image_phase_checksum = Checksum.CalcHF(tx_image_phase_table);
                if (Checksum.MatchHF(tx_image_gain_table, HIDEEPROM.ReadTXImageGainChecksum()) &&
                    Checksum.MatchHF(tx_image_phase_table, HIDEEPROM.ReadTXImagePhaseChecksum()))
                    break;

                checksum_error++;
                if (checksum_error > 2)
                {
                    error_flag = true;
                    error += "TX Image Gain/Phase Checksum verification error.\n" +
                        "DB: " + tx_image_gain_checksum.ToString("X") + "/" + tx_image_phase_checksum.ToString("X") +
                        " EEPROM: " + HIDEEPROM.ReadTXImageGainChecksum().ToString("X") + "/" + HIDEEPROM.ReadTXImagePhaseChecksum().ToString("X") +
                        " Calculated: " + Checksum.CalcHF(tx_image_gain_table).ToString("X") + "/" + Checksum.CalcHF(tx_image_phase_table).ToString("X")+ "\n";
                    break;
                }
            }
            p.SetPercent((count += 2) / total_reads);
            Application.DoEvents();

   
            if (error_flag)
            {
                TextWriter writer = new StreamWriter(app_data_path + "checksum_error.log", true); // "\\checksum_error.log"
                string s = DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToShortTimeString();
                writer.WriteLine(s + "  " + error);
                writer.Close();
            }
            
            SyncCalDateTime();
            p.Hide();
            p.Close();
            Application.DoEvents();

            bool save_init = initializing;
            initializing = true;
            RX1Band = rx1_band;
            TXBand = tx_band;
            initializing = save_init;
        } // restor 1500 call data

		public void RestoreCalData()
		{
			bool trx_checksum_present = FWCEEPROM.TRXChecksumPresent;
			int checksum_error = 0;
            bool error_flag = false;
            string error = "";
			Progress p = new Progress("Retrieving Calibration Data from TRX EEPROM");
			p.SetPercent(0.0f);
			this.Invoke(new MethodInvoker(p.Show));
			Application.DoEvents();
			float total_reads = 324.0f;
            if (current_model == Model.FLEX3000)
                total_reads += 11.0f;  // for ATU SWR table
            else if (current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
                total_reads += 40.0f; // for all VU tables
			int count = 0;

			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadRXLevel(rx1_level_table); // 33 reads
				rx1_level_checksum = Checksum.Calc(rx1_level_table);
				if(!trx_checksum_present) FWCEEPROM.WriteRXLevelChecksum(rx1_level_checksum);
				if(Checksum.Match(rx1_level_table, FWCEEPROM.ReadRXLevelChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "RX1 Level Checksum verification error.\n"+
						"DB: "+rx1_level_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadRXLevelChecksum().ToString("X")+
						" Calculated: "+Checksum.Calc(rx1_level_table).ToString("X") + "\n";
					break;
				}
			}
			p.SetPercent((count+=33)/total_reads);
			Application.DoEvents();
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadRXImage(rx1_image_gain_table, rx1_image_phase_table); // 22 reads
				rx1_image_gain_checksum = Checksum.CalcHF(rx1_image_gain_table);
				if(!trx_checksum_present) FWCEEPROM.WriteRXImageGainChecksum(rx1_image_gain_checksum);
				if(Checksum.MatchHF(rx1_image_gain_table, FWCEEPROM.ReadRXImageGainChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "RX1 Image Gain Checksum verification error.\n"+
						"DB: "+rx1_image_gain_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadRXImageGainChecksum().ToString("X")+
						" Calculated: "+Checksum.CalcHF(rx1_image_gain_table).ToString("X") + "\n";
					break;
				}
			}

			checksum_error = 0;
			do
			{
				rx1_image_phase_checksum = Checksum.CalcHF(rx1_image_phase_table);
				if(!trx_checksum_present) FWCEEPROM.WriteRXImagePhaseChecksum(rx1_image_phase_checksum);
				if(Checksum.MatchHF(rx1_image_phase_table, FWCEEPROM.ReadRXImagePhaseChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "RX1 Image Phase Checksum verification error.\n"+
						"DB: "+rx1_image_phase_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadRXImagePhaseChecksum().ToString("X")+
						" Calculated: "+Checksum.CalcHF(rx1_image_phase_table).ToString("X") + "\n";
					break;
				}
				FWCEEPROM.ReadRXImage(rx1_image_gain_table, rx1_image_phase_table); // 22 reads
			} while(true);
			p.SetPercent((count+=22)/total_reads);
			Application.DoEvents();
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadTXImage(tx_image_gain_table, tx_image_phase_table); // 22 reads
				tx_image_gain_checksum = Checksum.CalcHF(tx_image_gain_table);
				if(!trx_checksum_present) FWCEEPROM.WriteTXImageGainChecksum(tx_image_gain_checksum);
				if(Checksum.MatchHF(tx_image_gain_table, FWCEEPROM.ReadTXImageGainChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "TX Image Gain Checksum verification error.\n"+
						"DB: "+tx_image_gain_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadTXImageGainChecksum().ToString("X")+
						" Calculated: "+Checksum.CalcHF(tx_image_gain_table).ToString("X") + "\n";
					break;
				}
			}

			checksum_error = 0;
			do
			{
				tx_image_phase_checksum = Checksum.CalcHF(tx_image_phase_table);
				if(!trx_checksum_present) FWCEEPROM.WriteTXImagePhaseChecksum(tx_image_phase_checksum);
				if(Checksum.MatchHF(tx_image_phase_table, FWCEEPROM.ReadTXImagePhaseChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "TX Image Phase Checksum verification error.\n"+
						"DB: "+tx_image_phase_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadTXImagePhaseChecksum().ToString("X")+
						" Calculated: "+Checksum.CalcHF(tx_image_phase_table).ToString("X") + "\n";
					break;
				}
				FWCEEPROM.ReadTXImage(tx_image_gain_table, tx_image_phase_table); // 22 reads
			} while(true);
			p.SetPercent((count+=22)/total_reads);
			Application.DoEvents();
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadTXCarrier(tx_carrier_cal); // 11 reads
				tx_carrier_checksum = Checksum.Calc(tx_carrier_cal);
				if(!trx_checksum_present) FWCEEPROM.WriteTXCarrierChecksum(tx_carrier_checksum);
				if(Checksum.Match(tx_carrier_cal, FWCEEPROM.ReadTXCarrierChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "TX Carrier Checksum verification error.\n"+
						"DB: "+tx_carrier_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadTXCarrierChecksum().ToString("X")+
						" Calculated: "+Checksum.Calc(tx_carrier_cal).ToString("X") + "\n";
					break;
				}
			}
			p.SetPercent((count+=11)/total_reads);
			Application.DoEvents();
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadPABias(pa_bias_table); // 8 reads
				pa_bias_checksum = Checksum.Calc(pa_bias_table, false);
				if(!trx_checksum_present) FWCEEPROM.WritePABiasChecksum(pa_bias_checksum);
				if(Checksum.Match(pa_bias_table, FWCEEPROM.ReadPABiasChecksum(), false)) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "PA Bias Checksum verification error.\n"+
						"DB: "+pa_bias_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadPABiasChecksum().ToString("X")+
						" Calculated: "+Checksum.Calc(pa_bias_table, false).ToString("X") + "\n";
					break;
				}
			}
			p.SetPercent((count+=8)/total_reads);
			Application.DoEvents();
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadPAPower(power_table); // 143 reads
				pa_power_checksum = Checksum.Calc(power_table);
				if(!trx_checksum_present) FWCEEPROM.WritePAPowerChecksum(pa_power_checksum);
				if(Checksum.Match(power_table, FWCEEPROM.ReadPAPowerChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "PA Power Checksum verification error.\n"+
						"DB: "+pa_power_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadPAPowerChecksum().ToString("X")+
						" Calculated: "+Checksum.Calc(power_table).ToString("X") + "\n";
					break;
				}
			}
			p.SetPercent((count+=143)/total_reads);
			Application.DoEvents();
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadPABridge(pa_bridge_table); // 66 reads
				pa_bridge_checksum = Checksum.Calc(pa_bridge_table);
				if(!trx_checksum_present) FWCEEPROM.WritePABridgeChecksum(pa_bridge_checksum);
				if(Checksum.Match(pa_bridge_table, FWCEEPROM.ReadPABridgeChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "PA Bridge Checksum verification error.\n"+
						"DB: "+pa_bridge_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadPABridgeChecksum().ToString("X")+
						" Calculated: "+Checksum.Calc(pa_bridge_table).ToString("X") + "\n";
					break;
				}
			}
			p.SetPercent((count+=66)/total_reads);
			Application.DoEvents();			
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadPASWR(swr_table); // 11 reads
				pa_swr_checksum = Checksum.CalcHF(swr_table);
				if(!trx_checksum_present) FWCEEPROM.WritePASWRChecksum(pa_swr_checksum);
				if(Checksum.MatchHF(swr_table, FWCEEPROM.ReadPASWRChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
                    error += "PA SWR Checksum verification error.\n"+
						"DB: "+pa_swr_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadPASWRChecksum().ToString("X")+
						" Calculated: "+Checksum.CalcHF(swr_table).ToString("X") + "\n";
					break;
				}
			}
			p.SetPercent((count+=11)/total_reads);
			Application.DoEvents();

            if (current_model == Model.FLEX3000)
            {
                checksum_error = 0;
                while (true)
                {
                    FWCEEPROM.ReadATUSWR(atu_swr_table); // 11 reads
                    atu_swr_checksum = Checksum.CalcHF(atu_swr_table);
                    if (!trx_checksum_present) FWCEEPROM.WriteATUSWRChecksum(atu_swr_checksum);
                    if (Checksum.MatchHF(atu_swr_table, FWCEEPROM.ReadATUSWRChecksum())) break;

                    checksum_error++;
                    if (checksum_error > 2)
                    {
                        error_flag = true;
                        error += "ATU SWR Checksum verification error.\n" +
                            "DB: " + atu_swr_checksum.ToString("X") +
                            " EEPROM: " + FWCEEPROM.ReadATUSWRChecksum().ToString("X") +
                            " Calculated: " + Checksum.CalcHF(atu_swr_table).ToString("X") + "\n";
                        break;
                    }
                }
                p.SetPercent((count += 11) / total_reads);
                Application.DoEvents();
            }

            if (current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
            {
                checksum_error = 0;
                while (true)
                {
                    FWCEEPROM.ReadVULevel(vhf_level_table, uhf_level_table); // 4 reads
                    vu_level_checksum = Checksum.Calc(vhf_level_table, uhf_level_table);
                    if (!trx_checksum_present) FWCEEPROM.WriteATUSWRChecksum(atu_swr_checksum);
                    if (Checksum.Match(vhf_level_table, uhf_level_table, FWCEEPROM.ReadVULevelChecksum())) break;

                    checksum_error++;
                    if (checksum_error > 2)
                    {
                        error_flag = true;
                        error += "VU Level Checksum verification error.\n" +
                            "DB: " + atu_swr_checksum.ToString("X") +
                            " EEPROM: " + FWCEEPROM.ReadVULevelChecksum().ToString("X") +
                            " Calculated: " + Checksum.Calc(vhf_level_table, uhf_level_table).ToString("X") + "\n";
                        break;
                    }
                }
                p.SetPercent((count += 4) / total_reads);
                Application.DoEvents();

                checksum_error = 0;
                while (true)
                {
                    FWCEEPROM.ReadVUPower(vhf_power_table, uhf_power_table); // 36 reads
                    vu_power_checksum = Checksum.Calc(vhf_power_table, uhf_power_table);
                    if (!trx_checksum_present) FWCEEPROM.WriteVUPowerChecksum(vu_power_checksum);
                    if (Checksum.Match(vhf_power_table, uhf_power_table, FWCEEPROM.ReadVUPowerChecksum())) break;

                    checksum_error++;
                    if (checksum_error > 2)
                    {
                        error_flag = true;
                        error += "VU Power Checksum verification error.\n" +
                            "DB: " + vu_power_checksum.ToString("X") +
                            " EEPROM: " + FWCEEPROM.ReadVUPowerChecksum().ToString("X") +
                            " Calculated: " + Checksum.Calc(vhf_power_table, uhf_power_table).ToString("X") + "\n";
                        break;
                    }
                }
                p.SetPercent((count += 36) / total_reads);
                Application.DoEvents();
            }

            if (error_flag)
            {
                TextWriter writer = new StreamWriter(app_data_path + "checksum_error.log", true); // "\\checksum_error.log"
                string s = DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToShortTimeString();
                writer.WriteLine(s + "  " + error);
                writer.Close();
                FWCEEPROM.TRXChecksumPresent = false;
            }

			if(flex5000DebugForm != null && !flex5000DebugForm.IsDisposed)
			{
				for(int i=0; i<8; i++)
					flex5000DebugForm.SetPAPot(i, (byte)pa_bias_table[0][i]);
			}
			p.SetPercent((count+=8)/total_reads);
			Application.DoEvents();

			SyncCalDateTime();
			p.Hide();
			p.Close();
			Application.DoEvents();

			for(int i=(int)Band.B2M; i<(int)Band.LAST; i++)
				for(int j=0; j<13; j++)
					power_table[i][j] = power_table[10][j];

            bool save_init = initializing;
            initializing = true;
            RX1Band = rx1_band;
            TXBand = tx_band;
            initializing = save_init;
		} // RestoreCalData

		public void RX2RestoreCalData()
		{
			bool rx2_checksum_present = FWCEEPROM.RX2ChecksumPresent;
			int checksum_error = 0;
            bool error_flag = false;
            string error = "";
			Progress p = new Progress("Retrieving Calibration Data from RX2 EEPROM");
			p.SetPercent(0.0f);
			this.Invoke(new MethodInvoker(p.Show));
			Application.DoEvents();
			float total_reads = 55.0f;
			int count = 0;

			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadRX2Level(rx2_level_table); // 33 reads
				rx2_level_checksum = Checksum.Calc(rx2_level_table);
				if(!rx2_checksum_present) FWCEEPROM.WriteRX2LevelChecksum(rx2_level_checksum);
				if(Checksum.Match(rx2_level_table, FWCEEPROM.ReadRX2LevelChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
                    error_flag = true;
					error += "RX2 Level Checksum verification error.\n"+
						"DB: "+rx2_level_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadRX2LevelChecksum().ToString("X")+
						" Calculated: "+Checksum.Calc(rx2_level_table).ToString("X") + "\n";
					break;
				}
			}
			p.SetPercent((count+=33)/total_reads);
			Application.DoEvents();
			
			checksum_error = 0;
			while(true)
			{
				FWCEEPROM.ReadRX2Image(rx2_image_gain_table, rx2_image_phase_table); // 22 reads
				rx2_image_gain_checksum = Checksum.CalcHF(rx2_image_gain_table);
				if(!rx2_checksum_present) FWCEEPROM.WriteRX2ImageGainChecksum(rx2_image_gain_checksum);
				if(Checksum.MatchHF(rx2_image_gain_table, FWCEEPROM.ReadRX2ImageGainChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
                    error_flag = true;
                    error += "RX2 Image Gain Checksum verification error.\n" +
						"DB: "+rx2_image_gain_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadRX2ImageGainChecksum().ToString("X")+
						" Calculated: "+Checksum.CalcHF(rx2_image_gain_table).ToString("X") + "\n";
					break;
				}
			}

			checksum_error = 0;
			do
			{
				rx2_image_phase_checksum = Checksum.CalcHF(rx2_image_phase_table);
				if(!rx2_checksum_present) FWCEEPROM.WriteRX2ImagePhaseChecksum(rx2_image_phase_checksum);
				if(Checksum.MatchHF(rx2_image_phase_table, FWCEEPROM.ReadRX2ImagePhaseChecksum())) break;

				checksum_error++;
				if(checksum_error > 2)
				{
					error_flag = true;
					error += "RX2 Image Phase Checksum verification error.\n"+
						"DB: "+rx2_image_phase_checksum.ToString("X")+
						" EEPROM: "+FWCEEPROM.ReadRX2ImagePhaseChecksum().ToString("X")+
						" Calculated: "+Checksum.CalcHF(rx2_image_phase_table).ToString("X") + "\n";
					break;
				}
				FWCEEPROM.ReadRX2Image(rx2_image_gain_table, rx2_image_phase_table); // 22 reads
			} while(true);
			p.SetPercent((count+=22)/total_reads);
			Application.DoEvents();

            if (error_flag)
            {
                TextWriter writer = new StreamWriter(app_data_path + "checksum_error.log", true); // "\\checksum_error.log"
                string s = DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToShortTimeString();
                writer.WriteLine(s + "  " + error);
                writer.Close();
                FWCEEPROM.RX2ChecksumPresent = false;
            }

			RX2SyncCalDateTime();
			p.Hide();
			p.Close();

            bool save_init = initializing;
            initializing = true;
            RX2Band = rx2_band;
            initializing = save_init;
		}

        public void Write1500CalData()
        {
            if (!hid_init || current_model != Model.FLEX1500) return;

            HIDEEPROM.WriteRXLevel(rx1_level_table, out rx1_level_checksum);
            HIDEEPROM.WriteRXImage(rx1_image_gain_table, rx1_image_phase_table, out rx1_image_gain_checksum, out rx1_image_phase_checksum);
            HIDEEPROM.WriteTXImage(tx_image_gain_table, tx_image_phase_table, out tx_image_gain_checksum, out tx_image_phase_checksum);
            HIDEEPROM.WritePAPower(power_table, out pa_power_checksum);

            SyncCalDateTime();
        }

		public void WriteCalData()
		{
			if(!fwc_init || (current_model != Model.FLEX5000 && current_model != Model.FLEX3000)) return;

			FWCEEPROM.WriteRXLevel(rx1_level_table, out rx1_level_checksum);
			FWCEEPROM.WriteRXImage(rx1_image_gain_table, rx1_image_phase_table, out rx1_image_gain_checksum, out rx1_image_phase_checksum);
			FWCEEPROM.WriteTXImage(tx_image_gain_table, tx_image_phase_table, out tx_image_gain_checksum, out tx_image_phase_checksum);
			FWCEEPROM.WriteTXCarrier(tx_carrier_cal, out tx_carrier_checksum);
			FWCEEPROM.WritePABias(pa_bias_table, out pa_bias_checksum);
			FWCEEPROM.WritePABridge(pa_bridge_table, out pa_bridge_checksum);
			FWCEEPROM.WritePAPower(power_table, out pa_power_checksum);
            FWCEEPROM.WritePASWR(swr_table, out pa_swr_checksum);
            FWCEEPROM.WriteATUSWR(atu_swr_table, out atu_swr_checksum);

            if (FWCEEPROM.VUOK)
            {
                FWCEEPROM.WriteVULevel(vhf_level_table, uhf_level_table, out vu_level_checksum);
                FWCEEPROM.WriteVUPower(vhf_power_table, uhf_power_table, out vu_power_checksum);
            }

			SyncCalDateTime();
		}

        public void WriteRX2CalData()
        {
            if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;

            FWCEEPROM.WriteRX2Level(rx2_level_table, out rx2_level_checksum);
            FWCEEPROM.WriteRX2Image(rx2_image_gain_table, rx2_image_phase_table, out rx2_image_gain_checksum, out rx2_image_phase_checksum);

            SyncCalDateTime();
        }

		public float GetRX1Level(Band b, int index)
		{
			return rx1_level_table[(int)b][index];
		}

		public float GetRX2Level(Band b, int index)
		{
			return rx2_level_table[(int)b][index];
		}

		public FilterPreset[] rx1_filters = new FilterPreset[(int)DSPMode.LAST];
		public FilterPreset[] rx2_filters = new FilterPreset[(int)DSPMode.LAST];

		private void InitFilterPresets()
		{
			InitFilterPresets(rx1_filters);
			InitFilterPresets(rx2_filters);
		}

		private void InitFilterPresets(FilterPreset[] preset)
		{
			// used to initialize all the filter variables
            // changed digi mode preset filters to center on digi mode click tune offset - W4TME

			for(int m=(int)DSPMode.FIRST+1; m<(int)DSPMode.LAST; m++)
			{
				preset[m] = new FilterPreset();
				for(Filter f=Filter.F1; f != Filter.LAST; f++)	
				{
					switch(m)
					{
						case (int)DSPMode.LSB:
						switch(f)
						{
							case Filter.F1:
								preset[m].SetFilter(f, -5150, -150, "5.0k");
								break;
							case Filter.F2:
								preset[m].SetFilter(f, -4550, -150, "4.4k");
								break;
							case Filter.F3:
								preset[m].SetFilter(f, -3950, -150, "3.8k");
								break;
							case Filter.F4:
								preset[m].SetFilter(f, -3450, -150, "3.3k");
								break;
							case Filter.F5:
								preset[m].SetFilter(f, -3050, -150, "2.9k");
								break;
							case Filter.F6:
								preset[m].SetFilter(f, -2850, -150, "2.7k");
								break;
							case Filter.F7:
								preset[m].SetFilter(f, -2550, -150, "2.4k");
								break;
							case Filter.F8:
								preset[m].SetFilter(f, -2250, -150, "2.1k");
								break;
							case Filter.F9:
								preset[m].SetFilter(f, -1950, -150, "1.8k");
								break;
							case Filter.F10:
								preset[m].SetFilter(f, -1150, -150, "1.0k");
								break;
							case Filter.VAR1:
								preset[m].SetFilter(f, -2850, -150, "Var 1");
								break;
							case Filter.VAR2:
								preset[m].SetFilter(f, -2850, -150, "Var 2");
								break;
						}
							preset[m].LastFilter = Filter.F6;
							break; // lsb
						case (int)DSPMode.USB:	
						switch(f)
						{
							case Filter.F1:
								preset[m].SetFilter(f, 150, 5150, "5.0k");
								break;
							case Filter.F2:
								preset[m].SetFilter(f, 150, 4550, "4.4k");
								break;
							case Filter.F3:
								preset[m].SetFilter(f, 150, 3950, "3.8k");
								break;
							case Filter.F4:
								preset[m].SetFilter(f, 150, 3450, "3.3k");
								break;
							case Filter.F5:
								preset[m].SetFilter(f, 150, 3050, "2.9k");
								break;
							case Filter.F6:
								preset[m].SetFilter(f, 150, 2850, "2.7k");
								break;
							case Filter.F7:
								preset[m].SetFilter(f, 150, 2550, "2.4k");
								break;
							case Filter.F8:
								preset[m].SetFilter(f, 150, 2250, "2.1k");
								break;
							case Filter.F9:
								preset[m].SetFilter(f, 150, 1950, "1.8k");
								break;
							case Filter.F10:
								preset[m].SetFilter(f, 150, 1150, "1.0k");
								break;
							case Filter.VAR1:
								preset[m].SetFilter(f, 150, 2850, "Var 1");
								break;
							case Filter.VAR2:
								preset[m].SetFilter(f, 150, 2850, "Var 2");
								break;
						}
							preset[m].LastFilter = Filter.F6;
							break; //usb
                        case (int)DSPMode.DIGL:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-1500, -digl_click_tune_offset+1500, "3.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-1250, -digl_click_tune_offset+1250, "2.5k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-1000, -digl_click_tune_offset+1000, "2.0k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-750, -digl_click_tune_offset+750, "1.5k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-500, -digl_click_tune_offset+500, "1.0k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-400, -digl_click_tune_offset+400, "800");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-300, -digl_click_tune_offset+300, "600");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-150, -digl_click_tune_offset+150, "300");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-75, -digl_click_tune_offset+75, "150");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-38, -digl_click_tune_offset+38, "75");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-400, -digl_click_tune_offset+400, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, -digl_click_tune_offset-400, -digl_click_tune_offset+400, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break; //digl
                        case (int)DSPMode.DIGU:
                            switch (f)
                            {
                                case Filter.F1:
                                    preset[m].SetFilter(f, digu_click_tune_offset-1500, digu_click_tune_offset+1500, "3.0k");
                                    break;
                                case Filter.F2:
                                    preset[m].SetFilter(f, digu_click_tune_offset-1250, digu_click_tune_offset+1250, "2.5k");
                                    break;
                                case Filter.F3:
                                    preset[m].SetFilter(f, digu_click_tune_offset-1000, digu_click_tune_offset+1000, "2.0k");
                                    break;
                                case Filter.F4:
                                    preset[m].SetFilter(f, digu_click_tune_offset-750, digu_click_tune_offset+750, "1.5k");
                                    break;
                                case Filter.F5:
                                    preset[m].SetFilter(f, digu_click_tune_offset-500, digu_click_tune_offset+500, "1.0k");
                                    break;
                                case Filter.F6:
                                    preset[m].SetFilter(f, digu_click_tune_offset-400, digu_click_tune_offset+400, "800");
                                    break;
                                case Filter.F7:
                                    preset[m].SetFilter(f, digu_click_tune_offset-300, digu_click_tune_offset+300, "600");
                                    break;
                                case Filter.F8:
                                    preset[m].SetFilter(f, digu_click_tune_offset-150, digu_click_tune_offset+150, "300");
                                    break;
                                case Filter.F9:
                                    preset[m].SetFilter(f, digu_click_tune_offset-75, digu_click_tune_offset+75, "150");
                                    break;
                                case Filter.F10:
                                    preset[m].SetFilter(f, digu_click_tune_offset-38, digu_click_tune_offset+38, "75");
                                    break;
                                case Filter.VAR1:
                                    preset[m].SetFilter(f, digu_click_tune_offset - 400, digu_click_tune_offset+400, "Var 1");
                                    break;
                                case Filter.VAR2:
                                    preset[m].SetFilter(f, digu_click_tune_offset-400, digu_click_tune_offset+400, "Var 2");
                                    break;
                            }
                            preset[m].LastFilter = Filter.F5;
                            break;	// digu
						case (int)DSPMode.CWL:
						switch(f)
						{
							case Filter.F1:
								preset[m].SetFilter(f, -cw_pitch-500, -cw_pitch+500, "1.0k");
								break;
							case Filter.F2:
								preset[m].SetFilter(f, -cw_pitch-400, -cw_pitch+400, "800");
								break;
							case Filter.F3:
								preset[m].SetFilter(f, -cw_pitch-375, -cw_pitch+375, "750");
								break;
							case Filter.F4:
								preset[m].SetFilter(f, -cw_pitch-300, -cw_pitch+300, "600");
								break;
							case Filter.F5:
								preset[m].SetFilter(f, -cw_pitch-250, -cw_pitch+250, "500");
								break;
							case Filter.F6:
								preset[m].SetFilter(f, -cw_pitch-200, -cw_pitch+200, "400");
								break;
							case Filter.F7:
								preset[m].SetFilter(f, -cw_pitch-125, -cw_pitch+125, "250");
								break;
							case Filter.F8:
								preset[m].SetFilter(f, -cw_pitch-50, -cw_pitch+50, "100");
								break;
							case Filter.F9:
								preset[m].SetFilter(f, -cw_pitch-25, -cw_pitch+25, "50");
								break;
							case Filter.F10:
								preset[m].SetFilter(f, -cw_pitch-13, -cw_pitch+13, "25");
								break;
							case Filter.VAR1:
								preset[m].SetFilter(f, -cw_pitch-250, -cw_pitch+250, "Var 1");
								break;
							case Filter.VAR2:
								preset[m].SetFilter(f, -cw_pitch-250, -cw_pitch+250, "Var 2");
								break;
						}
							preset[m].LastFilter = Filter.F5;
							break; // cwl
						case (int)DSPMode.CWU:
						switch(f)
						{
							case Filter.F1:
								preset[m].SetFilter(f, cw_pitch-500, cw_pitch+500, "1.0k");
								break;
							case Filter.F2:
								preset[m].SetFilter(f, cw_pitch-400, cw_pitch+400, "800");
								break;
							case Filter.F3:
								preset[m].SetFilter(f, cw_pitch-375, cw_pitch+375, "750");
								break;
							case Filter.F4:
								preset[m].SetFilter(f, cw_pitch-300, cw_pitch+300, "600");
								break;
							case Filter.F5:
								preset[m].SetFilter(f, cw_pitch-250, cw_pitch+250, "500");
								break;
							case Filter.F6:
								preset[m].SetFilter(f, cw_pitch-200, cw_pitch+200, "400");
								break;
							case Filter.F7:
								preset[m].SetFilter(f, cw_pitch-125, cw_pitch+125, "250");
								break;
							case Filter.F8:
								preset[m].SetFilter(f, cw_pitch-50, cw_pitch+50, "100");
								break;
							case Filter.F9:
								preset[m].SetFilter(f, cw_pitch-25, cw_pitch+25, "50");
								break;
							case Filter.F10:
								preset[m].SetFilter(f, cw_pitch-13, cw_pitch+13, "25");
								break;
							case Filter.VAR1:
								preset[m].SetFilter(f, cw_pitch-250, cw_pitch+250, "Var 1");
								break;
							case Filter.VAR2:
								preset[m].SetFilter(f, cw_pitch-250, cw_pitch+250, "Var 2");
								break;
						}
							preset[m].LastFilter = Filter.F5;
							break; //cwu
						case (int)DSPMode.AM:
						case (int)DSPMode.SAM:
						case (int)DSPMode.DSB:
						switch(f)
						{
							case Filter.F1:
								preset[m].SetFilter(f, -8000, 8000, "16k");
								break;
							case Filter.F2:
								preset[m].SetFilter(f, -6000, 6000, "12k");
								break;
							case Filter.F3:
								preset[m].SetFilter(f, -5000, 5000, "10k");
								break;
							case Filter.F4:
								preset[m].SetFilter(f, -4000, 4000, "8.0k");
								break;
							case Filter.F5:
								preset[m].SetFilter(f, -3300, 3300, "6.6k");
								break;
							case Filter.F6:
								preset[m].SetFilter(f, -2600, 2600, "5.2k");
								break;
							case Filter.F7:
								preset[m].SetFilter(f, -2000, 2000, "4.0k");
								break;
							case Filter.F8:
								preset[m].SetFilter(f, -1550, 1550, "3.1k");
								break;
							case Filter.F9:
								preset[m].SetFilter(f, -1450, 1450, "2.9k");
								break;
							case Filter.F10:
								preset[m].SetFilter(f, -1200, 1200, "2.4k");
								break;
							case Filter.VAR1:
								preset[m].SetFilter(f, -3300, 3300, "Var 1");
								break;
							case Filter.VAR2:
								preset[m].SetFilter(f, -3300, 3300, "Var 2");
								break;
						}
							preset[m].LastFilter = Filter.F5;
							break; // am,dsb
						default:
							preset[m].LastFilter = Filter.NONE;
							break;
					}
				}
			}
		} // initfilterpresets

		private void InitDisplayModes()
		{
			// populate the display mode list
			for(DisplayMode dm = DisplayMode.FIRST + 1; dm < DisplayMode.LAST; dm++)
			{
				string s = dm.ToString().ToLower();

				s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length-1);

				comboDisplayMode.Items.Add(s);
			}
		}

		private void InitAGCModes()
		{
			// populate the AGC mode list
			for(AGCMode agc=AGCMode.FIRST+1; agc<AGCMode.LAST; agc++)
			{
				string s = agc.ToString().ToLower();
				s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length-1);
				comboAGC.Items.Add(s);
			}

			for(AGCMode agc=AGCMode.FIRST+1; agc<AGCMode.CUSTOM; agc++)
			{
				string s = agc.ToString().ToLower();
				s = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length-1);
				comboRX2AGC.Items.Add(s);
			}
		}

		private void InitMultiMeterModes()
		{
			comboMeterRXMode.Items.Add("Signal");
            comboMeterRXMode.Items.Add("Sig Avg");
            comboMeterRXMode.Items.Add("Sig Pk"); // ke9ns ADD new meter mode (Signal Peak hold reading)
			comboMeterRXMode.Items.Add("ADC L");
			comboMeterRXMode.Items.Add("ADC R");
			comboMeterRXMode.Items.Add("ADC2 L");
			comboMeterRXMode.Items.Add("ADC2 R");
			comboMeterRXMode.Items.Add("Off");

			comboRX2MeterMode.Items.Add("Signal");
			comboRX2MeterMode.Items.Add("Sig Avg");
            comboRX2MeterMode.Items.Add("Sig Pk"); // ke9ns ADD new meter mode (Signal Peak hold reading)
            comboRX2MeterMode.Items.Add("ADC L");
			comboRX2MeterMode.Items.Add("ADC R");
			comboRX2MeterMode.Items.Add("ADC2 L");
			comboRX2MeterMode.Items.Add("ADC2 R");
			comboRX2MeterMode.Items.Add("Off");

			comboMeterTXMode.Items.Add("Fwd Pwr");
			comboMeterTXMode.Items.Add("Ref Pwr");
			comboMeterTXMode.Items.Add("SWR");
			comboMeterTXMode.Items.Add("Mic");
			comboMeterTXMode.Items.Add("EQ");
			comboMeterTXMode.Items.Add("Leveler");
			comboMeterTXMode.Items.Add("Lev Gain");
			comboMeterTXMode.Items.Add("ALC");			
			comboMeterTXMode.Items.Add("ALC Comp");
			comboMeterTXMode.Items.Add("CPDR");
			comboMeterTXMode.Items.Add("Off");


            //ke9ns add block below
            comboMeterTX1Mode.Items.Add("Fwd Pwr");
            comboMeterTX1Mode.Items.Add("Ref Pwr");
            comboMeterTX1Mode.Items.Add("SWR");
            comboMeterTX1Mode.Items.Add("Mic");
            comboMeterTX1Mode.Items.Add("EQ");
            comboMeterTX1Mode.Items.Add("Leveler");
            comboMeterTX1Mode.Items.Add("Lev Gain");
            comboMeterTX1Mode.Items.Add("ALC");
            comboMeterTX1Mode.Items.Add("ALC Comp");
            comboMeterTX1Mode.Items.Add("CPDR");
            comboMeterTX1Mode.Items.Add("Off");

        }// initmultimeterModes()

		private void DisableAllFilters()
		{
			foreach(Control c in panelFilter.Controls)
			{
				if(c.GetType() == typeof(RadioButtonTS))
				{
					c.Enabled = false;
				}
			}
		}       

        private void DisableAllRX2Filters()
		{
            foreach (Control c in panelRX2Filter.Controls)
			{
				if(c.GetType() == typeof(RadioButtonTS))
				{
					c.Enabled = false;
				}
			}
		}

		private void EnableAllFilters()
		{
            foreach (Control c in panelFilter.Controls)
			{
				if(c.GetType() == typeof(RadioButtonTS))
				{
					c.Enabled = true;

					if(c.BackColor == vfo_text_dark_color)
					{
						c.BackColor = button_selected_color;
					}
				}
			}
		}

        private void EnableAllRX2Filters()
        {
            foreach (Control c in panelRX2Filter.Controls)
            {
                if (c.GetType() == typeof(RadioButtonTS))
                {
                    c.Enabled = true;

                    if (c.BackColor == vfo_text_dark_color)
                    {
                        c.BackColor = button_selected_color;
                    }
                }
            }
        }

        //=============================================================
        // ke9ns used to disable all the buttons on the HF,VHF,SWL band panel
		private void DisableAllBands()
		{
			foreach(Control c in panelBandHF.Controls)
			{
				c.Enabled = false;

                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.BackColor == button_selected_color)
                    {
                        b.BackColor = vfo_text_dark_color;
                    }
                }
			}

            foreach (Control c in panelBandVHF.Controls)
			{
				c.Enabled = false;

                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.BackColor == button_selected_color)
                    {
                        b.BackColor = vfo_text_dark_color;
                    }
                }
			}

            foreach (Control c in panelBandGN.Controls)
            {
             //   c.Enabled = false;

                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.BackColor == button_selected_color)
                    {
                        b.BackColor = vfo_text_dark_color;
                    }
                }
            }

        } // DisableAllBands()


        //=================================================================================
        // ke9ns turns on buttons on all 3 band panels HF,VHF, SWL

        private void EnableAllBands()
		{
          
            foreach (Control c in panelBandHF.Controls)
			{
                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.Text == "2") b.Enabled = XVTRPresent;
                    else b.Enabled = true;

                    if (b.BackColor == vfo_text_dark_color)   b.BackColor = button_selected_color;
                }
                else c.Enabled = true;
			}

            foreach (Control c in panelBandGN.Controls) // ke9ns add
            {
                RadioButtonTS b = c as RadioButtonTS;
                Debug.WriteLine("enableallbands");

                if (b != null)
                {

                    if (b.Name == "panelBandHF")
                    {
                        b.Enabled = true;
                    }
                    else
                    {
                        b.Enabled = true;
                       
                    }

                    if (b.BackColor == vfo_text_dark_color) b.BackColor = button_selected_color;
                }
                else
                {
                    c.Enabled = true;
                   
                }
            }


            foreach (Control c in panelBandVHF.Controls)
			{
                RadioButtonTS b = c as RadioButtonTS;
                if (b != null)
                {
                    if (b.Name == "panelBandHF")  b.Enabled = true;
                    else
                    {
                        int index = Int32.Parse(b.Name.Substring(10));
                        if (xvtrForm.GetEnabled(index))
                            b.Enabled = true;
                    }

                    if (b.BackColor == vfo_text_dark_color)
                        b.BackColor = button_selected_color;
                }
                else c.Enabled = true;				
			}


        } // EnableAllBands()



        //============================================================================================
        private void DisableAllModes()
		{
			foreach(RadioButtonTS r in panelMode.Controls)
			{
				r.Enabled = false;
				if(r.BackColor == button_selected_color)
					r.BackColor = vfo_text_dark_color;
			}
		}

		private void EnableAllModes()
		{
			foreach(RadioButtonTS r in panelMode.Controls)
			{
				if(r.Text != "")	r.Enabled = true;
				if(r.BackColor == vfo_text_dark_color)	r.BackColor = button_selected_color;
			}
		}

		private void DisableFilters(int lowcutoff)
		{
			// Disables all filters below the number passed in. 
			// For example, DisableFilters(100) would cause the
			// 100Hz, 50Hz and 25Hz filters to be disabled.

            foreach (Control c in panelFilter.Controls)
			{
				if(c.GetType() == typeof(RadioButtonTS) && c.Name.IndexOf("Var") < 0)
				{
					string name = c.Name;
					int begin, len;
					begin = name.IndexOf("Filter")+6;
					len = name.Length-begin;

					int filter_width = Int32.Parse(name.Substring(begin, len));
					if(filter_width < lowcutoff)
					{
						c.Enabled = false;
						((RadioButtonTS)c).Checked = false;
					}
				}
			}
		}

		private void GetVFOCharWidth()
		{
			// This function calculates the pixel width of the VFO display.
			// This information is used for mouse wheel hover tuning.

			Graphics g = txtVFOAFreq.CreateGraphics();
			
			SizeF size = g.MeasureString("0", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
			vfo_char_width = (int)Math.Round(size.Width-2.0f, 0);	// subtract 2 since measure string includes 1 pixel border on each side
			float float_char_width = size.Width-2.0f;

			size = g.MeasureString("00", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
			vfo_char_space = (int)Math.Round(size.Width-2.0f - 2*float_char_width, 0);
			
			size = g.MeasureString(separator, txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
			vfo_decimal_width = (int)(size.Width-2.0f);

			size = g.MeasureString("0"+separator+"0", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
			vfo_decimal_space = (int)Math.Round(size.Width-2.0f - 2*float_char_width, 0);

			size = g.MeasureString("1234.678901", txtVFOAFreq.Font, 1000, StringFormat.GenericTypographic);
			vfo_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

			size = g.MeasureString("0", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
			vfo_small_char_width = (int)Math.Round(size.Width-2.0f, 0);
			float_char_width = size.Width-2.0f;

			size = g.MeasureString("00", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
			vfo_small_char_space = (int)Math.Round(size.Width-2.0f - 2*float_char_width, 0);

			g.Dispose();
		}

		private void GetVFOSubCharWidth()
		{
			// This function calculates the pixel width of the VFO display.
			// This information is used for mouse wheel hover tuning.

			Graphics g = txtVFOABand.CreateGraphics();
			
			SizeF size = g.MeasureString("0", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
			vfo_sub_char_width = (int)Math.Round(size.Width-2.0f, 0);	// subtract 2 since measure string includes 1 pixel border on each side
			float float_char_width = size.Width-2.0f;

			size = g.MeasureString("00", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
			vfo_sub_char_space = (int)Math.Round(size.Width-2.0f - 2*float_char_width, 0);
			
			size = g.MeasureString(separator, txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
			vfo_sub_decimal_width = (int)(size.Width-2.0f);

			size = g.MeasureString("0"+separator+"0", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
			vfo_sub_decimal_space = (int)Math.Round(size.Width-2.0f - 2*float_char_width, 0);

			size = g.MeasureString("1234.678901", txtVFOABand.Font, 1000, StringFormat.GenericTypographic);
			vfo_sub_pixel_offset = (int)Math.Round(size.Width - 2.0f, 0);

			/*size = g.MeasureString("0", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
			vfo_small_char_width = (int)Math.Round(size.Width-2.0f, 0);
			float_char_width = size.Width-2.0f;

			size = g.MeasureString("00", txtVFOALSD.Font, 1000, StringFormat.GenericTypographic);
			vfo_small_char_space = (int)Math.Round(size.Width-2.0f - 2*float_char_width, 0);*/

			g.Dispose();
		}

        public string[] filter2 = new string[20]; // ke9ns add for bandstack locking
        public int iii = 0;

      
        //==================================================================================
        // ke9ns add
        public bool  SaveBand1()
        {

            try
            {
                StackForm.bandstackupdate(); // ke9ns add: to update filter2[]

                iii = Convert.ToInt32((string)regBox1.Text);
                Debug.WriteLine("LOCK STATUS filter2[] = " + filter2[iii]);

                iii = iii - 1;

                Debug.WriteLine("index status = " + iii);

                if (iii < 0) return false; // ke9ns add  usually only happens after a new installation

            }
            catch (Exception)
            {
                Debug.WriteLine("Cant get bandstack info");
                iii = 0;
                filter2[0] = "";
                return false;
            }

            if (filter2[iii] == "@")
            {

                BandStackLock = 1;
            }
            else
            {
                BandStackLock = 0;

            }

            
            return true;

        } // SaveBand1()


        //======================================================================================
        public void SaveBand()
		{

           
           if ( SaveBand1()== false) // get bandstack Locking info
           {

                return; // prior bandstack has a problem so dont try to save.
            }
          
            // Used in Bandstacking algorithm
            double freq = Math.Round(VFOAFreq, 6);

			string filter = rx1_filter.ToString() + filter2[iii]; // ke9ns mod  (add filter2 for bandstack locking)

            Debug.WriteLine("filter2");

			string mode = rx1_dsp_mode.ToString();

         
            switch (rx1_band)
			{
				case Band.B160M:
					if(freq >= 1.8 && freq < 2.0)
						DB.SaveBandStack("160M", band_160m_index, mode, filter, freq);
					break;
				case Band.B80M:
                    if (freq >= 3.5 && freq < 4.0)
                        DB.SaveBandStack("80M", band_80m_index, mode, filter, freq);
                    break;
				case Band.B60M:
					if(extended || (current_region != FRSRegion.US))
					{
                        if (freq >= 5.25 && freq < 5.45) //   if (freq >= 5.0 && freq < 6.0)
                        {
                            switch (current_region)
                            {
                                case FRSRegion.UK_Plus:     // do not save 60m bandstack changes for non-channelized EU using band segments
                               
                                    break;
                                default:
                                    DB.SaveBandStack("60M", band_60m_index, mode, filter, freq);
                                    break;
                             }
                        }
					}
					else
					{
                        if(RX1IsOn60mChannel())
                            DB.SaveBandStack("60M", band_60m_index, mode, filter, freq);						
					}
					break;
				case Band.B40M:
					if(freq >= 7.0 && freq < 7.3)
						DB.SaveBandStack("40M", band_40m_index, mode, filter, freq);
					break;
				case Band.B30M:
					if(freq >= 10.1 && freq < 10.15)
						DB.SaveBandStack("30M", band_30m_index, mode, filter, freq);
					break;
				case Band.B20M:
					if(freq >= 14.0 && freq < 14.350)
						DB.SaveBandStack("20M", band_20m_index, mode, filter, freq);
					break;
				case Band.B17M:
					if(freq >= 18.068 && freq < 18.168)
						DB.SaveBandStack("17M", band_17m_index, mode, filter, freq);
					break;
				case Band.B15M:
					if(freq >= 21.0 && freq < 21.45)
						DB.SaveBandStack("15M", band_15m_index, mode, filter, freq);
					break;
				case Band.B12M:
					if(freq >= 24.890 && freq < 24.990)
						DB.SaveBandStack("12M", band_12m_index, mode, filter, freq);
					break;
				case Band.B10M:
					if(freq >= 28.0 && freq < 29.7)
						DB.SaveBandStack("10M", band_10m_index, mode, filter, freq);
					break;
				case Band.B6M:
					if(freq >= 50.0 && freq < 54.0)
						DB.SaveBandStack("6M", band_6m_index, mode, filter, freq);
					break;
				case Band.B2M:
					if(freq >= 144.0 && freq < 146.0) // ke9ns test was 144.0 and 146.0
						DB.SaveBandStack("2M", band_2m_index, mode, filter, freq);
					break;
				case Band.WWV:
					if(freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 || 
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)  // ke9ns mod added 25mhz
						DB.SaveBandStack("WWV", band_wwv_index, mode, filter, freq);
					break;
                case Band.GEN:
                    DB.SaveBandStack("GEN", band_gen_index, mode, filter, freq);
                    break;

             
				case Band.VHF0:
					if(freq >= xvtrForm.GetBegin(0) && freq <= xvtrForm.GetEnd(0))
						DB.SaveBandStack("VHF0", band_vhf0_index, mode, filter, freq);
					break;
				case Band.VHF1:
					if(freq >= xvtrForm.GetBegin(1) && freq <= xvtrForm.GetEnd(1))
						DB.SaveBandStack("VHF1", band_vhf1_index, mode, filter, freq);
					break;
				case Band.VHF2:
                  
					if(freq >= xvtrForm.GetBegin(2) && freq <= xvtrForm.GetEnd(2)) // displays as 1240,001 in europe or 1240.001 in US
						DB.SaveBandStack("VHF2", band_vhf2_index, mode, filter, freq);
					break;
				case Band.VHF3:
					if(freq >= xvtrForm.GetBegin(3) && freq <= xvtrForm.GetEnd(3))
						DB.SaveBandStack("VHF3", band_vhf3_index, mode, filter, freq);
					break;
				case Band.VHF4:
					if(freq >= xvtrForm.GetBegin(4) && freq <= xvtrForm.GetEnd(4))
						DB.SaveBandStack("VHF4", band_vhf4_index, mode, filter, freq);
					break;
				case Band.VHF5:
					if(freq >= xvtrForm.GetBegin(5) && freq <= xvtrForm.GetEnd(5))
						DB.SaveBandStack("VHF5", band_vhf5_index, mode, filter, freq);
					break;
				case Band.VHF6:
					if(freq >= xvtrForm.GetBegin(6) && freq <= xvtrForm.GetEnd(6))
						DB.SaveBandStack("VHF6", band_vhf6_index, mode, filter, freq);
					break;
				case Band.VHF7:
					if(freq >= xvtrForm.GetBegin(7) && freq <= xvtrForm.GetEnd(7))
						DB.SaveBandStack("VHF7", band_vhf7_index, mode, filter, freq);
					break;
				case Band.VHF8:
					if(freq >= xvtrForm.GetBegin(8) && freq <= xvtrForm.GetEnd(8))
						DB.SaveBandStack("VHF8", band_vhf8_index, mode, filter, freq);
					break;
				case Band.VHF9:
					if(freq >= xvtrForm.GetBegin(9) && freq <= xvtrForm.GetEnd(9))
						DB.SaveBandStack("VHF9", band_vhf9_index, mode, filter, freq);
					break;
				case Band.VHF10:
					if(freq >= xvtrForm.GetBegin(10) && freq <= xvtrForm.GetEnd(10))
						DB.SaveBandStack("VHF10", band_vhf10_index, mode, filter, freq);
					break;
				case Band.VHF11:
					if(freq >= xvtrForm.GetBegin(11) && freq <= xvtrForm.GetEnd(11))
						DB.SaveBandStack("VHF11", band_vhf11_index, mode, filter, freq);
					break;
				case Band.VHF12:
					if(freq >= xvtrForm.GetBegin(12) && freq <= xvtrForm.GetEnd(12))
						DB.SaveBandStack("VHF12", band_vhf12_index, mode, filter, freq);
					break;
				case Band.VHF13:
					if(freq >= xvtrForm.GetBegin(13) && freq <= xvtrForm.GetEnd(13))
						DB.SaveBandStack("VHF13", band_vhf13_index, mode, filter, freq);
					break;



                case Band.BLMF:                                                                     // ke9ns add down below vhf
                    if (freq >= 0.20 && freq < 1.80)
                        DB.SaveBandStack("LMF", band_LMF_index, mode, filter, freq);
                    break;
                case Band.B120M:
                    if (freq >= 2.30 && freq < 3.0)
                        DB.SaveBandStack("120M", band_120m_index, mode, filter, freq);
                    break;
                case Band.B90M:
                    if (freq >= 3.0 && freq < 3.50)
                        DB.SaveBandStack("90M", band_90m_index, mode, filter, freq);
                    break;
                case Band.B61M:
                    if (freq >= 4.10 && freq < 5.25) // was 5.06
                        DB.SaveBandStack("61M", band_61m_index, mode, filter, freq);
                    break;
                case Band.B49M:
                    if (freq >= 5.45 && freq < 7.00)
                        DB.SaveBandStack("49M", band_49m_index, mode, filter, freq);
                    break;
                case Band.B41M:
                    if (freq >= 7.30 && freq < 9.0)
                        DB.SaveBandStack("41M", band_41m_index, mode, filter, freq);
                    break;
                case Band.B31M:
                    if (freq >= 9.0 && freq < 9.9)
                        DB.SaveBandStack("31M", band_31m_index, mode, filter, freq);
                    break;
                case Band.B25M:
                    if (freq >= 11.0 && freq < 13.57)
                        DB.SaveBandStack("25M", band_25m_index, mode, filter, freq);
                    break;
                case Band.B22M:
                    if (freq >= 13.57 && freq < 13.87)
                        DB.SaveBandStack("22M", band_22m_index, mode, filter, freq);
                    break;

                case Band.B19M:
                    if (freq >= 15.1 && freq < 17.0)
                        DB.SaveBandStack("19M", band_19m_index, mode, filter, freq);
                    break;

                case Band.B16M:
                    if (freq >= 17.0 && freq < 18.0)
                        DB.SaveBandStack("16M", band_16m_index, mode, filter, freq);
                    break;
                case Band.B14M:
                    if (freq >= 18.0 && freq < 21.0)
                        DB.SaveBandStack("14M", band_14m_index, mode, filter, freq);
                    break;

                case Band.B13M:
                    if (freq >= 21.00 && freq < 25.0)
                        DB.SaveBandStack("13M", band_13m_index, mode, filter, freq);
                    break;

                case Band.B11M:
                    if (freq >= 25.0 && freq < 28.0)
                        DB.SaveBandStack("11M", band_11m_index, mode, filter, freq);
                    break;

            } // switch rx1band

         

        } // saveband


        public void SetBand(string mode, string filter, double freq)
		{
            if (filter.Contains("@"))
            {
                filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
            }
          
			// Set mode, filter, and frequency according to passed parameters
			RX1DSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), mode, true);

			if(rx1_dsp_mode != DSPMode.DRM && rx1_dsp_mode != DSPMode.SPEC)
			{
				RX1Filter = (Filter)Enum.Parse(typeof(Filter), filter, true);
			}

			VFOAFreq = freq;
            
            tempVFOAFreq = VFOAFreq; // ke9ns add  CTUN operation changed freq so update temp value

    // voacap

        } // setband


       public int last_MHZ = 0; // ke9ns  used on voacap routine
       public DSPMode last_MODE = DSPMode.LAST;

        private void ChangeTuneStepUp()
		{
			tune_step_index = (tune_step_index+1) % tune_step_list.Count;
			txtWheelTune.Text = tune_step_list[tune_step_index].Name;
		}

		private void ChangeTuneStepDown()
		{
			tune_step_index = (tune_step_index-1 + tune_step_list.Count) % tune_step_list.Count;
			txtWheelTune.Text = tune_step_list[tune_step_index].Name;
		}

		private void UpdateBandButtonColors()
		{
			/*SetRX1BandButtonColor(rx1_band);
			SetTXBandButtonColor(tx_band);
			SetRX2BandButtonColor(rx2_band);*/

            SetRX1BandButton(rx1_band);
		}

        private void DeselectHF()
        {
            radBand160.Checked = false;
            radBand80.Checked = false;
            radBand60.Checked = false;
            radBand40.Checked = false;
            radBand30.Checked = false;
            radBand20.Checked = false;
            radBand17.Checked = false;
            radBand15.Checked = false;
            radBand12.Checked = false;
            radBand10.Checked = false;
            radBand6.Checked = false;
            radBandWWV.Checked = false;
            radBandGEN.Checked = false; 
            radBand2.Checked = false;
        }

        //===================================================
        private void DeselectGEN()  // ke9ns add
        {
            radBandGN0.Checked = false;
            radBandGN1.Checked = false;
            radBandGN2.Checked = false;
            radBandGN3.Checked = false;
            radBandGN4.Checked = false;
            radBandGN5.Checked = false;
            radBandGN6.Checked = false;
            radBandGN7.Checked = false;
            radBandGN8.Checked = false;
            radBandGN9.Checked = false;
            radBandGN10.Checked = false;
            radBandGN11.Checked = false;
            radBandGN12.Checked = false;
            radBandGN13.Checked = false;

        }


        private void DeselectVHF()
        {
            radBandVHF0.Checked = false;
            radBandVHF1.Checked = false;
            radBandVHF2.Checked = false;
            radBandVHF3.Checked = false;
            radBandVHF4.Checked = false;
            radBandVHF5.Checked = false;
            radBandVHF6.Checked = false;
            radBandVHF7.Checked = false;
            radBandVHF8.Checked = false;
            radBandVHF9.Checked = false;
            radBandVHF10.Checked = false;
            radBandVHF11.Checked = false;
            radBandVHF12.Checked = false;
            radBandVHF13.Checked = false;
        }


        //====================================================================
        // ke9ns mod  change the band button as you click them for RX1
        private void SetRX1BandButton(Band b)
        {

            SpotControl.VFOLOW = 0;   // ke9ns add default values (used in spot.cs for mapping dx spots)
            SpotControl.VFOHIGH = 1;  // ke9ns add default values

            switch (b)
            {
                case Band.B160M:
                    SpotControl.VFOLOW = 1800000; // ke9ns add
                    SpotControl.VFOHIGH = 2000000;// ke9ns add

                    last_band = "160M"; // ke9ns add
                    radBand160.Checked = true;
                    regBox.Text = band_160m_register.ToString();     // ke9ns add box to show the total # of bankstacks in memory
                    regBox1.Text = (band_160m_index + 1).ToString();  // ke9ns add box to show which bandstack your on
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B80M:
                    last_band = "80M";// ke9ns add
                    SpotControl.VFOLOW = 3500000;
                    SpotControl.VFOHIGH = 4000000;
                    radBand80.Checked = true;
                    regBox.Text = band_80m_register.ToString();
                    regBox1.Text = (band_80m_index+1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B60M:
                    last_band = "60M";// ke9ns add
                    SpotControl.VFOLOW = 5250000; // was  5000000
                    SpotControl.VFOHIGH = 5450000; // was 6000000
                    radBand60.Checked = true;
                    regBox.Text = band_60m_register.ToString();
                    regBox1.Text = (band_60m_index+1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B40M:
                    last_band = "40M";// ke9ns add
                    SpotControl.VFOLOW = 7000000;
                    SpotControl.VFOHIGH = 7300000;
                    radBand40.Checked = true;
                    regBox.Text = band_40m_register.ToString();
                    regBox1.Text = (band_40m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B30M:
                    last_band = "30M";// ke9ns add
                    SpotControl.VFOLOW = 10100000;
                    SpotControl.VFOHIGH = 10150000;
                    radBand30.Checked = true;
                    regBox.Text = band_30m_register.ToString();
                    regBox1.Text =(band_30m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B20M:
                    last_band = "20M";// ke9ns add
                    SpotControl.VFOLOW = 14000000;
                    SpotControl.VFOHIGH = 14350000;
                    radBand20.Checked = true;
                    regBox.Text = band_20m_register.ToString();
                    regBox1.Text = (band_20m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B17M:
                    last_band = "17M";// ke9ns add
                    SpotControl.VFOLOW = 18000000; // 18.068
                    SpotControl.VFOHIGH = 18200000; // 18.168
                    radBand17.Checked = true;
                    regBox.Text = band_17m_register.ToString();
                    regBox1.Text = (band_17m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B15M:
                    last_band = "15M";// ke9ns add
                    SpotControl.VFOLOW = 21000000; // 
                    SpotControl.VFOHIGH = 21450000; // 
                    radBand15.Checked = true;
                    regBox.Text = band_15m_register.ToString();
                    regBox1.Text = (band_15m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B12M:
                    last_band = "12M";// ke9ns add
                    SpotControl.VFOLOW = 24800000; // 24.89
                    SpotControl.VFOHIGH = 21450000; // 24.99
                    radBand12.Checked = true;
                    regBox.Text = band_12m_register.ToString();
                    regBox1.Text = (band_12m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B10M:
                    last_band = "10M";// ke9ns add
                    SpotControl.VFOLOW = 28000000; // 
                    SpotControl.VFOHIGH = 30000000; // 
                    radBand10.Checked = true;
                    regBox.Text = band_10m_register.ToString();
                    regBox1.Text = (band_10m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B6M:
                    last_band = "6M";// ke9ns add
                    SpotControl.VFOLOW = 50000000; // 
                    SpotControl.VFOHIGH = 54000000; //
                    radBand6.Checked = true;
                    regBox.Text = band_6m_register.ToString();
                    regBox1.Text = (band_6m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.B2M:
                    last_band = "2M";// ke9ns add
                    SpotControl.VFOLOW = 144000000; // 
                    SpotControl.VFOHIGH = 146000000; // 
                    radBand2.Checked = true;
                    regBox.Text = band_2m_register.ToString();
                    regBox1.Text = (band_2m_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.WWV:
                    last_band = "WWV";// ke9ns add
                    radBandWWV.Checked = true;
                    regBox.Text = band_wwv_register.ToString();
                    regBox1.Text = (band_wwv_index + 1).ToString();
                    DeselectVHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.GEN:
                    last_band = "GEN";// ke9ns add
                 //   Debug.WriteLine("gen pushed");
                    radBandGEN.Checked = true;
                    DeselectVHF();
                    DeselectHF(); // ke9ns add
                    break;


                case Band.VHF0:
                    last_band = "VHF0";// ke9ns add
                    SpotControl.VFOLOW = 144000000; // 
                    SpotControl.VFOHIGH = 146000000; // 
                    radBandVHF0.Checked = true;
                    regBox.Text = band_vhf0_register.ToString();
                    regBox1.Text = (band_vhf0_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF1:
                    last_band = "VHF1";// ke9ns add
                    SpotControl.VFOLOW = 430000000; // 
                    SpotControl.VFOHIGH = 445000000; // 
                    radBandVHF1.Checked = true;
                    regBox.Text = band_vhf1_register.ToString();
                    regBox1.Text = (band_vhf1_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF2:
                    last_band = "VHF2";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 990000000; //
                    radBandVHF2.Checked = true;
                    regBox.Text = band_vhf2_register.ToString();
                    regBox1.Text = (band_vhf2_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF3:
                    last_band = "VHF3";// ke9ns add
                    SpotControl.VFOLOW =   445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF3.Checked = true;
                    regBox.Text = band_vhf3_register.ToString();
                    regBox1.Text = (band_vhf3_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF4:
                    last_band = "VHF4";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF4.Checked = true;
                    regBox.Text = band_vhf4_register.ToString();
                    regBox1.Text = (band_vhf4_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF5:
                    last_band = "VHF5";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF5.Checked = true;
                    regBox.Text = band_vhf5_register.ToString();
                    regBox1.Text = (band_vhf5_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF6:
                    last_band = "VHF6";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF6.Checked = true;
                    regBox.Text = band_vhf6_register.ToString();
                    regBox1.Text =( band_vhf6_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF7:
                    last_band = "VHF7";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF7.Checked = true;
                    regBox.Text = band_vhf7_register.ToString();
                    regBox1.Text = (band_vhf7_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF8:
                    last_band = "VHF8";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF8.Checked = true;
                    regBox.Text = band_vhf8_register.ToString();
                    regBox1.Text = (band_vhf8_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF9:
                    last_band = "VHF9";// ke9ns add 
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF9.Checked = true;
                    regBox.Text = band_vhf9_register.ToString();
                    regBox1.Text = (band_vhf9_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF10:
                    last_band = "VHF10";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF10.Checked = true;
                    regBox.Text = band_vhf10_register.ToString();
                    regBox1.Text =( band_vhf10_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF11:
                    last_band = "VHF11";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF11.Checked = true;
                    regBox.Text = band_vhf11_register.ToString();
                    regBox1.Text = (band_vhf11_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF12:
                    last_band = "VHF12";// ke9ns add
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF12.Checked = true;
                    regBox.Text = band_vhf12_register.ToString();
                    regBox1.Text = (band_vhf12_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;
                case Band.VHF13:
                    last_band = "VHF13";// ke9ns add 
                    SpotControl.VFOLOW = 445000000; // 
                    SpotControl.VFOHIGH = 9999999999; //
                    radBandVHF13.Checked = true;
                    regBox.Text = band_vhf13_register.ToString();
                    regBox1.Text = (band_vhf13_index + 1).ToString();
                    DeselectHF();
                    DeselectGEN(); // ke9ns add
                    break;


                case Band.BLMF:
                    last_band = "LMF";// ke9ns add
                    radBandGN0.Checked = true;
                    regBox.Text = band_LMF_register.ToString();
                    regBox1.Text = (band_LMF_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B120M:
                    last_band = "120M";// ke9ns add
                    radBandGN1.Checked = true;
                    regBox.Text = band_120m_register.ToString();
                    regBox1.Text = (band_120m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B90M:
                    last_band = "90M";// ke9ns add
                    radBandGN2.Checked = true;
                    regBox.Text = band_90m_register.ToString();
                    regBox1.Text = (band_90m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B61M:
                    last_band = "61M";// ke9ns add
                    radBandGN3.Checked = true;
                    regBox.Text = band_61m_register.ToString();
                    regBox1.Text = (band_61m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B49M:
                    //   Debug.WriteLine("================49==============");
                    last_band = "49M";// ke9ns add
                    radBandGN4.Checked = true;
                    regBox.Text = band_49m_register.ToString();
                    regBox1.Text = (band_49m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B41M:
                    last_band = "41M";// ke9ns add
                   //  Debug.WriteLine("================41==============");

                    radBandGN5.Checked = true;
                    regBox.Text = band_41m_register.ToString();
                    regBox1.Text =( band_41m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B31M:
                    last_band = "31M";// ke9ns add
                    radBandGN6.Checked = true;
                    regBox.Text = band_31m_register.ToString();
                    regBox1.Text =( band_31m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B25M:
                    last_band = "25M";// ke9ns add
                    radBandGN7.Checked = true;
                    regBox.Text = band_25m_register.ToString();
                    regBox1.Text =( band_25m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B22M:
                    last_band = "22M";// ke9ns add
                    radBandGN8.Checked = true;
                    regBox.Text = band_22m_register.ToString();
                    regBox1.Text =( band_22m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B19M:
                    last_band = "19M";// ke9ns add
                    radBandGN9.Checked = true;
                    regBox.Text = band_19m_register.ToString();
                    regBox1.Text =(band_19m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B16M:
                    last_band = "16M";// ke9ns add
                    radBandGN10.Checked = true;
                    regBox.Text = band_16m_register.ToString();
                    regBox1.Text = (band_16m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B14M:
                    last_band = "14M";// ke9ns add
                    radBandGN11.Checked = true;
                    regBox.Text = band_14m_register.ToString();
                    regBox1.Text = (band_14m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B13M:
                    last_band = "13M";// ke9ns add
                    radBandGN12.Checked = true;
                    regBox.Text = band_13m_register.ToString();
                    regBox1.Text = (band_13m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;
                case Band.B11M:
                    last_band = "11M";// ke9ns add
                    radBandGN13.Checked = true;
                    regBox.Text = band_11m_register.ToString();
                    regBox1.Text = (band_11m_index + 1).ToString();
                    DeselectHF();
                    DeselectVHF(); // ke9ns add
                    break;


            }

        //    if (StackForm == null || StackForm.IsDisposed) StackForm = new StackControl(this); // ke9ns add
          //  if(StackForm !=null)
                StackForm.bandstackupdate(); // ke9ns add update band stack screen 


        } // setrx1 band button

		private void SetRX1BandButtonColor(Band b)
		{
			// Sets band button color based on passed band.

			/*Button btn = null;
			switch(b)
			{
				case Band.GEN:
					btn = btnBandGEN;
					break;
				case Band.B160M:
					btn = btnBand160;
					break;
				case Band.B80M:
					btn = btnBand80;
					break;
				case Band.B60M:
					btn = btnBand60;
					break;
				case Band.B40M:
					btn = btnBand40;
					break;
				case Band.B30M:
					btn = btnBand30;
					break;
				case Band.B20M:
					btn = btnBand20;
					break;
				case Band.B17M:
					btn = btnBand17;
					break;
				case Band.B15M:
					btn = btnBand15;
					break;
				case Band.B12M:
					btn = btnBand12;
					break;
				case Band.B10M:
					btn = btnBand10;
					break;
				case Band.B6M:
					btn = btnBand6;
					break;
				case Band.B2M:
					btn = btnBand2;
					break;
				case Band.WWV:
					btn = btnBandWWV;
					break;
				case Band.VHF0:
					btn = btnBandVHF0;
					break;
				case Band.VHF1:
					btn = btnBandVHF1;
					break;
				case Band.VHF2:
					btn = btnBandVHF2;
					break;
				case Band.VHF3:
					btn = btnBandVHF3;
					break;
				case Band.VHF4:
					btn = btnBandVHF4;
					break;
				case Band.VHF5:
					btn = btnBandVHF5;
					break;
				case Band.VHF6:
					btn = btnBandVHF6;
					break;
				case Band.VHF7:
					btn = btnBandVHF7;
					break;
				case Band.VHF8:
					btn = btnBandVHF8;
					break;
				case Band.VHF9:
					btn = btnBandVHF9;
					break;
				case Band.VHF10:
					btn = btnBandVHF10;
					break;
				case Band.VHF11:
					btn = btnBandVHF11;
					break;
				case Band.VHF12:
					btn = btnBandVHF12;
					break;
				case Band.VHF13:
					btn = btnBandVHF13;
					break;
			}

			foreach(Button b2 in panelBandHF.Controls)
			{
				if(b2 == btn)
				{
					b2.BackColor = rx1_band_color;
				}
				else
				{
					if(b2.BackColor == rx1_band_color)
						b2.BackColor = SystemColors.Control;
				}
			}

			foreach(Button b2 in panelBandVHF.Controls)
			{
				if(b2 == btn)
				{
					b2.BackColor = rx1_band_color;
				}
				else
				{
					if(b2.BackColor == rx1_band_color)
						b2.BackColor = SystemColors.Control;
				}
			}*/
		}

		private void SetRX2BandButtonColor(Band b)
		{
			/*// Sets band button color based on passed band.
			if(!rx2_enabled) b = Band.FIRST;
			Button btn = null;
			switch(b)
			{
				case Band.GEN:
					btn = btnBandGEN;
					break;
				case Band.B160M:
					btn = btnBand160;
					break;
				case Band.B80M:
					btn = btnBand80;
					break;
				case Band.B60M:
					btn = btnBand60;
					break;
				case Band.B40M:
					btn = btnBand40;
					break;
				case Band.B30M:
					btn = btnBand30;
					break;
				case Band.B20M:
					btn = btnBand20;
					break;
				case Band.B17M:
					btn = btnBand17;
					break;
				case Band.B15M:
					btn = btnBand15;
					break;
				case Band.B12M:
					btn = btnBand12;
					break;
				case Band.B10M:
					btn = btnBand10;
					break;
				case Band.B6M:
					btn = btnBand6;
					break;
				case Band.B2M:
					btn = btnBand2;
					break;
				case Band.WWV:
					btn = btnBandWWV;
					break;
				case Band.VHF0:
					btn = btnBandVHF0;
					break;
				case Band.VHF1:
					btn = btnBandVHF1;
					break;
				case Band.VHF2:
					btn = btnBandVHF2;
					break;
				case Band.VHF3:
					btn = btnBandVHF3;
					break;
				case Band.VHF4:
					btn = btnBandVHF4;
					break;
				case Band.VHF5:
					btn = btnBandVHF5;
					break;
				case Band.VHF6:
					btn = btnBandVHF6;
					break;
				case Band.VHF7:
					btn = btnBandVHF7;
					break;
				case Band.VHF8:
					btn = btnBandVHF8;
					break;
				case Band.VHF9:
					btn = btnBandVHF9;
					break;
				case Band.VHF10:
					btn = btnBandVHF10;
					break;
				case Band.VHF11:
					btn = btnBandVHF11;
					break;
				case Band.VHF12:
					btn = btnBandVHF12;
					break;
				case Band.VHF13:
					btn = btnBandVHF13;
					break;
			}

			foreach(Button b2 in panelBandHF.Controls)
			{
				if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
				{
					b2.BackColor = rx2_band_color;
				}
				else
				{
					if(b2.BackColor == rx2_band_color)
						b2.BackColor = SystemColors.Control;
				}
			}

			foreach(Button b2 in panelBandVHF.Controls)
			{
				if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
				{
					b2.BackColor = rx2_band_color;
				}
				else
				{
					if(b2.BackColor == rx2_band_color)
						b2.BackColor = SystemColors.Control;
				}
			}
			/*if(b < Band.VHF0)
			{
//				if(!grpBandHF.Visible)
//				{
//					grpBandHF.Visible = true;
//					grpBandVHF.Visible = false;
//				}

				foreach(Button b2 in grpBandVHF.Controls)
					b2.BackColor = SystemColors.Control;

				foreach(Button b2 in grpBandHF.Controls)
				{
					if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
					{
						b2.BackColor = rx2_band_color;
					}
					else
					{
						if(b2.BackColor == rx2_band_color)
							b2.BackColor = SystemColors.Control;
					}

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
				}
			}
			else
			{
//				if(!grpBandVHF.Visible)
//				{
//					grpBandVHF.Visible = true;
//					grpBandHF.Visible = false;
//				}

				foreach(Button b2 in grpBandHF.Controls)
					b2.BackColor = SystemColors.Control;

				foreach(Button b2 in grpBandVHF.Controls)
				{
					if(b2 == btn && b2.BackColor != rx1_band_color && b2.BackColor != tx_band_color)
					{
						b2.BackColor = rx2_band_color;
					}
					else
					{
						if(b2.BackColor == rx2_band_color)
							b2.BackColor = SystemColors.Control;
					}

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
				}
			}*/
		}

		private void SetTXBandButtonColor(Band b)
		{
			/*// Sets band button color based on passed band.

			Button btn = null;
			switch(b)
			{
				case Band.GEN:
					btn = btnBandGEN;
					break;
				case Band.B160M:
					btn = btnBand160;
					break;
				case Band.B80M:
					btn = btnBand80;
					break;
				case Band.B60M:
					btn = btnBand60;
					break;
				case Band.B40M:
					btn = btnBand40;
					break;
				case Band.B30M:
					btn = btnBand30;
					break;
				case Band.B20M:
					btn = btnBand20;
					break;
				case Band.B17M:
					btn = btnBand17;
					break;
				case Band.B15M:
					btn = btnBand15;
					break;
				case Band.B12M:
					btn = btnBand12;
					break;
				case Band.B10M:
					btn = btnBand10;
					break;
				case Band.B6M:
					btn = btnBand6;
					break;
				case Band.B2M:
					btn = btnBand2;
					break;
				case Band.WWV:
					btn = btnBandWWV;
					break;
				case Band.VHF0:
					btn = btnBandVHF0;
					break;
				case Band.VHF1:
					btn = btnBandVHF1;
					break;
				case Band.VHF2:
					btn = btnBandVHF2;
					break;
				case Band.VHF3:
					btn = btnBandVHF3;
					break;
				case Band.VHF4:
					btn = btnBandVHF4;
					break;
				case Band.VHF5:
					btn = btnBandVHF5;
					break;
				case Band.VHF6:
					btn = btnBandVHF6;
					break;
				case Band.VHF7:
					btn = btnBandVHF7;
					break;
				case Band.VHF8:
					btn = btnBandVHF8;
					break;
				case Band.VHF9:
					btn = btnBandVHF9;
					break;
				case Band.VHF10:
					btn = btnBandVHF10;
					break;
				case Band.VHF11:
					btn = btnBandVHF11;
					break;
				case Band.VHF12:
					btn = btnBandVHF12;
					break;
				case Band.VHF13:
					btn = btnBandVHF13;
					break;
			}

			foreach(Button b2 in panelBandHF.Controls)
			{
				if(b2 == btn && b2.BackColor != rx1_band_color)
				{
					b2.BackColor = tx_band_color;
				}
				else
				{
					if(b2.BackColor == tx_band_color)
						b2.BackColor = SystemColors.Control;
				}
			}
			/*if(b < Band.VHF0)
			{
//				if(!grpBandHF.Visible)
//				{
//					grpBandHF.Visible = true;
//					grpBandVHF.Visible = false;
//				}

				foreach(Button b2 in grpBandVHF.Controls)
					b2.BackColor = SystemColors.Control;

				foreach(Button b2 in grpBandHF.Controls)
				{
					if(b2 == btn && b2.BackColor != rx1_band_color)
					{
						b2.BackColor = tx_band_color;
					}
					else
					{
						if(b2.BackColor == tx_band_color)
							b2.BackColor = SystemColors.Control;
					}

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
				}
			}
			else
			{
//				if(!grpBandVHF.Visible)
//				{
//					grpBandVHF.Visible = true;
//					grpBandHF.Visible = false;
//				}

				foreach(Button b2 in grpBandHF.Controls)
					b2.BackColor = SystemColors.Control;

				foreach(Button b2 in grpBandVHF.Controls)
				{
					if(b2 == btn && b2.BackColor != rx1_band_color)
					{
						b2.BackColor = tx_band_color;
					}
					else
					{
						if(b2.BackColor == tx_band_color)
							b2.BackColor = SystemColors.Control;
					}

//					Color c = SystemColors.Control;
//					if(b2 == btn)
//						c = button_selected_color;
//
//					b2.BackColor = c;
				}
			}*/
		}

        //=====================================================================================
		private Band BandByFreq(double freq, int xvtr_index, bool tx, FRSRegion region)
		{
          
            if (xvtr_index >= 0)
            {
                panelBandGN.Visible = false;
                panelBandHF.Visible = false;
                panelBandVHF.Visible = true; // ke9ns add keep VHF panel open when VHF button selected

              //  Debug.WriteLine("VHF HERE======" + xvtr_index);

                return (Band)(Band.VHF0 + xvtr_index);
            }

        //   Debug.WriteLine("REGION=========================== " + region+ " freq "+freq);

            if(extended && tx) // ke9ns this is for Flex radios with extended MARS capability
            {
             //   Debug.WriteLine("EXTENDED========================");
/*
                if (Band.BLMF) tx_band = Band.B160M;
                else if (Band.B120M) tx_band = Band.B160M;
                else if (Band.B90M) tx_band = Band.B80M;
                else if (Band.B61M) tx_band = Band.B80M;
                else if (Band.B49M) tx_band = Band.B60M;
                else if (Band.B41M) tx_band = Band.B40M;
                else if (Band.B31M) tx_band = Band.B30M;
                else if (Band.B25M) tx_band = Band.B20M;
                else if (Band.B22M) tx_band = Band.B20M;
                else if (Band.B19M) tx_band = Band.B17M;
                else if (Band.B16M) tx_band = Band.B17M;
                else if (Band.B14M) tx_band = Band.B15M;
                else if (Band.B13M) tx_band = Band.B12M;
                else if (Band.B11M) tx_band = Band.B10M;
*/

                // ke9ns add
                if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                  //  return Band.B160M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                       freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

              
                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                  //  return Band.B160M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                   // return Band.B80M;
                }

                else if (freq >= 4.00 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                  //  return Band.B80M;
                }

                else if (freq >= 5.45 && freq < 7.00) 
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                  //  return Band.B60M;
                }

                else if (freq >= 7.30 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                  //  return Band.B40M;
                }

                else if (freq >= 9.0 && freq < 10.1)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                   // return Band.B30M;
                }

                else if (freq >= 10.16 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                  //  return Band.B20M;
                }

                else if (freq >= 13.57 && freq < 14.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                  //  return Band.B20M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                    // return Band.B17M;
                }

                else if (freq >= 17.0 && freq < 18.068)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                    //return Band.B17M;
                }

                else if (freq >= 18.168 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                  //  return Band.B15M;
                }
                else if (freq >= 21.450 && freq < 24.89)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                  //  return Band.B12M;
                }

                else if (freq >= 24.99 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                   // return Band.B10M;
                }

                // original code below 
                else if (freq >= 0.0 && freq <= 2.75)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq > 2.75 && freq < 5.3305)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 8.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 8.7 && freq <= 12.075)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 12.075 && freq <= 16.209)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 16.209 && freq <= 19.584)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 19.584 && freq <= 23.17)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 23.17 && freq <= 26.495)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 26.495 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 54.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0) // ke9ns test was 144.0 and 148.0
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
               

                else
                    return Band.GEN;
                }

               if (region == FRSRegion.US)
               {
             //   Debug.WriteLine("US BAND========================");

                if (freq >= 1.8 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 4.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.25 && freq <= 5.45) // else if (freq >= 5.1 && freq <= 5.5)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.3)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.450)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 54.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0) // ke9ns test was 144.0 148.0
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 1.8 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 4.1)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                 //   Debug.WriteLine("bandbyfreq 49");
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                  //  Debug.WriteLine("bandbyfreq 41");
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 11.6)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 13.87 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }


                else if (region == FRSRegion.UK)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }


                else
                    return Band.GEN;
                }
                else if (region == FRSRegion.Europe)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns                             // else if (freq >= 5.3515 && freq < 5.3665) // w4tme - matches region allocation
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.03 && freq <= 51.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.UK_Plus)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }


                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.Italy)
                {
                if (freq >= 1.83 && freq <= 1.85)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.00 && freq <= 51.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }


                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.Norway)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.Denmark)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.Latvia)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 51.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }
                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }


                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.Slovakia)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.Bulgaria)
                {
                if (freq >= 1.81 && freq <= 1.85)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.05 && freq <= 50.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }
                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }


                else if (region == FRSRegion.Greece)
                {
                if (freq >= 1.81 && freq <= 1.85)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }


                else
                    return Band.GEN;
                }



                else if (region == FRSRegion.Hungary)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.1)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }


                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }


                else if (region == FRSRegion.Belgium)
                {
                if (freq >= 1.81 && freq <= 1.88)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0) // Tim wanted     else if (freq >= 5.350 && freq < 5.450)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }


                else if (region == FRSRegion.France)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }


                else if (region == FRSRegion.Russia)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; 
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 25.14)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 26.97 && freq <= 27.86)
                {
                    panelBandHF.Visible = false; panelBandGN.Visible = true; return Band.B11M; // ke9ns add  return Band.B11M;
                }
                else if (freq >= 28.00 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }
                else if (region == FRSRegion.Sweden)
                {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }
                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }
                else if (region == FRSRegion.Region_3)
                {
                if (freq >= 1.8 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.9)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; // ke9ns add An interim bandplan was adopted by IARU Region 1 in April 2016, for the WRC-15 allocation (5351.5 - 5366.5 kHz)
                }
                else if (freq >= 7.0 && freq <= 7.3)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 54.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }
                else if (region == FRSRegion.Japan)
                {
                if (freq >= 1.81 && freq <= 1.9125)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.805)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0) //else if (freq >= 4.629995 && freq <= 4.630005)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 54.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 146.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
                }

                else if (region == FRSRegion.Italy_Plus)
                {
                if (freq >= 1.83 && freq <= 1.85)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;  
                }
                else if (freq >= 6.975 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.00 && freq <= 51.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }
                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;

                }// italy


            else if (region == FRSRegion.ES_CH_FIN)
            {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.3515 && freq < 5.3665) // w4tme - matches region allocation
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }
                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
            }

            else if (region == FRSRegion.Netherlands)
            {
                if (freq >= 1.81 && freq <= 1.88)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.350 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0), w4tme changed lower freq to 5.350
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M; // ke9ns
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
            }

            else if (region == FRSRegion.EU_Travel)
            {
                if (freq >= 1.80 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.250 && freq < 5.450) // ke9ns was else if (freq >= 5.3305 && freq < 7.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }

                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
            }

            else if (region == FRSRegion.Luxembourg)
            {
                if (freq >= 1.81 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 3.8)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.3515 && freq < 5.3665) // w4tme - matches region allocation
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.2)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.45)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 52.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }
                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
            }
            else if (region == FRSRegion.Region_2)
            {
                if (freq >= 1.8 && freq <= 2.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B160M;
                }
                else if (freq >= 3.5 && freq <= 4.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B80M;
                }
                else if (freq >= 5.25 && freq <= 5.45) // else if (freq >= 5.1 && freq <= 5.5)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B60M;
                }
                else if (freq >= 7.0 && freq <= 7.3)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B40M;
                }
                else if (freq >= 10.1 && freq <= 10.15)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B30M;
                }
                else if (freq >= 14.0 && freq <= 14.35)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B20M;
                }
                else if (freq >= 18.068 && freq <= 18.168)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B17M;
                }
                else if (freq >= 21.0 && freq <= 21.450)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B15M;
                }
                else if (freq >= 24.89 && freq <= 24.99)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B12M;
                }
                else if (freq >= 28.0 && freq <= 29.7)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B10M;
                }
                else if (freq >= 50.0 && freq <= 54.0)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B6M;
                }
                else if (freq >= 144.0 && freq <= 148.0) // ke9ns test was 144.0 148.0
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.B2M;
                }
                else if (freq == 2.5 || freq == 5.0 || freq == 10.0 || freq == 15.0 ||
                        freq == 20.0 || freq == 25.0 || freq == 3.33 || freq == 7.85 || freq == 14.67)
                {
                    panelBandHF.Visible = true; panelBandGN.Visible = false; return Band.WWV;
                }
                // ke9ns add
                else if (freq >= 0.20 && freq < 1.80)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.BLMF;
                }

                else if (freq >= 2.30 && freq < 3.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B120M;
                }

                else if (freq >= 3.0 && freq < 3.50)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B90M;
                }

                else if (freq >= 4.10 && freq < 5.25)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B61M;
                }

                else if (freq >= 5.45 && freq < 7.20)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B49M;
                }

                else if (freq >= 7.20 && freq < 9.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B41M;
                }

                else if (freq >= 9.0 && freq < 9.99)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B31M;
                }

                else if (freq >= 11.6 && freq < 13.57)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B25M;
                }

                else if (freq >= 13.57 && freq < 13.87)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B22M;
                }

                else if (freq >= 15.1 && freq < 17.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B19M;
                }

                else if (freq >= 17.0 && freq < 18.0)
                {

                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B16M;
                }

                else if (freq >= 18.0 && freq < 21.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B14M;
                }
                else if (freq >= 21.00 && freq < 25.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B13M;
                }

                else if (freq >= 25.0 && freq < 28.0)
                {
                    panelBandHF.Visible = false;
                    panelBandGN.Visible = true;
                    return Band.B11M;
                }

                else
                    return Band.GEN;
            } // region_2


            // if nothing matched to this point, just put it in the GEN band
            return Band.GEN;
 

        } // bandbyfreq


        //==================================================================================
        private void SetRX1Band(Band b)
		{

        //   panelBandHF.Invalidate(); // ke9ns add
         //  panelBandVHF.Invalidate(); // ke9ns add
            // panelBandGN.Invalidate(); // ke9ns add


            if (disable_split_on_bandchange)
			{
				if(RX1Band != b && !tuning)
				{
					if(chkVFOSplit.Checked)
						chkVFOSplit.Checked = false;
				}
			}

            Band old_band = rx1_band;
			RX1Band = b;
            if (old_band != b) 
            {
                UpdateBandButtonColors();
                UpdateWaterfallLevelValues();

                if (current_model == Model.FLEX3000 && chkFWCATU.Checked && flex3000ATUForm.chkAutoMode.Checked) //band change atu
                {
                    flex3000ATUForm.autoMode = true;
                    flex3000ATUForm.DoTune();   //make sure autoMode=true is passed
                }
                
                if (current_model == Model.FLEX5000 && chkFWCATU.Checked && fwcAtuForm.ATUEnabledOnBandChange()) // atu tune on band change
                {  
                    switch(b)
                    {
                        case Band.B160M:
                        case Band.B80M:
                        case Band.B60M:
                        case Band.B40M:
                        case Band.B30M:
                        case Band.B20M:
                        case Band.B17M:
                        case Band.B15M:
                        case Band.B12M:
                        case Band.B10M:
                        case Band.B6M:
                            {
                                fwcAtuForm.DoTuneMemory();
                                FWCATUTuned();
                                break;
                            }
                        default: break;     
                    }  
                }
            }

            if (rx1_xvtr_index >= 0)
            {
                panelBandHF.Visible = false;
                panelBandGN.Visible = false; // ke9ns add

                panelBandVHF.Visible = true;

            }
            else
            {
                panelBandGN.Visible = true; //ke9ns add
             //   Debug.WriteLine("bandchange");
              //  panelBandHF.Visible = true;
               
                panelBandVHF.Visible = false;
            }

        } //SETRX1BAND

		private void SetRX2Band(Band b)
		{
            Band old_band = rx2_band;
			RX2Band = b;
            if(old_band != b)
    			UpdateBandButtonColors();
		}

		private void SetTXBand(Band b)
		{
            // panelBandHF.Invalidate(); // ke9ns add
            // panelBandVHF.Invalidate(); // ke9ns add
            // panelBandGN.Invalidate(); // ke9ns add


            if (disable_split_on_bandchange)
			{
				if(TXBand != b && !tuning)
				{
					if(chkVFOSplit.Checked)	chkVFOSplit.Checked = false;
				}
			}

            Band old_band = tx_band;

			TXBand = b;

            if(old_band != b)	UpdateBandButtonColors();

			if(!(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)))
			{
				if(atu_present && xvtr_present)
				{
					if(b == Band.B2M) comboTuneMode.Enabled = false;
					else
						comboTuneMode.Enabled = true;
				}

				if(xvtr_present)
				{
					if(atu_present && 
						comboTuneMode.SelectedIndex > 0 &&
						(ATUTuneMode)comboTuneMode.SelectedIndex != ATUTuneMode.BYPASS &&
						(tuned_band != b) &&
						tuned_band != Band.FIRST)
					{
						Hdw.PA_ATUTune(ATUTuneMode.BYPASS);
						tuned_band = Band.FIRST;
						chkTUN.BackColor = SystemColors.Control;				
					}

					if(b == Band.B2M)
					{
						if(comboPreamp.Items.Contains("Off"))
							comboPreamp.Items.Remove("Off");
						if(comboPreamp.Items.Contains("Med"))
							comboPreamp.Items.Remove("Med");
						if(comboPreamp.SelectedIndex < 0)
							comboPreamp.Text = "High";
					}
					else
					{
						if(!comboPreamp.Items.Contains("Off"))
							comboPreamp.Items.Insert(0, "Off");
						if(!comboPreamp.Items.Contains("Med"))
							comboPreamp.Items.Insert(2, "Med");
					}
				}				
			}
		} //settxband

		private float GainByBand(Band b)
		{
			float retval = 0;
			switch(b)
			{
				case Band.B160M:
					retval = setupForm.PAGain160;
					break;
				case Band.B80M:
					retval = setupForm.PAGain80;
					break;
				case Band.B60M:
					retval = setupForm.PAGain60;
					break;
				case Band.B40M:
					retval = setupForm.PAGain40;
					break;
				case Band.B30M:
					retval = setupForm.PAGain30;
					break;
				case Band.B20M:
					retval = setupForm.PAGain20;
					break;
				case Band.B17M:
					retval = setupForm.PAGain17;
					break;
				case Band.B15M:
					retval = setupForm.PAGain15;
					break;
				case Band.B12M:
					retval = setupForm.PAGain12;
					break;
				case Band.B10M:
					retval = setupForm.PAGain10;
					break;
				case Band.B6M:
					if(current_model == Model.FLEX5000 || current_model == Model.FLEX3000)
						retval = setupForm.PAGain10;
					else retval = 1000;
					break;
				default:
					retval = 1000;
					break;
			}

			return retval;
		}

		public void CheckSelectedButtonColor()
		{
			// used when changing the background color of selected buttons
			foreach(Control c in this.Controls)
			{
				if(c.GetType() == typeof(GroupBoxTS))
				{
					foreach(Control c2 in ((GroupBoxTS)c).Controls)
					{
						if(c2.GetType() == typeof(RadioButtonTS))
						{
							RadioButtonTS r = (RadioButtonTS)c2;
							if(r.Checked && r.BackColor != SystemColors.Control)
							{
								c2.BackColor = button_selected_color;
							}
						}
						else if(c2.GetType() == typeof(CheckBoxTS))
						{
							CheckBoxTS chk = (CheckBoxTS)c2;
							if(chk.Checked && chk.BackColor != SystemColors.Control)
							{
								c2.BackColor = button_selected_color;
							}
						}
						else if(c2.GetType() == typeof(NumericUpDownTS))
						{
							NumericUpDownTS ud = (NumericUpDownTS)c2;
							if(ud.BackColor != SystemColors.Window)
							{
								c2.BackColor = button_selected_color;
							}
						}
						else if(c2.GetType() == typeof(ButtonTS))
						{
							ButtonTS b = (ButtonTS)c2;
							if(b.BackColor != SystemColors.Control)
							{
								c2.BackColor = button_selected_color;
							}
						}
					}
				}
				else if(c.GetType() == typeof(RadioButtonTS))
				{
					RadioButtonTS r = (RadioButtonTS)c;
					if(r.Checked && r.BackColor != SystemColors.Control)
						c.BackColor = button_selected_color;
				}
				else if(c.GetType() == typeof(CheckBoxTS))
				{
					CheckBoxTS chk = (CheckBoxTS)c;
					if(chk.Checked && chk.BackColor != SystemColors.Control)
						c.BackColor = button_selected_color;
				}
				else if(c.GetType() == typeof(NumericUpDownTS))
				{
					NumericUpDownTS ud = (NumericUpDownTS)c;
					if(ud.BackColor != SystemColors.Window)
						c.BackColor = button_selected_color;
				}
				else if(c.GetType() == typeof(ButtonTS))
				{
					ButtonTS b = (ButtonTS)c;
					if(b.BackColor != SystemColors.Control)
						c.BackColor = button_selected_color;
				}
			}
		}

		private double PABandOffset(Band b)
		{
			double num = 0;
			switch(b)
			{
				case Band.B160M:
					num = setupForm.PAADC160;
					break;
				case Band.B80M:
					num = setupForm.PAADC80;
					break;
				case Band.B60M:
					num = setupForm.PAADC60;
					break;
				case Band.B40M:
					num = setupForm.PAADC40;
					break;
				case Band.B30M:
					num = setupForm.PAADC30;
					break;
				case Band.B20M:
					num = setupForm.PAADC20;
					break;
				case Band.B17M:
					num = setupForm.PAADC17;
					break;
				case Band.B15M:
					num = setupForm.PAADC15;
					break;
				case Band.B12M:
					num = setupForm.PAADC12;
					break;
				case Band.B10M:
					num = setupForm.PAADC10;
					break;
			}

			if(num == 0) return 0;
			//return 100000 / Math.Pow(num, 2);
			return (double)108/num;
		}

		private double SWR(int adc_fwd, int adc_rev)
		{
			if(adc_fwd == 0 && adc_rev == 0)
				return 1.0;
			else if(adc_rev > adc_fwd)
				return 50.0;
			
			double Ef = ScaledVoltage(adc_fwd);
			double Er = ScaledVoltage(adc_rev);

			double swr = (Ef + Er)/(Ef - Er);

			return swr;
		}

		public double FWCSWR(int adc_fwd, int adc_rev)
		{
			double f = FWCPAPower(adc_fwd);
			double r = FWCPAPower(adc_rev)*swr_table[(int)tx_band];
			//Debug.WriteLine("FWCSWR: fwd:"+adc_fwd+" rev:"+adc_rev+" f:"+f.ToString("f2")+" r:"+r.ToString("f2"));
			
			if((adc_fwd == 0 && adc_rev == 0) || (f < 1.0 && r < 1.0)) return 1.0;
			if(adc_rev > adc_fwd) return 50.0;

			double sqrt_r_over_f = Math.Sqrt(r/f);
			return (1.0+sqrt_r_over_f)/(1.0-sqrt_r_over_f);
		}

		private double ScaledVoltage(int adc)
		{
			double v_det = adc * 0.062963;			// scale factor in V/bit including pot ratio
			double v_out = v_det * 10.39853;		// scale factor in V/V for bridge output to detector voltage
			return v_out*PABandOffset(tx_band);
			//double v_det = adc * 0.0304;
			//			double v_out = 0;
			//			if(v_det >= 1.6)
			//				v_out = (-0.241259304*v_det+12.07915098)*v_det*PABandOffset(CurrentBand);
			//			else if(v_det > 0.35)
			//				v_out = (1/Math.Pow(v_det, 2)+11.3025111)*v_det*PABandOffset(CurrentBand);
			//return v_out;
		}

		private double ADCtodBm(int adc_data)
		{
			if(adc_data == 0)
				return 0;

			double mult = 100000 / Math.Pow(225/PABandOffset(tx_band), 2);
			return 10*Math.Log10(mult*Math.Pow(adc_data, 2));
		}

		private double PAPower(int adc)
		{
			double v_out = ScaledVoltage(adc);
			double pow = Math.Pow(v_out, 2)/50;
			pow = Math.Max(pow, 0.0);
			return pow;
		}

		private double WattsTodBm(double watts)
		{
			return 10*Math.Log10(watts/0.001);
		}

		private double dBmToWatts(double dBm)
		{
			return Math.Pow(10, dBm/10)*0.001;
		}

		public double FWCPAPower(int adc) // adc in, watts out
		{
			if(adc < 2) return 0.0;
			double[] table = { 1.0, 2.0, 5.0, 10.0, 20.0, 90.0 };

			double watts = 0.0;
			double volts = (double)adc/4096*2.5;
			double v2 = Math.Pow(volts, 2);

			int high_index = 0;
			for(int i=0; i<6; i++)
			{				
				if(volts < pa_bridge_table[(int)tx_band][i])
				{
					high_index = i;
					break;
				} 
				if(i == 5) high_index = 6;
			}
			
			if(high_index != 6)
			{
				double v_low = 0.0, v_high = 0.0;
				double p_low = 0.0, p_high = 0.0;

				if(high_index != 0) v_low = pa_bridge_table[(int)tx_band][high_index-1];

				v_high = pa_bridge_table[(int)tx_band][high_index];

				if(high_index != 0) p_low = table[high_index-1];

				p_high = table[high_index];

				Debug.Assert(v_low <= volts && v_high >= volts);
			
				double v_low_2 = Math.Pow(v_low, 2.0);
				double v_high_2 = Math.Pow(v_high, 2.0);

				watts = p_low + (p_high-p_low)*((v2-v_low_2)/(v_high_2-v_low_2));
			}
			else
			{
				double v_low_2 = Math.Pow(pa_bridge_table[(int)tx_band][4], 2.0);
				double v_high_2 = Math.Pow(pa_bridge_table[(int)tx_band][5], 2.0);

				if(v_low_2 != v_high_2)
				{
					double a = 70.0 / (v_high_2 - v_low_2);
					double b = 90.0 / (a * v_high_2);

					watts = a*v2+b;
				}
			}

			return watts;
		}

		private static bool CheckForOpenProcesses()
		{
			// find all open PowerSDR processes
			Process[] p = Process.GetProcessesByName("PowerSDR");
			if(p.Length > 1)
			{
				DialogResult dr = MessageBox.Show("There are other PowerSDR instances running.\n"+
					"Are you sure you want to continue?",
					"Continue?",
					MessageBoxButtons.YesNo,
					MessageBoxIcon.Question);
				if(dr == DialogResult.No)
				{
					return false;
				}
			}
			return true;
		}

		public int VersionTextToInt(string version)	// takes a version string like "1.0.6" 
		{											// and converts it to an int like 010006.
			string[] nums = version.Split('.');
			if(nums.Length < 3 || nums.Length > 4) return -1;

			int num1 = Int32.Parse(nums[0]);
			int num2 = Int32.Parse(nums[1]);
			int num3 = Int32.Parse(nums[2]);
			int num4 = 0;
			if(nums.Length == 4) num4 = Int32.Parse(nums[3]);

			return num1*1000000+num2*10000+num3*100+num4;
		} // versiontextotint

        // ==============================================================================================
        //  PUBLIC Face of freq check
        // ==============================================================================================
        public bool CheckValidTXFreq(FRSRegion r, double f, DSPMode mode)
        {
            bool retval = false;

            if (extended || (tx_xvtr_index > -1 && (current_model != Model.FLEX1500)) ||
                (current_model == Model.FLEX1500 && tx_ant_1500 != HIDAnt.PA))
                return true;

            if (chkTUN.Checked) mode = DSPMode.CWU;

            switch (mode)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:
                case DSPMode.USB:
                case DSPMode.DIGU:
                case DSPMode.DSB:
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                    retval = (CheckValidTXFreq_Private(r, f + Display.TXFilterLow * 1e-6) &&
                        CheckValidTXFreq_Private(r, f + Display.TXFilterHigh * 1e-6));
                    break;
                case DSPMode.CWL:
                case DSPMode.CWU:
                    retval = CheckValidTXFreq_Private(r, f);
                    break;
                case DSPMode.DRM:
                    retval = (CheckValidTXFreq_Private(r, f - 0.012 + Display.TXFilterLow * 1e-6) &&
                        CheckValidTXFreq_Private(r, f - 0.012 + Display.TXFilterHigh * 1e-6));
                    break;
            }

            return retval;
        } // CheckValidTXFreq


        // ==============================================================================================
        // INTERNAL (PRIVATE) part of freq check (in cannot override firmware in Flex radio)
        // ==============================================================================================

        private bool CheckValidTXFreq_Private(FRSRegion r, double f)
        {
            if (extended || (tx_xvtr_index > -1 && current_model != Model.FLEX1500))
                return true;

            bool ret_val = false;

            f = Math.Round(f, 6);

            switch (r)
            {
                case FRSRegion.US: // 0
                    if (f >= 1.8 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 4.0) ret_val = true;

                    else if (f >= 5.3305 && f <= 5.3335) ret_val = true; // allow for max 2.8 kHz
                    else if (f >= 5.3465 && f <= 5.3495) ret_val = true;
                    else if (f >= 5.3570 && f <= 5.3600) ret_val = true;
                    else if (f >= 5.3715 && f <= 5.3745) ret_val = true;
                    else if (f >= 5.4035 && f <= 5.4065) ret_val = true;

                    else if (f >= 7.0 && f <= 7.3) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 25.0 && f <= 29.7) ret_val = true;     // change
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;

                    else if (FWCEEPROM.VUOK && f >= 144.0 && f <= 146.0) ret_val = true;  // ke9ns test was 144.0 and 146.0
                    else if (FWCEEPROM.VUOK && f >= 430.0 && f <= 450.0) ret_val = true;
                    // {
                    //     if (xvtr_present)
                    //         ret_val = true;
                    //     else
                    //         ret_val = false;
                    // }
                    else ret_val = false;
                    break;
                case FRSRegion.UK: // 1
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;

                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Europe: // 2
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;

                    else if (f >= 5.3515 && f <= 5.3665) ret_val = true; // New IARU 1 60m band
                   
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.03 && f <= 51.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.UK_Plus: // 3
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;

                    else if (f >= 5.2585 && f <= 5.264) ret_val = true;
                    else if (f >= 5.276 && f <= 5.284) ret_val = true;
                    else if (f >= 5.2885 && f <= 5.292) ret_val = true;
                    else if (f >= 5.298 && f <= 5.307) ret_val = true;
                    else if (f >= 5.313 && f <= 5.323) ret_val = true;
                    else if (f >= 5.333 && f <= 5.338) ret_val = true;
                    else if (f >= 5.354 && f <= 5.358) ret_val = true;
                    else if (f >= 5.362 && f <= 5.3745) ret_val = true;
                    else if (f >= 5.378 && f <= 5.382) ret_val = true;
                    else if (f >= 5.395 && f <= 5.4015) ret_val = true;
                    else if (f >= 5.4035 && f <= 5.4065) ret_val = true;

                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Italy: // 4
                    if (f >= 1.83 && f <= 1.85) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                   
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 51.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Norway: // 5
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;

                    else if (f >= 5.25 && f <= 5.45) ret_val = true;

                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Denmark: // 6
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;

                    else if (f >= 5.25 && f <= 5.45) ret_val = true;

                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Latvia: // 7
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
     
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 51.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Slovakia: // 8
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                  
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Bulgaria: // 9
                    if (f >= 1.81 && f <= 1.85) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                   
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.05 && f <= 50.2) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Greece: // 10
                    if (f >= 1.81 && f <= 1.85) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                   
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Hungary: // 11
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                   
                    else if (f >= 7.0 && f <= 7.1) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Belgium: // 12
                    if (f >= 1.81 && f <= 1.88) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;

                    else if (f >= 5.3515 && f <= 5.3665) ret_val = true; // New IARU 1 60m band

                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.France: // 13
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                  
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Russia: // 14
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                  
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 25.14) ret_val = true;
                    else if (f >= 26.97 && f <= 27.86) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Sweden: // 15
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;

                    else if (f >= 5.3515 && f <= 5.3665) ret_val = true; // New IARU 1 60m band

                    else if (f >= 5.31 && f <= 5.313) ret_val = true;
                    else if (f >= 5.32 && f <= 5.323) ret_val = true;
                    else if (f >= 5.38 && f <= 5.383) ret_val = true;
                    else if (f >= 5.39 && f <= 5.393) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Region_3: // 16
                    if (f >= 1.8 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.9) ret_val = true;
                    else if (f >= 7.0 && f <= 7.3) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Japan: // 17
                    if (f >= 1.81 && f <= 1.9125) ret_val = true;
                    else if (f >= 3.5 && f <= 3.805) ret_val = true;
                    else if (f >= 4.629995 && f <= 4.630005) ret_val = true;    // Japan national emergency frequency 4.630 +/- 5 Hz
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Italy_Plus: //18
                    if (f >= 1.83 && f <= 1.85) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                   
                    else if (f >= 6.975 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 51.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.ES_CH_FIN: // 19
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.3515 && f <= 5.3665) ret_val = true; // New IARU 1 60m band
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.00 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Netherlands: // 20
                    if (f >= 1.81 && f <= 1.88) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.35 && f <= 5.45) ret_val = true; // New IARU 1 60m band
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.EU_Travel: // 21
                    if (f >= 1.80 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.250 && f <= 5.450) ret_val = true;
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.00 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Luxembourg: // 22
                    if (f >= 1.81 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 3.8) ret_val = true;
                    else if (f >= 5.3515 && f <= 5.3665) ret_val = true; // New IARU 1 60m band
                    else if (f >= 7.0 && f <= 7.2) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 28.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.00 && f <= 52.0) ret_val = true;
                    else ret_val = false;
                    break;
                case FRSRegion.Region_2: // 23
                    if (f >= 1.8 && f <= 2.0) ret_val = true;
                    else if (f >= 3.5 && f <= 4.0) ret_val = true;
                    else if (f >= 5.3515 && f <= 5.3665) ret_val = true; // New IARU 2 60m band
                    else if (f >= 7.0 && f <= 7.3) ret_val = true;
                    else if (f >= 10.1 && f <= 10.15) ret_val = true;
                    else if (f >= 14.0 && f <= 14.35) ret_val = true;
                    else if (f >= 18.068 && f <= 18.168) ret_val = true;
                    else if (f >= 21.0 && f <= 21.45) ret_val = true;
                    else if (f >= 24.89 && f <= 24.99) ret_val = true;
                    else if (f >= 27.0 && f <= 29.7) ret_val = true;
                    else if (f >= 50.0 && f <= 54.0) ret_val = true;
                    else if (FWCEEPROM.VUOK && f >= 144.0 && f <= 146.0) ret_val = true;
                    else if (FWCEEPROM.VUOK && f >= 430.0 && f <= 450.0) ret_val = true;
                    else ret_val = false;
                    break;

                default:
                    ret_val = false;
                    break;
            }

            return ret_val;
        }

		public void SetHWFilters(double freq)
		{
			//Use shift registers on RFE to control BPF and LPF banks
			if(freq <= 2.5)					// DC to 2.5MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B160;

				if(!mox && chkBCI.Checked) //rx & BCI
					Hdw.BPFRelay = BPFBand.B60;		//sets next higher BPF for improved 160M operation
				else
					Hdw.BPFRelay = BPFBand.B160;

				if(freq <= 0.3 && enable_LPF0)
					Hdw.RFE_LPF = RFELPFBand.AUX;													
				else
					Hdw.RFE_LPF = RFELPFBand.B160;
			}
			else if(freq <= 4)				// 2.5MHz to 4MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B80;

				Hdw.BPFRelay = BPFBand.B60;
				Hdw.RFE_LPF = RFELPFBand.B80;
			}
			else if(freq <= 6)				// 4MHz to 6MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B6040;

				Hdw.BPFRelay = BPFBand.B60;
				Hdw.RFE_LPF = RFELPFBand.B60;
			}
			else if(freq <= 7.3)			// 6MHz to 7.3MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B6040;

				Hdw.BPFRelay = BPFBand.B40;
				Hdw.RFE_LPF = RFELPFBand.B40;
			}
			else if(freq <= 10.2)			// 7.3MHz to 10.2MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B3020;

				Hdw.BPFRelay = BPFBand.B40;
				Hdw.RFE_LPF = RFELPFBand.B30;
			}
			else if(freq <= 12)				// 10.2MHz to 12MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.NONE;

				Hdw.BPFRelay = BPFBand.B40;
				Hdw.RFE_LPF = RFELPFBand.B30;
			}
			else if(freq <= 14.5)			// 12MHz to 14.5MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B3020;

				Hdw.BPFRelay = BPFBand.B20;
				Hdw.RFE_LPF = RFELPFBand.B20;
			}
			else if(freq <= 21.5)			// 14.5MHz to 21.5MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B1715;

				Hdw.BPFRelay = BPFBand.B20;
				Hdw.RFE_LPF = RFELPFBand.B1715;
			}
			else if(freq <= 24)				// 21.5MHz to 24MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B1210;

				Hdw.BPFRelay = BPFBand.B20;
				Hdw.RFE_LPF = RFELPFBand.B1210;
			}
			else if(freq <= 30)				// 24MHz to 30MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.B1210;

				Hdw.BPFRelay = BPFBand.B10;
				Hdw.RFE_LPF = RFELPFBand.B1210;
			}
			else if(freq <= 36)				// 30MHz to 36MHz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.NONE;

				Hdw.BPFRelay = BPFBand.B10;
				Hdw.RFE_LPF = RFELPFBand.B6;
			}
			else if(freq <= 65)				// 36MHz to 65Mhz
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.NONE;

				Hdw.BPFRelay = BPFBand.B6;
				Hdw.RFE_LPF = RFELPFBand.B6;
			}
			else if(xvtr_present && freq >= 144 && freq <= 146)			//28MHz IF for transverter // ke9ns test was 144 and 146
			{
				if(pa_present)
					Hdw.PA_LPF = PAFBand.NONE;

				Hdw.BPFRelay = BPFBand.B10;
				Hdw.RFE_LPF = RFELPFBand.B1210;
				Hdw.XVTR_RF = true;
			}
			if(xvtr_present && freq < 144) Hdw.XVTR_RF = false; // ke9ns test this was not commented out

			if(rx1_xvtr_index >= 0)
			{
				Hdw.XVTR_RF = xvtrForm.GetXVTRRF(rx1_xvtr_index);
			}

		} // SetHwFilters

		// kb9yig sr40 mod 		
		// check and see if the band data includes alias data -- if so 
		// zero out (very negative) the portions of the data that are 
		// aliased 
		public void AdjustDisplayDataForBandEdge(ref float[] display_data) 
		{

            return;

		/*	if ( current_model != Model.SOFTROCK40)  // -- no aliasing going on 
				return;   

			if ( rx1_dsp_mode == DSPMode.DRM )  // for now don't worry about aliasing in DRM land 
			{
				return; 
			}

			double hz_per_bin = sample_rate1/Display.BUFFER_SIZE; 
			double data_center_freq = tuned_freq; 
			if ( data_center_freq == 0 ) 
			{ 
				return; 
			} 
			double data_low_edge_hz = (1e6 * data_center_freq) - sample_rate1/2; 
			double data_high_edge_hz = (1e6 * data_center_freq) + sample_rate1/2; 
			double alias_free_low_edge_hz = (1e6 * soft_rock_center_freq) - sample_rate1/2; 
			double alias_free_high_edge_hz = (1e6 * soft_rock_center_freq) + sample_rate1/2; 
			if ( data_low_edge_hz < alias_free_low_edge_hz )   // data we have goes below alias free region -- zero it 
			{				
				double hz_this_bin = data_low_edge_hz; 
				int bin_num = 0; 
				while ( hz_this_bin < alias_free_low_edge_hz ) 
				{
					display_data[bin_num] = -200.0f; 
					++bin_num; 
					hz_this_bin += hz_per_bin; 
				}
				// Debug.WriteLine("data_low: " + bin_num); 
			} 
			else if ( data_high_edge_hz > alias_free_high_edge_hz ) 
			{ 				
				double hz_this_bin = data_high_edge_hz; 
				int bin_num = Display.BUFFER_SIZE - 1; 
				while ( hz_this_bin > alias_free_high_edge_hz ) 
				{
					display_data[bin_num] = -200.0f; 
					--bin_num; 
					hz_this_bin -= hz_per_bin; 
				}					
				// Debug.WriteLine("data_high: " + bin_num); 
			}
			return;		
            */
		}
		// end kb9yig sr40 mod 

		public void SelectRX1VarFilter() 
		{ 
			if ( rx1_filter == Filter.VAR1 ) return; 
			if ( rx1_filter == Filter.VAR2 ) return; 

			// save current filter bounds, reset to var, set filter bounds 
			int high = (int)udFilterHigh.Value;
			int low = (int)udFilterLow.Value; 
			radFilterVar1.Checked = true;
			//SetFilter(Filter.VAR1); 
			UpdateRX1Filters(low, high);
		} 

		public void SelectRX2VarFilter() 
		{ 
			if ( rx2_filter == Filter.VAR1 ) return; 
			if ( rx2_filter == Filter.VAR2 ) return; 

			// save current filter bounds, reset to var, set filter bounds 
			int high = (int)udRX2FilterHigh.Value;
			int low = (int)udRX2FilterLow.Value; 
			radRX2FilterVar1.Checked = true;
			//SetFilter(Filter.VAR1); 
			UpdateRX2Filters(low, high);
		} 

		private void UpdateExtCtrl()
		{
            return;

          /*  if (current_model != Model.SDR1000) return;

			switch(TXBand)
			{
				case Band.B160M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_160_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_160_tx);
					break;
				case Band.B80M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_80_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_80_tx);
					break;
				case Band.B60M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_60_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_60_tx);
					break;
				case Band.B40M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_40_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_40_tx);
					break;
				case Band.B30M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_30_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_30_tx);
					break;
				case Band.B20M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_20_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_20_tx);
					break;
				case Band.B17M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_17_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_17_tx);
					break;
				case Band.B15M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_15_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_15_tx);
					break;
				case Band.B12M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_12_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_12_tx);
					break;
				case Band.B10M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_10_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_10_tx);
					break;
				case Band.B6M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_6_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_6_tx);
					break;
				case Band.B2M:
					if(!mox)
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_2_rx);
					else
						Hdw.X2 = (byte)((Hdw.X2 & 0xC0) | x2_2_tx);
					break;
			}
*/
        } // UpdateExtCtrl()

        // Added 06/24/05 BT for CAT commands
        public void CATMemoryQS()
		{
			btnMemoryQuickSave_Click(this.btnMemoryQuickSave, EventArgs.Empty);
		}

		// Added 06/25/05 BT for CAT commands
		public void CATMemoryQR()
		{
			btnMemoryQuickRestore_Click(this.btnMemoryQuickRestore, EventArgs.Empty);
		}

		// BT 06/30/05 Added for CAT commands
		public int CATBandGroup
		{
			get
			{
				if(panelBandHF.Visible)
					return 0;
				else
					return 1;
			}
			set
			{
				if(value == 0)
					btnBandHF_Click(btnBandHF, EventArgs.Empty);
				else if(value == 1)
					btnBandVHF_Click(btnBandVHF, EventArgs.Empty);
			}
		}

		//BT 06/17/05 added for CAT commands
		public void SetCATBand(Band pBand)
		{
			Band b = pBand;
			switch(b)
			{
				case Band.B160M:
					radBand160_Click(this, EventArgs.Empty);
					break;
				case Band.B80M:
					radBand80_Click(this, EventArgs.Empty);
					break;
				case Band.B60M:
                    radBand60_Click(this, EventArgs.Empty);
					break;
				case Band.B40M:
                    radBand40_Click(this, EventArgs.Empty);
					break;
				case Band.B30M:
                    radBand30_Click(this, EventArgs.Empty);
					break;
				case Band.B20M:
                    radBand20_Click(this, EventArgs.Empty);
					break;
				case Band.B17M:
                    radBand17_Click(this, EventArgs.Empty);
					break;
				case Band.B15M:
                    radBand15_Click(this, EventArgs.Empty);
					break;
				case Band.B12M:
                    radBand12_Click(this, EventArgs.Empty);
					break;
				case Band.B10M:
                    radBand10_Click(this, EventArgs.Empty);
					break;
				case Band.B6M:
                    radBand6_Click(this, EventArgs.Empty);
					break;
				case Band.B2M:
                    radBand2_Click(this, EventArgs.Empty);
					break;
				case Band.GEN:
                    radBandGEN_Click(this, EventArgs.Empty);

					break;
				case Band.WWV:
                    radBandWWV_Click(this, EventArgs.Empty);
					break;
				case Band.VHF0:
					radBandVHF0.PerformClick();
					break;
				case Band.VHF1:
					radBandVHF1.PerformClick();
					break;
				case Band.VHF2:
					radBandVHF2.PerformClick();
					break;
				case Band.VHF3:
					radBandVHF3.PerformClick();
					break;
				case Band.VHF4:
					radBandVHF4.PerformClick();
					break;
				case Band.VHF5:
					radBandVHF5.PerformClick();
					break;
				case Band.VHF6:
					radBandVHF6.PerformClick();
					break;
				case Band.VHF7:
					radBandVHF7.PerformClick();
					break;
				case Band.VHF8:
					radBandVHF8.PerformClick();
					break;
				case Band.VHF9:
					radBandVHF9.PerformClick();
					break;
				case Band.VHF10:
					radBandVHF10.PerformClick();
					break;
				case Band.VHF11:
					radBandVHF11.PerformClick();
					break;
				case Band.VHF12:
					radBandVHF12.PerformClick();
					break;
				case Band.VHF13:
					radBandVHF13.PerformClick();
					break;
                case Band.BLMF:
                    radBandGEN0_Click(this, EventArgs.Empty);
                    break;
                case Band.B120M:
                    radBandGEN1_Click(this, EventArgs.Empty);
                    break;
                case Band.B90M:
                    radBandGEN2_Click(this, EventArgs.Empty);
                    break;
                case Band.B61M:
                    radBandGEN3_Click(this, EventArgs.Empty);
                    break;
                case Band.B49M:
                    radBandGEN4_Click(this, EventArgs.Empty);
                    break;
                case Band.B41M:
                    radBandGEN5_Click(this, EventArgs.Empty);
                    break;
                case Band.B31M:
                    radBandGEN6_Click(this, EventArgs.Empty);
                    break;
                case Band.B25M:
                    radBandGEN7_CheckedChanged(this, EventArgs.Empty);
                    break;
                case Band.B22M:
                    radBandGEN8_Click(this, EventArgs.Empty);
                    break;
                case Band.B19M:
                    radBandGEN9_Click(this, EventArgs.Empty);
                    break;
                case Band.B16M:
                    radBandGEN10_Click(this, EventArgs.Empty);
                    break;
                case Band.B14M:
                    radBandGEN11_Click(this, EventArgs.Empty);
                    break;
                case Band.B13M:
                    radBandGEN12_Click(this, EventArgs.Empty);
                    break;
                case Band.B11M:
                    radBandGEN13_Click(this, EventArgs.Empty);
                    break;

                default:
					radBandGEN_Click(this, EventArgs.Empty);
					break;
			}
		} // setcatband


		public void SetVHFText(int index, string text)
		{
			vhf_text[index].Text = text;
		}

		public void SetVHFEnabled(int index, bool b)
		{
			vhf_text[index].Enabled = b;
		}



        //=============================================================================
        // ke9ns mod add GEN SWL bands
        public int[] band_stacks; // ke9ns add each entry contains the # of bandstack entries for each band listed below 
        public int[] band_sort; // ke9ns add lowest to highest sorted freq list of the current bandstack  

		public void UpdateBandStackRegisters()
		{
			 band_stacks = DB.GetBandStackNum(); // ke9ns mod

			band_160m_register = band_stacks[0];
			band_80m_register = band_stacks[1];
			band_60m_register = band_stacks[2];
			band_40m_register = band_stacks[3];
			band_30m_register = band_stacks[4];
			band_20m_register = band_stacks[5];
			band_17m_register = band_stacks[6];
			band_15m_register = band_stacks[7];
			band_12m_register = band_stacks[8];
			band_10m_register = band_stacks[9];
			band_6m_register = band_stacks[10];
			band_2m_register = band_stacks[11];
			band_wwv_register = band_stacks[12];
			band_gen_register = band_stacks[13];

            band_LMF_register = band_stacks[14]; // ke9ns add
            band_120m_register = band_stacks[15];
            band_90m_register = band_stacks[16];
            band_61m_register = band_stacks[17];
            band_49m_register = band_stacks[18];
            band_41m_register = band_stacks[19];
            band_31m_register = band_stacks[20];
            band_25m_register = band_stacks[21];
            band_22m_register = band_stacks[22];
            band_19m_register = band_stacks[23];
            band_16m_register = band_stacks[24];
            band_14m_register = band_stacks[25];
            band_13m_register = band_stacks[26];
            band_11m_register = band_stacks[27];

            band_vhf0_register = band_stacks[28];
			band_vhf1_register = band_stacks[29];
			band_vhf2_register = band_stacks[30];
			band_vhf3_register = band_stacks[31];
			band_vhf4_register = band_stacks[32];
			band_vhf5_register = band_stacks[33];
			band_vhf6_register = band_stacks[34];
			band_vhf7_register = band_stacks[35];
			band_vhf8_register = band_stacks[36];
			band_vhf9_register = band_stacks[37];
			band_vhf10_register = band_stacks[38];
			band_vhf11_register = band_stacks[39];
			band_vhf12_register = band_stacks[40];
			band_vhf13_register = band_stacks[41];

          


        } // UpdateBandStackRegisters()



        public void UpdateRX1Filters(int low, int high)
		{
			// System.Console.WriteLine("updf lo: " + low + " hi: " + high); 
			// qualify settings
			//if(low > high) return;

			switch(rx1_dsp_mode)
			{
				case DSPMode.LSB:				
				case DSPMode.DIGL:	
				case DSPMode.CWL:
					if(low > high-10) low = high-10;
					break;
				case DSPMode.USB:				
				case DSPMode.DIGU:
				case DSPMode.CWU:
					if(high < low+10) high = low+10;
					break;
				case DSPMode.AM:
				case DSPMode.SAM:
				case DSPMode.DSB:
					if(high < low+20)
					{
						if(Math.Abs(high) < Math.Abs(low))
							high = low + 20;
						else
							low = high - 20;
					}
					break;
                case DSPMode.FM:

                    if (dsp.GetDSPTX(0).TXFMDeviation == FMDataDeviation) // ke9ns add FMData == true
                    {
                        low = -FMDataLowHigh;
                        high = FMDataLowHigh;
                    }
                    else if (dsp.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        low = -8000;
                        high = 8000;
                    }
                    else if (dsp.GetDSPTX(0).TXFMDeviation == 2500)
                    {
                        low = -4000;
                        high = 4000;
                    }
                    break;
			}

            if (low < -14999) low = -14999;
            if (high > 14999) high = 14999;

		//	if(low < -9999)	low = -9999;
		//	if(high > 9999)	high = 9999; // ke9ns test. this was original


			// send the settings to the DSP
			dsp.GetDSPRX(0, 0).SetRXFilter(low, high);
			dsp.GetDSPRX(0, 1).SetRXFilter(low, high);

			// send the setting to the display
			Display.RX1FilterLow = low;
			Display.RX1FilterHigh = high;

         	// update var filter controls
			udFilterLow.Value = low;
			udFilterHigh.Value = high;
         
            // update Filter Shift
            ptbFilterShift_Update(low, high);

			// update Filter Width
			ptbFilterWidth_Update(low, high);
			
			// Update Display data if not in panadapter mode
			if(!dsp.GetDSPRX(0, 0).SpectrumPreFilter)
				UpdateRXDisplayVars(low, high);

			// update display
			if(!chkPower.Checked)
                Display.DrawBackground();

			// reset average and peak
			switch(Display.CurrentDisplayMode)
			{
				case DisplayMode.SPECTRUM:
				case DisplayMode.HISTOGRAM:
				case DisplayMode.WATERFALL:
					if(chkDisplayAVG.Checked) Display.ResetRX1DisplayAverage();
					if(chkDisplayPeak.Checked)	Display.ResetRX1DisplayPeak();
					break;
				case DisplayMode.PANADAPTER:
					break;
			}

			// set XIT step rate
			if((high - low) > 250)
			{
				udXIT.Increment = 10;
				udRIT.Increment = 10;
			}
			else
			{
				udXIT.Increment = 5;
				udRIT.Increment = 5;
			}

			if(filterRX1Form != null && !filterRX1Form.IsDisposed)
			{
				if(filterRX1Form.DSPMode == rx1_dsp_mode)
					filterRX1Form.CurrentFilter = rx1_filter;
			}
		} // updaterx1fitlers

		public void UpdateRX2Filters(int low, int high)
		{
			switch(rx2_dsp_mode)
			{
				case DSPMode.LSB:				
				case DSPMode.DIGL:	
				case DSPMode.CWL:
					if(low > high-10) low = high-10;
					break;
				case DSPMode.USB:				
				case DSPMode.DIGU:
				case DSPMode.CWU:
					if(high < low+10) high = low+10;
					break;
				case DSPMode.AM:
				case DSPMode.SAM:
				case DSPMode.DSB:
					if(high < low+20)
					{
						if(Math.Abs(high) < Math.Abs(low))
							high = low + 20;
						else
							low = high - 20;
					}
					break;
                case DSPMode.FM:

                    if (dsp.GetDSPTX(0).TXFMDeviation == FMDataDeviation)  // FMData == true)
                    {
                        low = -FMDataLowHigh;
                        high = FMDataLowHigh;
                    }
                    else if (dsp.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        low = -8000;
                        high = 8000;
                    }
                    else if (dsp.GetDSPTX(0).TXFMDeviation == 2500)
                    {
                        low = -4000;
                        high = 4000;
                    }
                    break;
			}

            if (low < -14999) low = -14999; // ke9ns add
            if (high > 14999) high = 14999;

          //  if (low < -9999)
		//		low = -9999;
		//	if(high > 9999) 
			//	high = 9999;

			// send the settings to the DSP
			dsp.GetDSPRX(1, 0).SetRXFilter(low, high);
			dsp.GetDSPRX(1, 1).SetRXFilter(low, high);

			// send the setting to the display
			Display.RX2FilterLow = low;
			Display.RX2FilterHigh = high;

			// update var filter controls
			udRX2FilterLow.Value = low;
			udRX2FilterHigh.Value = high;

			// update display
            if(!chkPower.Checked)	Display.DrawBackground();

			if(filterRX2Form != null && !filterRX2Form.IsDisposed)
			{
				if(filterRX2Form.DSPMode == rx2_dsp_mode)
					filterRX2Form.CurrentFilter = rx2_filter;
			}
		} //update RX2 Filters

		public void UpdateRX1FilterNames(Filter f)
		{
			switch(f)
			{
				case Filter.F1:
					radFilter1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F1);
					break;
				case Filter.F2:
					radFilter2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F2);
					break;
				case Filter.F3:
					radFilter3.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F3);
					break;
				case Filter.F4:
					radFilter4.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F4);
					break;
				case Filter.F5:
					radFilter5.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F5);
					break;
				case Filter.F6:
					radFilter6.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F6);
					break;
				case Filter.F7:
					radFilter7.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F7);
					break;
				case Filter.F8:
					radFilter8.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F8);
					break;
				case Filter.F9:
					radFilter9.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F9);
					break;
				case Filter.F10:
					radFilter10.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F10);
					break;
				case Filter.VAR1:
					radFilterVar1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR1);
					break;
				case Filter.VAR2:
					radFilterVar2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR2);
					break;
			}
			
			if(f == rx1_filter)
                panelFilter.Text = "Filter - " + rx1_filters[(int)rx1_dsp_mode].GetName(f);
		}

		public void UpdateRX1FilterPresetLow(int val)
		{
			UpdateRX1Filters(val, (int)udFilterHigh.Value);
		}

		public void UpdateRX1FilterPresetHigh(int val)
		{
			UpdateRX1Filters((int)udFilterLow.Value, val);
		}

		public void UpdateRX2FilterNames(Filter f)
		{
			switch(f)
			{
				case Filter.F1:
					radRX2Filter1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F1);
					break;
				case Filter.F2:
					radRX2Filter2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F2);
					break;
				case Filter.F3:
					radRX2Filter3.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F3);
					break;
				case Filter.F4:
					radRX2Filter4.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F4);
					break;
				case Filter.F5:
					radRX2Filter5.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F5);
					break;
				case Filter.F6:
					radRX2Filter6.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F6);
					break;
				case Filter.F7:
					radRX2Filter7.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F7);
					break;
				case Filter.VAR1:
					radRX2FilterVar1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR1);
					break;
				case Filter.VAR2:
					radRX2FilterVar2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR2);
					break;
			}
			
			if(f == rx2_filter)
				panelRX2Filter.Text = "RX2 Filter - "+rx2_filters[(int)rx2_dsp_mode].GetName(f);
		}

		public void UpdateRX2FilterPresetLow(int val)
		{
			UpdateRX2Filters(val, (int)udRX2FilterHigh.Value);
		}

		public void UpdateRX2FilterPresetHigh(int val)
		{
			UpdateRX2Filters((int)udRX2FilterLow.Value, val);
		}

       
		public void UpdateVFOAFreq(string freq)
		{   // only do this routine if there are six digits after the decimal point. or decimal comma


            dialcheckA = true;  // update DIAL if active
      

            txtVFOAFreq.Text = freq; 
            txtVFOAMSD.Text = freq;
          

            string temp = freq;
            int index = temp.IndexOf(separator) + 4;


            txtVFOALSD.Text = temp.Remove(0, index);  // 3 small orange digits

			if(KWAutoInformation)	BroadcastFreqChange("A", freq);

		} // update vfo freq

		private void BroadcastFreqChange(string vfo, string freq)
		{
			freq = "F"+vfo+freq.Replace(separator,"").PadLeft(11,'0')+";";
			try
			{
				siolisten.SIO.put(freq);
			}
			catch{}
		}

       //=========================================================================
        public void UpdateVFOBFreq(string freq)
		{   // only do this routine if there are six digits after the decimal point.

         
            dialcheckB = true; // there was a update to the VFOB freq, so notify DIALB
          

            txtVFOBFreq.Text = freq;
			txtVFOBMSD.Text = freq;
				
			string temp = freq;
			int index = temp.IndexOf(separator)+4;
			txtVFOBLSD.Text = temp.Remove(0, index);
			if(KWAutoInformation) BroadcastFreqChange("B", freq);
		}

        //===============================================================================
        //ke9ns comes here when you change zoom levels or 
		public void CalcDisplayFreq()
		{

          
			if(Display.CurrentDisplayMode != DisplayMode.PANADAPTER &&
				Display.CurrentDisplayMode != DisplayMode.WATERFALL &&
				Display.CurrentDisplayMode != DisplayMode.PANAFALL &&
				Display.CurrentDisplayMode != DisplayMode.PANASCOPE)
				return;

			//double edge_alias = 7200.0;
			//double if_freq = 11025.0;

			double spur_tune_width = 0;
            switch (current_model)
            {
              //  case Model.SDR1000:
              //      spur_tune_width = 200e6 / Math.Pow(2, 16);
              //      break;
                case Model.FLEX5000:
                    spur_tune_width = 7629.39453125;   // 500e6 / Math.Pow(2, 16); // ke9ns 500mhz / 65536 = 7629.39453125
                    break;
                case Model.FLEX3000:
                    spur_tune_width = 7617.20275879; //  499.201e6 / Math.Pow(2, 16);
                    break;
                case Model.FLEX1500:
                    double clock = 384e6;
                    if (flex_1500_xref) clock = 400e6;

                    spur_tune_width = clock / Math.Pow(2, 16);
                    if (!chkSR.Checked) spur_tune_width = 2000;

                    break;
            } // switch current_model

			double zoom_factor = (ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - ptbDisplayZoom.Value) * 0.01; // (240+10-value)*.01    range from .1 to 2.4
			
			int low = (int)(-10000.0 * sample_rate1 / 48000.0 * zoom_factor); //-40000 with zoom =1 or -96000 with zoom=.5
			int high = -low;
			int width = high - low; // ke9ns in hz    40000- -40000 = +80000 at 192k SR and Zoom = 1x

			if (width > sample_rate1 - 2 * spur_tune_width)	width = (int)(sample_rate1 - 2*spur_tune_width);

            // ke9ns below calculates the +/- hz of the full absolute widest the display could be (with no zoom at all)
			int abs_low = (int)(-(double)sample_rate1 *0.5 - if_freq * 1e6 + spur_tune_width); // (-192000 * .5) - (0.009000 * 1000000) + 7629.39453125 = -96000 - 9000 + 7629.39453125  = -97373
            int abs_high = (int)((double)sample_rate1 *0.5 - if_freq * 1e6 - spur_tune_width); // +97373 

			if(high > abs_high)
			{
				//Debug.WriteLine("high: "+high+"  abs_high: "+abs_high);
				high = abs_high;
				low = high - width;
			}
 
			if(low < abs_low)
			{
				//Debug.WriteLine("low: "+low+"  abs_low: "+abs_low);
				low = abs_low;
				high = low + width;
			}

            // ke9ns Factor in the PAN slider (which allows you to slide around within the absolute limits)
			int max_pan_width = (int)(sample_rate1 - 2 * spur_tune_width - width); // ke9ns  192000 - (2 * 7629.39453125) - 80000 = 96741

            int pan_freq = max_pan_width * ptbDisplayPan.Value / ptbDisplayPan.Maximum; // ke9ns 96741 * 593 / 1000 = 57367
         
            low = abs_low + pan_freq; // ke9ns -97373 + 57367 = -40000
         
            low = low - (int)CTUN1_HZ; // ke9ns add CTUN (adjust display so it appears as if the VFOA bandpass is moving but not the panadapter and not the waterfall 
     
            high = low + width; // -4000 + 8000 = 40000

         //   if (CTUN == true) CTUN3 = 1; // ke9ns add dont allow rundisplay() thread from updating display while in CTUN mode

            Display.RXDisplayLow = Display.TXDisplayLow = low; // ke9ns at 192k SR  low = -96000 with zoom =.5 (different for Spectrum display)
			Display.RXDisplayHigh = Display.TXDisplayHigh = high;
           
          //  Debug.WriteLine("Display Limits: " + low + ", " + high);


            if (CTUN == true) // ke9ns add
            {
                 VFOAFreq = tempVFOAFreq; // CTUN operation changed freq
            }
         
            UpdateDisplay(); // force a redraw of the picDisplay since you have new freq edges based on new zoom level


         

          //  CTUN3 = 0;

        } //CalcDisplayFreq()

       

        private void UpdateRXDisplayVars(int l, int h)
		{
			int low = 0, high = 0;
			if(l < 0 && h <= 0)
			{
				high = 0;
				if(l >= -910)
					low = -1000;
				else
					low = (int)(l*1.1);
			}
			else if(l >= 0 && h > 0)
			{
				low = 0;
				if(h <= 910)
					high = 1000;
				else
					high = (int)(h*1.1);
			}
			else if(l < 0 && h > 0)
			{
				int max_edge = Math.Max(-l, h);
				low = (int)(max_edge*-1.1);
				high = (int)(max_edge*1.1);
			}
			Display.RXDisplayLow = low;
			Display.RXDisplayHigh = high;
		}

		public static void UpdateTXDisplayVars(int l, int h)
		{
			int low = 0, high = 0;
			if(l < 0 && h <= 0)
			{
				high = 0;
				if(l >= -910)
					low = -1000;
				else
					low = (int)(l*1.1);
			}
			else if(l >= 0 && h > 0)
			{
				low = 0;
				if(h <= 910)
					high = 1000;
				else
					high = (int)(h*1.1);
			}
			else if(l < 0 && h > 0)
			{
				int max_edge = Math.Max(-l, h);
				low = (int)(max_edge*-1.1);
				high = (int)(max_edge*1.1);
			}

			Display.TXDisplayLow = low;
			Display.TXDisplayHigh = high;
		}

        // ke9ns modify for ISB  LSB-AM and USB-AM
		public void SetTXFilters(DSPMode mode, int low, int high)
		{
			int l=0, h=0;

            low = (int)Math.Max(low, 15);  // ke9ns mod  was 50  I guess this is the lowest of the low  50hz

            switch (mode)
			{
				case DSPMode.LSB:
				case DSPMode.CWL:
				case DSPMode.DIGL:
					l = -high;
					h = -low;
                    break;
				case DSPMode.USB:
				case DSPMode.CWU:
				case DSPMode.DIGU:
                    	l = low;
                        h = high;
                    break;
				case DSPMode.DSB:
                    l = -high;
                    h = high;
                    break;
				case DSPMode.AM:

                    if (AMMODE == DSPISB.AML) // ke9ns add
                    {
                        l = -high;
                        h = 130; //  needs 130 to allow full power of carrier
                    }
                    else if (AMMODE == DSPISB.AMU)
                    {
                        l = -130; // needs -130 to allow full power of carrier
                        h = high;
                    }
                    else
                    {
                        l = -high;  // ke9ns normal AM mode
                        h = high;
                    }

                
                    break; // AM

                case DSPMode.SAM:
       
                    if (SAMMODE == DSPISB.AML) // ke9ns add
                    {
                        l = -high;
                        h = 130; //  needs 130 to allow full power of carrier
                    }
                    else if (SAMMODE == DSPISB.AMU)
                    {
                        l = -130; // needs -130 to allow full power of carrier
                        h = high;
                    }
                    else
                    {
                        l = -high;  // ke9ns normal AM mode
                        h = high;
                    }

                    break; // SAM

				case DSPMode.FM:
                    if (dsp.GetDSPTX(0).TXFMDeviation == FMDataDeviation)     //FMData == true) // ke9ns add (FM data mode with larger freq window)
                    {
                        l = -FMDataLowHigh;
                        h = FMDataLowHigh;
                    }
                    else if (dsp.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        l = -8000;
                        h = 8000;
                    }
                    else if (dsp.GetDSPTX(0).TXFMDeviation == 2500)
                    {
                        l = -4000;
                        h = 4000;
                    }
					break;
				case DSPMode.DRM:
					l = 7000;
					h = 17000;
					break;
			}

			switch(Display.CurrentDisplayMode)
			{
				case DisplayMode.PANADAPTER:
				case DisplayMode.WATERFALL:
				case DisplayMode.PANAFALL:
				case DisplayMode.PANASCOPE:
					break;
				default:
					UpdateTXDisplayVars(l, h);
					break;
			}

			dsp.GetDSPTX(0).SetTXFilter(l, h);

          //  dsp.GetDSPTX(0).SetTXFilter(-90000, 0); // ke9ns testdsp limited to about 90khz


            if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
            {
                  FWC.SetTXDSPFilter(l, h);
             }

			Display.TXFilterLow = l;
			Display.TXFilterHigh = h;

            Debug.WriteLine("HIGH-LOW " + h + " , " + l);


            
            if (chkVFOSplit.Checked == true)
            {
                Display.SplitEnabled = true; // reset the SPLIT TX for AM-U and AM-L 

            }

        } // set txfilters


        public void UpdateTXProfile(string name)
		{
			if(setupForm == null) return; 

			//string old = comboTXProfile.Text;
			comboTXProfile.Items.Clear();
			comboDigTXProfile.Items.Clear();
            comboFMTXProfile.Items.Clear();
            comboCWTXProfile.Items.Clear(); // ke9ns
            string[] s = setupForm.GetTXProfileStrings();

			comboTXProfile.Items.AddRange(s);
			comboDigTXProfile.Items.AddRange(s);
            comboFMTXProfile.Items.AddRange(s);
            comboCWTXProfile.Items.AddRange(s); // ke9ns add

            if (name != "") comboTXProfile.Text = name;
		}



//=================================================================================================
        public void UpdateWaterfallLevelValues()
        {

           
            if (!initializing)
            {

                UpdateBandButtonColors(); // ke9ns add to update the regBOX bandstack values on screen

                if (StackForm != null)
                {
                    int value;
                    StackForm.textBox1.Focus();

                    if (int.TryParse(regBox1.Text, out value))
                    {

                        if (value > 0)
                        {
                            StackForm.textBox1.SelectionStart = (value - 1) * StackForm.BSLength;       // start of each bandstack line
                            StackForm.textBox1.SelectionLength = StackForm.BSLength;                    // length of each bandstack line

                            textBox1.SelectionStart = (value - 1) * StackForm.BSLength;       // start of each bandstack line
                            textBox1.SelectionLength = StackForm.BSLength;                    // length of each bandstack line

                        }
                        else
                        {
                            StackForm.textBox1.SelectionStart = 0;
                            StackForm.textBox1.SelectionLength = StackForm.BSLength;

                            textBox1.SelectionStart = 0;
                            textBox1.SelectionLength = StackForm.BSLength;

                        }

                    }
                    else
                    {
                        Debug.WriteLine("no value");
                        StackForm.textBox1.SelectionStart = 0;
                        StackForm.textBox1.SelectionLength = StackForm.BSLength;

                        textBox1.SelectionStart = 0;
                        textBox1.SelectionLength = StackForm.BSLength;

                    }
                }

                //
                switch (RX1Band)
                {
                    case Band.B160M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold160m;  
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold160m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold160m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold160m;

                        
                        break;
                    case Band.B80M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold80m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold80m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold80m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold80m; 

                      

                        break;
                    case Band.B60M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold60m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold60m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold60m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold60m;

              
                        break;
                    case Band.B40M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold40m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold40m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold40m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold40m;

               
                        break;
                    case Band.B30M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold30m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold30m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold30m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold30m;

               
                        break;
                    case Band.B20M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold20m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold20m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold20m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold20m;

               
                        break;
                    case Band.B17M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold17m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold17m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold17m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold17m;

             
                        break;
                    case Band.B15M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold15m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold15m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold15m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold15m;

            
                        break;
                    case Band.B12M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold12m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold12m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold12m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold12m;

             
                        break;
                    case Band.B10M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold10m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold10m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold10m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold10m;

                  

                        break;
                    case Band.B6M:
                        setupForm.WaterfallLowThreshold = WaterfallLowThreshold6m;
                        setupForm.WaterfallHighThreshold = WaterfallHighThreshold6m;
                        Display.WaterfallLowThreshold = WaterfallLowThreshold6m;
                        Display.WaterfallHighThreshold = WaterfallHighThreshold6m;

                 
                        break;
                    case Band.WWV:
                        setupForm.WaterfallLowThreshold = WaterfallLowThresholdWWV;
                        setupForm.WaterfallHighThreshold = WaterfallHighThresholdWWV;
                        Display.WaterfallLowThreshold = WaterfallLowThresholdWWV;
                        Display.WaterfallHighThreshold = WaterfallHighThresholdWWV;

             
                        break;
                    case Band.GEN:
                        setupForm.WaterfallLowThreshold = WaterfallLowThresholdGEN;
                        setupForm.WaterfallHighThreshold = WaterfallHighThresholdGEN;
                        Display.WaterfallLowThreshold = WaterfallLowThresholdGEN;
                        Display.WaterfallHighThreshold = WaterfallHighThresholdGEN;

                
                        break;
                    default:
                        setupForm.WaterfallLowThreshold = WaterfallLowThresholdXVTR;
                        setupForm.WaterfallHighThreshold = WaterfallHighThresholdXVTR;
                        Display.WaterfallLowThreshold = WaterfallLowThresholdXVTR;
                        Display.WaterfallHighThreshold = WaterfallHighThresholdXVTR;

                
                        break;

                     

                } // RX1Band

             //   UpdateBandButtonColors(); // ke9ns add to update the regBOX bandstack values on screen

                //================================================================
                //================================================================
                // ke9ns add: copy low waterfall value from standard RX1 position into RX2 low 
                //================================================================
                //================================================================

                rx2_band = StringToBand(comboRX2Band.Text);  // ke9ns add  get band even if OFF, just in case you turn it on later

                switch (RX2Band)  // ke9ns ADD (not reading correctly here when RX2 is off)
                {
           
                    case Band.B160M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold160m;  // ke9ns ADD rx2
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold160m;
                        break;
                    case Band.B80M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold80m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold80m;
                        break;
                    case Band.B60M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold60m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold60m;
                        break;
                    case Band.B40M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold40m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold40m;
                        break;
                    case Band.B30M:
                         setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold30m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold30m;
                       break;
                    case Band.B20M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold20m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold20m;
                        break;
                    case Band.B17M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold17m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold17m;
                        break;
                    case Band.B15M:
                       setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold15m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold15m;
                        break;
                    case Band.B12M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold12m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold12m;
                        break;
                    case Band.B10M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold10m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold10m;
                        break;
                    case Band.B6M:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold6m;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThreshold6m;
                        break;
                    case Band.WWV:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdWWV;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThresholdWWV;
                        break;
                    case Band.GEN:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdGEN;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThresholdGEN;
                        break;
                    default:
                        setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        Display.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                } // RX2Band

            //    Debug.WriteLine("rX2 low upateband " + RX2Band);
            //    Debug.WriteLine("rX2 low upatevalue " + Display.WaterfallLowRX2Threshold);
  
                setupForm.UpdateWaterfallBandInfo();
            } // !initializing



        } // UpdateWaterfallLevelValues()



        public void ShowRemoteProfileMenu(bool action)
		{
			remoteProfilesToolStripMenuItem.Visible = action;
		}

		public string CATGetXVTRBandNames()
		{
			string names = "";
			for(int n = 0; n < 14; n++)
			{
				if(xvtrForm.GetEnabled(n) == true)
					names += vhf_text[n].Text.ToString().PadLeft(5,' ');
				else
					names += "     ";
			}
			return names;
		}

		public string GetFilterPresets(int mode_ndx)
		{
			string mode_info = "";
			for(Filter f = Filter.F1; f < Filter.NONE; f++)
			{
				
				mode_info += rx1_filters[mode_ndx].GetName(f).PadLeft(5, ' ').Substring(0, 5);
				mode_info += rx1_filters[mode_ndx].GetHigh(f).ToString().PadLeft(5, ' ');
				mode_info += rx1_filters[mode_ndx].GetLow(f).ToString().PadLeft(5, ' ');
			}
			return mode_info;
		}

        private void Set1500Filters(double freq)
        {
            // set TRX Filter
            int trx_filter = 0;
            if (freq < 0.48) // bypass
                trx_filter = 0;
            else if (freq < 0.88)
                trx_filter = 11; // AM 1
            else if (freq < 1.6)
                trx_filter = 10; // AM 2
            else if (freq < 2.3)
                trx_filter = 9;  // 160m
            else if (freq < 3.5)
                trx_filter = 8;  // 80m
            else if (freq < 5.2)
                trx_filter = 7;  // ??
            else if (freq < 7.7)
                trx_filter = 6;  // 60/40m
            else if (freq < 11.4)
                trx_filter = 5;  // 30m
            else if (freq < 17.0)
                trx_filter = 4;  // 20m
            else if (freq < 25.3)
                trx_filter = 3;  // 15/12m
            else if (freq < 37.6)
                trx_filter = 2;  // 10m
            else if (freq < 56.0)
                trx_filter = 1;  // 6m

            HIDTRXFilter = trx_filter;

            if (tx_ant_1500 == HIDAnt.PA)
            {
                int pa_filter = 0;
                if (freq < 0.0)
                    pa_filter = 0; // bypass
                else if (freq < 2.5)
                    pa_filter = 7; // 160m
                else if (freq < 5.0)
                    pa_filter = 6; // 80m
                else if (freq < 8.8)
                    pa_filter = 5; // 60/40m
                else if (freq < 17.5)
                    pa_filter = 4; // 30/20m
                else if (freq < 24.0)
                    pa_filter = 3; // 17/15m
                else if (freq < 35.0)
                    pa_filter = 2; // 12/10m
                else
                    pa_filter = 1; // 6m

                HIDPAFilter = pa_filter;
            }
        }

        private int SetVURXPath()
        {
            /*				Von		Uon		VRX2	URX2
            0   VU not used	0		0		0		0
            1	URX1		0		1		0		0
            2	URX2		0		1		0		1
            3	VRX1*		1		0		0		0
            4	VRX2		1		0		1		0
            5	VRX1, URX2*	1		1		0		1
            6	VRX2, URX1	1		1		1		0
            -  Invalid     1       1       1       1
            -  Invalid     1       1       0       0 (Split)
            */
            if (swapping) return 0;
            int rx2_xvtr_index_local = rx2_xvtr_index;
            if (!rx2_enabled)
                rx2_xvtr_index_local = -1;

            if (rx1_xvtr_index == 0)
            {
                if (rx2_xvtr_index_local == 0)
                {
                    //MessageBox.Show("ERROR 15489",
                    //                "VU Error",
                    //                MessageBoxButtons.OK,
                    //                MessageBoxIcon.Error);
                    return 0;                  //Invalid
                }
                else if (rx2_xvtr_index_local == 1)   //URX2
                {
                    FWC.SetVU_RXPath(5);        //VRX1, URX2
                }
                else
                {
                    FWC.SetVU_RXPath(3);        //VRX1
                }
            }
            else if (rx1_xvtr_index == 1)
            {
                if (rx2_xvtr_index_local == 1)       
                {
                    //MessageBox.Show("ERROR 15488",
                    //                "VU Error",
                    //                MessageBoxButtons.OK,
                    //                MessageBoxIcon.Error);
                    return 0;                   //Invalid
                }
                else if (rx2_xvtr_index_local == 0)   //VRX2
                {
                    FWC.SetVU_RXPath(6);        //VRX2, URX1
                }
                else
                {
                    FWC.SetVU_RXPath(1);        //URX1
                }
            }
            else
            {
                if (rx2_xvtr_index_local == 0)
                {
                    FWC.SetVU_RXPath(4);        //VRX2
                }
                else if (rx2_xvtr_index_local == 1)
                {
                    FWC.SetVU_RXPath(2);        //URX2
                }
                else
                {
                    FWC.SetVU_RXPath(0);        //VU not used
                }
            }
            return 1;   //successful state
        }

        public bool FindNearestKey<T>(double f, SortedDictionary<double, T> dict, out double key)
        {
            if(dict == null || dict.Count == 0)
            {
                key = f;
                return false;
            }
            
            if(dict.ContainsKey(f))
            {
                key = f;
                return true;
            }

            double low = double.MinValue;
            double high = double.MaxValue;

            foreach(double next_key in dict.Keys)
            {
                if (next_key < f && next_key > low)
                    low = next_key;

                if (next_key > f && next_key < high)
                    high = next_key;
            }

            double low_delta = Math.Abs(low - f);
            double high_delta = Math.Abs(high - f);

            if (low_delta < high_delta)
                key = low;
            else key = high;
            return true;
        }

        public int CurrentTuneStepHz
        {
            get { return tune_step_list[tune_step_index].StepHz; }
        }

        //==============================================================
        // ke9ns add for PowerMate
        public int CurrentTuneStepHz2
        {
            get { return tune_step_list[setupForm.tune_step_index2].StepHz; }
        }


        public double CurrentTuneStepMHz
        {
            get { return tune_step_list[tune_step_index].StepHz * 1e-6; }
        }

#endregion

#region Test and Calibration Routines

        private Progress p;
		public bool CalibratePABias(Progress progress, float driver_target, float final_target, float tol, int index)
		{
			bool ret_val = false;
			float driver_limit = 10.0f;
			float final_limit = 10.0f;

			if(!(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)))
			{
				progress.Text = "";
				progress.Hide();
				return false;
			}

            if (rx_only)
            {
                progress.Text = "";
                progress.Hide();
                MessageBox.Show("Cannot run this calibration while RX Only is selected\n(Setup Form -> General Tab)",
                    "Error: RX Only is active",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

			if(chkPower.Checked && 
				(rx1_dsp_mode == DSPMode.CWL || rx1_dsp_mode == DSPMode.CWU))
				RX1DSPMode = DSPMode.DSB;

			int val = 0;
			float volts = 0.0f;
			float current = 0.0f;
			int counter = 0;
			
			// read 13.8V for a sanity check of the ADC
			FWC.ReadPAADC(2, out val);
			volts = (float)val/4096*2.5f;
			float v138 = volts*11;

			if(v138 < 13.0 || v138 > 14.5)
			{
				progress.Hide();
				MessageBox.Show("13.8V not within tolerance [13.0, 14.5] -- (read "+v138.ToString("f1")+")",
					"ADC/Power Problem",
					MessageBoxButtons.OK, MessageBoxIcon.Error);
				calibration_running = false;				
				return false;
			}

			Thread.Sleep(100);

			int chan = 4;
			switch(current_model)
			{
				case Model.FLEX5000:
					chan = 4;
					break;
				case Model.FLEX3000:
					chan = 3;
					break;
			}
			FWC.ReadPAADC(chan, out val);
			volts = (float)val/4096*2.5f;
			double temp_c = 301-volts*1000/2.2;
			if(temp_c > 50 || temp_c < 18)
			{
				progress.Hide();
				MessageBox.Show("Temperature ("+temp_c.ToString("f0")+"°C) is outside of normal range (18-50°C).",
					"PA Bias Cal Error: Temp",
					MessageBoxButtons.OK,
					MessageBoxIcon.Error);
				calibration_running = false;
				return false;
			}

			for(int i=0; i<8; i++)
				flex5000DebugForm.SetPAPot(i, 0);

			FWC.SetPABias(true);
            tx_cal = true;

			byte Q2=128, Q3=128;
			// find point where Q2 and Q3 just tickle the driver bias current
			float baseline = 0.0f;
			Thread.Sleep(50);
			baseline = ReadDriverBias(3);
			/*if(baseline > 0.020)
			{
				Thread.Sleep(50);
				baseline = ReadDriverBias(3);
			}
			if(baseline > 0.020) goto error;*/
			//MessageBox.Show("Driver Baseline: "+baseline.ToString("f3"));
			Debug.WriteLine("baseline: "+baseline.ToString("f3"));

			for(int i=0; i<4; i++)
				flex5000DebugForm.SetPAPot(i, 128);

			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(0, Q2+=10);
				if(Q2 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q2.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;						
					return false;
				}
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q2 == 255) goto error;
			}
			while(current < baseline + 0.002);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(0, 0);
			Q2-=10;

			do 
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(2, Q3+=10);
				if(Q3 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q3.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;						
					return false;
				}
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q3 == 255) goto error;
			}
			while(current < baseline + 0.002);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(2, 0);	
			Q3-=10;
			Debug.WriteLine("Starting points  Q2:"+Q2+"  Q3:"+Q3);
			//MessageBox.Show("Starting points  Q2:"+Q2.ToString()+"  Q3:"+Q3.ToString());

			// add half of one driver's target current to Q2
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(0, Q2+=5);
				if(Q2 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q2.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;	
					return false;
				}
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q2 == 255) goto error;
			}
			while(current < baseline + driver_target/4);

			Q2-=5;
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(0, Q2+=1);
				if(Q2 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q2.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;					
					return false;
				}
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q2 == 255) goto error;
			}
			while(current < baseline + driver_target/4);
			progress.SetPercent(++counter/(float)16);

			float q2_current = current - baseline;
			Debug.WriteLine("Q2 Current: "+q2_current.ToString("f3")+"  Q2:"+Q2);
			//MessageBox.Show("Q2 Current: "+q2_current.ToString("f3")+"  Q2:"+Q2.ToString());

			// add half of one driver's target current to Q3
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(2, Q3+=5);
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q3 == 255) goto error;
			}
			while(current < baseline + q2_current + driver_target/4);
			Q3-=5;

			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(2, Q3+=1);
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q3 == 255) goto error;
			}
			while(current < baseline + q2_current + driver_target/4);
			progress.SetPercent(++counter/(float)16);

			float q3_current = current - baseline - q2_current;
			Debug.WriteLine("Q3 Current: "+q3_current.ToString("f3")+"  Q3:"+Q3);
			//MessageBox.Show("Q3 Current: "+q3_current.ToString("f3")+"  Q3:"+Q3.ToString());

			// add another half of one driver's target current to Q2
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(0, ++Q2);
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q2 == 255) goto error;
			}
			while(current < baseline + q3_current + driver_target/2);

			// tweak for just above target
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(0, --Q2);
				Thread.Sleep(100);
				current = ReadDriverBias(5);
				if(current > driver_limit) goto high_current;
			}
			while(current > baseline + q3_current + driver_target/2);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(0, ++Q2);
			current = ReadDriverBias(5);
			q2_current = current - q3_current - baseline;
			Debug.WriteLine("Q2 Current: "+q2_current.ToString("f3")+"  Q2:"+Q2);
			//MessageBox.Show("Q2 Current: "+q2_current.ToString("f3")+"  Q2:"+Q2.ToString());

			// add another half of one driver's target current to Q3
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(2, ++Q3);
				Thread.Sleep(50);
				current = ReadDriverBias(3);
				if(current > driver_limit) goto high_current;
				if(Q3 == 255) goto error;
			}
			while(current < baseline + q2_current + driver_target/2);

			// tweak for just above target
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(2, --Q3);
				Thread.Sleep(100);
				current = ReadDriverBias(5);
				if(current > driver_limit) goto high_current;
			}
			while(current > baseline + q2_current + driver_target/2);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(2, ++Q3);
			current = ReadDriverBias(5);
			q3_current = current - q2_current - baseline;
			Debug.WriteLine("Q3 Current: "+q3_current.ToString("f3")+"  Q3:"+Q3);
			//MessageBox.Show("Q3 Current: "+q3_current.ToString("f3")+"  Q3:"+Q3.ToString());

			// tweak fine controls if available
			uint pa_rev;
			FWC.GetPARev(out pa_rev);
			
			byte Q2_fine = 128, Q3_fine = 128;
			if((byte)(pa_rev >> 8) != 0) // not a beta radio
			{
				while(Math.Abs(q2_current - driver_target/2) > 0.005)
				{
					if(!progress.Visible) goto end;
					if(q2_current > driver_target/2) Q2_fine--;
					else Q2_fine++;
					flex5000DebugForm.SetPAPot(1, Q2_fine);
					Thread.Sleep(50);
					current = ReadDriverBias(5);
					q2_current = current - q3_current - baseline;
					if(current > driver_limit) goto high_current;
					if(Q2_fine == 255 || Q2_fine == 0) goto error;
				}
				
				progress.SetPercent(++counter/(float)16);
				Debug.WriteLine("Q2 Current: "+q2_current.ToString("f3")+"  Q2_fine:"+Q2_fine);
				//MessageBox.Show("Q2 Current: "+q2_current.ToString("f3")+"  Q2_fine:"+Q2_fine.ToString());

				while(Math.Abs(q3_current - driver_target/2) > 0.005)
				{
					if(!progress.Visible) goto end;
					if(q3_current > driver_target/2) Q3_fine--;
					else Q3_fine++;
					flex5000DebugForm.SetPAPot(3, Q3_fine);
					Thread.Sleep(50);
					current = ReadDriverBias(5);
					q3_current = current - q2_current - baseline;
					if(current > driver_limit) goto high_current;
					if(Q3_fine == 255 || Q3_fine == 0) goto error;
				}
				
				progress.SetPercent(++counter/(float)16);
				Debug.WriteLine("Q3 Current: "+q3_current.ToString("f3")+"  Q3_fine:"+Q3_fine);
				//MessageBox.Show("Q3 Current: "+q3_current.ToString("f3")+"  Q3_fine:"+Q3_fine.ToString());
			}
			else counter += 2;
			
			byte Q4=128, Q1=128;
			// find point where Q4 and Q1 just tickle the final bias current
			Thread.Sleep(50);
			baseline = ReadFinalBias(3, true);
			/*if(baseline > 0.100) 
			{
				Thread.Sleep(50);
				baseline = ReadFinalBias(3);
			}
			if(baseline > 0.100) goto error;*/
			//MessageBox.Show("Final baseline: "+baseline.ToString("f3"));
			Debug.WriteLine("baseline: "+baseline.ToString("f3"));
			for(int i=4; i<8; i++)
				flex5000DebugForm.SetPAPot(i, 128);

			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(4, Q4+=10);
				if(Q4 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q4.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;						
					return false;
				}
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q4 == 255) goto error;
			}
			while(current < baseline + 0.005);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(4, Q4-=10);

			do 
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(6, Q1+=10);
				if(Q1 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q1.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;					
					return false;
				}
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q1 == 255) goto error;
			}
			while(current < baseline + 0.005);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(6, Q1-=10);
			Debug.WriteLine("Starting points  Q4:"+Q4+"  Q1:"+Q1);
			//MessageBox.Show("Starting points  Q4:"+Q4.ToString()+"  Q1:"+Q1.ToString());

			// add half of one finals target current to Q4
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(4, Q4+=5);
				if(Q4 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q4.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;					
					return false;
				}
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q4 == 255) goto error;
			}
			while(current < baseline + final_target/4);
			Q4-=5;

			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(4, Q4+=1);
				if(Q4 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q4.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;					
					return false;
				}
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q4 == 255) goto error;
			}
			while(current < baseline + final_target/4);
			progress.SetPercent(++counter/(float)16);

			float q4_current = current - baseline;
			Debug.WriteLine("Q4 Current: "+q4_current.ToString("f3")+"  Q4:"+Q4);
			//MessageBox.Show("Q4 Current: "+q4_current.ToString("f3")+"  Q4:"+Q4.ToString());

			// add half of one finals target current to Q1
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(6, Q1+=5);
				if(Q1 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q1.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;					
					return false;
				}
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q1 == 255) goto error;
			}
			while(current < baseline + q4_current + final_target/4);
			Q1-=5;

			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(6, Q1+=1);
				if(Q1 < 128)
				{
					FWC.SetPABias(false);
					progress.Hide();
					MessageBox.Show("PA Bias Error: Unable to hit target bias on Q1.  Likely hardware problem.",
						"PA Bias Error",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					calibration_running = false;					
					return false;
				}
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q1 == 255) goto error;
			}
			while(current < baseline + q4_current + final_target/4);
			progress.SetPercent(++counter/(float)16);

			float q1_current = current - baseline - q4_current;
			Debug.WriteLine("Q1 Current: "+q1_current.ToString("f3")+"  Q1:"+Q1);
			//MessageBox.Show("Q1 Current: "+q1_current.ToString("f3")+"  Q1:"+Q1.ToString());

			// add another half of one finals target current to Q4
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(4, ++Q4);
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q4 == 255) goto error;
			}
			while(current < baseline + q1_current + final_target/2);

			// tweak for just above target
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(4, --Q4);
				Thread.Sleep(100);
                current = ReadFinalBias(5, true);
				if(current > final_limit) goto high_current;
			}
			while(current > baseline + q1_current + final_target/2);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(4, ++Q4);
            current = ReadFinalBias(5, true);
			q4_current = current - q1_current - baseline;
			Debug.WriteLine("Q4 Current: "+q4_current.ToString("f3")+"  Q4:"+Q4);	
			//MessageBox.Show("Q4 Current: "+q4_current.ToString("f3")+"  Q4:"+Q4.ToString());

			// add another half of one finals target current to Q1
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(6, ++Q1);
				Thread.Sleep(50);
                current = ReadFinalBias(3, true);
				if(current > final_limit) goto high_current;
				if(Q1 == 255) goto error;
			}
			while(current < baseline + q4_current + final_target/2);

			// tweak for just above target
			do
			{
				if(!progress.Visible) goto end;
				flex5000DebugForm.SetPAPot(6, --Q1);
				Thread.Sleep(100);
                current = ReadFinalBias(5, true);
				if(current > final_limit) goto high_current;
			}
			while(current > baseline + q4_current + final_target/2);
			progress.SetPercent(++counter/(float)16);
			flex5000DebugForm.SetPAPot(6, ++Q1);
            current = ReadFinalBias(5, true);
			q1_current = current - q4_current - baseline;
			Debug.WriteLine("Q1 Current: "+q1_current.ToString("f3")+"  Q1:"+Q1);
			//MessageBox.Show("Q1 Current: "+q1_current.ToString("f3")+"  Q1:"+Q1.ToString());

			// tweak fine controls if available
			byte Q4_fine = 128, Q1_fine = 128;
			if((byte)(pa_rev >> 8) != 0) // not a beta radio
			{
				while(Math.Abs(q4_current - final_target/2) > tol)
				{
					if(!progress.Visible) goto end;
					if(q4_current > final_target/2) Q4_fine--;
					else Q4_fine++;
					flex5000DebugForm.SetPAPot(5, Q4_fine);
					Thread.Sleep(50);
                    current = ReadFinalBias(5, true);
					q4_current = current - q1_current - baseline;
					if(current > final_limit) goto high_current;
					if(Q4_fine == 255 || Q4_fine == 0) goto error;
				}
				
				progress.SetPercent(++counter/(float)16);
				Debug.WriteLine("Q4 Current: "+q4_current.ToString("f3")+"  Q4_fine:"+Q4_fine);
				//MessageBox.Show("Q4 Current: "+q4_current.ToString("f3")+"  Q4_fine:"+Q4_fine.ToString());

				while(Math.Abs(q1_current - final_target/2) > tol)
				{
					if(!progress.Visible) goto end;
					if(q1_current > final_target/2) Q1_fine--;
					else Q1_fine++;
					flex5000DebugForm.SetPAPot(7, Q1_fine);
					Thread.Sleep(50);
                    current = ReadFinalBias(5, true);
					q1_current = current - q4_current - baseline;
					if(current > final_limit) goto high_current;
					if(Q1_fine == 255 || Q1_fine == 0) goto error;
				}
				
				progress.SetPercent(++counter/(float)16);
				Debug.WriteLine("Q1 Current: "+q1_current.ToString("f3")+"  Q1_fine:"+Q1_fine);
				//MessageBox.Show("Q1 Current: "+q1_current.ToString("f3")+"  Q1_fine:"+Q1_fine.ToString());
			}
			else counter += 2;

			ret_val = true;
		end:
			FWC.SetPABias(false);
            tx_cal = false;
			progress.Hide();			
			if(progress.Text != "")
			{
				for(int i=0; i<8; i++)
					pa_bias_table[index][i] = flex5000DebugForm.GetPAPot(i);
			}
			return ret_val;
		high_current:
			FWC.SetPABias(false);
            tx_cal = false;
			progress.Hide();
			MessageBox.Show("Error in PA Bias Calibration: High Current Detected.",
				"PA Bias: High Current Detected",
				MessageBoxButtons.OK,
				MessageBoxIcon.Error);
			return false;	
		error:
			FWC.SetPABias(false);
            tx_cal = false;
			progress.Hide();
			MessageBox.Show("Error in PA Bias Calibration: Unable to reach current.",
				"PA Bias: Current Error",
				MessageBoxButtons.OK,
				MessageBoxIcon.Error);
			return false;
		}

		public float ReadDriverBias(int num_avg)
		{
			int val;
			int sum=0;
			for(int i=0; i<num_avg; i++)
			{
				FWC.ReadPAADC(1, out val);
				sum += val;
				if(i != num_avg-1) Thread.Sleep(100);
			}
			sum /= num_avg;
			float current = (float)sum/4096*2.5f; // 50 milliohm
			if(((byte)(FWCEEPROM.PARev>>8)) == 0) current /= 2; // 100 milliohm
			flex5000DebugForm.SetADCText(current.ToString("f3")+" A");
			if(flex5000FinalTestForm != null) 
				flex5000FinalTestForm.UpdateDriverBiasDebug(current);
			return current;
		}

		public float ReadFinalBias(int num_avg, bool show_debug)
		{
			int val;
			int sum=0;
			for(int i=0; i<num_avg; i++)
			{
				FWC.ReadPAADC(0, out val);
				sum += val;
				if(i != num_avg-1) Thread.Sleep(100);
			}
			sum /= num_avg;
			float current = (float)sum/4096*2.5f*10;
			flex5000DebugForm.SetADCText(current.ToString("f3")+" A");
			if(flex5000FinalTestForm != null && show_debug) 
				flex5000FinalTestForm.UpdateFinalBiasDebug(current);
			return current;
		}

		public double ReadFwdPower(int num_avg)
		{
			if(current_model != Model.FLEX5000 && current_model != Model.FLEX3000) return 0.0;
			int val;
			int sum=0;
			int chan = 0;
			switch(current_model)
			{
				case Model.FLEX5000:
					chan = 7;
					break;
				case Model.FLEX3000:
					chan = 5;
					break;
			}

			for(int i=0; i<num_avg; i++)
			{
				FWC.ReadPAADC(chan, out val);
				sum += val;
				if(i != num_avg-1) Thread.Sleep(200);
			}
			sum /= num_avg;
			
			return FWCPAPower(sum);
		}

		public float ReadFwdPowerVolts(int num_avg)
		{
			if(current_model != Model.FLEX5000 && current_model != Model.FLEX3000) return 0.0f;
			int val;
			int sum=0;
			int chan = 0;
			switch(current_model)
			{
				case Model.FLEX5000:
					chan = 7;
					break;
				case Model.FLEX3000:
					chan = 5;
					break;
			}

			for(int i=0; i<num_avg; i++)
			{
				FWC.ReadPAADC(chan, out val);
				sum += val;
				if(i != num_avg-1) Thread.Sleep(100);
			}
			sum /= num_avg;
			float volts = (float)sum/4096*2.5f;
			return volts;
		}

		public float ReadRefPowerVolts(int num_avg)
		{
			if(current_model != Model.FLEX5000 && current_model != Model.FLEX3000) return 0.0f;
			int val;
			int sum=0;
			int chan = 0;
			switch(current_model)
			{
				case Model.FLEX5000:
					chan = 6;
					break;
				case Model.FLEX3000:
					chan = 4;
					break;
			}

			for(int i=0; i<num_avg; i++)
			{
				FWC.ReadPAADC(chan, out val);
				sum += val;
				if(i != num_avg-1) Thread.Sleep(100);
			}
			sum /= num_avg;
			float volts = (float)sum/4096*2.5f;
			return volts;
		}

		public double ReadRefPower(int num_avg)
		{
			if(current_model != Model.FLEX5000 && current_model != Model.FLEX3000) return 0.0;
			int val;
			int sum=0;
			int chan = 0;
			switch(current_model)
			{
				case Model.FLEX5000:
					chan = 6;
					break;
				case Model.FLEX3000:
					chan = 4;
					break;
			}

			for(int i=0; i<num_avg; i++)
			{
				FWC.ReadPAADC(chan, out val);
				sum += val;
				if(i != num_avg-1) Thread.Sleep(200);
			}
			sum /= num_avg;

			return FWCPAPower(sum)*swr_table[(int)tx_band];
		}

        public float tx_carrier_min = float.MaxValue;
		public float[] min_tx_carrier = new float[(int)Band.LAST];
		public bool CalibrateTXCarrier(double freq, Progress progress, bool suppress_errors)
		{
			if(!(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)))
			{
				progress.Text = "";
				progress.Hide();
				return false;
			}

			if(!chkPower.Checked)
			{
				MessageBox.Show("Power must be on in order to calibrate TX Carrier.", "Power Is Off",
					MessageBoxButtons.OK, MessageBoxIcon.Stop);
				calibration_running = false;
				progress.Text = "";
				return false;
			}

			HiPerfTimer t1 = new HiPerfTimer();
			t1.Start();
			HiPerfTimer t2 = new HiPerfTimer();

			bool ret_val = false;
			calibration_running = true;
			progress.SetPercent(0.0f);

			// Setup hardware
			FWC.SetQSD(true);
			//Thread.Sleep(50);
			FWC.SetQSE(true);
			//Thread.Sleep(50);
			FWC.SetTR(true);
			//Thread.Sleep(50);
			FWC.SetSig(true);
			//Thread.Sleep(50);
			FWC.SetGen(false);
			//Thread.Sleep(50);
			FWC.SetTest(true);
			//Thread.Sleep(50);
			FWC.SetTXMon(false);
			//Thread.Sleep(50);
			FWC.SetPDrvMon(true);

			bool duplex = full_duplex;
			FullDuplex = true;

			bool spur_red = chkSR.Checked;					// save current spur reduction setting
			chkSR.Checked = false;							// turn spur reduction off

			bool polyphase = setupForm.Polyphase;			// save current polyphase setting
			setupForm.Polyphase = false;					// disable polyphase

			int dsp_buf_size = setupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
			setupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 4096

            bool rx2_on = chkRX2.Checked;
            chkRX2.Checked = false;

			// setup display mode
			string display = comboDisplayMode.Text;
			comboDisplayMode.Text = "Spectrum";

			// setup dsp mode
			DSPMode dsp_mode = RX1DSPMode;
			RX1DSPMode = DSPMode.DSB;

            /*bool rx1_preamp = chkRX1Preamp.Checked;
            chkRX1Preamp.Checked = true;*/
            PreampMode preamp = rx1_preamp_mode;
            switch (current_model)
            {
                case Model.FLEX5000:
                    RX1PreampMode = PreampMode.HIGH;
                    break;
                case Model.FLEX3000:
                    if (BandByFreq(freq, -1, true, current_region) == Band.B160M)
                        RX1PreampMode = PreampMode.LOW;
                    else RX1PreampMode = PreampMode.HIGH;
                    break;
            }

			// setup filter
			Filter filter = RX1Filter;
			UpdateRX1Filters(-1000, 1000);

			double vfoa = VFOAFreq;
			VFOAFreq = freq;

			double vfob = VFOBFreq;
			VFOBFreq = freq;

			// setup transmit to be carrier only
			Audio.TXInputSignal = Audio.SignalSource.SILENCE;

			// default pots to force carrier to show
            Thread.Sleep(100);
            FWC.SetTRXPot(0x00FF00FF);
            Thread.Sleep(100);
            FWC.SetTRXPot(0x00FF00FF);
            Thread.Sleep(100);
            /*for(int i=1; i<4; i++)
				FWC.TRXPotSetRDAC(i, 0);*/
			
			// find carrier peak
			float[] a = new float[Display.BUFFER_SIZE];
			for(int i=0; i<5; i++)
			{
                
				calibration_mutex.WaitOne();
				fixed(float* ptr = &a[0])
					DttSP.GetSpectrum(0, ptr);// get the spectrum values
				calibration_mutex.ReleaseMutex();
				Thread.Sleep(50);
			}

			// find peak bin
			int peak_bin = 2048+(int)(0.0/sample_rate1*4096.0);
			float max_signal = float.MinValue;
			float sum = 0.0f;
			int filt_low_bin = 2048+(int)(-1000.0/sample_rate1*4096.0);
			int filt_high_bin = 2048+(int)(1000.0/sample_rate1*4096.0);
			for(int i=0; i<20; i++)
			{                
				calibration_mutex.WaitOne();
				fixed(float* ptr = &a[0])
					DttSP.GetSpectrum(0, ptr);// get the spectrum values
				calibration_mutex.ReleaseMutex();

				if(i == 19)
				{
					for(int j=0; j<Display.BUFFER_SIZE; j++)
					{
						if(a[j] > max_signal)
						{
							max_signal = a[j];
							peak_bin = j;
						}
					}
				}
				for(int j=filt_low_bin; j<filt_high_bin; j++)
				{
					if(j<peak_bin-8 || j > peak_bin+8)
						sum += a[j];
				}
				Thread.Sleep(100);
			}
			float noise_floor = (sum / (float)(((filt_high_bin-filt_low_bin)-17)*20));
            Debug.WriteLine("noise_floor: " + (noise_floor + Display.RX1DisplayCalOffset + Display.RX1PreampOffset).ToString("f1")+ " peak_bin:" + peak_bin);

			//int c0_step=1, c1_step=1, c2_step=1, c3_step=1;  //old
            int c0_step = 4, c1_step = 4, c2_step = 4, c3_step = 4;  //new
			int c0_global_min=128, c1_global_min=128, c2_global_min=128, c3_global_min=128;
			int c0_index=128, c1_index=128, c2_index=128, c3_index=128;
			int c0_dir=1, c1_dir=1, c2_dir=1, c3_dir=1;
			int c0_count=1, c1_count=1, c2_count=1, c3_count=1;
			float global_min_value = float.MaxValue;
			float start = 0.0f;
			int wrong_direction_count;
			int switch_direction_count;

			if(max_signal < noise_floor + 5.0)
			{
				if(!suppress_errors)
				{
					MessageBox.Show("Carrier not found (max signal < noise floor + 5dB).  Please try again.\n"+
						DateTime.Now.ToShortTimeString(),
						"Carrier Not Found",
						MessageBoxButtons.OK, MessageBoxIcon.Stop);                    
				}
				calibration_running = false;
				//progress.Text = "";

                    goto end2;
			}

            for (int i = 0; i < 4; i++)
            {
                flex5000DebugForm.SetTRXPot(i, 128);
                FWC.TRXPotSetRDAC(i, 128);
            }

			float tol = 10.0f;
			bool first_time;
			// null 3 of 4 pots (leave first pot alone...pot index 0)
			bool progressing = true;
			while(progressing)
			{				
				//find minimum of the peak signal over the range of C1 settings
				float min_signal = float.MaxValue;
				max_signal = float.MinValue;
				wrong_direction_count = switch_direction_count = 0;
				first_time = true;
				t2.Start();
				for(int i=c1_global_min; i>=0 && i<=255; i+=(c1_step*c1_dir))
				{
					flex5000DebugForm.SetTRXPot(1, (byte)i);
					FWC.TRXPotSetRDAC(1, i);
					Thread.Sleep(200);

					sum = 0.0f;
					int num_avg = (int)Math.Min(4, (1.0/(c1_step/8.0)));
					for(int j=0; j<num_avg; j++)
					{
						calibration_mutex.WaitOne();
						fixed(float* ptr = &a[0])
							DttSP.GetSpectrum(0, ptr);
						calibration_mutex.ReleaseMutex();
						sum += a[peak_bin];
						if(j<num_avg-1) Thread.Sleep(50);
					}
					sum /= num_avg;
					a[peak_bin] = sum;

					if(a[peak_bin] < min_signal)			// if carrier is less than minimum
					{
						min_signal = a[peak_bin];
						c1_index = i;
						if(min_signal < global_min_value)
						{
							global_min_value = a[peak_bin];
							c1_global_min = c1_index;
						}
					}

					if(first_time)
					{
						first_time = false;
						start = a[peak_bin];
						max_signal = a[peak_bin];
					}
					else
					{
						if(a[peak_bin] > max_signal && a[peak_bin] > start+1.0)
						{
							max_signal = a[peak_bin];
							wrong_direction_count++; Debug.Write("W");
							if(wrong_direction_count > 1)
							{
								wrong_direction_count = 0;
								if(++switch_direction_count > 1)
								{
									// handle switched direction twice
									c1_step /= 2; 
									if(c1_step < 1) c1_step = 1;
									c1_dir *= -1;	
									Debug.WriteLine("c1 exit dir - c1_step:"+c1_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
									break;
								}

								min_signal = start;
								max_signal = start;
								c1_dir *= -1;
								i = c1_global_min;
							}
						}
						else
						{
							if(min_signal > noise_floor + 20.0) tol = 3.0f;
							else tol = 5.0f;
							if (min_signal < start-3.0 && a[peak_bin] > min_signal + tol) 
							{
								c1_step /= 2;
								if(c1_step < 1) c1_step = 1;
								c1_dir *= -1;	
								Debug.WriteLine("c1 thresh - c1_step:"+c1_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
								break;
							}
						}
					}

					if(!progress.Visible) goto end;
					else
					{
						t1.Stop();
						if(t1.Duration > 120.0)
						{
							/*MessageBox.Show("TX Carrier Calibration Failed.  Values have been returned to previous settings.\n"+
								DateTime.Now.ToShortTimeString(),
								"TX Carrier Failed",
								MessageBoxButtons.OK,
								MessageBoxIcon.Error);*/
							goto end;
						}
						else progress.SetPercent((float)(t1.Duration/45.0));
					}
				}

				t2.Stop();
				c1_count++;
				Debug.WriteLine("t2 c1("+c1_count+"): "+t2.Duration);

				flex5000DebugForm.SetTRXPot(1, (byte)c1_global_min);
				FWC.TRXPotSetRDAC(1, c1_global_min);

				if(!progressing) break;

				//find minimum of the peak signal over the range of C2 settings
				min_signal = float.MaxValue;
				max_signal = float.MinValue;
				wrong_direction_count = switch_direction_count = 0;
				first_time = true;
				t2.Start();
				for(int i=c2_global_min; i>=0 && i<=255; i+=(c2_step*c2_dir))
				{
					flex5000DebugForm.SetTRXPot(2, (byte)i);
					FWC.TRXPotSetRDAC(2, i);
					Thread.Sleep(200);

					sum = 0.0f;
					int num_avg = (int)Math.Max(4, (1.0/(c2_step/8.0)));
					for(int j=0; j<num_avg; j++)
					{
						calibration_mutex.WaitOne();
						fixed(float* ptr = &a[0])
							DttSP.GetSpectrum(0, ptr);
						calibration_mutex.ReleaseMutex();
						sum += a[peak_bin];
						if(j<num_avg-1) Thread.Sleep(50);
					}
					sum /= num_avg;
					a[peak_bin] = sum;

					if(a[peak_bin] < min_signal)			// if carrier is less than minimum
					{
						min_signal = a[peak_bin];
						c2_index = i;
						if(min_signal < global_min_value)
						{
							global_min_value = a[peak_bin];
							c2_global_min = c2_index;
						}
					}		

					if(first_time)
					{
						first_time = false;
						start = a[peak_bin];
						max_signal = a[peak_bin];
					}
					else
					{
						if(a[peak_bin] > max_signal && a[peak_bin] > start+1.0)
						{
							max_signal = a[peak_bin];
							wrong_direction_count++; Debug.Write("W");
							if(wrong_direction_count > 1)
							{
								wrong_direction_count = 0;
								if(++switch_direction_count > 1)
								{
									// handle switched direction twice
									c2_step /= 2; 
									if(c2_step < 1) c2_step = 1;
									c2_dir *= -1;	
									Debug.WriteLine("c2 exit dir - c2_step:"+c2_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
									break;
								}

								min_signal = start;
								max_signal = start;
								c2_dir *= -1;
								i = c2_global_min;
							}
						}
						else
						{
							if(min_signal > noise_floor + 20.0) tol = 3.0f;
							else tol = 5.0f;
							if (min_signal < start-3.0 && a[peak_bin] > min_signal + tol) 
							{
								c2_step /= 2;
								if(c2_step < 1) c2_step = 1;
								c2_dir *= -1;	
								Debug.WriteLine("c2 thresh - c2_step:"+c2_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
								break;
							}
						}
					}

					if(!progress.Visible) goto end;
					else
					{
						t1.Stop();
						if(t1.Duration > 120.0)
						{
							/*MessageBox.Show("TX Carrier Calibration Failed.  Values have been returned to previous settings.\n"+
								DateTime.Now.ToShortTimeString(),
								"TX Carrier Failed",
								MessageBoxButtons.OK,
								MessageBoxIcon.Error);*/
							goto end;
						}
						else progress.SetPercent((float)(t1.Duration/45.0));
					}
				}

				t2.Stop();
				c2_count++;
				Debug.WriteLine("t2 c2("+c2_count+"): "+t2.Duration);

				flex5000DebugForm.SetTRXPot(2, (byte)c2_global_min);
				FWC.TRXPotSetRDAC(2, c2_global_min);

				if(!progressing) break;

				//find minimum of the peak signal over the range of C3 settings
				min_signal = float.MaxValue;
				max_signal = float.MinValue;
				wrong_direction_count = switch_direction_count = 0;
				first_time = true;
				t2.Start();
				for(int i=c3_global_min; i>=0 && i<=255; i+=(c3_step*c3_dir))
				{
					flex5000DebugForm.SetTRXPot(3, (byte)i);
					FWC.TRXPotSetRDAC(3, i);
					Thread.Sleep(200);

					sum = 0.0f;
					int num_avg = (int)Math.Min(4, (1.0/(c3_step/8.0)));
					for(int j=0; j<num_avg; j++)
					{
						calibration_mutex.WaitOne();
						fixed(float* ptr = &a[0])
							DttSP.GetSpectrum(0, ptr);
						calibration_mutex.ReleaseMutex();
						sum += a[peak_bin];
						if(j<num_avg-1) Thread.Sleep(50);
					}
					sum /= num_avg;
					a[peak_bin] = sum;

					if(a[peak_bin] < min_signal)			// if carrier is less than minimum
					{
						min_signal = a[peak_bin];
						c3_index = i;
						if(min_signal < global_min_value)
						{
							global_min_value = a[peak_bin];
							c3_global_min = c3_index;
						}
					}
		
					if(first_time)
					{
						first_time = false;
						start = a[peak_bin];
						max_signal = a[peak_bin];
					}
					else
					{
						if(a[peak_bin] > max_signal && a[peak_bin] > start+1.0)
						{
							max_signal = a[peak_bin];
							wrong_direction_count++; Debug.Write("W");
							if(wrong_direction_count > 1)
							{
								wrong_direction_count = 0;
								if(++switch_direction_count > 1)
								{
									// handle switched direction twice
									c3_step /= 2; 
									if(c3_step < 1) c3_step = 1;
									c3_dir *= -1;	
									Debug.WriteLine("c3 exit dir - c3_step:"+c3_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
									break;
								}

								min_signal = start;
								max_signal = start;
								c3_dir *= -1;
								i = c3_global_min;
							}
						}
						else
						{
							if(min_signal > noise_floor + 20.0) tol = 3.0f;
							else tol = 5.0f;
							if (min_signal < start-3.0 && a[peak_bin] > min_signal + tol) 
							{
								c3_step /= 2;
								if(c3_step < 1) c3_step = 1;
								c3_dir *= -1;	
								Debug.WriteLine("c3 thresh - c3_step:"+c3_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
								break;
							}
						}
					}

					if(!progress.Visible) goto end;
					else
					{
						t1.Stop();
						if(t1.Duration > 120.0)
						{
							/*MessageBox.Show("TX Carrier Calibration Failed.  Values have been returned to previous settings.\n"+
								DateTime.Now.ToShortTimeString(),
								"TX Carrier Failed",
								MessageBoxButtons.OK,
								MessageBoxIcon.Error);*/
							goto end;
						}
						else progress.SetPercent((float)(t1.Duration/45.0));
					}					
				}
                
				t2.Stop();
				c3_count++;
				Debug.WriteLine("t2 c3("+c3_count+"): "+t2.Duration);

				flex5000DebugForm.SetTRXPot(3, (byte)c3_global_min);
				FWC.TRXPotSetRDAC(3, c3_global_min);

				if(!progressing) break;
				
				//find minimum of the peak signal over the range of C1 settings
				min_signal = float.MaxValue;
				max_signal = float.MinValue;
				wrong_direction_count = switch_direction_count = 0;
				first_time = true;
				t2.Start();
				for(int i=c0_global_min; i>=0 && i<=255; i+=(c0_step*c0_dir))
				{
					flex5000DebugForm.SetTRXPot(0, (byte)i);
					FWC.TRXPotSetRDAC(0, i);
					Thread.Sleep(200);

					sum = 0.0f;
					int num_avg = (int)Math.Min(4, (1.0/(c0_step/8.0)));
					for(int j=0; j<num_avg; j++)
					{
						calibration_mutex.WaitOne();
						fixed(float* ptr = &a[0])
							DttSP.GetSpectrum(0, ptr);
						calibration_mutex.ReleaseMutex();
						sum += a[peak_bin];
						if(j<num_avg-1) Thread.Sleep(50);
					}
					sum /= num_avg;
					a[peak_bin] = sum;

					if(a[peak_bin] < min_signal)			// if carrier is less than minimum
					{
						min_signal = a[peak_bin];
						c0_index = i;
						if(min_signal < global_min_value)
						{
							global_min_value = a[peak_bin];
							c0_global_min = c0_index;
						}
					}

					if(first_time)
					{
						first_time = false;
						start = a[peak_bin];
						max_signal = a[peak_bin];
					}
					else
					{
						if(a[peak_bin] > max_signal && a[peak_bin] > start+1.0)
						{
							max_signal = a[peak_bin];
							wrong_direction_count++; Debug.Write("W");
							if(wrong_direction_count > 1)
							{
								wrong_direction_count = 0;
								if(++switch_direction_count > 1)
								{
									// handle switched direction twice
									c0_step /= 2; 
									if(c0_step < 1) c0_step = 1;
									c0_dir *= -1;	
									Debug.WriteLine("c0 exit dir - c0_step:"+c0_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
									break;
								}

								min_signal = start;
								max_signal = start;
								c0_dir *= -1;
								i = c0_global_min;
							}
						}
						else
						{
							if(min_signal > noise_floor + 20.0) tol = 3.0f;
							else tol = 5.0f;
							if (min_signal < start-3.0 && a[peak_bin] > min_signal + tol) 
							{
								c0_step /= 2;
								if(c0_step < 1) c0_step = 1;
								c0_dir *= -1;	
								Debug.WriteLine("c0 thresh - c0_step:"+c0_step.ToString("f4")+"  distance:"+(global_min_value-noise_floor).ToString("f1"));
								break;
							}
						}
					}

					if(!progress.Visible) goto end;
					else
					{
						t1.Stop();
						if(t1.Duration > 120.0)
						{
							/*MessageBox.Show("TX Carrier Calibration Failed.  Values have been returned to previous settings.\n"+
								DateTime.Now.ToShortTimeString(),
								"TX Carrier Failed",
								MessageBoxButtons.OK,
								MessageBoxIcon.Error);*/
							goto end;
						}
						else progress.SetPercent((float)(t1.Duration/45.0));
					}
				}

				t2.Stop();
				c0_count++;
				Debug.WriteLine("t2 c0("+c0_count+"): "+t2.Duration);

				flex5000DebugForm.SetTRXPot(0, (byte)c0_global_min);
				FWC.TRXPotSetRDAC(0, c0_global_min);

				if(!progressing) break;

				//if(c0_count > 2 && c1_count > 2 && c2_count > 2 && c3_count > 2)//old
                if (c0_count > 4 && c1_count > 4 && c2_count > 4 && c3_count > 4)//new
					progressing = false;
			}
			ret_val = true;
			Debug.WriteLine("Carrier Null: ["+c0_global_min+", "+c1_global_min+", "+c2_global_min+", "+c3_global_min+"]");

			end:
				if(!progress.Visible) progress.Text = "";
				else
				{
					/*flex5000DebugForm.SetTRXPot(0, (byte)c0_global_min);
					flex5000DebugForm.SetTRXPot(1, (byte)c1_global_min);
					flex5000DebugForm.SetTRXPot(2, (byte)c2_global_min);
					flex5000DebugForm.SetTRXPot(3, (byte)c3_global_min);*/

                    uint val = (uint)((c0_global_min & 0xFF) << 24 |
                        (c1_global_min & 0xFF) << 16 |
                        (c2_global_min & 0xFF) << 8 |
                        (c3_global_min & 0xFF) << 0);

                    FWC.SetTRXPot(val);

                    double f = 0.0;
                    if(tx_xvtr_index < 0)
                        f = Math.Round(freq, 3);
                    else
                        f = Math.Round(xvtrForm.TranslateFreq(freq), 3);

                    double f2 = 0.0;
                    FindNearestKey<uint>(f, tx_carrier_cal, out f2);
                    if (Math.Abs(f2 - f) < 0.001)
                        f = f2;

                    tx_carrier_cal[f] = val;
				}
		end2:
			progress.Hide();
			// return output tone
			Audio.TXInputSignal = Audio.SignalSource.RADIO;

            tx_carrier_min = global_min_value + Display.RX1DisplayCalOffset + Display.RX1PreampOffset;
			min_tx_carrier[(int)tx_band] = global_min_value + Display.RX1DisplayCalOffset + Display.RX1PreampOffset;

			// return hardware to normal operation
			//Thread.Sleep(50);
			FWC.SetQSD(true);
			//Thread.Sleep(50);
			FWC.SetQSE(false);	
			//Thread.Sleep(50);
			FWC.SetTR(false);
			//Thread.Sleep(50);
			FWC.SetSig(false);
			//Thread.Sleep(50);
			FWC.SetGen(false);
			//Thread.Sleep(50);
			FWC.SetTest(false);
			//Thread.Sleep(50);
			FWC.SetTXMon(false);
			//Thread.Sleep(50);
			FWC.SetPDrvMon(false);
			//Thread.Sleep(50);

            if (current_model == Model.FLEX3000)
                FWC.SetFan(false);

			setupForm.Polyphase = polyphase;
			setupForm.DSPPhoneRXBuffer = dsp_buf_size;
			chkSR.Checked = spur_red;
			FullDuplex = duplex;

			VFOAFreq = vfoa;
			VFOBFreq = vfob;

			comboDisplayMode.Text = display;

			RX1DSPMode = dsp_mode;
			RX1Filter = filter;
			RX1PreampMode = preamp;

            chkRX2.Checked = rx2_on;

			calibration_running = false;
			return ret_val;
		}

		public void CallCalSigGen()
		{
			p = new Progress("Calibrate Signal Generator");
			Thread t = new Thread(new ThreadStart(CalSigGen));
			t.Name = "Calibrate Signal Generator Thread";
			t.IsBackground = true;
			t.Priority = ThreadPriority.Normal;
			t.Start();
			p.Show();
		}

		private void CalSigGen()
		{
			if(!(fwc_init && current_model == Model.FLEX5000))
			{
				p.Hide();
				return;
			}

			double low = 1.0;
			double high = 65.0;
			double step = 0.1;
			int num_steps = (int)((high-low)/step);
			int count = 0;
			StreamWriter sw = new StreamWriter(app_data_path+"sig_gen.csv"); // "\\sig_gen.csv"

            FullDuplex = true;
			FWC.SetSig(true);
			FWC.SetGen(true);
			FWC.SetTest(true);
			RX1DSPMode = DSPMode.USB;
			RX1Filter = Filter.VAR2;
			UpdateRX1Filters(480, 520);

			for(double i = low; i<=high; i+=step)
			{
				VFOAFreq = i;
				//Thread.Sleep(20);
				VFOBFreq = i+0.0005;
				Thread.Sleep(200);
				float sum = 0.0f;
				for(int j=0; j<10; j++)
				{
					sum += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
					sum = sum +
						rx1_meter_cal_offset +
						rx1_preamp_offset[(int)rx1_preamp_mode] +
						rx1_filter_size_cal_offset;
					Thread.Sleep(50);
				}
				sum /= 10;

				sw.WriteLine(i.ToString("f6")+","+sum.ToString("f3"));
				p.SetPercent(count++/(float)num_steps);
				if(!p.Visible) break;
			}
			sw.Close();
			FWC.SetSig(false);
			FWC.SetGen(false);
			FWC.SetTest(false);
			p.Hide();
		}


        //====================================================================================
        // ke9ns  setup->general->calibration->freq cal->START (comes here as a thread in setup.cs)
        public bool CalibrateFreq(float freq, Progress progress, bool suppress_errors)
        {
            bool retval = false;
         
            calibration_running = true;

            if (!chkPower.Checked)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Power must be on in order to calibrate Frequency.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                return false;
            }
            
            string vfo_freq_text = txtVFOAFreq.Text;		// save current frequency

            bool polyphase = setupForm.Polyphase;			// save current polyphase setting
            setupForm.Polyphase = false;					// disable polyphase

            int dsp_buf_size = setupForm.DSPPhoneRXBuffer;	// save current DSP buffer size
            setupForm.DSPPhoneRXBuffer = 4096;				// set DSP Buffer Size to 4096

            Filter filter = RX1Filter;						// save current filter

            DSPMode dsp_mode = rx1_dsp_mode;				// save current demod mode
            RX1DSPMode = DSPMode.SAM;						// set DSP to AM

            bool rit_on = chkRIT.Checked;					// save current RIT state
            chkRIT.Checked = false;							// set RIT to Off

            int rit_value = (int)udRIT.Value;				// save current RIT value
            udRIT.Value = 0;								// set RIT Value to 0

            Filter am_filter = RX1Filter;					// save am filter
            //RX1Filter = Filter.F5;						// set filter to 6600Hz
            RX1Filter = Filter.F10;							// set filter to 2400Hz

            VFOAFreq = freq;								// set frequency to passed value (in mhz  10.000000)

            progress.SetPercent(0.0f);
            
            double old_clock = FWCDDSClockCorrection;
            setupForm.ClockOffset = 0;
            FWCDDSClockCorrection = 0;

            Thread.Sleep(200);
            //int ret = 0;


            //------------------------------------------------------------
            // ke9ns First find the DDS offset freq value based on the peak signal spot in the spectrum

            float[] buf = new float[Display.BUFFER_SIZE];
            float[] sum = new float[Display.BUFFER_SIZE];

            for (int i = 0; i < 10; i++)
            {
                calibration_mutex.WaitOne();

                fixed (float* ptr = &buf[0])            // ke9ns prevent garbage collecion from moving this pointer data
                {
                    DttSP.GetSpectrum(0, ptr);      // get the spectrum values
                }

                for (int j = 0; j < Display.BUFFER_SIZE; j++)
                {
                    sum[j] += buf[j];
                }

                calibration_mutex.ReleaseMutex();

                Thread.Sleep(50);
            }

            float max = float.MinValue;
            
            int max_index = 0;

            for (int i = 0; i < Display.BUFFER_SIZE; i++)						// find the maximum signal
            {
               
                if (sum[i] > max)
                {
                    max = sum[i];
                    max_index = i;
                }
            }

            /*avg -= max;
            avg /= (high - low - 1);

            if(max < (avg + 30))
            {
                MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                    "Please use a larger signal for frequency calibration.",
                    "Calibration Error - Weak Signal",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                retval = false;
                goto end;
            }*/

            // Calculate the difference between the known signal and the measured signal
            float diff = (float)((double)sample_rate1 / Display.BUFFER_SIZE * (Display.BUFFER_SIZE / 2 - max_index));

            // Calculate the DDS offset
            int offset = 0;
            switch (current_model)
            {
                case Model.FLEX5000:
                    offset = (int)(500.0 / freq * diff);
                    break;
                case Model.FLEX3000:
                    offset = (int)(499.201 / freq * diff);
                    break;
                case Model.FLEX1500:
                    if (flex_1500_xref)
                        offset = (int)(400.0 / freq * diff);
                    else offset = (int)(384.0 / freq * diff);
                    break;
                default:
                    offset = (int)(200.0 / freq * diff);
                    break;
            }

            Debug.Write("offset1: " + offset);

            if (Math.Abs(offset) > 40000)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Peak is outside valid range.",
                        "Calibration Error - Range",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
                retval = false;
                goto end;
            }

            if (Math.Abs(offset) > 20000)
            {
                if (!suppress_errors)
                {
                    DialogResult dr = MessageBox.Show("This value is outside the specifications of the oscillator.",
                        "Outside Specifications",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error );
                }
                retval = false;
                goto end;                
            }            

            setupForm.ClockOffset = offset;				// Offset the clock based on the difference
            Thread.Sleep(200);


            //--------------------------------------------------------------------------
            // ke9ns ?? get OFFSET2 by PLL, adds to the OFFSET1 (found above)

            float a, b;
            DttSP.GetSAMPLLvals(0, 0, &a, &b);     // ke9ns save original a and b values to put back after you getfreq


            Debug.WriteLine("before CalibrateFreq a=proporational, b=derivative " + a + " , " + b + ", freq: "+freq);
            
            float a1 = a * 0.1f;
            float b1 = 0.25f * a1 * a1;

            DttSP.SetSAMPLLvals(0, 0, a1, b1);     // ke9ns a1 = 10% of original value, b1= 25% of a1^2
                                                   // Loop filter constants: Proportional and derivative?

            Debug.WriteLine("after CalibrateFreq a=proporational, b=derivative " + a + " , " + b);


            Thread.Sleep(200);

            int counter = 0;
            int samples = 200;
            float sum1 = 0.0f;

            for (int i = 0; i < samples; i++)                     // ke9ns loop 200 times
            {
                float temp;

                DttSP.GetSAMFreq(0, 0, &temp);                   // ke9ns ?? returns a freq

                Debug.WriteLine("CalibrateFreq temp " + i + " , "+ temp);

                sum1 += temp;
                Thread.Sleep(50);
                progress.SetPercent((float)((float)++counter / samples));
            }

            Debug.WriteLine("CalibrateFreq sum1 " + sum1 );

            diff = -(float)((sum1 / samples) * sample_rate1 / (2 * Math.PI));


            DttSP.SetSAMPLLvals(0, 0, a, b);                    // reset PLL values back when done

            // Calculate the DDS offset
            offset = 0;
            switch (current_model)
            {
                case Model.FLEX5000:
                    offset = (int)(500.0 / freq * diff);
                    break;
                case Model.FLEX3000:
                    offset = (int)(499.201 / freq * diff);
                    break;
                case Model.FLEX1500:
                    if (flex_1500_xref)
                        offset = (int)(400.0 / freq * diff);
                    else offset = (int)(384.0 / freq * diff);
                    break;
                default:
                    offset = (int)(200.0 / freq * diff);
                    break;
            }

            Debug.WriteLine("  offset2: " + offset);

            int current_clock = setupForm.ClockOffset;

            if (Math.Abs(current_clock + offset) > 40000 || Math.Abs(current_clock - offset) > 40000)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Peak is outside valid range.",
                        "Calibration Error - Range",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
                retval = false;
                goto end;
            }

            if (Math.Abs(current_clock + offset) > 20000 || Math.Abs(current_clock - offset) > 20000)
            {
                if (!suppress_errors)
                {
                    DialogResult dr = MessageBox.Show("This value is outside the specifications of the oscillator.",
                        "Outside Specifications",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }                 
                retval = false;
                goto end;
            }

            setupForm.ClockOffset += offset;				// Offset the clock based on the difference            
            retval = true;

            //----------------------------------------------------------

        end:
            //SetupForm.RXOnly = rx_only;					// restore RX Only setting
            RX1Filter = am_filter;							// restore AM filter
            RX1DSPMode = dsp_mode;							// restore DSP mode
            RX1Filter = filter;								// restore filter
            chkRIT.Checked = rit_on;						// restore RIT state
            RITValue = rit_value;							// restore RIT value
            VFOAFreq = double.Parse(vfo_freq_text);			// restore frequency ke9ns was float
            setupForm.DSPPhoneRXBuffer = dsp_buf_size;		// restore DSP buffer size
            setupForm.Polyphase = polyphase;				// restore polyphase
            calibration_running = false;
            progress.Hide();
            return retval;

        } //CalibrateFreq




        public bool CalibrateLevel(float level, float freq, Progress progress, bool suppress_errors)
        {
            // Calibration routine called by Setup Form.
            bool ret_val = false;
            calibration_running = true;
            if (!chkPower.Checked)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Power must be on in order to calibrate RX Level.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                return false;
            }
            float[] a = new float[Display.BUFFER_SIZE];
            switch (current_model)
            {
              //  case Model.SDR1000:
                case Model.DEMO:
              //  case Model.SOFTROCK40:
                    //bool rx_only = SetupForm.RXOnly;					// Save RX Only Setting
                    //SetupForm.RXOnly = true;

                    double vfoa = VFOAFreq;								// save current VFOA

                    bool rit_on = chkRIT.Checked;						// save current RIT On
                    chkRIT.Checked = false;								// turn RIT off
                    int rit_val = (int)udRIT.Value;	    				// save current RIT value

                    string display = comboDisplayMode.Text;
                    comboDisplayMode.Text = "Spectrum";

                    bool polyphase = setupForm.Polyphase;				// save current polyphase setting
                    setupForm.Polyphase = false;						// disable polyphase

                    int dsp_buf_size = setupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
                    setupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 2048

                    Filter filter = RX1Filter;							// save current filter

                    DSPMode dsp_mode = rx1_dsp_mode;					// save current DSP demod mode
                    RX1DSPMode = DSPMode.AM;							// set mode to CWU

                    VFOAFreq = freq;									// set VFOA frequency

                    Filter am_filter = RX1Filter;						// save current AM filter
                    RX1Filter = Filter.F1;								// set filter to 500Hz

                    PreampMode preamp = RX1PreampMode;					// save current preamp mode
                    RX1PreampMode = PreampMode.HIGH;					// set to high

                    MeterRXMode rx_meter = CurrentMeterRXMode;			// save current RX Meter mode
                    CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

                    bool display_avg = chkDisplayAVG.Checked;			// save current average state
                    chkDisplayAVG.Checked = false;
                    chkDisplayAVG.Checked = true;						// set average state to off

                    float old_multimeter_cal = rx1_meter_cal_offset;
                    float old_display_cal = rx1_display_cal_offset;

                    comboPreamp.Enabled = false;
                    comboDisplayMode.Enabled = false;
                    comboMeterRXMode.Enabled = false;

                    progress.SetPercent(0.0f);
                    int counter = 0;

                    Thread.Sleep(2000);
                    btnZeroBeat_Click(this, EventArgs.Empty);
                    RX1Filter = Filter.F6;
                    chkDisplayAVG.Checked = false;
                    Thread.Sleep(200);

                    DisableAllFilters();
                    DisableAllModes();
                    VFOLock = true;

                    calibration_mutex.WaitOne();

                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);		// get the spectrum values
                    calibration_mutex.ReleaseMutex();
                    float max = float.MinValue;
                    float avg = 0;
                    int max_index = 0;

                    for (int i = 0; i < 4095; i++)						// find the maximum signal
                    {
                        avg += a[i];
                        if (a[i] > max)
                        {
                            max = a[i];
                            max_index = i;
                        }
                    }
                    avg -= max;
                    avg /= 4095;

                    if (max < (avg + 30))
                    {
                        if (!suppress_errors)
                        {
                            MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                                "Please use a larger signal for frequency calibration.",
                                "Calibration Error - Weak Signal",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                        }
                        ret_val = false;
                        goto end;
                    }

                    rx1_meter_cal_offset = 0.0f;
                    rx1_display_cal_offset = 0.0f;
                    float num = 0.0f, num2 = 0.0f, avg2 = 0.0f;
                    avg = 0.0f;
                    // get the value of the signal strength meter
                    for (int i = 0; i < 50; i++)
                    {
                        num += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg = num / 50.0f;

                    RX1PreampMode = PreampMode.MED;
                    Thread.Sleep(100);

                    // get the value of the signal strength meter
                    num2 = 0.0f;
                    for (int i = 0; i < 50; i++)
                    {
                        num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg2 = num2 / 50.0f;

                    float att_offset = avg2 - avg;

                    RX1PreampMode = PreampMode.LOW;
                    Thread.Sleep(100);

                    // get the value of the signal strength meter
                    num2 = 0.0f;
                    for (int i = 0; i < 50; i++)
                    {
                        num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg2 = num2 / 50.0f;

                    float gain_offset = avg2 - avg;

                    rx1_preamp_offset[(int)PreampMode.OFF] = -gain_offset - att_offset;
                    rx1_preamp_offset[(int)PreampMode.LOW] = -gain_offset;
                    rx1_preamp_offset[(int)PreampMode.MED] = -att_offset;
                    rx1_preamp_offset[(int)PreampMode.HIGH] = 0.0f;

                    RX1PreampMode = PreampMode.HIGH;
                    Thread.Sleep(100);

                    num2 = 0.0f;
                    for (int i = 0; i < 20; i++)
                    {
                        calibration_mutex.WaitOne();
                        fixed (float* ptr = &a[0])
                            DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP
                        calibration_mutex.ReleaseMutex();
                        max = float.MinValue;						// find the max spectrum value
                        for (int j = 0; j < Display.BUFFER_SIZE; j++)
                            if (a[j] > max) max = a[j];

                        num2 += max;

                        Thread.Sleep(100);

                        if (!progress.Visible)
                            goto end;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg2 = num2 / 20.0f;

                    // calculate the difference between the current value and the correct multimeter value
                    float diff = level - (avg + rx1_meter_cal_offset + rx1_preamp_offset[(int)rx1_preamp_mode]);
                    rx1_meter_cal_offset += diff;

                    // calculate the difference between the current value and the correct spectrum value
                    diff = level - (avg2 + rx1_display_cal_offset + rx1_preamp_offset[(int)rx1_preamp_mode]);
                    for (int i = 0; i < (int)Band.LAST; i++)
                    {
                        rx1_level_table[i][0] = (float)Math.Round(diff, 3);
                        //rx1_level_table[i][1] = rx1_preamp_offset((int)PreampMode.MED
                        rx1_level_table[i][2] = (float)Math.Round(rx1_meter_cal_offset, 3);
                    }
                    RX1DisplayCalOffset += diff;

                    ret_val = true;

               end:
                    if (!progress.Visible) progress.Text = "";
                    progress.Hide();
                    EnableAllFilters();
                    EnableAllModes();
                    VFOLock = false;
                    comboPreamp.Enabled = true;
                    comboDisplayMode.Enabled = true;
                    comboMeterRXMode.Enabled = true;

                    if (ret_val == false)
                    {
                        rx1_meter_cal_offset = old_multimeter_cal;
                        rx1_display_cal_offset = old_display_cal;
                    }

                    comboDisplayMode.Text = display;
                    chkRIT.Checked = rit_on;							// restore RIT on
                    udRIT.Value = rit_val;								// restore RIT value
                    //SetupForm.RXOnly = rx_only;						// restore RX Only			
                    DisplayAVG = display_avg;							// restore AVG value
                    //RX1PreampMode = preamp;						// restore preamp value
                    RX1Filter = am_filter;							// restore AM filter
                    RX1DSPMode = dsp_mode;							// restore DSP mode
                    RX1Filter = filter;								// restore filter
                    if (dsp_buf_size != 4096)
                        chkPower.Checked = false;						// go to standby
                    setupForm.DSPPhoneRXBuffer = dsp_buf_size;				// restore DSP Buffer Size
                    VFOAFreq = vfoa;									// restore vfo frequency
                    if (dsp_buf_size != 4096)
                    {
                        Thread.Sleep(100);
                        chkPower.Checked = true;
                    }
                    CurrentMeterRXMode = rx_meter;						// restore RX Meter mode
                    setupForm.Polyphase = polyphase;					// restore polyphase

                    //			Debug.WriteLine("rx1_meter_cal_offset: "+rx1_meter_cal_offset);
                    //			Debug.WriteLine("display_cal_offset: "+display_cal_offset);
                    //			MessageBox.Show("rx1_meter_cal_offset: "+rx1_meter_cal_offset.ToString()+"\n"+
                    //				"display_cal_offset: "+display_cal_offset.ToString());
                    break;
#region SDRX
                /*case Model.SDRX:
			
						if(!fwc_init) return false;
						rx_only = SetupForm.RXOnly;					// Save RX Only Setting
						SetupForm.RXOnly = true;

						rit_on = chkRIT.Checked;						// save current RIT On
						chkRIT.Checked = false;								// turn RIT off
						rit_val = (int)udRIT.Value;						// save current RIT value

						vfoa = VFOAFreq;								// save current VFOA

						polyphase = SetupForm.Polyphase;				// save current polyphase setting
						SetupForm.Polyphase = false;						// disable polyphase

						dsp_buf_size = SetupForm.DSPBufferSize;			// save current DSP buffer size
						SetupForm.DSPBufferSize = 4096;						// set DSP Buffer Size to 2048

						filter = RX1Filter;						// save current filter

						dsp_mode = current_dsp_mode;				// save current DSP demod mode
						CurrentDSPMode = DSPMode.AM;						// set mode to AM

						VFOAFreq = freq;									// set VFOA frequency
				
						am_filter = RX1Filter;					// save current AM filter
						RX1Filter = Filter.F1;							// set filter to 500Hz

						bool fwc_preamp = fwc_preamp_on;						// save current preamp mode
						FWCPreampOn = false;								// turn preamp off

						bool att_on = fwc_att_on;							// save current atten on
						FWCATTOn = false;									// turn atten off

						int att_val = fwc_att_val;							// save current atten val
						FWCATTVal = 0;										// set atten val to 0dB

						rx_meter = CurrentMeterRXMode;			// save current RX Meter mode
						CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

						display_avg = chkDisplayAVG.Checked;			// save current average state
						chkDisplayAVG.Checked = false;
						chkDisplayAVG.Checked = true;						// set average state to off

						old_multimeter_cal = rx1_meter_cal_offset;
						old_display_cal = display_cal_offset;

						comboPreamp.Enabled = false;
						comboDisplayMode.Enabled = false;
						comboMeterRXMode.Enabled = false;

						progress.SetPercent(0.0f);
						counter = 0;

						Thread.Sleep(2000);
						btnZeroBeat_Click(this, EventArgs.Empty);
						RX1Filter = Filter.F6;
						chkDisplayAVG.Checked = false;
						Thread.Sleep(200);

						DisableAllFilters();
						DisableAllModes();
						VFOLock = true;

						fixed(float* ptr = &a[0])
							DttSP.GetSpectrum(0, ptr);		// get the spectrum values

						max = float.MinValue;
						avg = 0;
						max_index = 0;

						for(int i=0; i<4095; i++)						// find the maximum signal
						{
							avg += a[i];
							if(a[i] > max)
							{
								max = a[i];
								max_index = i;
							}
						}
						avg -= max;
						avg /= 4095;

						if(max < (avg + 30))
						{
							MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
								"Please use a larger signal for frequency calibration.",
								"Calibration Error - Weak Signal",
								MessageBoxButtons.OK,
								MessageBoxIcon.Error);
							ret_val = false;
							goto end;
						}

						rx1_meter_cal_offset = 0.0f;
						DisplayCalOffset = 0.0f;
						num=0.0f; num2=0.0f; avg2=0.0f;
						avg=0.0f;
						// get the value of the signal strength meter
						for(int i=0; i<50; i++)
						{
							num += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
							Thread.Sleep(50);
							if(!progress.Visible)
								goto end;
							else progress.SetPercent((float)((float)++counter/760));
						}
						avg = num / 50.0f;

						FWCPreampOn = true;
						Thread.Sleep(100);
									
						// get the value of the signal strength meter
						num2=0.0f;
						for(int i=0; i<50; i++)
						{
							num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
							Thread.Sleep(50);
							if(!progress.Visible)
								goto end3;
							else progress.SetPercent((float)((float)++counter/760));
						}
						avg2 = num2 / 50.0f;

						fwc_preamp_offset = avg2 - avg;

						FWCPreampOn = false;
						FWCATTOn = true;
						for(int j=0; j<32; j++)
						{
							FWCATTVal = j;
							Thread.Sleep(100);

							// get the value of the signal strength meter
							num2=0.0f;
							for(int i=0; i<20; i++)
							{
								num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
								Thread.Sleep(50);
								if(!progress.Visible)
									goto end3;
								else progress.SetPercent((float)((float)++counter/760));
							}
							avg2 = num2 / 20.0f;
							fwc_att_offset[j] = avg2 - avg;
						}
						FWCATTOn = false;

						num2 = 0.0f;
						for(int i=0; i<20; i++)
						{
							fixed(float* ptr = &a[0])
								DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP

							max = float.MinValue;						// find the max spectrum value
							for(int j=0; j<Display.BUFFER_SIZE; j++)
								if(a[j] > max) max = a[j];

							num2 += max;

							Thread.Sleep(100);

							if(!progress.Visible)
								goto end3;
							else progress.SetPercent((float)((float)++counter/760));
						}
						avg2 = num2 / 20.0f;

						// calculate the difference between the current value and the correct multimeter value
						diff = level - (avg + rx1_meter_cal_offset);
						rx1_meter_cal_offset = diff;

						// calculate the difference between the current value and the correct spectrum value
						diff = level - (avg2 + DisplayCalOffset);
						DisplayCalOffset = diff - 1.6f;

						UpdateDisplayOffset();

						ret_val = true;

					end3:
						progress.Hide();
						EnableAllFilters();
						EnableAllModes();
						VFOLock = false;
						comboPreamp.Enabled = true;
						comboDisplayMode.Enabled = true;
						comboMeterRXMode.Enabled = true;

						if(ret_val == false)
						{
							rx1_meter_cal_offset = old_multimeter_cal;
							display_cal_offset = old_display_cal;
						}

						chkRIT.Checked = rit_on;							// restore RIT on
						udRIT.Value = rit_val;								// restore RIT value
						SetupForm.RXOnly = rx_only;							// restore RX Only			
						DisplayAVG = display_avg;							// restore AVG value
						FWCPreampOn = fwc_preamp;							// restore preamp value
						FWCATTOn = att_on;									// restore ATT on
						FWCATTVal = att_val;								// restore ATT val
						RX1Filter = am_filter;							// restore AM filter
						CurrentDSPMode = dsp_mode;							// restore DSP mode
						RX1Filter = filter;								// restore filter
						if(dsp_buf_size != 4096)
							chkPower.Checked = false;						// go to standby
						SetupForm.DSPBufferSize = dsp_buf_size;				// restore DSP Buffer Size
						VFOAFreq = vfoa;									// restore vfo frequency
						if(dsp_buf_size != 4096)
						{
							Thread.Sleep(100);
							chkPower.Checked = true;
						}
						CurrentMeterRXMode = rx_meter;						// restore RX Meter mode
						SetupForm.Polyphase = polyphase;					// restore polyphase

						//			Debug.WriteLine("rx1_meter_cal_offset: "+rx1_meter_cal_offset);
						//			Debug.WriteLine("display_cal_offset: "+display_cal_offset);
						//			MessageBox.Show("rx1_meter_cal_offset: "+rx1_meter_cal_offset.ToString()+"\n"+
						//				"display_cal_offset: "+display_cal_offset.ToString());
						break;*/
#endregion
                case Model.FLEX5000:
                    //rx_only = SetupForm.RXOnly;						// Save RX Only Setting
                    //SetupForm.RXOnly = true;

                    bool rx2 = rx2_enabled;
                    RX2Enabled = false;

                    vfoa = VFOAFreq;									// save current VFOA

                    rit_on = chkRIT.Checked;							// save current RIT On
                    chkRIT.Checked = false;								// turn RIT off
                    rit_val = (int)udRIT.Value;							// save current RIT value					

                    display = comboDisplayMode.Text;
                    comboDisplayMode.Text = "Spectrum";

                    polyphase = setupForm.Polyphase;					// save current polyphase setting
                    setupForm.Polyphase = false;						// disable polyphase

                    dsp_buf_size = setupForm.DSPPhoneRXBuffer;			// save current DSP buffer size
                    setupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 2048

                    filter = RX1Filter;									// save current filter

                    preamp = rx1_preamp_mode;

                    dsp_mode = rx1_dsp_mode;							// save current DSP demod mode
                    RX1DSPMode = DSPMode.DSB;							// set mode to DSB

                    VFOAFreq = freq;									// set VFOA frequency
                    VFOBFreq = freq;

                    bool duplex = full_duplex;
                    FullDuplex = true;
                    Thread.Sleep(50);
                    FWC.SetGen(true);
                    Thread.Sleep(50);
                    FWC.SetTest(true);
                    Thread.Sleep(50);
                    FWC.SetSig(true);
                    Thread.Sleep(50);

                    am_filter = RX1Filter;								// save current AM filter
                    RX1Filter = Filter.F1;								// set filter to 500Hz

                    /*bool p_amp = chkRX1Preamp.Checked;					// save current preamp mode
                    chkRX1Preamp.Checked = false;						// turn preamp off*/

                    rx_meter = CurrentMeterRXMode;						// save current RX Meter mode
                    CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

                    display_avg = chkDisplayAVG.Checked;				// save current average state
                    chkDisplayAVG.Checked = false;
                    chkDisplayAVG.Checked = true;						// set average state to off

                    old_multimeter_cal = rx1_meter_cal_offset;
                    old_display_cal = rx1_display_cal_offset;

                    chkRX1Preamp.Enabled = false;
                    comboDisplayMode.Enabled = false;
                    comboMeterRXMode.Enabled = false;

                    progress.SetPercent(0.0f);
                    counter = 0;

                    RX1Filter = Filter.F6;
                    chkDisplayAVG.Checked = false;

                    FWC.SetTRXPreamp(false);
                    Thread.Sleep(200);

                    DisableAllFilters();
                    DisableAllModes();
                    VFOLock = true;

                    calibration_mutex.WaitOne();
                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);		// get the spectrum values
                    calibration_mutex.ReleaseMutex();

                    max = float.MinValue;
                    avg = 0;
                    max_index = 0;

                    for (int i = 0; i < 4095; i++)						// find the maximum signal
                    {
                        avg += a[i];
                        if (a[i] > max)
                        {
                            max = a[i];
                            max_index = i;
                        }
                    }
                    avg -= max;
                    avg /= 4095;

                    if (max < (avg + 30))
                    {
                        if (!suppress_errors)
                        {
                            MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                                "Please use a larger signal for frequency calibration.",
                                "Calibration Error - Weak Signal",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                        }
                        ret_val = false;
                        goto end2;
                    }

                    rx1_meter_cal_offset = 0.0f;
                    RX1DisplayCalOffset = 0.0f;
                    num = 0.0f; num2 = 0.0f; avg2 = 0.0f;
                    avg = 0.0f;
                    // get the value of the signal strength meter
                    for (int i = 0; i < 50; i++)
                    {
                        num += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end2;
                        else progress.SetPercent((float)((float)++counter / 120));
                    }
                    avg = num / 50.0f;

                    FWC.SetTRXPreamp(true);
                    Thread.Sleep(200);

                    // get the value of the signal strength meter
                    num2 = 0.0f;
                    for (int i = 0; i < 50; i++)
                    {
                        num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end2;
                        else progress.SetPercent((float)((float)++counter / 120));
                    }
                    avg2 = num2 / 50.0f;

                    fwc_preamp_offset = avg2 - avg;
                    rx1_preamp_offset[(int)PreampMode.OFF] = 0.0f;
                    rx1_preamp_offset[(int)PreampMode.HIGH] = -fwc_preamp_offset;

                    Debug.WriteLine("fwc_preamp_offset: " + fwc_preamp_offset.ToString("f6"));

                    FWC.SetTRXPreamp(false);
                    Thread.Sleep(200);

                    num2 = 0.0f;
                    for (int i = 0; i < 20; i++)
                    {
                        calibration_mutex.WaitOne();
                        fixed (float* ptr = &a[0])
                            DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP
                        calibration_mutex.ReleaseMutex();

                        /*max = float.MinValue;						// find the max spectrum value
                        for(int j=0; j<Display.BUFFER_SIZE; j++)
                            if(a[j] > max) max = a[j];*/

                        //num2 += max;
                        num2 += a[max_index];
                        Thread.Sleep(100);

                        if (!progress.Visible)
                            goto end2;
                        else progress.SetPercent((float)((float)++counter / 120));
                    }
                    avg2 = num2 / 20.0f;

                    // calculate the difference between the current value and the correct multimeter value
                    diff = level - (avg + rx1_meter_cal_offset);
                    rx1_meter_cal_offset = diff;

                    // calculate the difference between the current value and the correct spectrum value
                    diff = level - (avg2 + RX1DisplayCalOffset);
                    RX1DisplayCalOffset = diff;

                    UpdateDisplayOffsets();

                    rx1_level_table[(int)rx1_band][0] = (float)Math.Round(rx1_display_cal_offset, 3);
                    rx1_level_table[(int)rx1_band][1] = (float)Math.Round(-fwc_preamp_offset, 3);
                    rx1_level_table[(int)rx1_band][2] = (float)Math.Round(rx1_meter_cal_offset, 3);

                    ret_val = true;

                end2:
                    if (!progress.Visible) progress.Text = "";
                    progress.Hide();
                    EnableAllFilters();
                    EnableAllModes();
                    VFOLock = false;

                    FullDuplex = duplex;
                    Thread.Sleep(50);
                    FWC.SetGen(false);
                    Thread.Sleep(50);
                    FWC.SetTest(false);
                    Thread.Sleep(50);
                    FWC.SetSig(false);
                    Thread.Sleep(50);

                    fwc_rx1_preamp = false;
                    chkRX1Preamp.Enabled = true;            
                    RX1PreampMode = preamp;
                    chkRX1Preamp_CheckedChanged(this, EventArgs.Empty);
                    comboDisplayMode.Enabled = true;
                    comboMeterRXMode.Enabled = true;

                    if (ret_val == false)
                    {
                        rx1_meter_cal_offset = old_multimeter_cal;
                        rx1_display_cal_offset = old_display_cal;
                    }

                    //RX2Enabled = rx2;
                    comboDisplayMode.Text = display;
                    chkRIT.Checked = rit_on;						// restore RIT on
                    udRIT.Value = rit_val;							// restore RIT value
                    //SetupForm.RXOnly = rx_only					// restore RX Only			
                    DisplayAVG = display_avg;						// restore AVG value
                    RX1Filter = am_filter;							// restore AM filter
                    RX1DSPMode = dsp_mode;							// restore DSP mode
                    RX1Filter = filter;								// restore filter
                    if (dsp_buf_size != 4096)
                        chkPower.Checked = false;					// go to standby
                    setupForm.DSPPhoneRXBuffer = dsp_buf_size;		// restore DSP Buffer Size
                    VFOAFreq = vfoa;								// restore vfo frequency
                    if (dsp_buf_size != 4096)
                    {
                        Thread.Sleep(100);
                        chkPower.Checked = true;
                    }
                    CurrentMeterRXMode = rx_meter;					// restore RX Meter mode
                    setupForm.Polyphase = polyphase;				// restore polyphase

                    UpdateDisplayOffsets();

                    //			Debug.WriteLine("rx1_meter_cal_offset: "+rx1_meter_cal_offset);
                    //			Debug.WriteLine("display_cal_offset: "+display_cal_offset);
                    //			MessageBox.Show("rx1_meter_cal_offset: "+rx1_meter_cal_offset.ToString()+"\n"+
                    //				"display_cal_offset: "+display_cal_offset.ToString());
                    break;
                case Model.FLEX3000:
                    vfoa = VFOAFreq;									// save current VFOA

                    rit_on = chkRIT.Checked;							// save current RIT On
                    chkRIT.Checked = false;								// turn RIT off
                    rit_val = (int)udRIT.Value;							// save current RIT value					

                    display = comboDisplayMode.Text;
                    comboDisplayMode.Text = "Spectrum";

                    polyphase = setupForm.Polyphase;					// save current polyphase setting
                    setupForm.Polyphase = false;						// disable polyphase

                    dsp_buf_size = setupForm.DSPPhoneRXBuffer;			// save current DSP buffer size
                    setupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 2048

                    filter = RX1Filter;									// save current filter

                    dsp_mode = rx1_dsp_mode;							// save current DSP demod mode
                    RX1DSPMode = DSPMode.DSB;							// set mode to DSB

                    VFOAFreq = freq;									// set VFOA frequency
                    VFOBFreq = freq;

                    duplex = full_duplex;
                    FullDuplex = true;
                    Thread.Sleep(50);
                    FWC.SetGen(true);
                    Thread.Sleep(50);
                    FWC.SetTest(true);
                    Thread.Sleep(50);
                    FWC.SetSig(true);
                    Thread.Sleep(50);

                    am_filter = RX1Filter;								// save current AM filter
                    RX1Filter = Filter.F1;								// set filter to 500Hz

                    preamp = RX1PreampMode;								// save current preamp mode
                    RX1PreampMode = PreampMode.LOW;						// set to Low (preamp off, attn off)

                    rx_meter = CurrentMeterRXMode;						// save current RX Meter mode
                    CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

                    display_avg = chkDisplayAVG.Checked;				// save current average state
                    chkDisplayAVG.Checked = false;
                    chkDisplayAVG.Checked = true;						// set average state to off

                    old_multimeter_cal = rx1_meter_cal_offset;
                    old_display_cal = rx1_display_cal_offset;

                    comboPreamp.Enabled = false;
                    comboDisplayMode.Enabled = false;
                    comboMeterRXMode.Enabled = false;

                    progress.SetPercent(0.0f);
                    counter = 0;

                    //RX1Filter = Filter.F6;					
                    UpdateRX1Filters(-500, 500);
                    chkDisplayAVG.Checked = false;

                    /*FWC.SetTRXPreamp(false);
                    FWC.SetRXAttn(false);*/
                    Thread.Sleep(200);

                    DisableAllFilters();
                    DisableAllModes();
                    VFOLock = true;

                    calibration_mutex.WaitOne();
                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);		// get the spectrum values
                    calibration_mutex.ReleaseMutex();

                    max = float.MinValue;
                    avg = 0;
                    max_index = 0;

                    for (int i = 0; i < 4095; i++)						// find the maximum signal
                    {
                        avg += a[i];
                        if (a[i] > max)
                        {
                            max = a[i];
                            max_index = i;
                        }
                    }
                    avg -= max;
                    avg /= 4095;

                    if (max < (avg + 30))
                    {
                        if (!suppress_errors)
                        {
                            MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                                "Please use a larger signal for frequency calibration.",
                                "Calibration Error - Weak Signal",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                        }
                        ret_val = false;
                        goto end3;
                    }

                    rx1_meter_cal_offset = 0.0f;
                    RX1DisplayCalOffset = 0.0f;
                    num = 0.0f; num2 = 0.0f; avg2 = 0.0f;
                    avg = 0.0f;
                    float avg3 = 0.0f;
                    // get the value of the signal strength meter
                    for (int i = 0; i < 50; i++)
                    {
                        num += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end3;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg = num / 50.0f;

                    FWC.SetTRXPreamp(true);
                    Thread.Sleep(200);

                    // get the value of the signal strength meter
                    num2 = 0.0f;
                    for (int i = 0; i < 50; i++)
                    {
                        num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end3;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg2 = num2 / 50.0f;

                    FWC.SetTRXPreamp(false);
                    FWC.SetRXAttn(true);
                    Thread.Sleep(200);

                    // get the value of the signal strength meter
                    num2 = 0.0f;
                    for (int i = 0; i < 50; i++)
                    {
                        num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end3;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg3 = num2 / 50.0f;

                    float pre = avg2 - avg;
                    float attn = avg3 - avg;

                    rx1_preamp_offset[(int)PreampMode.OFF] = -attn;
                    rx1_preamp_offset[(int)PreampMode.LOW] = 0.0f;
                    rx1_preamp_offset[(int)PreampMode.MED] = attn - pre;
                    rx1_preamp_offset[(int)PreampMode.HIGH] = -pre;

                    FWC.SetTRXPreamp(false);
                    FWC.SetRXAttn(false);
                    Thread.Sleep(200);

                    num2 = 0.0f;
                    for (int i = 0; i < 20; i++)
                    {
                        calibration_mutex.WaitOne();
                        fixed (float* ptr = &a[0])
                            DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP
                        calibration_mutex.ReleaseMutex();

                        /*max = float.MinValue;						// find the max spectrum value
                        for(int j=0; j<Display.BUFFER_SIZE; j++)
                            if(a[j] > max) max = a[j];*/

                        //num2 += max;
                        num2 += a[max_index];
                        Thread.Sleep(100);

                        if (!progress.Visible)
                            goto end3;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg2 = num2 / 20.0f;

                    // calculate the difference between the current value and the correct multimeter value
                    diff = level - (avg + rx1_meter_cal_offset);
                    rx1_meter_cal_offset = diff;

                    // calculate the difference between the current value and the correct spectrum value
                    diff = level - (avg2 + RX1DisplayCalOffset);
                    RX1DisplayCalOffset = diff;

                    rx1_level_table[(int)rx1_band][0] = (float)Math.Round(rx1_display_cal_offset, 3);
                    rx1_level_table[(int)rx1_band][1] = (float)Math.Round(rx1_preamp_offset[(int)PreampMode.OFF], 3);
                    rx1_level_table[(int)rx1_band][2] = (float)Math.Round(rx1_preamp_offset[(int)PreampMode.HIGH], 3);

                    ret_val = true;

                end3:
                    if (!progress.Visible) progress.Text = "";
                    progress.Hide();
                    EnableAllFilters();
                    EnableAllModes();
                    VFOLock = false;

                    FullDuplex = duplex;
                    Thread.Sleep(50);
                    FWC.SetGen(false);
                    Thread.Sleep(50);
                    FWC.SetTest(false);
                    Thread.Sleep(50);
                    FWC.SetSig(false);
                    Thread.Sleep(50);

                    /*FWC.SetTRXPreamp(false);
                    FWC.SetRXAttn(true);*/
                    comboPreamp.Enabled = true;
                    RX1PreampMode = preamp;

                    comboDisplayMode.Enabled = true;
                    comboMeterRXMode.Enabled = true;

                    if (ret_val == false)
                    {
                        rx1_meter_cal_offset = old_multimeter_cal;
                        rx1_display_cal_offset = old_display_cal;
                    }

                    comboDisplayMode.Text = display;
                    chkRIT.Checked = rit_on;						// restore RIT on
                    udRIT.Value = rit_val;							// restore RIT value
                    //SetupForm.RXOnly = rx_only					// restore RX Only			
                    DisplayAVG = display_avg;						// restore AVG value
                    RX1Filter = am_filter;							// restore AM filter
                    RX1DSPMode = dsp_mode;							// restore DSP mode
                    RX1Filter = filter;								// restore filter
                    if (dsp_buf_size != 4096)
                        chkPower.Checked = false;					// go to standby
                    setupForm.DSPPhoneRXBuffer = dsp_buf_size;		// restore DSP Buffer Size
                    VFOAFreq = vfoa;								// restore vfo frequency
                    if (dsp_buf_size != 4096)
                    {
                        Thread.Sleep(100);
                        chkPower.Checked = true;
                    }
                    CurrentMeterRXMode = rx_meter;					// restore RX Meter mode
                    setupForm.Polyphase = polyphase;				// restore polyphase

                    UpdateDisplayOffsets();

                    //			Debug.WriteLine("rx1_meter_cal_offset: "+rx1_meter_cal_offset);
                    //			Debug.WriteLine("display_cal_offset: "+display_cal_offset);
                    //			MessageBox.Show("rx1_meter_cal_offset: "+rx1_meter_cal_offset.ToString()+"\n"+
                    //				"display_cal_offset: "+display_cal_offset.ToString());
                    break;
                case Model.FLEX1500:
                    vfoa = VFOAFreq;									// save current VFOA

                    rit_on = chkRIT.Checked;							// save current RIT On
                    chkRIT.Checked = false;								// turn RIT off
                    rit_val = (int)udRIT.Value;							// save current RIT value					

                    display = comboDisplayMode.Text;
                    comboDisplayMode.Text = "Spectrum";

                    polyphase = setupForm.Polyphase;					// save current polyphase setting
                    setupForm.Polyphase = false;						// disable polyphase

                    /*dsp_buf_size = SetupForm.DSPPhoneRXBuffer;			// save current DSP buffer size
                    SetupForm.DSPPhoneRXBuffer = 2048;					// set DSP Buffer Size to 2048*/

                    filter = RX1Filter;									// save current filter

                    dsp_mode = rx1_dsp_mode;							// save current DSP demod mode
                    RX1DSPMode = DSPMode.DSB;							// set mode to DSB

                    VFOAFreq = freq;									// set VFOA frequency
                    Thread.Sleep(100);
                    VFOBFreq = freq;

                    bool sr = chkSR.Checked;
                    chkSR.Checked = false;

                    HIDAnt hid_ant = RXAnt1500;
                    RXAnt1500 = HIDAnt.BITE;
                    Thread.Sleep(100);

                    USBHID.SetGen(true);
                    Thread.Sleep(100);
                    
                    USBHID.SetQSE(true);
                    Thread.Sleep(100);

                    USBHID.SetTest(true);
                    Thread.Sleep(100);

                    am_filter = RX1Filter;								// save current AM filter
                    RX1Filter = Filter.F1;								// set filter to 500Hz

                    preamp = RX1PreampMode;								// save current preamp mode
                    RX1PreampMode = (PreampMode)FLEX1500PreampMode.ZERO;// set to Off

                    rx_meter = CurrentMeterRXMode;						// save current RX Meter mode
                    CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

                    display_avg = chkDisplayAVG.Checked;				// save current average state
                    chkDisplayAVG.Checked = false;
                    chkDisplayAVG.Checked = true;						// set average state to off

                    old_multimeter_cal = rx1_meter_cal_offset;
                    old_display_cal = rx1_display_cal_offset;

                    comboPreamp.Enabled = false;
                    comboDisplayMode.Enabled = false;
                    //comboMeterRXMode.Enabled = false;

                    progress.SetPercent(0.0f);
                    counter = 0;

                    //RX1Filter = Filter.F6;					
                    UpdateRX1Filters(-(int)(if_freq*1e6)+cw_pitch-100, -(int)(if_freq*1e6)+cw_pitch+100);
                    chkDisplayAVG.Checked = false;

                    DisableAllFilters();
                    DisableAllModes();
                    VFOLock = true;

                    DttSP.SetCorrectIQEnable(0); // turn off I/Q correction
                    DttSP.SetCorrectRXIQw(0, 0, 0.0f, 0.0f, 0);
                    DttSP.SetCorrectRXIQw(0, 0, 0.0f, 0.0f, 1);

                    double scale = Audio.SourceScale;
                    Audio.SourceScale = 0.01;

                    Audio.RX1OutputSignal = Audio.SignalSource.SINE;

                    bool mute = chkMUT.Checked;
                    chkMUT.Checked = false;

                    Thread.Sleep(400);

                    calibration_mutex.WaitOne();
                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);		// get the spectrum values
                    calibration_mutex.ReleaseMutex();

                    calibration_mutex.WaitOne();
                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);		// get the spectrum values again to clear out the old ones
                    calibration_mutex.ReleaseMutex();

                    max = float.MinValue;
                    avg = 0;
                    max_index = 0;

                    for (int i = 0; i < 4095; i++)						// find the maximum signal
                    {
                        avg += a[i];
                        if (a[i] > max)
                        {
                            max = a[i];
                            max_index = i;
                        }
                    }
                    avg -= max;
                    avg /= 4095;

                    if (max < (avg + 30))
                    {
                        if (!suppress_errors)
                        {
                            MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
                                "Please use a larger signal for frequency calibration.",
                                "Calibration Error - Weak Signal",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                        }
                        ret_val = false;
                        goto end4;
                    }

                    rx1_meter_cal_offset = 0.0f;
                    RX1DisplayCalOffset = 0.0f;
                    num = 0.0f; num2 = 0.0f; avg2 = 0.0f;
                    avg = 0.0f;
                    avg3 = 0.0f;
                    // get the value of the signal strength meter
                    for (int i = 0; i < 50; i++)
                    {
                        num += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end4;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg = num / 50.0f;

                    /*while (progress.Visible)
                    {
                        progress.SetPercent((float)((float)++counter / 170));
                        Thread.Sleep(100);
                    }
                    progress.Show();*/

                    RX1PreampMode = (PreampMode)FLEX1500PreampMode.PLUS_20;
                    Thread.Sleep(200);

                    // get the value of the signal strength meter
                    num2 = 0.0f;
                    for (int i = 0; i < 50; i++)
                    {
                        num2 += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                        Thread.Sleep(50);
                        if (!progress.Visible)
                            goto end4;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg2 = num2 / 50.0f;
                    attn = avg2 - avg;

                    /*while (progress.Visible)
                    {
                        progress.SetPercent((float)((float)++counter / 170));
                        Thread.Sleep(100);
                    }
                    progress.Show();*/

                    Debug.WriteLine("attn: " + attn.ToString("f1")+" max_index: "+max_index);

                    rx1_preamp_offset[(int)PreampMode.OFF] = attn+10.0f; // -10
                    rx1_preamp_offset[(int)PreampMode.LOW] = attn; // 0
                    rx1_preamp_offset[(int)PreampMode.MED] = +10.0f; // +10
                    rx1_preamp_offset[(int)PreampMode.HIGH] = 0.0f; // +20
                    rx1_preamp_offset[(int)PreampMode.LAST] = -10.0f; // +30

                    /*RX1PreampMode = (PreampMode)FLEX1500PreampMode.PLUS_20;
                    Thread.Sleep(200); */

                    num = 0.0f;
                    for (int i = 0; i < 20; i++)
                    {
                        calibration_mutex.WaitOne();
                        fixed (float* ptr = &a[0])
                            DttSP.GetSpectrum(0, ptr);		// read again to clear out changed DSP
                        calibration_mutex.ReleaseMutex();

                        /*max = float.MinValue;						// find the max spectrum value
                        for(int j=0; j<Display.BUFFER_SIZE; j++)
                            if(a[j] > max) max = a[j];*/

                        //num2 += max;
                        num += a[max_index];
                        Thread.Sleep(100);

                        if (!progress.Visible)
                            goto end4;
                        else progress.SetPercent((float)((float)++counter / 170));
                    }
                    avg = num / 20.0f;

                    // calculate the difference between the current value and the correct multimeter value
                    diff = level - (avg2 + rx1_meter_cal_offset);
                    rx1_meter_cal_offset = diff;

                    // calculate the difference between the current value and the correct spectrum value
                    diff = level - (avg + RX1DisplayCalOffset);
                    RX1DisplayCalOffset = diff;

                    rx1_level_table[(int)rx1_band][0] = (float)Math.Round(rx1_display_cal_offset, 1);
                    rx1_level_table[(int)rx1_band][1] = (float)Math.Round(attn, 1);
                    rx1_level_table[(int)rx1_band][2] = (float)Math.Round(0.0f, 1);

                    ret_val = true;

                end4:
                    if (!progress.Visible) progress.Text = "";
                    progress.Hide();
                    EnableAllFilters();
                    EnableAllModes();
                    VFOLock = false;

                    USBHID.SetTest(false); Thread.Sleep(10);
                    USBHID.SetGen(false); Thread.Sleep(10);
                    USBHID.SetQSE(false); Thread.Sleep(10);
                    RXAnt1500 = hid_ant; Thread.Sleep(10);

                    Audio.SourceScale = scale;
                    Audio.RX1OutputSignal = Audio.SignalSource.RADIO;

                    RX1PreampMode = preamp;

                    DttSP.SetCorrectIQEnable(1); // turn on I/Q correction

                    comboDisplayMode.Enabled = true;
                    comboMeterRXMode.Enabled = true;
                    comboPreamp.Enabled = true;

                    if (ret_val == false)
                    {
                        rx1_meter_cal_offset = old_multimeter_cal;
                        rx1_display_cal_offset = old_display_cal;
                    }

                    chkMUT.Checked = mute;
                    comboDisplayMode.Text = display;
                    chkRIT.Checked = rit_on;						// restore RIT on
                    udRIT.Value = rit_val;							// restore RIT value
                    //SetupForm.RXOnly = rx_only					// restore RX Only			
                    DisplayAVG = display_avg;						// restore AVG value
                    RX1Filter = am_filter;							// restore AM filter
                    RX1DSPMode = dsp_mode;							// restore DSP mode
                    RX1Filter = filter;								// restore filter
                    /*if (dsp_buf_size != 4096)
                        chkPower.Checked = false;					// go to standby
                    SetupForm.DSPPhoneRXBuffer = dsp_buf_size;		// restore DSP Buffer Size*/
                    VFOAFreq = vfoa; Thread.Sleep(10);								// restore vfo frequency
                    /*if (dsp_buf_size != 4096)
                    {
                        Thread.Sleep(100);
                        chkPower.Checked = true;
                    }*/
                    CurrentMeterRXMode = rx_meter;					// restore RX Meter mode
                    setupForm.Polyphase = polyphase;				// restore polyphase

                    UpdateDisplayOffsets();
                    break;
            }
            calibration_running = false;
            return ret_val;
        }

		/*public void FLEX5000DetectTapResistor()
		{
			Thread t = new Thread(new ThreadStart(RunFLEX5000DetectTapResistor));
			t.Name = "Run FLEX5000 Detect Tap Resistor Thread";
			t.IsBackground = true;
			t.Priority = ThreadPriority.Normal;
			Application.DoEvents();
			Thread.Sleep(100);
			t.Start();
		}

		public void RunFLEX5000DetectTapResistor()
		{
			//bool ret_val = false;
			calibration_running = true;

			if(!chkPower.Checked || !fwc_init || current_model != Model.FLEX5000)
			{
				calibration_running = false;
				return;
			}

			bool rx1_sr = SpurReduction;
			SpurReduction = true;

			bool rx2_sr = RX2SpurReduction;
			RX2SpurReduction = true;

			bool rit_on = chkRIT.Checked;						// save current RIT On
			chkRIT.Checked = false;								// turn RIT off
			int rit_val = (int)udRIT.Value;						// save current RIT value

			double vfoa = VFOAFreq;								// save current VFOA

			int dsp_buf_size = SetupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
			SetupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 2048

			Filter filter = RX1Filter;						// save current filter

			DSPMode dsp_mode = rx1_dsp_mode;				// save current DSP demod mode
			DSPMode dsp2_mode = rx2_dsp_mode;				// save current DSP demod mode

			RX1DSPMode = DSPMode.DSB;						// set mode to DSB
			RX2DSPMode = DSPMode.DSB;						// set mode to DSB

			VFOAFreq = 14.2;								// set VFOA frequency
			VFOBFreq = 14.2;

			bool duplex = full_duplex;
			FullDuplex = true;
			Thread.Sleep(50);
			FWC.SetGen(true);
			Thread.Sleep(50);
			FWC.SetTest(true);
			Thread.Sleep(50);
			FWC.SetSig(true);
			Thread.Sleep(50);
				
			bool rx2 = rx2_enabled;
			RX2Enabled = true;

			FWCAnt rx2_antenna = rx2_ant;
			RX2Ant = FWCAnt.RX1TAP;

			Filter rx1_filter = RX1Filter;					// save current AM filter
			UpdateRX1Filters(-500, 500);
			
			Filter rx2_filter = RX2Filter;
			UpdateRX2Filters(-500, 500);

			//string preamp_s = comboPreamp.Text;					// save current preamp mode
			//comboPreamp.Text = "Off";							// turn preamp off
			bool preamp = chkRX1Preamp.Checked;
			chkRX1Preamp.Checked = false;

			MeterRXMode rx_meter = CurrentMeterRXMode;			// save current RX Meter mode
			CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

			MeterRXMode rx2_meter = RX2MeterMode;
			RX2MeterMode = MeterRXMode.OFF;

			chkRX1Preamp.Enabled = false;
			chkRX2Preamp.Enabled = false;
			comboMeterRXMode.Enabled = false;
			comboRX2MeterMode.Enabled = false;

			//progress.SetPercent(0.0f);
			//int counter = 0;

			FWC.SetRX2Preamp(false);
			Thread.Sleep(200);

			float num = 0.0f;
			// get the value of the signal strength meter
			for(int i=0; i<50; i++)
			{
				num += DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.ADC_REAL);
				Thread.Sleep(50);
				//if(!progress.Visible)
				//	goto end2;
				//else progress.SetPercent((float)((float)++counter/120));
			}
			float avg = num / 50.0f;

			num = 0.0f;
			for(int i=0; i<50; i++)
			{
				num += DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_REAL);
				Thread.Sleep(50);
				//if(!progress.Visible)
				//	goto end2;
				//else progress.SetPercent((float)((float)++counter/120));
			}
			float avg2 = num / 50.0f;

			rx2_res_offset = avg2-avg;
			rx2_trx_match_serial = FWCEEPROM.TRXSerial;

			//ret_val = true;

			//end2:
				//if(!progress.Visible) progress.Text = "";
			//progress.Hide();
			EnableAllFilters();
			EnableAllModes();
			VFOLock = false;

			FullDuplex = duplex;
			Thread.Sleep(50);
			FWC.SetGen(false);
			Thread.Sleep(50);
			FWC.SetTest(false);
			Thread.Sleep(50);
			FWC.SetSig(false);
			Thread.Sleep(50);

			chkRX1Preamp.Enabled = true;
			chkRX2Preamp.Enabled = true;
			comboMeterRXMode.Enabled = true;
			comboRX2MeterMode.Enabled = true;

			SpurReduction = rx1_sr;
			RX2SpurReduction = rx2_sr;
			RX2Enabled = rx2;
			RX2Ant = rx2_antenna;
			chkRIT.Checked = rit_on;							// restore RIT on
			udRIT.Value = rit_val;								// restore RIT value
			//SetupForm.RXOnly = rx_only;							// restore RX Only			
			chkRX1Preamp.Checked = preamp;						// restore preamp value
			RX1Filter = rx1_filter;							// restore AM filter
			RX1DSPMode = dsp_mode;							// restore DSP mode
			RX2DSPMode = dsp2_mode;							// restore DSP mode
			RX1Filter = filter;								// restore filter
			if(dsp_buf_size != 4096)
				chkPower.Checked = false;						// go to standby
			SetupForm.DSPPhoneRXBuffer = dsp_buf_size;				// restore DSP Buffer Size
			VFOAFreq = vfoa;									// restore vfo frequency
			if(dsp_buf_size != 4096)
			{
				Thread.Sleep(100);
				chkPower.Checked = true;
			}
			CurrentMeterRXMode = rx_meter;						// restore RX Meter mode
			RX2MeterMode = rx2_meter;

			calibration_running = false;
		}*/

		public bool CalibrateRX2Level(float level, float freq, Progress progress, bool suppress_errors)
		{
			// Calibration routine called by Setup Form.
			bool ret_val = false;
			calibration_running = true;
			if(!chkPower.Checked)
			{
				if(!suppress_errors)
				{
					MessageBox.Show("Power must be on in order to calibrate RX2 Level.", "Power Is Off",
						MessageBoxButtons.OK, MessageBoxIcon.Stop);
				}
				calibration_running = false;
				return false;
			}

			if(!fwc_init || current_model != Model.FLEX5000)
			{
				calibration_running = false;
				return false;
			}

			float[] a = new float[Display.BUFFER_SIZE];

			bool rx1_sr = SpurReduction;
			SpurReduction = true;
			//Thread.Sleep(50);

			bool rx2_sr = RX2SpurReduction;
			RX2SpurReduction = true;
			//Thread.Sleep(50);

			bool rit_on = chkRIT.Checked;						// save current RIT On
			chkRIT.Checked = false;								// turn RIT off
			int rit_val = (int)udRIT.Value;						// save current RIT value

			double vfoa = VFOAFreq;								// save current VFOA

			string display = comboDisplayMode.Text;
			comboDisplayMode.Text = "Spectrum";

			bool polyphase = setupForm.Polyphase;				// save current polyphase setting
			setupForm.Polyphase = false;						// disable polyphase

			int dsp_buf_size = setupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
			setupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 2048

			Filter filter = RX1Filter;						// save current filter

			DSPMode dsp_mode = rx1_dsp_mode;				// save current DSP demod mode
			DSPMode dsp2_mode = rx2_dsp_mode;				// save current DSP demod mode

			RX1DSPMode = DSPMode.DSB;						// set mode to DSB
			//Thread.Sleep(50);
			RX2DSPMode = DSPMode.DSB;						// set mode to DSB

			VFOAFreq = freq;									// set VFOA frequency
			//Thread.Sleep(100);
			VFOBFreq = freq;
			//Thread.Sleep(100);

			bool duplex = full_duplex;
			FullDuplex = true;
			//Thread.Sleep(50);
			FWC.SetGen(true);
			//Thread.Sleep(50);
			FWC.SetTest(true);
			//Thread.Sleep(50);
			FWC.SetSig(true);
			//Thread.Sleep(50);
				
			bool rx2 = rx2_enabled;
			RX2Enabled = true;

			FWCAnt rx2_antenna = rx2_ant;
			RX2Ant = FWCAnt.RX1TAP;
			//Thread.Sleep(50);

			Filter rx1_filter = RX1Filter;					// save current AM filter
			UpdateRX1Filters(-500, 500);
			
			Filter rx2_filter = RX2Filter;
			UpdateRX2Filters(-500, 500);

			bool rx1_preamp = chkRX1Preamp.Checked;					// save current preamp mode
			chkRX1Preamp.Checked = false;							// turn preamp off
			//Thread.Sleep(50);

			bool rx2_preamp = chkRX2Preamp.Checked;					// save current preamp mode
			chkRX2Preamp.Checked = false;							// turn preamp off
			//Thread.Sleep(50);

			MeterRXMode rx_meter = CurrentMeterRXMode;			// save current RX Meter mode
			CurrentMeterRXMode = MeterRXMode.OFF;				// turn RX Meter off

			MeterRXMode rx2_meter = RX2MeterMode;
			RX2MeterMode = MeterRXMode.OFF;

			bool display_avg = chkDisplayAVG.Checked;			// save current average state
			chkDisplayAVG.Checked = false;
			chkDisplayAVG.Checked = true;						// set average state to off

			float old_multimeter_cal = rx2_meter_cal_offset;
			float old_display_cal = rx2_display_cal_offset;

			chkRX1Preamp.Enabled = false;
			chkRX2Preamp.Enabled = false;
			comboDisplayMode.Enabled = false;
			comboMeterRXMode.Enabled = false;
			comboRX2MeterMode.Enabled = false;

			progress.SetPercent(0.0f);
			int counter = 0;

			Thread.Sleep(2000);
			btnZeroBeat_Click(this, EventArgs.Empty);
			RX1Filter = Filter.F6;
			chkDisplayAVG.Checked = false;

			FWC.SetRX2Preamp(false);
			Thread.Sleep(200);

			DisableAllFilters();
			DisableAllModes();
			VFOLock = true; 

			calibration_mutex.WaitOne();
			fixed(float* ptr = &a[0])
				DttSP.GetSpectrum(2, ptr);		// get the spectrum values
			calibration_mutex.ReleaseMutex();

			float max = float.MinValue;
			float avg = 0;
			int max_index = 0;

			for(int i=0; i<4095; i++)						// find the maximum signal
			{
				avg += a[i];
				if(a[i] > max)
				{
					max = a[i];
					max_index = i;
				}
			}
			avg -= max;
			avg /= 4095;

			if(max < (avg + 30))
			{
				if(!suppress_errors)
				{
					MessageBox.Show("Peak is less than 30dB from the noise floor.  " +
						"Please use a larger signal for frequency calibration.",
						"Calibration Error - Weak Signal",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
				}
				ret_val = false;
				goto end2;
			}

			rx2_meter_cal_offset = 0.0f;
			RX2DisplayCalOffset = 0.0f;
			float num=0.0f; float num2=0.0f; float avg2=0.0f;
			avg=0.0f;
			// get the value of the signal strength meter
			for(int i=0; i<50; i++)
			{
				num += DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.SIGNAL_STRENGTH);
				Thread.Sleep(50);
				if(!progress.Visible)
					goto end2;
				else progress.SetPercent((float)((float)++counter/120));
			}
			avg = num / 50.0f;

			FWC.SetRX2Preamp(true);
			Thread.Sleep(200);
									
			// get the value of the signal strength meter
			num2=0.0f;
			for(int i=0; i<50; i++)
			{
				num2 += DttSP.CalculateRXMeter(2, 0,DttSP.MeterType.SIGNAL_STRENGTH);
				Thread.Sleep(50);
				if(!progress.Visible)
					goto end2;
				else progress.SetPercent((float)((float)++counter/120));
			}
			avg2 = num2 / 50.0f;

			fwc_preamp_offset = avg2 - avg;
			rx2_preamp_offset[(int)PreampMode.OFF] = 0.0f;
			rx2_preamp_offset[(int)PreampMode.HIGH] = -fwc_preamp_offset;

			Debug.WriteLine("fwc_preamp_offset: "+fwc_preamp_offset.ToString("f6"));

			FWC.SetRX2Preamp(false);
			Thread.Sleep(200);

			num2 = 0.0f;
			for(int i=0; i<20; i++)
			{
				calibration_mutex.WaitOne();
				fixed(float* ptr = &a[0])
					DttSP.GetSpectrum(2, ptr);		// read again to clear out changed DSP
				calibration_mutex.ReleaseMutex();

				//max = float.MinValue;						// find the max spectrum value
				//		for(int j=0; j<Display.BUFFER_SIZE; j++)
				//			if(a[j] > max) max = a[j];

				//num2 += max;
				num2 += a[max_index];
				Thread.Sleep(100);

				if(!progress.Visible)
					goto end2;
				else progress.SetPercent((float)((float)++counter/120));
			}
			avg2 = num2 / 20.0f;

			// calculate the difference between the current value and the correct multimeter value
			float diff = level - (avg + rx2_meter_cal_offset);
			rx2_meter_cal_offset = diff;

			// calculate the difference between the current value and the correct spectrum value
			diff = level - (avg2 + RX2DisplayCalOffset);
			RX2DisplayCalOffset = diff;

			UpdateDisplayOffsets();

			rx2_level_table[(int)rx2_band][0] = (float)Math.Round(rx2_display_cal_offset, 3);
			rx2_level_table[(int)rx2_band][1] = (float)Math.Round(-fwc_preamp_offset, 3);
			rx2_level_table[(int)rx2_band][2] = (float)Math.Round(rx2_meter_cal_offset, 3);

			ret_val = true;

			end2:
				if(!progress.Visible) progress.Text = "";
			progress.Hide();
			EnableAllFilters();
			EnableAllModes();
			VFOLock = false;

			FullDuplex = duplex;
			//Thread.Sleep(50);
			FWC.SetGen(false);
			//Thread.Sleep(50);
			FWC.SetTest(false);
			//Thread.Sleep(50);
			FWC.SetSig(false);
			//Thread.Sleep(50);

			chkRX1Preamp.Enabled = true;
			chkRX2Preamp.Enabled = true;
			comboDisplayMode.Enabled = true;
			comboMeterRXMode.Enabled = true;
			comboRX2MeterMode.Enabled = true;

			if(ret_val == false)
			{
				rx2_meter_cal_offset = old_multimeter_cal;
				rx2_display_cal_offset = old_display_cal;
			}

			SpurReduction = rx1_sr;
			//Thread.Sleep(50);
			RX2SpurReduction = rx2_sr;
			//Thread.Sleep(50);
			RX2Enabled = rx2;
			RX2Ant = rx2_antenna;
			//Thread.Sleep(50);
			comboDisplayMode.Text = display;
			chkRIT.Checked = rit_on;							// restore RIT on
			udRIT.Value = rit_val;								// restore RIT value
			//SetupForm.RXOnly = rx_only;						// restore RX Only			
			DisplayAVG = display_avg;							// restore AVG value
			chkRX1Preamp.Checked = rx1_preamp;					// restore preamp value
			chkRX2Preamp.Checked = rx2_preamp;
			FWC.SetRX2Preamp(rx2_preamp);
			RX1Filter = rx1_filter;							// restore AM filter
			RX1DSPMode = dsp_mode;							// restore DSP mode
			//Thread.Sleep(50);
			RX2DSPMode = dsp2_mode;							// restore DSP mode
			RX1Filter = filter;								// restore filter
			if(dsp_buf_size != 4096)
				chkPower.Checked = false;						// go to standby
			setupForm.DSPPhoneRXBuffer = dsp_buf_size;				// restore DSP Buffer Size
			VFOAFreq = vfoa;									// restore vfo frequency
			//Thread.Sleep(100);
			if(dsp_buf_size != 4096)
			{
				Thread.Sleep(100);
				chkPower.Checked = true;
			}
			CurrentMeterRXMode = rx_meter;						// restore RX Meter mode
			RX2MeterMode = rx2_meter;
			setupForm.Polyphase = polyphase;					// restore polyphase

			//			Debug.WriteLine("rx1_meter_cal_offset: "+rx1_meter_cal_offset);
			//			Debug.WriteLine("display_cal_offset: "+display_cal_offset);
			//			MessageBox.Show("rx1_meter_cal_offset: "+rx1_meter_cal_offset.ToString()+"\n"+
			//				"display_cal_offset: "+display_cal_offset.ToString());

			calibration_running = false;
			return ret_val;
		}

		public float[] rx_image_rejection = new float[(int)Band.LAST];
		public float[] rx_image_from_floor = new float[(int)Band.LAST];
        public bool CalibrateRXImage(float freq, Progress progress, bool suppress_errors)
        {
            HiPerfTimer t1 = new HiPerfTimer();
            t1.Start();
            HiPerfTimer t2 = new HiPerfTimer();

            // Setup Rig for Image Null Cal
            bool ret_val = false;
            calibration_running = true;

            if (!chkPower.Checked)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Power must be on in order to calibrate RX Image.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                progress.Text = "";
                return false;
            }

            if(hid_init && current_model == Model.FLEX1500)
            {
                if(!Flex1500.ProdTestPresent())
                {
                    MessageBox.Show("Production Gen Unit not found.  Aborting Test.");
                    calibration_running = false;
                    progress.Text = "";
                    return false;
                }
            }

            bool spur_red = chkSR.Checked;					// save current spur reduction setting
            chkSR.Checked = false;							// turn spur reduction off

            //bool rx_only = SetupForm.RXOnly;				// save RX Only Setting
            //SetupForm.RXOnly = true;

            bool split = chkVFOSplit.Checked;
            chkVFOSplit.Checked = false;

            bool polyphase = setupForm.Polyphase;			// save current polyphase setting
            setupForm.Polyphase = false;					// disable polyphase

            int dsp_buf_size = setupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
            setupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 4096

            string display_mode = comboDisplayMode.Text;
            comboDisplayMode.Text = "Spectrum";

            bool avg = chkDisplayAVG.Checked;		// save current average state
            chkDisplayAVG.Checked = true;

            DSPMode dsp_mode = rx1_dsp_mode;			// save current dsp mode
            RX1DSPMode = DSPMode.DSB;					// set dsp mode to DSB

            int filt_low = RX1FilterLow;
            int filt_high = RX1FilterHigh;
            Filter filter = rx1_filter;					// save current filter
            RX1Filter = Filter.F1;						// set filter to 6kHz

            DttSP.SetCorrectIQEnable(0); // turn off I/Q correction
            DttSP.SetCorrectRXIQw(0, 0, 0.0f, 0.0f, 0);
            DttSP.SetCorrectRXIQw(0, 0, 0.0f, 0.0f, 1);

            PreampMode preamp = rx1_preamp_mode;		// save current preamp setting
            switch (current_model)
            {
              //  case Model.SDR1000:
                case Model.FLEX5000:
                    RX1PreampMode = PreampMode.HIGH;			// set preamp to high
                    break;
                case Model.FLEX3000:
                    if (FWCEEPROM.TRXRev >> 8 < 6) // before rev G
                    {
                        if (BandByFreq(freq, -1, true, current_region) == Band.B160M)
                            RX1PreampMode = PreampMode.LOW;
                        else RX1PreampMode = PreampMode.HIGH;
                    }
                    else // rev G+
                    {
                        switch (BandByFreq(freq, -1, true, current_region))
                        {
                            case Band.B160M:
                            case Band.B80M:
                            case Band.B60M:
                                RX1PreampMode = PreampMode.LOW;
                                break;
                            default:
                                RX1PreampMode = PreampMode.HIGH;
                                break;
                        }
                    }
                    break;
                case Model.FLEX1500:
                    RX1PreampMode = (PreampMode)FLEX1500PreampMode.PLUS_20;
                    break;
            }

            bool duplex = full_duplex;
            FullDuplex = true;

            bool rx2 = chkRX2.Checked;
            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                chkRX2.Checked = false;

            HIDAnt ant = RXAnt1500;

            switch(current_model)
            {
                case Model.FLEX5000:
                case Model.FLEX3000:
                    if (fwc_init)
                    {
                        VFOBFreq = freq;
                        //Thread.Sleep(50);
                        FWC.SetTest(true);
                        //Thread.Sleep(50);
                        FWC.SetGen(true);
                        //Thread.Sleep(50);
                        FWC.SetSig(true);
                        //Thread.Sleep(50);
                        FWC.SetQSE(false);
                        //Thread.Sleep(50);
                    }
                    break;
                case Model.FLEX1500:
                    if (hid_init)
                    {
                        Flex1500.ProdTestWriteOp(USBHID.Opcode.USB_OP_SET_RX1_FREQ_TW, (uint)Freq2TW(freq/2), 0);
                        Thread.Sleep(20);
                        RXAnt1500 = HIDAnt.XVTX_COM;
                        Thread.Sleep(20);
                    }
                    break;
            }

            double vfo_freq = VFOAFreq;						    // save current frequency
            VFOAFreq = freq + 2 * (float)if_freq;				// set frequency to passed value + 2*IF

            DisableAllFilters();
            DisableAllModes();
            VFOLock = true;
            comboPreamp.Enabled = false;
            comboDisplayMode.Enabled = false;

            //int retval = 0;
            progress.SetPercent(0.0f);

            float[] a = new float[Display.BUFFER_SIZE];
            float[] init_max = new float[4];

            Thread.Sleep(200);
            float sum = 0.0f;
            int peak_bin = -1;
            float max_signal = float.MinValue;

            for (int i = 0; i < 5; i++)
            {
                calibration_mutex.WaitOne();
                fixed (float* ptr = &a[0])
                    DttSP.GetSpectrum(0, ptr);// get the spectrum values
                calibration_mutex.ReleaseMutex();
                Thread.Sleep(50);
            }

            for (int i = 0; i < 5; i++)
            {
                calibration_mutex.WaitOne();
                fixed (float* ptr = &a[0])
                    DttSP.GetSpectrum(0, ptr);// get the spectrum values
                calibration_mutex.ReleaseMutex();

                for (int j = 0; i == 4 && j < Display.BUFFER_SIZE; j++)
                {
                    if (a[j] > max_signal)
                    {
                        max_signal = a[j];
                        peak_bin = j;
                    }
                }

                for (int j = 1948; j < 2148; j++) // TODO: Fix limits for 48/96kHz
                {
                    if (j < 2040 || j > 2055)
                        sum += a[j];
                }
                Thread.Sleep(50);
            }

            float noise_floor = (sum / 925.0f);
            float worst_image = max_signal;
            Debug.WriteLine("noise_floor: " + (noise_floor + Display.RX1DisplayCalOffset + Display.RX1PreampOffset).ToString("f6") + " peak_bin: " + peak_bin);

            if (max_signal < noise_floor + 25.0)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Image not found (max signal < noise floor + 25dB).  Please try again.\n" +
                        DateTime.Now.ToShortTimeString(),
                        "Image Not Found",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                DttSP.SetCorrectIQEnable(1); // turn on I/Q correction
                progress.Hide();
                goto end;
            }

            calibrating = true;
            DttSP.SetCorrectIQEnable(1); // turn on I/Q correction

            int count = 0;
            for (int i = 0; i < 15; i++)
            {
                if (i < 9) DttSP.SetCorrectIQMu(0, 0, 0.1 - i * 0.01);
                if (!progress.Visible) goto end;
                progress.SetPercent(count++ / 15.0f);
                Thread.Sleep(100);
            }

            //if (current_model == Model.FLEX1500)
            //    DttSP.SetCorrectIQMu(0, 0, 0.0);

            // Finish the algorithm and reset the values
            ret_val = true;
        end:

            if (!progress.Visible)
            {
                progress.Text = "";
                rx_image_rejection[(int)rx1_band] = 0.0f;
                rx_image_from_floor[(int)rx1_band] = 100.0f;
            }
            else
            {
                float real, imag;
                //DttSP.SetCorrectIQMu(0, 0, 0);
                DttSP.GetCorrectRXIQw(0, 0, &real, &imag, 1);
                DttSP.SetCorrectRXIQw(0, 0, real, imag, 0);
                DttSP.SetCorrectRXIQw(0, 0, 0.0f, 0.0f, 1);
                Debug.WriteLine("RX Image Real: " + real.ToString("f6") + "  Imag: " + imag.ToString("f6"));
                rx1_image_gain_table[(int)rx1_band] = real;
                rx1_image_phase_table[(int)rx1_band] = imag;

                rx_image_rejection[(int)rx1_band] = (float)(-24.0 - (noise_floor + Display.RX1DisplayCalOffset + Display.RX1PreampOffset));
                rx_image_from_floor[(int)rx1_band] = 0.0f;
            }

            progress.Hide();
            calibration_running = false;            
            calibrating = false;

            WBIRRX1Holdoff();

            switch (current_model)
            {
                case Model.FLEX5000:
                case Model.FLEX3000:
                    if (fwc_init)
                    {
                        VFOBFreq = vfo_freq;
                        //Thread.Sleep(50);
                        FWC.SetTest(false);
                        //Thread.Sleep(50);
                        FWC.SetGen(false);
                        //Thread.Sleep(50);
                        FWC.SetSig(false);
                        //Thread.Sleep(50);
                    }
                    break;
                case Model.FLEX1500:
                    if (hid_init)
                    {
                        RXAnt1500 = ant;
                        Flex1500.ProdTestWriteOp(USBHID.Opcode.USB_OP_SET_RX1_FREQ_TW, 0, 0);
                    }
                    break;
            }

            EnableAllFilters();
            EnableAllModes();
            VFOLock = false;
            FullDuplex = duplex;
            comboPreamp.Enabled = true;
            comboDisplayMode.Enabled = true;

            chkVFOSplit.Checked = split;
            chkSR.Checked = spur_red;							// restore spur reduction setting
            RX1PreampMode = preamp;							    // restore preamp mode
            comboDisplayMode.Text = display_mode;				// restore display mode
            //SetupForm.RXOnly = rx_only;						// restore RX Only setting
            RX1DSPMode = dsp_mode;							    // restore dsp mode
            RX1Filter = filter;								    // restore filter
            if (filter == Filter.VAR1 || filter == Filter.VAR2)
                UpdateRX1Filters(filt_low, filt_high);

            VFOAFreq = vfo_freq;								// restore frequency
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            chkDisplayAVG.Checked = avg;						// restore average state
            setupForm.DSPPhoneRXBuffer = dsp_buf_size;	        // restore DSP Buffer Size
            setupForm.Polyphase = polyphase;					// restore polyphase

            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                chkRX2.Checked = rx2;

            t1.Stop();
            //MessageBox.Show(t1.Duration.ToString());
            Debug.WriteLine("timer: " + t1.Duration);
            return ret_val;
        }

        public bool CalibrateRX2Image(float freq, Progress progress, bool suppress_errors)
        {
            if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return false;

            HiPerfTimer t1 = new HiPerfTimer();
            t1.Start();
            HiPerfTimer t2 = new HiPerfTimer();

            //float global_min_value = float.MaxValue;

            // Setup Rig for Image Null Cal
            bool ret_val = false;
            calibration_running = true;

            if (!chkPower.Checked)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Power must be on in order to calibrate RX Image.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                progress.Text = "";
                return false;
            }

            double vfoa = VFOAFreq;
            double vfob = VFOBFreq;

            DttSP.SetCorrectIQEnable(0);					// turn off I/Q correction
            DttSP.SetCorrectRXIQw(2, 0, 0.0f, 0.0f, 0);
            DttSP.SetCorrectRXIQw(2, 0, 0.0f, 0.0f, 1);

            bool spur_red = chkSR.Checked;					// save current spur reduction setting
            chkSR.Checked = false;							// turn spur reduction off
            //Thread.Sleep(50);

            bool rx2_sr = chkRX2SR.Checked;
            chkRX2SR.Checked = false;
            //Thread.Sleep(50);

            //bool rx_only = SetupForm.RXOnly;				// save RX Only Setting
            //SetupForm.RXOnly = true;

            bool split = chkVFOSplit.Checked;
            chkVFOSplit.Checked = false;

            bool polyphase = setupForm.Polyphase;			// save current polyphase setting
            setupForm.Polyphase = false;					// disable polyphase

            int dsp_buf_size = setupForm.DSPPhoneRXBuffer;	// save current DSP buffer size
            setupForm.DSPPhoneRXBuffer = 4096;				// set DSP Buffer Size to 4096

            bool rx2 = rx2_enabled;
            RX2Enabled = true;

            string display_mode = comboDisplayMode.Text;
            comboDisplayMode.Text = "Spectrum";

            bool avg = chkDisplayAVG.Checked;				// save current average state
            chkDisplayAVG.Checked = true;

            DSPMode dsp_mode = rx1_dsp_mode;				// save current dsp mode
            DSPMode dsp2_mode = rx2_dsp_mode;				// save current dsp mode

            RX1DSPMode = DSPMode.DSB;						// set dsp mode to DSB
            //Thread.Sleep(50);
            RX2DSPMode = DSPMode.DSB;						// set dsp mode to DSB

            int filt1_low = RX1FilterLow;
            int filt1_high = RX1FilterHigh;
            Filter filter1 = rx1_filter;					// save current filter

            int filt2_low = RX1FilterLow;
            int filt2_high = RX1FilterHigh;
            Filter filter2 = rx1_filter;					// save current filter

            /*PreampMode preamp = rx1_preamp_mode;			// save current preamp setting
            RX1PreampMode = PreampMode.HIGH;				// set preamp to high*/
            bool preamp = fwc_rx2_preamp;
            FWC.SetRX2Preamp(true);
            //Thread.Sleep(50);

            bool duplex = full_duplex;
            FullDuplex = true;

            VFOAFreq = freq;
            //Thread.Sleep(50);
            FWC.SetTest(true);
            //Thread.Sleep(50);
            FWC.SetGen(true);
            //Thread.Sleep(50);
            FWC.SetSig(true);
            //Thread.Sleep(50);
            FWC.SetQSE(false);
            //Thread.Sleep(50);

            VFOBFreq = freq + 2 * (float)if_freq;				// set frequency to passed value + 2*IF
            //Thread.Sleep(100);

            UpdateRX1Filters(-5000, 5000);
            UpdateRX2Filters(-5000, 5000);

            FWCAnt rx2_antenna = RX2Ant;
            RX2Ant = FWCAnt.RX1TAP;
            //Thread.Sleep(50);

            DisableAllFilters();
            DisableAllModes();
            VFOLock = true;
            comboPreamp.Enabled = false;
            comboDisplayMode.Enabled = false;

            //int retval = 0;
            progress.SetPercent(0.0f);

            float[] a = new float[Display.BUFFER_SIZE];

            Thread.Sleep(200);
            float sum = 0.0f;
            int peak_bin = -1;
            float max_signal = float.MinValue;

            for (int i = 0; i < 5; i++)
            {
                calibration_mutex.WaitOne();
                fixed (float* ptr = &a[0])
                    DttSP.GetSpectrum(2, ptr);				// get the spectrum values
                calibration_mutex.ReleaseMutex();
                Thread.Sleep(50);
            }

            for (int i = 0; i < 5; i++)
            {
                calibration_mutex.WaitOne();
                fixed (float* ptr = &a[0])
                    DttSP.GetSpectrum(2, ptr);				// get the spectrum values
                calibration_mutex.ReleaseMutex();

                /*for(int j=0; i==4 && j<Display.BUFFER_SIZE; j++)
                {
                    if(a[j] > max_signal)
                    {
                        max_signal = a[j];
                        peak_bin = j;
                    }
                }*/
                max_signal = a[2048];
                peak_bin = 2048;

                for (int j = 1948; j < 2148; j++) // TODO: Fix limits for 48/96kHz
                {
                    if (j < 2040 || j > 2055)
                        sum += a[j];
                }
                Thread.Sleep(50);
            }

            float noise_floor = (sum / 925.0f);
            float worst_image = max_signal;
            Debug.WriteLine("noise_floor: " + noise_floor.ToString("f6") + " peak_bin: " + peak_bin);

            if (max_signal < noise_floor + 30.0)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Image not found (max signal < noise floor + 30dB).  Please try again.\n" +
                        DateTime.Now.ToShortTimeString(),
                        "Image Not Found",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                DttSP.SetCorrectIQEnable(1); // turn on I/Q correction
                //progress.Text = "";
                goto end;
            }

            calibrating = true;
            DttSP.SetCorrectIQEnable(1); // turn on I/Q correction

            int count = 0;
            for (int i = 0; i < 15; i++)
            {
                if (i < 9) DttSP.SetCorrectIQMu(2, 0, 0.1 - i * 0.01);
                if (!progress.Visible) goto end;
                progress.SetPercent(count++ / 15.0f);
                Thread.Sleep(100);
            }

            // Finish the algorithm and reset the values
            ret_val = true;
        end:
            if (!progress.Visible) progress.Text = "";
            else
            {
                float real, imag;
                DttSP.SetCorrectIQMu(2, 0, 0);
                DttSP.GetCorrectRXIQw(2, 0, &real, &imag, 1);
                DttSP.SetCorrectRXIQw(2, 0, real, imag, 0);
                DttSP.SetCorrectRXIQw(2, 0, 0.0f, 0.0f, 1);
                rx2_image_gain_table[(int)rx2_band] = real;
                rx2_image_phase_table[(int)rx2_band] = imag;
            }
            progress.Hide();
            calibration_running = false;
            calibrating = false;

            WBIRRX1Holdoff();
            WBIRRX2Holdoff();

            rx_image_rejection[(int)rx2_band] = (float)(-24.0 - (noise_floor + Display.RX2DisplayCalOffset + Display.RX2PreampOffset));
            rx_image_from_floor[(int)rx2_band] = 0.0f;

            FWC.SetTest(false);
            //Thread.Sleep(50);
            FWC.SetGen(false);
            //Thread.Sleep(50);
            FWC.SetSig(false);
            //Thread.Sleep(50);

            EnableAllFilters();
            EnableAllModes();
            VFOLock = false;
            FullDuplex = duplex;
            FWC.SetRX2Preamp(preamp);
            //Thread.Sleep(50);
            comboDisplayMode.Enabled = true;

            chkVFOSplit.Checked = split;
            chkSR.Checked = spur_red;							// restore spur reduction setting
            //Thread.Sleep(50);
            chkRX2SR.Checked = rx2_sr;
            //Thread.Sleep(50);
            //RX1PreampMode = preamp;							// restore preamp mode
            comboDisplayMode.Text = display_mode;				// restore display mode
            //SetupForm.RXOnly = rx_only;						// restore RX Only setting
            RX1DSPMode = dsp_mode;								// restore dsp mode
            //Thread.Sleep(50);
            RX2DSPMode = dsp2_mode;								// restore dsp mode
            RX1Filter = filter1;								// restore filter
            if (filter1 == Filter.VAR1 || filter1 == Filter.VAR2)
                UpdateRX1Filters(filt1_low, filt1_high);
            RX2Filter = filter2;
            if (filter2 == Filter.VAR1 || filter2 == Filter.VAR2)
                UpdateRX2Filters(filt2_low, filt2_high);

            VFOAFreq = vfoa;									// restore frequency
            //Thread.Sleep(100);
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            //Thread.Sleep(100);
            VFOBFreq = vfob;
            //Thread.Sleep(100);
            RX2Enabled = rx2;
            RX2Ant = rx2_antenna;
            //Thread.Sleep(50);
            chkDisplayAVG.Checked = avg;						// restore average state
            setupForm.DSPPhoneRXBuffer = dsp_buf_size;			// restore DSP Buffer Size
            setupForm.Polyphase = polyphase;					// restore polyphase

            t1.Stop();
            //MessageBox.Show(t1.Duration.ToString());
            Debug.WriteLine("timer: " + t1.Duration);
            return ret_val;
        }

		public float[] tx_image_rejection = new float[(int)Band.LAST];
        public bool CalibrateTXImage(float freq, Progress progress, bool suppress_errors)
        {
            if ((!fwc_init || (current_model != Model.FLEX5000 && current_model != Model.FLEX3000)) &&
                (!hid_init || current_model != Model.FLEX1500))
            {
                progress.Text = "";
                progress.Hide();
                return false;
            }

            if (!chkPower.Checked)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Power must be on in order to calibrate TX Image.", "Power Is Off",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                progress.Text = "";
                tx_image_rejection[(int)tx_band] = 0.0f;
                return false;
            }

            calibrating = true;

            float tol = 10.0f;
            float phase_step = 2;
            float gain_step = 2;
            float global_min_phase = 0;
            float global_min_gain = 0;
            float gain_index = 0.0f, phase_index = 0.0f;
            float global_min_value = float.MaxValue;
            bool progressing = true;
            int gain_dir = -1;
            int phase_dir = 1;
            int gain_count = 1, phase_count = 1;
            int wrong_direction_count;
            int switch_direction_count;
            string index_string;
            string val_string;
            string gain_string = "";
            string phase_string = "";
            float fundamental = -200.0f;

            switch (current_model)
            {
                case Model.FLEX3000:
                    phase_step = 4;
                    gain_step = 4;
                    break;
            }

            HiPerfTimer t1 = new HiPerfTimer();
            t1.Start();
            HiPerfTimer t2 = new HiPerfTimer();

            // Setup Rig for TX Image Null Cal
            bool ret_val = false;
            calibration_running = true;

            //int retval = 0;
            progress.SetPercent(0.0f);

            bool spur_red = chkSR.Checked;					// save current spur reduction setting
            chkSR.Checked = false;							// turn spur reduction off

            bool polyphase = setupForm.Polyphase;			// save current polyphase setting
            setupForm.Polyphase = false;					// disable polyphase

            int dsp_buf_size = setupForm.DSPPhoneRXBuffer;	// save current DSP buffer size
            setupForm.DSPPhoneRXBuffer = 4096;				// set DSP Buffer Size to 4096

            DSPMode dsp_mode = rx1_dsp_mode;			    // save current dsp mode
            RX1DSPMode = DSPMode.USB;					    // set dsp mode to USB

            // Setting filters for TX calibration (optmized for SSB) and we need to fix the VAR filter setting
            // consequence of this action

            string display_mode = comboDisplayMode.Text;
            comboDisplayMode.Text = "Spectrum";

            bool avg = chkDisplayAVG.Checked;				// save current average state
            chkDisplayAVG.Checked = true;

            Filter filter = rx1_filter;					    // save current filter
            SetRX1Filter(Filter.VAR1);

            int filter_low = (int)udFilterLow.Value;
            int filter_high = (int)udFilterHigh.Value;

            UpdateRX1Filters(-3000, 3000);					// set filter to -3k, -300 ... LSB for image
            
            int tx_filt_low = setupForm.TXFilterLow;		// save tx filter low cut
            setupForm.TXFilterLow = 300;					// set low cut to 300Hz

            int tx_filt_high = setupForm.TXFilterHigh;		// save tx filter high cut
            setupForm.TXFilterHigh = 3000;					// set high cut to 3kHz

            PreampMode preamp = rx1_preamp_mode;		    // save current preamp setting
            switch (current_model)
            {
                case Model.FLEX5000:
                    RX1PreampMode = PreampMode.HIGH;		// set preamp to high
                    break;
                case Model.FLEX3000:
                    if (BandByFreq(freq, -1, true, current_region) == Band.B160M)
                        RX1PreampMode = PreampMode.LOW;
                    else RX1PreampMode = PreampMode.HIGH;
                    break;
            }


            bool duplex = full_duplex;
            FullDuplex = true;

            bool mute = chkMUT.Checked;
            chkMUT.Checked = false;

            int af = ptbAF.Value;
            ptbAF.Value = 50;

            int tx_af = TXAF;

            TXAF = 50;

            double vfo_freq = VFOAFreq;						// save current frequency
            VFOAFreq = freq;								// set frequency to passed value
            VFOBFreq = freq;

            Audio.TXInputSignal = Audio.SignalSource.SINE;
            double last_scale = Audio.SourceScale;			// saved audio scale
            Audio.SourceScale = 1.0;
            double tone_freq = Audio.SineFreq1;				// save tone freq
            Audio.SineFreq1 = 1500.0;						// set freq

            int pwr = ptbPWR.Value;
            ptbPWR.Value = 100;
            Audio.RadioVolume = 0.500; // changed from 0.200 4/8/09

            HIDAnt hid_ant = RXAnt1500;
            bool iambic = CWIambic;
            CWIambic = false;

            bool ptt = disable_ptt;
            disable_ptt = true;

            double _if_freq = if_freq;
            int _cw_pitch = cw_pitch;
            HIDAnt _rx_ant_1500 = rx_ant_1500;

            bool xit = chkXIT.Checked;
            chkXIT.Checked = false;

            bool rit = chkRIT.Checked;
            chkRIT.Checked = false;

            switch (current_model)
            {
                case Model.FLEX5000:
                case Model.FLEX3000:
                    FWC.SetQSD(true);
                    FWC.SetQSE(true);
                    FWC.SetTR(true);
                    FWC.SetSig(true);
                    FWC.SetGen(false);
                    FWC.SetTest(true);
                    FWC.SetTXMon(false);
                    FWC.SetPDrvMon(true);
                    break;
                case Model.FLEX1500:
                    if (hid_init)
                    {
                        preamp = RX1PreampMode;								    // save current preamp mode
                        RX1PreampMode = (PreampMode)FLEX1500PreampMode.ZERO; // set to Off

                        RXAnt1500 = HIDAnt.XVTX_COM;

                        Thread.Sleep(20);

                        /*if (freq < 15.0)
                            IFFreq = 0.002;
                        else IFFreq = 0.005;*/
                        IFFreq = 0.0006;

                        // use sig gen to cal RX WBIR
                        if (production && Flex1500.ProdTestPresent())
                        {
                            Flex1500.ProdTestWriteOp(USBHID.Opcode.USB_OP_SET_RX1_FREQ_TW, (uint)Freq2TW((freq + if_freq) / 2), 0);
                            Thread.Sleep(20);
                            

                            DttSP.SetCorrectIQMu(0, 0, 0.05);
                            Thread.Sleep(1000);

                            for (int i = 0; i < 30; i++)
                            {
                                if (i >= 5 && i < 15)
                                    DttSP.SetCorrectIQMu(0, 0, 0.05 - (i - 5) * 0.005);
                                Thread.Sleep(100);
                            }

                            Thread.Sleep(1000);
                        }
                        else
                        {
                            Thread.Sleep(1000);
                            float[] buf = new float[Display.BUFFER_SIZE];
                            for (int i = 0; i < 5; i++)
                            {
                                calibration_mutex.WaitOne();
                                fixed (float* ptr = &buf[0])
                                    DttSP.GetSpectrum(0, ptr);// get the spectrum values
                                calibration_mutex.ReleaseMutex();
                                Thread.Sleep(50);
                            }

                            float peak_val = float.MinValue;
                            int peak_index = 0;

                            for (int i = 0; i < Display.BUFFER_SIZE; i++)
                            {
                                if (buf[i] > peak_val)
                                {
                                    peak_val = buf[i];
                                    peak_index = i;
                                }
                            }

                            if (peak_val < 10.0) // low SNR
                            {
                                progress.Visible = false;
                                progress.Text = "";
                                MessageBox.Show("Unable to find strong enough signal for calibration.\n" +
                                    "Please check the RTG connections and try again.");                                
                                goto end;
                            }

                            int ideal_bin = (int)((cw_pitch - if_freq * 1e6 + sample_rate1/2) / sample_rate1 * Display.BUFFER_SIZE);
                            double freq_adjust = ((peak_index - ideal_bin) * (double)sample_rate1 / (double)Display.BUFFER_SIZE)*1e-6; // in MHz

                            VFOAFreq += freq_adjust;
                            Thread.Sleep(500);

                            DttSP.SetCorrectIQMu(0, 0, 0.05);
                            Thread.Sleep(1000);

                            for (int i = 0; i < 30; i++)
                            {
                                if (i >= 5 && i < 15)
                                    DttSP.SetCorrectIQMu(0, 0, 0.05 - (i - 5) * 0.005);
                                Thread.Sleep(100);
                            }

                            Thread.Sleep(1000);
                            USBHID.SetTXOut(true);
                        }

                        // lock RX WBIR where it is
                        calibrating = true;
                        DttSP.SetCorrectIQMu(0, 0, 0.0);
                        DttSP.SetCorrectIQMu(0, 1, 0.0);

                        RX1DSPMode = DSPMode.CWU;					// set dsp mode to CWU
                        CWKeyer.SensorEnqueue(new CWSensorItem(CWSensorItem.InputType.Dot, true));
                        //Keyer.HIDDot = true;  

                        RXAnt1500 = HIDAnt.BITE;
                        Thread.Sleep(100);

                        USBHID.SetGen(true);
                        Thread.Sleep(100);

                        USBHID.SetQSE(true);
                        Thread.Sleep(100);

                        USBHID.SetTest(true);
                        Thread.Sleep(100);

                        RX1PreampMode = (PreampMode)FLEX1500PreampMode.PLUS_20; // set to Off

                        CWPitch = 600;                        

                        //RX1Filter = Filter.F6;					
                        UpdateRX1Filters(-(int)(if_freq * 1e6) - cw_pitch - 200, -(int)(if_freq * 1e6) + cw_pitch + 1000);
                        chkDisplayAVG.Checked = false;

                        Audio.TX1500ImageCal = true;
                        Audio.SourceScale = 0.01;
                        //Audio.RX1OutputSignal = Audio.SignalSource.SINE;
                        //Audio.TXInputSignal = Audio.SignalSource.RADIO;                                                                                           

                        Thread.Sleep(1000);
                    }
                    break;
            }

            DisableAllFilters();
            DisableAllModes();
            VFOLock = true;
            comboPreamp.Enabled = false;
            comboDisplayMode.Enabled = false;

            setupForm.ImageGainTX = -200.0f;
            setupForm.ImagePhaseTX = -200.0f;

            float[] a = new float[Display.BUFFER_SIZE];
            for (int i = 0; i < 5; i++)
            {
                calibration_mutex.WaitOne();
                fixed (float* ptr = &a[0])
                    DttSP.GetSpectrum(0, ptr);// get the spectrum values
                calibration_mutex.ReleaseMutex();
                Thread.Sleep(50);
            }

            float max_signal = float.MinValue;
            int peak_bin;
            float sum = 0.0f;
            float noise_floor = float.MaxValue;

            if (current_model != Model.FLEX1500)
            {
                peak_bin = 2048 + (int)(1500.0 / sample_rate1 * 4096.0);
                Thread.Sleep(100);

                for (int i = 0; i < 20; i++)
                {
                    calibration_mutex.WaitOne();
                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);// get the spectrum values
                    calibration_mutex.ReleaseMutex();
                    for (int j = 0; i == 19 && j < Display.BUFFER_SIZE; j++)
                    {
                        if (a[j] > max_signal)
                        {
                            max_signal = a[j];
                            peak_bin = j;
                        }
                    }
                    Thread.Sleep(100);
                }
                fundamental = max_signal;
                UpdateRX1Filters(-3000, -300);
                Thread.Sleep(100);

                peak_bin = 2048 + (int)(-1500.0 / sample_rate1 * 4096.0);
                max_signal = float.MinValue;

                int filt_low_bin = 2048 + (int)(-3000.0 / sample_rate1 * 4096.0);
                int filt_high_bin = 2048 + (int)(-300.0 / sample_rate1 * 4096.0);

                for (int i = 0; i < 20; i++)
                {
                    calibration_mutex.WaitOne();
                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);// get the spectrum values
                    calibration_mutex.ReleaseMutex();
                    for (int j = 0; i == 19 && j < Display.BUFFER_SIZE; j++)
                    {
                        if (a[j] > max_signal)
                        {
                            max_signal = a[j];
                            peak_bin = j;
                        }
                    }
                    for (int j = filt_low_bin; j < filt_high_bin; j++)
                    {
                        if (j < peak_bin - 8 || j > peak_bin + 8)
                            sum += a[j];
                    }
                    Thread.Sleep(100);
                }

                noise_floor = (sum / (float)(((filt_high_bin - filt_low_bin) - 17) * 20));
            }
            else // FLEX-1500
            {
                peak_bin = 2048 + (int)((-if_freq * 1e6 + cw_pitch) / sample_rate1 * 4096.0);
                Thread.Sleep(100);

                int filt_low_bin = 2048 + (int)((-(if_freq * 1e6) + cw_pitch + 800) / sample_rate1 * 4096.0);
                int filt_high_bin = 2048 + (int)((-(if_freq * 1e6) + cw_pitch + 1000) / sample_rate1 * 4096.0);

                for (int i = 0; i < 20; i++) // calculate noise floor
                {
                    calibration_mutex.WaitOne();
                    fixed (float* ptr = &a[0])
                        DttSP.GetSpectrum(0, ptr);// get the spectrum values
                    calibration_mutex.ReleaseMutex();

                    for (int j = filt_low_bin; j < filt_high_bin; j++)
                        sum += a[j];

                    Thread.Sleep(100);
                }

                noise_floor = sum / (float)(20 * (filt_high_bin - filt_low_bin));
                Debug.WriteLine("noise floor: " + noise_floor.ToString("f1"));

                //UpdateRX1Filters((int)(-if_freq * 1e6 + cw_pitch - 200), (int)(-if_freq * 1e6 + cw_pitch + 200));
                filt_low_bin = 2048 + (int)((-(if_freq * 1e6) + cw_pitch - 200) / sample_rate1 * 4096.0);
                filt_high_bin = 2048 + (int)((-(if_freq * 1e6) + cw_pitch + 200) / sample_rate1 * 4096.0);

                max_signal = float.MinValue;
                for (int j = filt_low_bin; j < filt_high_bin; j++) // find peak value (fundamental)
                {
                    if (a[j] > max_signal)
                    {
                        max_signal = a[j];
                        peak_bin = j;
                    }
                }

                fundamental = max_signal;
                Debug.WriteLine("fundamental: " + fundamental.ToString("f1") + "  peak_bin: " + peak_bin);

                filt_low_bin = 2048 + (int)((-(if_freq * 1e6) - cw_pitch - 200) / sample_rate1 * 4096.0);
                filt_high_bin = 2048 + (int)((-(if_freq * 1e6) - cw_pitch + 200) / sample_rate1 * 4096.0);

                max_signal = float.MinValue;

                for (int j = filt_low_bin; j < filt_high_bin; j++)
                {
                    if (a[j] > max_signal)
                    {
                        max_signal = a[j];
                        peak_bin = j;
                    }
                }

                float image = max_signal;
                float rejection = fundamental - image;
                Debug.WriteLine("image: " + image.ToString("f1") + "  peak_bin: " + peak_bin + "  rejection: " + rejection.ToString("f1"));
            }

            Debug.WriteLine("noise_floor: " + noise_floor.ToString("f6") + " peak_bin:" + peak_bin);
            //MessageBox.Show("Noise Floor: "+(noise_floor + Display.DisplayCalOffset + Display.PreampOffset).ToString("f1"));

            if (max_signal < noise_floor + 10.0)
            {
                if (!suppress_errors)
                {
                    MessageBox.Show("Image not found (max signal < noise floor + 10dB).  Please try again.\n" +
                        DateTime.Now.ToShortTimeString(),
                        "Image Not Found",
                        MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                calibration_running = false;
                //progress.Text = "";
                goto end;
            }

            setupForm.ImagePhaseTX = 0.0f;
            setupForm.ImageGainTX = 0.0f;

            double TIMEOUT = 90.0;
            if (current_model == Model.FLEX1500)
                TIMEOUT = 40.0;

            while (progressing)
            {
                // find minimum of the peak signal over 
                // the range of Gain settings

                float start = 0.0f;
                float min_signal = float.MaxValue;
                max_signal = float.MinValue;
                wrong_direction_count = switch_direction_count = 0;
                bool first_time = true;

                Debug.WriteLine("gain_dir:" + gain_dir + " gain_step: " + gain_step.ToString("f3"));
                t2.Start();
                index_string = "";
                val_string = "";
                gain_string += (gain_count + "," + gain_dir + "," + gain_step.ToString("f6") + "\n");
                for (float i = global_min_gain; i >= -500.0 && i <= 500.0; i += (gain_step * gain_dir))
                {
                    setupForm.ImageGainTX = i;				//set gain slider
                    Thread.Sleep(200);

                    int num_avg = gain_count;
                    //if(gain_step <= 0.01) num_avg = 4;
                    sum = 0.0f;
                    for (int j = 0; j < num_avg; j++)
                    {
                        calibration_mutex.WaitOne();
                        fixed (float* ptr = &a[0])
                            DttSP.GetSpectrum(0, ptr);// get the spectrum values
                        sum += a[peak_bin];
                        calibration_mutex.ReleaseMutex();
                        if (j < num_avg - 1) Thread.Sleep(50);
                    }
                    sum /= num_avg;
                    a[peak_bin] = sum;

                    index_string += i.ToString("f4") + ",";
                    val_string += a[peak_bin].ToString("f4") + ",";

                    if (a[peak_bin] < min_signal)			// if image is less than minimum
                    {
                        min_signal = a[peak_bin];
                        gain_index = i;
                        if (min_signal < global_min_value)
                        {
                            global_min_value = min_signal;
                            global_min_gain = gain_index;
                        }
                    }

                    // cal complete condition
                    float tol2 = 12.0f;
                    if (current_model == Model.FLEX1500)
                        tol2 = 9.0f;
                    if (min_signal < noise_floor + tol2)
                    {
                        progressing = false;
                        break;
                    }

                    if (first_time)
                    {
                        first_time = false;
                        start = a[peak_bin];
                        max_signal = a[peak_bin];
                    }
                    else
                    {
                        if (a[peak_bin] > max_signal && a[peak_bin] > start + 1.0)
                        {
                            max_signal = a[peak_bin];
                            wrong_direction_count++; Debug.Write("W");
                            if (wrong_direction_count > 1)
                            {
                                wrong_direction_count = 0;
                                if (++switch_direction_count > 1)
                                {
                                    // handle switched direction twice
                                    if (gain_step >= 0.1) gain_step /= 2.0f;
                                    else gain_step /= 2.0f;
                                    gain_dir *= -1;
                                    Debug.WriteLine("gain exit dir - gain_step:" + gain_step.ToString("f4") + "  distance:" + (global_min_value - noise_floor).ToString("f1"));
                                    break;
                                }

                                min_signal = start;
                                max_signal = start;
                                gain_dir *= -1;
                                i = global_min_gain;
                            }
                        }
                        else
                        {
                            if (min_signal > noise_floor + 20.0) tol = 3.0f;
                            else tol = 3.0f;
                            if (a[peak_bin] > min_signal + tol)
                            {
                                if (gain_step > 0.1) gain_step /= 2.0f;
                                else gain_step /= 2.0f;
                                gain_dir *= -1;
                                Debug.WriteLine("exit gain thresh - gain_step:" + gain_step.ToString("f4") + "  distance:" + (global_min_value - noise_floor).ToString("f1"));
                                break;
                            }
                        }
                    }

                    if (!progress.Visible) goto end;
                    else
                    {
                        t1.Stop();
                        if (t1.Duration > TIMEOUT)
                        {
                            /*MessageBox.Show("TX Image Reject Calibration Failed.  Values have been returned to previous settings.\n"+
                                DateTime.Now.ToShortTimeString(),
                                "TX Image Failed",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);*/
                            goto end;
                        }
                        else progress.SetPercent((float)(t1.Duration / TIMEOUT));
                    }
                }

                t2.Stop();
                Debug.WriteLine("t2 gain(" + gain_count++ + "): " + t2.Duration);
                if (gain_count < 10)
                {
                    gain_string += (index_string + "\n");
                    gain_string += (val_string + "\n\n");
                }

                setupForm.ImageGainTX = global_min_gain;			//set gain slider to min found
                Debug.WriteLine("Global_Min_Gain: " + global_min_gain.ToString("f2"));

                if (!progressing) break;

                // find minimum of the peak signal over 
                // the range of Phase settings
                min_signal = float.MaxValue;
                max_signal = float.MinValue;
                wrong_direction_count = switch_direction_count = 0;
                first_time = true;

                t2.Start();
                index_string = "";
                val_string = "";
                phase_string += (phase_count + "," + phase_dir + "," + phase_step.ToString("f3") + "\n");
                for (float i = global_min_phase; i >= -400.0 && i <= 400.0; i += (phase_step * phase_dir))
                {
                    setupForm.ImagePhaseTX = i;				// phase slider
                    Thread.Sleep(200);

                    sum = 0.0f;
                    int num_avg = phase_count;
                    //if(phase_step <= 0.01) num_avg = 4;
                    for (int j = 0; j < num_avg; j++)
                    {
                        calibration_mutex.WaitOne();
                        fixed (float* ptr = &a[0])
                            DttSP.GetSpectrum(0, ptr);// get the spectrum values
                        sum += a[peak_bin];
                        calibration_mutex.ReleaseMutex();
                        if (j < num_avg - 1) Thread.Sleep(50);
                    }
                    sum /= num_avg;
                    a[peak_bin] = sum;

                    index_string += i.ToString("f4") + ",";
                    val_string += a[peak_bin].ToString("f4") + ",";

                    if (a[peak_bin] < min_signal)			// if image is less than minimum
                    {
                        min_signal = a[peak_bin];
                        phase_index = i;
                        if (min_signal < global_min_value)
                        {
                            global_min_value = min_signal;
                            global_min_phase = phase_index;
                        }
                    }

                    // cal complete condition
                    float tol2 = 12.0f;
                    if (current_model == Model.FLEX1500)
                        tol2 = 9.0f;
                    if (min_signal < noise_floor + tol2)
                    {
                        progressing = false;
                        break;
                    }

                    if (first_time)
                    {
                        first_time = false;
                        start = a[peak_bin];
                        max_signal = a[peak_bin];
                    }
                    else
                    {
                        if (a[peak_bin] > max_signal && a[peak_bin] > start + 1.0)
                        {
                            max_signal = a[peak_bin];
                            wrong_direction_count++; Debug.Write("W");
                            if (wrong_direction_count > 1)
                            {
                                wrong_direction_count = 0;
                                if (++switch_direction_count > 1)
                                {
                                    // handle switched direction twice
                                    if (phase_step >= 0.1) phase_step /= 2.0f;
                                    else phase_step /= 2.0f;
                                    phase_dir *= -1;
                                    Debug.WriteLine("phase exit dir - phase_step:" + phase_step.ToString("f4") + "  distance:" + (global_min_value - noise_floor).ToString("f1"));
                                    break;
                                }

                                min_signal = start;
                                max_signal = start;
                                phase_dir *= -1;
                                i = global_min_phase;
                            }
                        }
                        else
                        {
                            if (min_signal > noise_floor + 20.0) tol = 3.0f;
                            else tol = 3.0f;
                            if (a[peak_bin] > min_signal + tol)
                            {
                                if (phase_step >= 0.1) phase_step /= 2.0f;
                                else phase_step /= 2.0f;
                                phase_dir *= -1;
                                Debug.WriteLine("phase exit thresh - phase_step:" + phase_step.ToString("f4") + "  distance:" + (global_min_value - noise_floor).ToString("f1"));
                                break;
                            }
                        }
                    }

                    if (!progress.Visible) goto end;
                    else
                    {
                        t1.Stop();
                        if (t1.Duration > TIMEOUT)
                        {
                            /*MessageBox.Show("TX Image Reject Calibration Failed.  Values have been returned to previous settings.\n"+
                                DateTime.Now.ToShortTimeString(),
                                "TX Image Failed",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);*/
                            goto end;
                        }
                        else progress.SetPercent((float)(t1.Duration / TIMEOUT));
                    }
                }

                t2.Stop();
                Debug.WriteLine("t2 phase(" + phase_count++ + "): " + t2.Duration);

                setupForm.ImagePhaseTX = global_min_phase;			//set phase slider to min found
                Debug.WriteLine("Global_Min_Phase: " + global_min_phase.ToString("f2"));
                if (!progressing) break;
            }

            // Finish the algorithm and reset the values
            ret_val = true;
        end:
            if (!progress.Visible) progress.Text = "";
            else
            {
                setupForm.ImageGainTX = global_min_gain;
                setupForm.ImagePhaseTX = global_min_phase;

                tx_image_gain_table[(int)tx_band] = setupForm.ImageGainTX;
                tx_image_phase_table[(int)tx_band] = setupForm.ImagePhaseTX;                
            }
            progress.Hide();

            tx_image_rejection[(int)tx_band] = global_min_value - fundamental;

            Audio.TXInputSignal = Audio.SignalSource.RADIO;
            Audio.SourceScale = last_scale;						// recall tone scale
            Audio.SineFreq1 = tone_freq;						// recall tone freq
            ptbPWR.Value = pwr;
            CWIambic = iambic;
            disable_ptt = ptt;

            switch (current_model)
            {
                case Model.FLEX5000:
                case Model.FLEX3000:
                    FullDuplex = duplex;
                    FWC.SetQSD(true);
                    FWC.SetQSE(false);
                    FWC.SetTR(false);
                    FWC.SetSig(false);
                    FWC.SetGen(false);
                    FWC.SetTest(false);
                    FWC.SetTXMon(false);
                    FWC.SetPDrvMon(false);
                    break;
                case Model.FLEX1500:
                    FullDuplex = duplex;
                    CWKeyer.SensorEnqueue(new CWSensorItem(CWSensorItem.InputType.Dot, false));
                    Audio.TX1500ImageCal = false;

                    IFFreq = _if_freq;
                    CWPitch = _cw_pitch;
                    RXAnt1500 = _rx_ant_1500;

                    USBHID.SetTest(false); Thread.Sleep(10);
                    USBHID.SetQSE(false); Thread.Sleep(10);
                    USBHID.SetGen(false); Thread.Sleep(10);

                    RXAnt1500 = hid_ant; Thread.Sleep(10);


                    RX1DSPMode = DSPMode.USB;
                    MOX = true; Thread.Sleep(100);
                    MOX = false; Thread.Sleep(100);

                    Audio.RX1OutputSignal = Audio.SignalSource.RADIO;

                    DttSP.SetCorrectIQEnable(1); // turn on I/Q correction

                    WBIRRX1Holdoff();

                    ptbAF_Scroll(this, EventArgs.Empty);

                    USBHID.SetTXOut(false);
                    break;
            }

            if (current_model == Model.FLEX3000)
                FWC.SetFan(false);

            EnableAllFilters();
            EnableAllModes();
            VFOLock = false;
            comboPreamp.Enabled = true;
            comboDisplayMode.Enabled = true;

            chkXIT.Checked = xit;
            chkRIT.Checked = rit;
            setupForm.TXFilterHigh = tx_filt_high;				// restore TX filter settings
            setupForm.TXFilterLow = tx_filt_low;
            chkSR.Checked = spur_red;							// restore spur reduction setting
            RX1PreampMode = preamp;							    // restore preamp mode
            comboDisplayMode.Text = display_mode;				// restore display mode
            //SetupForm.RXOnly = rx_only;						// restore RX Only setting
            RX1DSPMode = dsp_mode;							    // restore dsp mode
            UpdateRX1Filters(filter_low, filter_high);
            RX1Filter = filter;								    // restore filter
            VFOAFreq = vfo_freq;								// restore frequency
            txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            chkDisplayAVG.Checked = avg;						// restore average state
            setupForm.DSPPhoneRXBuffer = dsp_buf_size;			// restore DSP Buffer Size
            setupForm.Polyphase = polyphase;					// restore polyphase

            chkMUT.Checked = mute;
            ptbAF.Value = af;
            TXAF = tx_af;

            t1.Stop();
            //MessageBox.Show(t1.Duration.ToString());
            Debug.WriteLine("timer: " + t1.Duration);

            calibration_running = false;
            calibrating = false;

            return ret_val;
        }



		public bool CalibratePAGain(Progress progress, bool[] run, int target_watts) // calibrate PA Gain values
		{
			//			HiPerfTimer t1 = new HiPerfTimer();
			//			t1.Start();

			bool ret_val = false;

			if(!chkPower.Checked)
			{
				MessageBox.Show("Power must be on in order to calibrate PA Gain.", "Power Is Off",
					MessageBoxButtons.OK, MessageBoxIcon.Stop);
				return false;
			}

			calibrating = true;

			DSPMode dsp_mode = rx1_dsp_mode;			// save current dsp mode
			RX1DSPMode = DSPMode.USB;					// set dsp mode to CWL

			double vfo_freq = VFOAFreq;						// save current frequency

			int pwr = ptbPWR.Value;						// save current pwr level

			bool tx_eq = chkTXEQ.Checked;
			chkTXEQ.Checked = false;

			bool dx = chkDX.Checked;
			chkDX.Checked = false;

			bool cpdr = chkCPDR.Checked;
			chkCPDR.Checked = false;

			DisableAllFilters();
			DisableAllModes();
			VFOLock = true;
			comboPreamp.Enabled = false;
			comboDisplayMode.Enabled = false;

			int on_time = 2500;
			int off_time = 2500;

			switch(current_soundcard)
			{
				case SoundCard.AUDIGY_2_ZS:
					on_time = 3000;
					off_time = 4000;
					break;
				case SoundCard.DELTA_44:
					on_time = 2000;
					off_time = 2000;
					break;
			}

			progress.SetPercent(0.0f);

			float[] band_freqs = { 1.85f, 3.75f, 5.357f, 7.15f, 10.125f, 14.175f, 18.1f, 21.300f, 24.9f, 28.4f};

			int[] max_pwr = { 100, 100, 100, 100, 100, 100, 100, 100, 75, 75 };
				
			if(run[0]) setupForm.PAGain160 = 49.0f;
			if(run[1]) setupForm.PAGain80 = 49.0f;
			if(run[2]) setupForm.PAGain60 = 49.0f;
			if(run[3]) setupForm.PAGain40 = 49.0f;
			if(run[4]) setupForm.PAGain30 = 49.0f;
			if(run[5]) setupForm.PAGain20 = 49.0f;
			if(run[6]) setupForm.PAGain17 = 49.0f;
			if(run[7]) setupForm.PAGain15 = 49.0f;
			if(run[8]) setupForm.PAGain12 = 49.0f;
			if(run[9]) setupForm.PAGain10 = 49.0f;

			for(int i=0; i<band_freqs.Length; i++)
			{
				if(run[i])
				{
					int error_count = 0;
					VFOLock = false;
					VFOAFreq = band_freqs[i];				// set frequency
					VFOLock = true;
					ptbPWR.Value = Math.Min(target_watts, max_pwr[i]);
					int target = ptbPWR.Value;

					bool good_result = false;
					while(good_result == false)
					{
						/*Audio.SwitchCount = 4;
						Audio.RampDown = true;
						Audio.NextMox = true;*/
						Audio.SourceScale = 1.0;
						Audio.TXInputSignal = Audio.SignalSource.SINE;
						//Audio.TXOutputSignal = Audio.SignalSource.SINE;
						tuning = true;
						chkMOX.Checked = true;

						for(int j=0; j < on_time/100; j++)
						{
							Thread.Sleep(100);
							if(!progress.Visible)
								goto end;
						}

						double watts = 0;
						//pa_power_mutex.WaitOne();
						watts = PAPower(pa_fwd_power);
						//pa_power_mutex.ReleaseMutex();

						chkMOX.Checked = false;
						tuning = false;
						/*Audio.RampDown = true;
						Audio.NextMox = false;
						Audio.SwitchCount = 4;*/
						Audio.TXInputSignal = Audio.SignalSource.RADIO;
						//Audio.TXOutputSignal = Audio.SignalSource.RADIO;

						//Debug.WriteLine("watts: "+watts.ToString());

						if(!progress.Visible)
							goto end;

						if(Math.Abs(watts-target) > 4)
						{
							// convert to dBm
							float diff_dBm = (float)Math.Round((WattsTodBm(watts) - WattsTodBm((double)target)), 1);	

							switch(i)										// fix gain value
							{
								case 0:
									if(setupForm.PAGain160 + diff_dBm < 38.0)
									{	
										if(++error_count > 6)
											goto error;

										setupForm.PAGain160 = (float)Math.Max(38.0, setupForm.PAGain160-2.0);
									}
									else setupForm.PAGain160 += diff_dBm;
									break;
								case 1:
									if(setupForm.PAGain80 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain80 = (float)Math.Max(38.0, setupForm.PAGain80-2.0);
									}
									else setupForm.PAGain80 += diff_dBm;
									break;
								case 2:
									if(setupForm.PAGain60 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain60 = (float)Math.Max(38.0, setupForm.PAGain60-2.0);
									}
									else setupForm.PAGain60 += diff_dBm;
									break;
								case 3:
									if(setupForm.PAGain40 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain40 = (float)Math.Max(38.0, setupForm.PAGain40-2.0);
									}
									else setupForm.PAGain40 += diff_dBm;
									break;
								case 4:
									if(setupForm.PAGain30 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain30 = (float)Math.Max(38.0, setupForm.PAGain30-2.0);
									}
									else setupForm.PAGain30 += diff_dBm;
									break;
								case 5:
									if(setupForm.PAGain20 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain20 = (float)Math.Max(38.0, setupForm.PAGain20-2.0);
									}
									else setupForm.PAGain20 += diff_dBm;
									break;
								case 6:
									if(setupForm.PAGain17 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain17 = (float)Math.Max(38.0, setupForm.PAGain17-2.0);
									}
									else setupForm.PAGain17 += diff_dBm;
									break;
								case 7:
									if(setupForm.PAGain15 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain15 = (float)Math.Max(38.0, setupForm.PAGain15-2.0);
									}
									else setupForm.PAGain15 += diff_dBm;
									break;
								case 8:
									if(setupForm.PAGain12 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain12 = (float)Math.Max(38.0, setupForm.PAGain12-2.0);
									}
									else setupForm.PAGain12 += diff_dBm;
									break;
								case 9:
									if(setupForm.PAGain10 + diff_dBm < 38.0)
									{
										if(++error_count > 6)
											goto error;

										setupForm.PAGain10 = (float)Math.Max(38.0, setupForm.PAGain10-2.0);
									}
									else setupForm.PAGain10 += diff_dBm;
									break;
							}						
						}
						else good_result = true;
						for(int j=0; j < off_time/100; j++)
						{
							Thread.Sleep(100);
							if(!progress.Visible)
								goto end;
						}
					}	
				}
				progress.SetPercent((float)((float)(i+1)/10));
			}

			ret_val = true;
			
			end:
				if(!progress.Visible) progress.Text = "";
			progress.Hide();
			
			EnableAllFilters();
			EnableAllModes();
			VFOLock = false;
			comboPreamp.Enabled = true;
			comboDisplayMode.Enabled = true;

			chkTXEQ.Checked = tx_eq;
			chkDX.Checked = dx;
			chkCPDR.Checked = cpdr;

			chkMOX.Checked = false;
			tuning = false;
			//Audio.SwitchCount = 4;
			Audio.TXInputSignal = Audio.SignalSource.RADIO;	
			Audio.TXOutputSignal = Audio.SignalSource.RADIO;	
	
			RX1DSPMode = dsp_mode;							// restore dsp mode
			VFOAFreq = vfo_freq;								// restore frequency
			txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			PWR = pwr;									// restore pwr level


			calibrating = false;

			//t1.Stop();
			//MessageBox.Show(t1.Duration.ToString());
			return ret_val;

			error:
				MessageBox.Show("Calculated gain is invalid.  Please double check connections and try again.\n" +
					"If this problem persists, contact support@flexradio.com for support.",
					"Invalid Gain Found",
					MessageBoxButtons.OK,
					MessageBoxIcon.Error);
			goto end;
		}

		public bool CalibratePAGain2(Progress progress, bool[] run, bool suppress_warnings)
		{
			bool ret_val = false;

			if(!chkPower.Checked)
			{
				MessageBox.Show("Power must be on in order to calibrate PA Gain 2.", "Power Is Off",
					MessageBoxButtons.OK, MessageBoxIcon.Stop);
				return false;
			}

			progress.SetPercent(0.0f);
			int progress_count = 0;
			int progress_total = 0;
			for(int i=0; i<11; i++)
				if(run[i]) progress_total += 13;

			float[] band_freqs = { 1.85f, 3.75f, 5.357f, 7.15f, 10.125f, 14.175f, 18.1f, 21.300f, 24.9f, 28.4f, 50.11f};
			int[] target_table = { 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 };
			double tol = 2.0;
			bool fduplex = FullDuplex;
			if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) 
			{
				tol = 0.5;
				FullDuplex = false;
			}

			calibrating = true;

			DSPMode mode = rx1_dsp_mode; // save current dsp mode
			RX1DSPMode = DSPMode.USB;

			double vfoa = VFOAFreq;			// save VFO A frequency
			chkVFOSplit.Checked = false;
			comboMeterTXMode.Text = "Fwd Pwr";

			bool tx_eq = chkTXEQ.Checked;
			chkTXEQ.Checked = false;

			bool dx = chkDX.Checked;
			chkDX.Checked = false;

			bool cpdr = chkCPDR.Checked;
			chkCPDR.Checked = false;

			DisableAllFilters();
			DisableAllModes();
			VFOLock = true;
			comboPreamp.Enabled = false;
			comboDisplayMode.Enabled = false;	
		
			int on_time = 2500;
			int off_time = 2500;

			switch(current_soundcard)
			{
				case SoundCard.AUDIGY_2_ZS:
					on_time = 3000;
					off_time = 4000;
					break;
				case SoundCard.DELTA_44:
					on_time = 2000;
					off_time = 2000;
					break;
			}

			switch(current_model)
			{
				case Model.FLEX5000:
				case Model.FLEX3000:
					on_time = 1000;
					off_time = 1000;
					break;
			}

			for(int i=0; i<band_freqs.Length; i++)
			{
				if(i == 10 && current_model == Model.SDR1000)
				{
					// do nothing
				}
				else if(run[i])
				{
					VFOLock = false;
					VFOAFreq = band_freqs[i];
					if(fwc_init)
                    {
                        switch (current_model)
                        {
                            case Model.FLEX5000:
                                FWC.SetTXAnt(1);
                                break;
                            case Model.FLEX3000:
                                FWC.SetAmpTX1(false);
                                FWC.SetRCATX1(false);
                                break;
                        }
                    }

					VFOLock = true;
					Audio.SourceScale = 0.04 / audio_volts1;
					double last_watts = 0.0;
					double last_volts = 0.0;
					if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) tol = 0.5;

					for(int j=0; j < power_table[i].Length; j++)
					{
						if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000) && j==8) tol = 1.0;
						if(j<3 && current_model == Model.SDR1000)
						{
							// do nothing
						}
						else
						{
							bool found_power = false;
							double target = target_table[j];
							int count = 0;
							while(!found_power && chkPower.Checked)
							{
//								if(Audio.TXInputSignal != Audio.SignalSource.SINE)
//									Audio.TXInputSignal = Audio.SignalSource.SINE;
								if(Audio.TXOutputSignal != Audio.SignalSource.SINE)
									Audio.TXOutputSignal = Audio.SignalSource.SINE;
								//Audio.SourceScale = 1.0;
								if(!chkMOX.Checked) chkMOX.Checked = true;
								for(int k=0; k<on_time/100; k++)
								{
									Thread.Sleep(100);
									if(!progress.Visible)
										goto end;
								}

								double watts = 0;
								if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
									watts = FWCPAPower(pa_fwd_power);
								else watts = PAPower(pa_fwd_power);
							
								if(HighSWR)
								{
									chkMOX.Checked = false;
									MessageBox.Show("PA Calibration Error: High SWR.  Please check\n"+
										"connections and try again.",
										"PA Power: High SWR",
										MessageBoxButtons.OK,
										MessageBoxIcon.Error);
									goto end;
								}

								Debug.WriteLine("watts: "+watts.ToString("f3"));
								if(target > 50)
								{
									Audio.TXInputSignal = Audio.SignalSource.RADIO;
									Audio.TXOutputSignal = Audio.SignalSource.RADIO;
									//Audio.SourceScale = 1.0;
									chkMOX.Checked = false;
									for(int k=0; k<off_time/100; k++)
									{
										Thread.Sleep(100);
										if(!progress.Visible)
											goto end;
									}
								}
								else Thread.Sleep(100);

								double diff = target-watts;
								if(Math.Abs(diff) < tol)
								{
									found_power = true;
									power_table[i+1][j] = (float)Math.Round(Audio.SourceScale * audio_volts1, 4);

									if(j+1 == power_table[i].Length) break;
									// calculate line  in y = ax + b format
									double x2 = Math.Pow(power_table[i+1][j], 2.0);
									double x1 = 0.0;
									if(j>0) x1 = Math.Pow(power_table[i+1][j-1], 2.0);

									double y1 = target;								
									double y2 = target_table[j+1];
								
									double a = (y2-y1)/(x2-x1); // a = (y2-y1)/(x2-x1)
									double b = target - a*x2;

									double next_volts = Math.Sqrt((target_table[j+1]-b)/a);  // solved y = ax + b to get x = (y - b)/a
									//double next_volts = current_volts * Math.Sqrt((target+10)/target);
									Audio.SourceScale = next_volts / audio_volts1;
								}
								else 
								{
									if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000) && target <= 10)
									{
										// calculate line  in y = ax + b format
										double x1 = Math.Pow(last_volts, 2.0);
										double x2 = Math.Pow(Audio.SourceScale, 2.0);
										double y1 = last_watts;
										double y2 = watts;

										double a = (y2-y1)/(x2-x1);
										double b = y2-a*x2;

										Debug.WriteLine("a: "+a.ToString("f2")+" b: "+b.ToString("f2"));
										double next_volts = Math.Sqrt((target-b)/a);
										if(double.IsNaN(next_volts))
										{
											//count = 8; // error out -- two times through the cap will do this
											next_volts = power_table[i+1][j-1];
										}
										last_volts = Audio.SourceScale;
										Audio.SourceScale = next_volts / audio_volts1;
										//double v_ratio = Math.Sqrt(target) / Math.Sqrt(Math.Max(1, watts));
										//Audio.RadioVolume *= v_ratio;
										if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
										{
											Audio.SourceScale = Math.Min(0.5, Audio.SourceScale); // 0.5 cap where 0.83 is max before overloading QSE
										}
									}
									else
									{
										Audio.SourceScale *= Math.Sqrt(target/watts);
									}
								}

								last_watts = watts;							

								// check for error conditions
								if(count++ == 12) // poop out
								{
									found_power = true;
									//if(double.IsNaN(Audio.RadioVolume)) Audio.RadioVolume = power_table[i+1][Math.Max(0, j-1)];
									//double final_value = Math.Min(power_table[i+1][Math.Max(0, j-1)], Audio.RadioVolume * 0.945); // 0.945 ~= down 0.5 dB
									double final_value = (j == 0 ? 0.0 : power_table[i+1][j-1]);
									for(int k=j; k<power_table[i].Length; k++)
										power_table[i+1][k] = (float)Math.Round(final_value, 4);
									j = power_table.Length; // end loop for this band
									Audio.TXInputSignal = Audio.SignalSource.RADIO;
									Audio.TXOutputSignal = Audio.SignalSource.RADIO;
									chkMOX.Checked = false;
									//if(!suppress_warnings)
									{
										MessageBox.Show("Unable to calibrate PA Power on current band.",
											"PA Power Cal Error",
											MessageBoxButtons.OK,
											MessageBoxIcon.Error);
									}
								}
							}	
							progress.SetPercent((float)((float)(++progress_count)/progress_total));
						}
					}					
				}				
			}

			ret_val = true;

			end:
				if(!progress.Visible) progress.Text = "";
			progress.Hide();

			chkMOX.Checked = false;
			Audio.TXInputSignal = Audio.SignalSource.RADIO;
			Audio.TXOutputSignal = Audio.SignalSource.RADIO;
			
			if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
				FullDuplex = false;

            if (current_model == Model.FLEX3000)
                FWC.SetAmpTX1(true);

			EnableAllFilters();
			EnableAllModes();
			VFOLock = false;
			comboPreamp.Enabled = true;
			comboDisplayMode.Enabled = true;

			chkTXEQ.Checked = tx_eq;
			chkDX.Checked = dx;
			chkCPDR.Checked = cpdr;

			for(int i = (int)Band.B2M; i<(int)Band.LAST; i++)
				for(int j=0; j<13; j++)
					power_table[i][j] = (float)Math.Round(power_table[10][j], 4);

			RX1DSPMode = mode;							// restore dsp mode
			VFOAFreq = 0.590;
			VFOAFreq = vfoa;								// restore frequency

			try
			{
				StreamWriter writer = new StreamWriter(app_data_path+"power.csv"); //"\\power.csv" 

                writer.WriteLine("Band, 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100");
				for(int i=1; i<=(int)Band.B6M; i++)
				{
					writer.Write(((Band)i).ToString()+",");
					for(int j=0; j<13; j++)
						writer.Write(power_table[i][j].ToString("f4")+",");
					writer.WriteLine("");
				}
				writer.Close();
			}
			catch(Exception)
			{
				MessageBox.Show("Error writing power.csv file.  Please make sure this file is not open and try again.",
					"Error writing power.csv",
					MessageBoxButtons.OK,
					MessageBoxIcon.Error);
			}

			calibrating = false;
			return ret_val;
		}

		public bool LowPowerPASweep(Progress progress, int power) // calibrate PA Gain values
		{
			//			HiPerfTimer t1 = new HiPerfTimer();
			//			t1.Start();

			bool ret_val = false;

			if(!chkPower.Checked)
			{
				MessageBox.Show("Power must be on in order to run PA Sweep.", "Power Is Off",
					MessageBoxButtons.OK, MessageBoxIcon.Stop);
				return false;
			}

			calibrating = true;

			DSPMode dsp_mode = RX1DSPMode;				// save current DSP Mode
			RX1DSPMode = DSPMode.USB;					// set DSP Mode to USB

			double vfo_freq = VFOAFreq;						// save current frequency

            int pwr = PWR;						// save current pwr level
			PWR = power;						// set pwr level to 100W

			progress.SetPercent(0.0f);

			float[] band_freqs = { 1.9f, 3.75f, 5.357f, 7.15f, 10.125f, 14.175f, 18.1f, 21.225f, 24.9f, 28.85f };
				
			for(int i=0; i<band_freqs.Length; i++)
			{
				VFOAFreq = band_freqs[i];				// set frequency
				Audio.TXInputSignal = Audio.SignalSource.SINE;
				Audio.SourceScale = 1.0;
				chkMOX.Checked = true;				
				for(int j=0; j<30; j++)
				{
					Thread.Sleep(100);
					if(!progress.Visible)
						goto end;
				}
				chkMOX.Checked = false;
				Audio.TXInputSignal = Audio.SignalSource.RADIO;

				if(!progress.Visible)
					goto end;

				for(int j=0; j<40; j++)
				{
					Thread.Sleep(100);
					if(!progress.Visible)
						goto end;
				}
				if(!progress.Visible)
					goto end;				

				progress.SetPercent((float)((float)(i+1)/10));
			}

			ret_val = true;
			
			end:
				progress.Hide();
			chkMOX.Checked = false;
			Audio.TXInputSignal = Audio.SignalSource.RADIO;
			RX1DSPMode = dsp_mode;							// restore dsp mode
			VFOAFreq = vfo_freq;								// restore frequency
			txtVFOAFreq_LostFocus(this, EventArgs.Empty);			
			PWR = pwr;									// restore pwr level
			
			calibrating = false;

			//t1.Stop();
			//MessageBox.Show(t1.Duration.ToString());
			return ret_val;
		}

		public bool CalibrateSoundCard(Progress progress, int card)
		{
			if(!chkPower.Checked)
			{
				MessageBox.Show("Power must be on in order to calibrate Soundcard.", "Power Is Off",
					MessageBoxButtons.OK, MessageBoxIcon.Stop);
				return false;
			}

			Audio.testing = true;
			progress.SetPercent(0.0f);

			double tx_volume = Audio.RadioVolume;	// save current TX volume
			double rx_volume = Audio.MonitorVolume;	// save current RX volume

			if(num_channels == 4 || num_channels == 6)
			{
				chkMOX.Checked = true;
				Thread.Sleep(200);
				Hdw.TransmitRelay = false;
				Audio.RadioVolume = 1.0;				// set volume to max
				Audio.MonitorVolume = 0.0;
			}
			else
			{
				Mixer.SetMainVolume(mixer_id1, 100);
				Mixer.SetWaveOutVolume(mixer_id1, 100);
				Audio.MonitorVolume = 1.0;
			}			
			
			Audio.RX1OutputSignal = Audio.SignalSource.SINE;	// Start sending tone
			
			progress.Focus();
            
			while(progress.Visible == true)			// keep sending tone until abort is pressed
				Thread.Sleep(100);

			Audio.RX1OutputSignal = Audio.SignalSource.RADIO;		// stop sending tone

			if(num_channels > 2)
			{
				Thread.Sleep(200);
				chkMOX.Checked = false;
			}			

			Audio.RadioVolume = tx_volume;			// restore TX volume
			Audio.MonitorVolume = rx_volume;		// restore RX volume
			Audio.testing = false;

			return true;
		}

#endregion

#region Properties
		// ======================================================
		// Properties
		// ======================================================

        private bool limit_slew = false;
        public bool LimitSlew
        {
            get { return limit_slew; }
            set { limit_slew = value; }
        }

        public List<TuneStep> tune_step_list;				// A list of available tuning steps
        public List<TuneStep> TuneStepList
        {
            get { return tune_step_list; }
        }

        private int tune_step_index;						// An index into the above array
        public int TuneStepIndex
        {
            get { return tune_step_index; }
            set
            {
                if (value < 0 || value > tune_step_list.Count - 1)
                    return;

                tune_step_index = value;
                txtWheelTune.Text = tune_step_list[tune_step_index].Name;
            }
        }



        //====================================================================================
        // ke9ns add  second tune step for PowerMate and flexcontrol
        private int tune_step_index2;						// An index into the above array
        public int TuneStepIndex2
        {

            get
            {
                if (setupForm != null) return tune_step_index2;
                return setupForm.tune_step_index2;
            }
            set
            {
                if (value < 0 || value > tune_step_list.Count - 1)  return;

                if (setupForm != null) setupForm.tune_step_index2 = value;
                else tune_step_index2 = value;

                setupForm.txtWheelTune2.Text = tune_step_list[setupForm.tune_step_index2].Name;


            }
        } //TuneStepIndex2





        public int TuneStepLookup(string s)
        {
            for (int i = 0; i < tune_step_list.Count; i++)
            {
                if (tune_step_list[i].Name == s)
                    return i;
            }

            return -1;
        }

        /// <summary>
        /// The transmit frequency in MHz
        /// </summary>
        public double TXFreq
        {
            get
            {
                double tx_freq = 0.0;

                if (!rx2_enabled)
                {
                    if (!chkVFOBTX.Checked)
                        tx_freq = VFOAFreq;
                    else
                        tx_freq = VFOBFreq;
                }
                else // if(rx2_enabled)
                {
                    if (chkVFOBTX.Checked)
                        tx_freq = VFOBFreq;
                    else if (chkVFOSplit.Checked)
                        tx_freq = VFOASubFreq;
                    else if (chkVFOATX.Checked)
                        tx_freq = VFOAFreq;
                }

                return tx_freq;
            }

            set
            {
                if (!rx2_enabled)
                {
                    if (!chkVFOBTX.Checked)
                        VFOAFreq = value;
                    else
                        VFOBFreq = value;
                }
                else // if(rx2_enabled)
                {
                    if (chkVFOBTX.Checked)
                        VFOBFreq = value;
                    else if (chkVFOSplit.Checked)
                        VFOASubFreq = value;
                    else if (chkVFOATX.Checked)
                        VFOAFreq = value;
                }
            }
        } // TXFreq


        //======================================================================================

        private FlexControlMode current_flexcontrol_mode = FlexControlMode.Basic;
        public void SetCurrentFlexControlMode(object sender, FlexControlMode mode)
        {
            current_flexcontrol_mode = mode;
            
            if(flexControlBasicForm != null)  flexControlBasicForm.FlexControlMode = mode;

            if(flexControlAdvancedForm != null)   flexControlAdvancedForm.FlexControlMode = mode;

            if (sender != null)
            {
                switch (current_flexcontrol_mode)
                {
                    case FlexControlMode.Basic:
                        flexControlBasicForm.Location = flexControlAdvancedForm.Location;
                        flexControlBasicForm.Show();
                     //   flexControlBasicForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
                    case FlexControlMode.Advanced:
                        flexControlAdvancedForm.Location = flexControlBasicForm.Location;
                        flexControlAdvancedForm.Show();
                    //    flexControlAdvancedForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
                }
            }
        }

        private bool flexcontrol_autodetect = true;
        public bool FlexControlAutoDetect
        {
            get { return flexcontrol_autodetect; }
            set
            {
                flexcontrol_autodetect = value;
                if (value)
                    FlexControlScan();
                else
                    FlexControlManager.Close();

                if (!initializing)
                {
                    flexControlBasicForm.AutoDetect = value;
                    flexControlAdvancedForm.AutoDetect = value;
                }
            }
        }

        public int RX0Gain
        {
            get
            {
                if (ptbRX0Gain != null) return ptbRX0Gain.Value;
                else return -1;
            }
            set
            {
                if (ptbRX0Gain != null) ptbRX0Gain.Value = value;
                ptbRX0Gain_Scroll(this, EventArgs.Empty);
            }
        }

        public int PanMainRX
        {
            get
            {
                if (ptbPanMainRX != null) return ptbPanMainRX.Value;
                else return -1;
            }
            set
            {
                if (ptbPanMainRX != null) ptbPanMainRX.Value = value;
                ptbPanMainRX_Scroll(this, EventArgs.Empty);
            }
        }


        public int RX1Gain
        {
            get
            {
                if (ptbRX1Gain != null) return ptbRX1Gain.Value;
                else return -1;
            }
            set
            {
                if (ptbRX1Gain != null) ptbRX1Gain.Value = value;
                ptbRX1Gain_Scroll(this, EventArgs.Empty);
            }
        }

        public int PanSubRX
        {
            get
            {
                if (ptbPanSubRX != null) return ptbPanSubRX.Value;
                else return -1;
            }
            set
            {
                if (ptbPanSubRX != null) ptbPanSubRX.Value = value;
                ptbPanSubRX_Scroll(this, EventArgs.Empty);
            }
        }

        public int RX2Gain
        {
            get
            {
                if (ptbRX2Gain != null) return ptbRX2Gain.Value;
                else return -1;
            }
            set
            {
                if (ptbRX2Gain != null) ptbRX2Gain.Value = value;
                ptbRX2Gain_Scroll(this, EventArgs.Empty);
            }
        }

        public int RX2Pan
        {
            get
            {
                if (ptbRX2Pan != null) return ptbRX2Pan.Value;
                else return -1;
            }
            set
            {
                if (ptbRX2Pan != null) ptbRX2Pan.Value = value;
                ptbRX2Pan_Scroll(this, EventArgs.Empty);
            }
        }


        public bool CATDiversityEnable
        {
            get
            {
                if (diversityForm != null)
                    return diversityForm.CATEnable;
                else
                    return false;
            }
            set 
            {
                if(diversityForm != null)
                    if (value)
                        diversityForm.CATEnable = true;
                    else
                        diversityForm.CATEnable = false;
            }
        }
        
        public bool CATDiversityForm
        {
            get
            {
                if (diversityForm == null || diversityForm.IsDisposed)
                    return false;
                else
                    return true;
            }
            set
            {
                if (value)
                {
                    if (diversityForm == null || diversityForm.IsDisposed)
                        diversityForm = new DiversityForm(this);
                    diversityForm.Focus();
                    this.Invoke(new MethodInvoker(diversityForm.Show));
                }
                else
                    if(diversityForm != null)
                        this.Invoke(new MethodInvoker(diversityForm.Close));
            }
        }

        public bool CATCWXForm
        {
            get
            {
                if (cwxForm == null || cwxForm.IsDisposed)
                    return false;
                else
                    return true;
            }
            set
            {
                if (value)
                {
                    cWXToolStripMenuItem.PerformClick();
                }
                else
                    if (cwxForm != null)
                        this.Invoke(new MethodInvoker(cwxForm.Close));
            }
        }

        public bool VFOATX
        {
            get { return chkVFOATX.Checked; }
            set { chkVFOATX.Checked = value; }
        }

        public bool VFOBTX
        {
            get { return chkVFOBTX.Checked; }
            set { chkVFOBTX.Checked = value; }
        }

        private bool production = false;
        public bool Production
        {
            get { return production; }
        }

        private bool test_equip = false;
        public bool TestEquip
        {
            get { return test_equip; }
        }

        private int phone_blank_time = 200;
        public int PhoneBlankTime
        {
            get { return phone_blank_time; }
            set { phone_blank_time = value; }
        }

        private bool flex_1500_xref = false;
        public bool FLEX1500Xref
        {
            get { return flex_1500_xref; }
            set 
            {
                flex_1500_xref = value;
                HIDDDSClockCorrection = HIDDDSClockCorrection;
            }
        }

        private bool hid_ptt_in = false;
        public bool HIDPTTIn
        {
            get { return hid_ptt_in; }
            set { hid_ptt_in = value; }
        }

        private bool hid_mic_ptt = false;
        public bool HIDMicPTT
        {
            get { return hid_mic_ptt; }
            set { hid_mic_ptt = value; }
        }

        private bool fwc_rca_ptt = false;
        public bool FWCRCAPTT
        {
            get { return fwc_rca_ptt; }
            set { fwc_rca_ptt = value; }
        }

        private bool fwc_mic_ptt = false;
        public bool FWCMicPTT
        {
            get { return fwc_mic_ptt; }
            set { fwc_mic_ptt = value; }
        }
        
        private bool swap_vfo_ab_tx = false;
        public bool SwapVFOA_BTX
        {
            get { return swap_vfo_ab_tx; }
            set
            {
                if(value)
                {
                    //chkVFOATX.Checked = false;
                    chkVFOBTX.Checked = true;
                }
                else
                {
                    chkVFOATX.Checked = true;
                    //chkVFOBTX.Checked = false;
                }
                swap_vfo_ab_tx = value;
            }
        }

        private string db_file_name = "";
        public string DBFileName
        {
            get { return db_file_name; }
            set
            {
                if (initializing) // ignore changes here after init is complete per design
                {
                    db_file_name = value;
                    DB.FileName = value;
                }
            }
        }

//=======================================================================
// ke9ns add my own database
        private string db_file_name1 = "";
        public string DBFileName1
        {
            get { return db_file_name1; }
            set
            {
                if (initializing) // ignore changes here after init is complete per design
                {
                    db_file_name1 = value;
                    DB.FileName1 = value;
                }
            }
        }



        private bool db_exists;
        public bool DB_Exists
        {
            get { return db_exists; }
            set { db_exists = value; }
        }


        private string app_data_path = "";
        public string AppDataPath
        {
            get { return app_data_path; }
            set
            {
                app_data_path = value;
                FWCEEPROM.AppDataPath = value;
                HIDEEPROM.AppDataPath = value;
                Skin.AppDataPath = value;
            }                
        }

        private Radio radio_to_use;
        public Radio RadioToUse
        {
            get { return radio_to_use; }
            set { radio_to_use = value; }
        }

        private bool wheel_tunes_vfob = true;
        public bool WheelTunesVFOB
        {
            get { return wheel_tunes_vfob; }
            set { wheel_tunes_vfob = value; }
        }

        private bool disable_ui_mox_changes = true;
        public bool DisableUIMOXChanges
        {
            get { return disable_ui_mox_changes; }
            set { disable_ui_mox_changes = value; }
        }

        private HiPerfTimer mic_down_timer = new HiPerfTimer();
        private bool mic_down_running = false;
        private bool mic_down = false;
        public bool MicDown
        {
            get { return mic_down; }
            set
            {
                mic_down = value;
                Debug.WriteLine("mic_down: " + value.ToString());
                mic_down_timer.Start();
                if (mic_down)
                {
                    if (mic_down_running)
                        mic_down_running = false;
                    else if (mic_up_running)
                        mic_up_running = false;
                    else
                    {
                        if (mic_fast)
                            VFOAFreq -= 0.001000;
                        else VFOAFreq -= 0.000050;
                    }
                }
            }
        }

        private HiPerfTimer mic_up_timer = new HiPerfTimer();
        private bool mic_up_running = false;
        private bool mic_up = false;
        public bool MicUp
        {
            get { return mic_up; }
            set
            {
                mic_up = value;
                Debug.WriteLine("mic_up: " + value.ToString());
                mic_up_timer.Start();
                if (mic_up)
                {
                    if (mic_up_running)
                        mic_up_running = false;
                    else if (mic_down_running)
                        mic_down_running = false;
                    else
                    {
                        if (mic_fast)
                            VFOAFreq += 0.001000;
                        else VFOAFreq += 0.000050;
                    }
                }
            }
        }

        private HiPerfTimer mic_fast_timer = new HiPerfTimer();
        private bool mic_fast = false;
        public bool MicFast
        {
            get { return mic_fast; }
            set
            {
                mic_fast = value;
                Debug.WriteLine("mic_fast: " + value.ToString());
                mic_fast_timer.Start();
            }
        }

        private bool f3k_fan = false;
        private bool F3KFan
        {
            get { return f3k_fan; }
            set
            {
                f3k_fan = value;
                FWC.SetFan(value);
            }
        }

        private float f3k_temp_thresh = 70.0f;
        public float F3KTempThresh
        {
            get { return f3k_temp_thresh; }
            set
            {
                if (value < 30.0f) value = 30.0f;
                if (value > 70.0f) value = 70.0f;
                f3k_temp_thresh = value;
            }
        }

        private bool flex_wire_ucb = false;
        public bool FlexWireUCB
        {
            get { return flex_wire_ucb; }
            set { flex_wire_ucb = value; }
        }

        private float loop_gain = 0.0f;
        private float rx1_loop_offset = 0.0f;
        private float rx2_loop_offset = 0.0f;
        public float LoopGain
        {
            get { return loop_gain; }
            set
            {
                loop_gain = value;
                if (rx1_loop)
                {
                    rx1_loop_offset = loop_gain;
                    if (rx2_ant == FWCAnt.RX1TAP)
                        rx2_loop_offset = loop_gain;
                    UpdateDisplayOffsets();
                }
            }
        }

		private float rx1_xvtr_gain_offset;						// gain offset as entered on the xvtr form
		public float RX1XVTRGainOffset
		{
			get { return rx1_xvtr_gain_offset; }
			set
			{
				rx1_xvtr_gain_offset = value;
				UpdateDisplayOffsets();
			}
		}

		private float rx2_xvtr_gain_offset;						// gain offset as entered on the xvtr form
		public float RX2XVTRGainOffset
		{
			get { return rx2_xvtr_gain_offset; }
			set
			{
				rx2_xvtr_gain_offset = value;
				UpdateDisplayOffsets();
			}
		}

        private bool hid_amp_tx1 = true;
        public bool HIDAmpTX1
        {
            get { return hid_amp_tx1; }
            set
            {
                bool old = hid_amp_tx1;
                hid_amp_tx1 = value;
                if (old != value || initializing)
                    USBHID.EnableTXOutSeq(value);
            }
        }

        private bool fwc_amp_tx1 = true;
		public bool FWCAmpTX1
		{
			get { return fwc_amp_tx1; }
			set
			{
				bool old = fwc_amp_tx1;
				fwc_amp_tx1 = value;
				if(old != value || initializing)
					FWC.SetAmpTX1(value);
			}
		}

		private bool fwc_amp_tx2 = true;
		public bool FWCAmpTX2
		{
			get { return fwc_amp_tx2; }
			set
			{
				bool old = fwc_amp_tx2;
				fwc_amp_tx2 = value;
                if (old != value || initializing)
					FWC.SetAmpTX2(value);
			}
		}

		private bool fwc_amp_tx3 = true;
		public bool FWCAmpTX3
		{
			get { return fwc_amp_tx3; }
			set
			{
				bool old = fwc_amp_tx3;
				fwc_amp_tx3 = value;
                if (old != value || initializing)
					FWC.SetAmpTX3(value);
			}
		}

		private bool fwc_pa_bias = false;
		public bool FWCPABias
		{
			get { return fwc_pa_bias; }
			set
			{
				bool old = fwc_pa_bias;
				fwc_pa_bias = value;
				if(old != value)
					FWC.SetPABias(value);
			}
		}

        private bool fwc_rx1_attn = false;
        public bool FWCRX1Attn
        {
            get { return fwc_rx1_attn; }
            set
            {
                bool old = fwc_rx1_attn;
                fwc_rx1_attn = value;
                if (old != value)
                    FWC.SetRXAttn(value);
            }
        }

		private bool fwc_rx1_preamp = false;
		public bool FWCRX1Preamp
		{
			get { return fwc_rx1_preamp; }
			set
			{
				bool old = fwc_rx1_preamp;
				fwc_rx1_preamp = value;
				if(old != value)
					FWC.SetTRXPreamp(value);
			}
		}

        private bool hid_ptt_out = true;
        public bool HIDPTTOut
        {
            get { return hid_ptt_out; }
            set
            {
                bool old = hid_ptt_out;
                hid_ptt_out = value;
                if (old != value || initializing)
                    USBHID.SetTXOut(value);
            }
        }

        private int hid_trx_filter = 0;
        public int HIDTRXFilter
        {
            get { return hid_trx_filter; }
            set
            {
                int old = hid_trx_filter;
                hid_trx_filter = value;
                if (old != value)
                {
                    USBHID.SetRXFilter(value);
                    //Debug.WriteLine("SetTRXFilter(" + value + ")");
                }
            }
        }

        private int hid_pa_filter = 0;
        public int HIDPAFilter
        {
            get { return hid_pa_filter; }
            set
            {
                int old = hid_pa_filter;
                hid_pa_filter = value;
                if (old != value)
                {
                    USBHID.SetPAFilter(value);
                    //Debug.WriteLine("SetPAFilter(" + value + ")");
                }
            }
        }

		private bool fwc_rx2_preamp = false;
		public bool FWCRX2Preamp
		{
			get { return fwc_rx2_preamp; }
			set
			{
				bool old = fwc_rx2_preamp;
				fwc_rx2_preamp = value;
				if(old != value)
					FWC.SetRX2Preamp(value);
			}
		}

		private bool enable_6m_preamp = false;
		public bool Enable6mPreamp
		{
			get { return enable_6m_preamp; }
			set
			{
				enable_6m_preamp = value;
				if(value)
				{
					if(rx1_band == Band.B6M)
						chkRX1Preamp.Enabled = true;
					if(FWCEEPROM.RX2OK && rx2_band == Band.B6M)
						chkRX2Preamp.Enabled = true;
				}
				else
				{
					if(rx1_band == Band.B6M)
					{
						chkRX1Preamp.Enabled = false;
						chkRX1Preamp.Checked = true;
					}
					if(FWCEEPROM.RX2OK && rx2_band == Band.B6M)
					{
						chkRX2Preamp.Enabled = false;
						chkRX2Preamp.Checked = true;
					}
				}
			}
		}

		private bool meter_detail = false;
		public bool MeterDetail
		{
			get { return meter_detail; }
			set { meter_detail = value; }
		}

		private MeterTXMode tune_meter_tx_mode = MeterTXMode.FORWARD_POWER;
		public MeterTXMode TuneTXMeterMode
		{
			get { return tune_meter_tx_mode; }
			set
			{
				tune_meter_tx_mode = value;
				if(chkTUN.Checked)
				{
					CurrentMeterTXMode = value;
					comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);
				}
			}
		}

		public bool NB
		{
			get { return chkNB.Checked;  }
			set { chkNB.Checked = value; }
		}

		public bool NB2
		{
			get { return chkDSPNB2.Checked; }
			set { chkDSPNB2.Checked = value; }
		}

		public bool QuickPlay
		{
			get {
              
                return ckQuickPlay.Checked; }
			set {
                 ckQuickPlay.Checked = value; }
		}


        //=================================================================
        // ke9ns add: a way for waveform to communicate with console for TX Water ID
        //=================================================================
        public bool TXIDPlay  // ke9ns add
        {
            get { return TXIDMenuItem.Checked; }
            set { TXIDMenuItem.Checked = value; }
        }
        //=========================================================


        public bool DX
		{
			get { return chkDX.Checked; }
			set { chkDX.Checked = value; }
		}

		public int DXLevel
		{
			get { return ptbDX.Value; }
            set 
            {
                ptbDX.Value = value;
                ptbDX_Scroll(this, EventArgs.Empty);
            }
		}

		private bool peak_tx_meter = true; // as opposed to avg
		public bool PeakTXMeter
		{
			get { return peak_tx_meter; }
			set { peak_tx_meter = value; }
		}

        // ke9ns add for 2nd TX meter 
        private bool peak_tx1_meter = true; // as opposed to avg
        public bool PeakTX1Meter
        {
            get { return peak_tx1_meter; }
            set { peak_tx1_meter = value; }
        }

        private bool allow_vac_bypass = true;
		public bool AllowVACBypass
		{
			get { return allow_vac_bypass; }
			set { allow_vac_bypass = value; }
		}

		public float NewMeterData
		{
			get { return new_meter_data; }
		}

		private bool all_mode_mic_ptt = true;
		public bool AllModeMicPTT
		{
			get { return all_mode_mic_ptt; }
			set { all_mode_mic_ptt = value; }
		}

        private int last_rx1_xvtr_index = -1;			// index of last xvtr in use
		public int LastRX1XVTRIndex
		{
            get { return last_rx1_xvtr_index; }
            set { last_rx1_xvtr_index = value; }
		}

        private int last_rx2_xvtr_index = -1;			// index of last xvtr in use
        public int LastRX2XVTRIndex
        {
            get { return last_rx2_xvtr_index; }
            set { last_rx2_xvtr_index = value; }
        }

		private int rx1_xvtr_index = -1;				// index of current xvtr in use
		public int RX1XVTRIndex
		{
			get { return rx1_xvtr_index; }
			set { rx1_xvtr_index = value; }
		}

		private int rx2_xvtr_index = -1;				// index of current xvtr in use
		public int RX2XVTRIndex
		{
			get { return rx2_xvtr_index; }
			set { rx2_xvtr_index = value; }
		}

		private int tx_xvtr_index = -1;				    // index of current xvtr in use
		public int TXXVTRIndex
		{
			get { return tx_xvtr_index; }
			set { tx_xvtr_index = value; }
		}


        private int last_tx_xvtr_index = -1;		    // index of last xvtr in use
        public int LastTXXVTRIndex
        {
            get { return last_tx_xvtr_index; }
            set { last_tx_xvtr_index = value; }
        }

		private float rx1_path_offset = 0.0f;
		public float RX1PathOffset
		{
			get { return rx1_path_offset; }
		}

		private float rx2_path_offset = 0.0f;
		public float RX2PathOffset
		{
			get { return rx2_path_offset; }
		}

        /*private bool[] ptt_out_by_band;
        public void SetPTTOut(Band b, bool on)
        {
            switch (current_ant_mode)
            {
                case AntMode.Simple:
                    HIDPTTOut = on;
                    break;
                case AntMode.Expert:
                    ptt_out_by_band[(int)b] = on;
                    Band band = tx_band;
                    if (tx_xvtr_index >= 0)
                        band = (Band)((int)Band.VHF0 + tx_xvtr_index);
                    if (band == b) HIDPTTOut = on;
                    break;
            }
        }*/

		private bool[] tx1_by_band;
		public void SetTX1(Band b, bool on)
		{
            switch(current_ant_mode)
			{
				case AntMode.Simple:
                    FWCAmpTX1 = on;
					break;
				case AntMode.Expert:
					tx1_by_band[(int)b] = on;
					Band band = tx_band;
					if(tx_xvtr_index >= 0)	band = (Band)((int)Band.VHF0 + tx_xvtr_index);
					if(band == b) FWCAmpTX1 = on;
					break;
			}
		} // SetTX1

        public void Set1500TX1(Band b, bool on)
        {
            switch (current_ant_mode)
            {
                case AntMode.Simple:
                    HIDAmpTX1 = on;
                    break;
                case AntMode.Expert:
                    tx1_by_band[(int)b] = on;
                    Band band = tx_band;
                    if (tx_xvtr_index >= 0)
                        band = (Band)((int)Band.VHF0 + tx_xvtr_index);
                    if (band == b) HIDAmpTX1 = on;
                    break;
            }
        }

        public bool GetTX1(Band b)
		{
			return tx1_by_band[(int)b];
		}

		private bool[] tx2_by_band;
		public void SetTX2(Band b, bool on)
		{
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					FWCAmpTX2 = on;
					break;
				case AntMode.Expert:
					tx2_by_band[(int)b] = on;
					Band band = tx_band;
					if(tx_xvtr_index >= 0)
						band = (Band)((int)Band.VHF0 + tx_xvtr_index);
					if(band == b) FWCAmpTX2 = on;
					break;
			}
		}

		public bool GetTX2(Band b)
		{
			return tx2_by_band[(int)b];
		}

		private bool[] tx3_by_band;
		public void SetTX3(Band b, bool on)
		{
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					FWCAmpTX3 = on;
					break;
				case AntMode.Expert:
					tx3_by_band[(int)b] = on;
					Band band = tx_band;
					if(tx_xvtr_index >= 0)
						band = (Band)((int)Band.VHF0 + tx_xvtr_index);
					if(band == b) FWCAmpTX3 = on;
					break;
			}
		}

		public bool GetTX3(Band b)
		{
			return tx3_by_band[(int)b];
		}

		private PreampMode[] rx1_preamp_by_band;
		public void SetRX1Preamp(Band b, PreampMode mode)
		{
            if(mode > PreampMode.FIRST && mode < PreampMode.LAST)
    			rx1_preamp_by_band[(int)b] = mode;
		}

		public PreampMode GetPreamp(Band b)
		{
			return rx1_preamp_by_band[(int)b];
		}

		private PreampMode[] rx2_preamp_by_band;

        private double[] fm_tx_offset_by_band_mhz;

		private int[] power_by_band;
		public void SetPower(Band b, int pwr)
		{
			power_by_band[(int)b] = pwr;
			if(tx_band == b) PWR = pwr;
		}

		public int GetPower(Band b)
		{
			return power_by_band[(int)b];
		}

		private int[] rx1_agct_by_band;
		public void SetRFGain(Band b, int gain)
		{
			rx1_agct_by_band[(int)b] = gain;
			if(rx1_band == b) RF = gain;
		}

		public int GetRFGain(Band b)
		{
			return rx1_agct_by_band[(int)b];
		}

		private int[] rx2_agct_by_band;		

		private AntMode current_ant_mode = AntMode.Simple;
		public AntMode CurrentAntMode
		{
			get { return current_ant_mode; }
			set
			{
				current_ant_mode = value;
				if(current_ant_mode == AntMode.Expert && !initializing)
				{
					RX1Ant = GetRX1Ant(rx1_band);
					if(FWCEEPROM.RX2OK) RX2Ant = GetRX2Ant(rx1_band);
					TXAnt = GetTXAnt(rx1_band);
				}
			}
		}

		private FWCAnt[] rx1_ant_by_band;
		public void SetRX1Ant(Band b, FWCAnt ant)
		{
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					RX1Ant = ant;
					break;
				case AntMode.Expert:
					if(initializing) return;
					rx1_ant_by_band[(int)b] = ant;
					if(rx1_band == b) RX1Ant = ant;
					break;
			}
		}

		public FWCAnt GetRX1Ant(Band b)
		{
			FWCAnt ret = FWCAnt.ANT1;
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					ret = rx1_ant;
					break;
				case AntMode.Expert:
					ret = rx1_ant_by_band[(int)b];
					break;
			}
			return ret;
		}

		private FWCAnt[] rx2_ant_by_band;
		public void SetRX2Ant(Band b, FWCAnt ant)
		{
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					RX2Ant = ant;
					break;
				case AntMode.Expert:
					if(initializing) return;
					rx2_ant_by_band[(int)b] = ant;
					if(rx2_band == b) RX2Ant = ant;
					break;
			}
		}

		public FWCAnt GetRX2Ant(Band b)
		{
			FWCAnt ret = FWCAnt.ANT1;
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					ret = rx2_ant;
					break;
				case AntMode.Expert:
					ret = rx2_ant_by_band[(int)b];
					break;
			}
			return ret;
		}

		private FWCAnt[] tx_ant_by_band;

		public void SetTXAnt(Band b, FWCAnt ant)   // b = comboband text from expertmode, ant is the TX ant
		{
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					TXAnt = ant;
					break;
				case AntMode.Expert:
					if(initializing) return;

					tx_ant_by_band[(int)b] = ant; // ke9ns set to ant selected in the antform

			//ke9ns remove		if(tx_band == b)
                        TXAnt = ant; // ke9ns causes problems for openned radio in expert mode.

					break;
			}
		}

		public FWCAnt GetTXAnt(Band b)
		{
			FWCAnt ret = FWCAnt.ANT1;
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					ret = tx_ant;
					break;
				case AntMode.Expert:
					ret = tx_ant_by_band[(int)b];
					break;
			}
			return ret;
		}

        private HIDAnt[] rx_ant_1500_by_band;
        public void SetRXAnt1500(Band b, HIDAnt ant)
        {
            switch (current_ant_mode)
            {
                case AntMode.Simple:
                    RXAnt1500 = ant;
                    break;
                case AntMode.Expert:
                    if (initializing) return;
                    rx_ant_1500_by_band[(int)b] = ant;
                    if (rx1_band == b) RXAnt1500 = ant;
                    break;
            }
        }

        public HIDAnt GetRXAnt1500(Band b)
        {
            HIDAnt ret = HIDAnt.PA;
            switch (current_ant_mode)
            {
                case AntMode.Simple:
                    ret = rx_ant_1500;
                    break;
                case AntMode.Expert:
                    ret = rx_ant_1500_by_band[(int)b];
                    break;
            }
            return ret;
        }

        private HIDAnt[] tx_ant_1500_by_band;
        public void SetTXAnt1500(Band b, HIDAnt ant)
        {
            switch (current_ant_mode)
            {
                case AntMode.Simple:
                    TXAnt1500 = ant;
                    break;
                case AntMode.Expert:
                    if (initializing) return;
                    tx_ant_1500_by_band[(int)b] = ant;
                    if (tx_band == b) TXAnt1500 = ant;
                    break;
            }
        }

        public HIDAnt GetTXAnt1500(Band b)
        {
            HIDAnt ret = HIDAnt.PA;
            switch (current_ant_mode)
            {
                case AntMode.Simple:
                    ret = tx_ant_1500;
                    break;
                case AntMode.Expert:
                    ret = tx_ant_1500_by_band[(int)b];
                    break;
            }
            return ret;
        }

		private bool[] rx1_loop_by_band;
		public void SetRX1Loop(Band b, bool on)
		{
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					RX1Loop = on;
					break;
				case AntMode.Expert:
					if(initializing) return;
					rx1_loop_by_band[(int)b] = on;
					if(rx1_band == b && !mox) RX1Loop = on;
					break;
			}
		}

		public bool GetRX1Loop(Band b)
		{
			bool ret = false;
			switch(current_ant_mode)
			{
				case AntMode.Simple:
					ret = rx1_loop;
					break;
				case AntMode.Expert:
					ret = rx1_loop_by_band[(int)b];
					break;
			}
			return ret;
		}

		private bool mouse_tune_step = false;
		public bool MouseTuneStep
		{
			get { return mouse_tune_step; }
			set { mouse_tune_step = value; }
		}

		private bool new_power_cal = false;
		public bool NewPowerCal
		{
			get { return new_power_cal; }
			set { new_power_cal = value; }
		}

		public bool ShowCWTXFreq
		{
			get{return chkShowTXCWFreq.Checked;}
			set{chkShowTXCWFreq.Checked = value;}
		}


        //=========================================================
        // ke9ns add for display to check if Beacon needs an freq avg signal strength reading
        public bool BeaconSigAvg
        {
            get
            {
                if (SpotForm != null)
                {  
                    if ((SpotForm.beacon5 > 0) || (SpotForm.beacon11 > 0) || (SpotForm.WTime == true)) return true;  // if Fast or Slow Beacon scanning is enabled or WWV checking
                    else return false;
                }
                else return false;

            }


        } //  public bool BeaconSigAvg
        


        //=============================
        // ke9ns add  scheduler calls this to set audio to POST and 48k SR for small file size recordings
        public bool RECPOST
        {
          //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {
             
                if (value == true)
                {
                    WaveForm.RECPLAY = true;                 // this sets recording to POST (not IQ pre) 
                    WaveForm.RECPLAY2 = true;                // and reduces .wav to 48000 SR to save file size

                    WaveForm.checkBoxRecord.Checked = true; // start recording

                }
                else
                {
                  //  WaveForm.RECPLAY3 = true;                // and restores .wav to original SR size
                    WaveForm.checkBoxRecord.Checked = value; // start recording

                }


            }

        }

        public bool RECPOST1
        {
            //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {
                  WaveForm.RECPLAY3 = true;                // and restores .wav to original SR size
            }

        }
        // ke9ns add when schedule recording comes up, turn WAVE RED
        public bool REC1
        {
            //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {
                if (value == false)
                {
                    waveToolStripMenuItem.ForeColor = SystemColors.ControlLightLight;
                    waveToolStripMenuItem.Text = "Wave";
                   
                }
                else
                {
                    waveToolStripMenuItem.ForeColor = Color.Red;
                    waveToolStripMenuItem.Text = "Record";

                  
                }
            }

        } // REC1

        // ke9ns add when schedule comes up, turn Memory RED
        public bool SCHED1
        {
            //  get { return WaveForm.checkBoxRecord.Checked; }
            set
            {
                if (value == false)
                {
                   
                    memoryToolStripMenuItem.ForeColor = SystemColors.ControlLightLight;
                    memoryToolStripMenuItem.Text = "Memory";
                }
                else
                {
                  
                    memoryToolStripMenuItem.ForeColor = Color.Red;
                    memoryToolStripMenuItem.Text = "Mem Sched";
                }
            }

        } // REC1



        public bool ShowTXFilter
		{
			get{return chkShowTXFilter.Checked;}
			set{chkShowTXFilter.Checked = value;}
		}

        public bool ShowDigTXFilter
        {
            get { return chkShowDigTXFilter.Checked; }
            set { chkShowDigTXFilter.Checked = value; }
        }

        private bool rx1_loop = false;
        public bool RX1Loop
        {
            get { return rx1_loop; }
            set
            {
                bool old = rx1_loop;
                rx1_loop = value;
                if (old != value || initializing)
                {
                    FWC.SetRX1Loop(rx1_loop);

                    if (rx1_loop)
                        rx1_loop_offset = loop_gain;
                    else rx1_loop_offset = 0.0f;
                    if (rx2_ant == FWCAnt.RX1TAP)
                        rx2_loop_offset = rx1_loop_offset;
                    UpdateDisplayOffsets();
                }
            }
        }

        private bool vu_ant = false;
		private FWCAnt rx1_ant = FWCAnt.ANT1;
		public FWCAnt RX1Ant
		{
			get { return rx1_ant; }
			set
			{
                if (!fwc_init || current_model != Model.FLEX5000) return;

                FWCAnt old = rx1_ant;
                rx1_ant = value;       

                if (FWCEEPROM.VUOK)
                {
                    if (rx1_xvtr_index == 0)
                    {
                        lblAntRX1.Text = "RX1: VHF";
                        rx1_path_offset = 0.0f;
                        return;
                    }
                    else if (rx1_xvtr_index == 1)
                    {
                        lblAntRX1.Text = "RX1: UHF";
                        rx1_path_offset = 0.0f;
                        return;
                    }
                }
                				                         
				if(value != old || initializing || vu_ant)
				{
					switch(rx1_ant)
					{
						case FWCAnt.NC:
							lblAntRX1.Text = "RX1: N/C";
							FWC.SetRX1Ant(0);
							break;
						case FWCAnt.ANT1:
							lblAntRX1.Text = "RX1: ANT1";
							FWC.SetRX1Ant(1);
							rx1_path_offset = 0.5f;
							break;
						case FWCAnt.ANT2:
							lblAntRX1.Text = "RX1: ANT2";
							FWC.SetRX1Ant(2);
							rx1_path_offset = 0.5f;
							break;
						case FWCAnt.ANT3:
							lblAntRX1.Text = "RX1: ANT3";
							FWC.SetRX1Ant(3);
							rx1_path_offset = 0.5f;
							break;
						case FWCAnt.RX1IN:
							lblAntRX1.Text = "RX1: RX1 IN";
							FWC.SetRX1Ant(4);
							rx1_path_offset = 0.0f;
							break;
						case FWCAnt.SIG_GEN:
							lblAntRX1.Text = "RX1: Sig Gen";
							rx1_path_offset = 0.0f;
							break;
                        case FWCAnt.VHF:
                            lblAntRX1.Text = "RX1: VHF";
                            rx1_path_offset = 0.0f;
                            break;
                        case FWCAnt.UHF:
                            lblAntRX1.Text = "RX1: UHF";
                            rx1_path_offset = 0.0f;
                            break;
					}

					UpdateDisplayOffsets();
					if(FWCEEPROM.RX2OK && rx2_ant == FWCAnt.RX1TAP)
					{
						RX2Ant = rx2_ant;
					}
				}
			}
		}

        private FWCAnt rx2_ant = FWCAnt.RX2IN;
        public FWCAnt RX2Ant
        {
            get { return rx2_ant; }
            set
            {
                if (!fwc_init || current_model != Model.FLEX5000) return;

                FWCAnt old = rx2_ant;
                rx2_ant = value;

                if (FWCEEPROM.VUOK)
                {
                    if (rx2_xvtr_index == 0)
                    {
                        lblAntRX2.Text = "RX2: VHF";
                        rx2_path_offset = 0.0f;
                        FWC.SetRX2Ant(5); // RX2 In
                        return;
                    }
                    else if (rx2_xvtr_index == 1)
                    {
                        lblAntRX2.Text = "RX2: UHF";
                        rx2_path_offset = 0.0f;
                        FWC.SetRX2Ant(5); // RX2 In
                        return;
                    }
                }                

                if (old != value || initializing || vu_ant)
                {
                    switch (rx2_ant)
                    {
                        case FWCAnt.ANT1:
                            lblAntRX2.Text = "RX2: ANT1";
                            FWC.SetRX2Ant(1);
                            rx2_path_offset = -rx2_res_offset - 2.9f;
                            rx2_loop_offset = 0.0f;
                            break;
                        case FWCAnt.RX2IN:
                            lblAntRX2.Text = "RX2: RX2 IN";
                            FWC.SetRX2Ant(5);
                            rx2_path_offset = -rx2_res_offset - 2.8f;
                            rx2_loop_offset = 0.0f;
                            break;
                        case FWCAnt.RX1TAP:
                            lblAntRX2.Text = "RX2: RX1 Tap";
                            FWC.SetRX2Ant(6);
                            switch (rx1_ant)
                            {
                                case FWCAnt.ANT1:
                                case FWCAnt.ANT2:
                                case FWCAnt.ANT3:
                                    rx2_path_offset = 0.6f;
                                    break;
                                case FWCAnt.RX1IN:
                                case FWCAnt.SIG_GEN:
                                    rx2_path_offset = 0.0f;
                                    break;
                            }
                            rx2_loop_offset = rx1_loop_offset;
                            break;
                        case FWCAnt.NC:
                            lblAntRX2.Text = "RX2: N/C";
                            FWC.SetRX2Ant(0);
                            rx2_path_offset = -rx2_res_offset - 2.8f;
                            rx2_loop_offset = 0.0f;
                            break;
                        case FWCAnt.VHF:
                            lblAntRX2.Text = "RX1: VHF";
                            rx2_path_offset = 0.0f;
                            break;
                        case FWCAnt.UHF:
                            lblAntRX2.Text = "RX1: UHF";
                            rx2_path_offset = 0.0f;
                            break;
                        default:
                            FWC.SetRX2Ant(5);
                            lblAntRX2.Text = "RX2: RX2 IN";
                            rx2_path_offset = -2.0f;
                            rx2_loop_offset = 0.0f;
                            break;
                    }
                    UpdateDisplayOffsets();
                }
            }
        }

        private HIDAnt rx_ant_1500 = HIDAnt.PA;
        public HIDAnt RXAnt1500
        {
            get { return rx_ant_1500; }
            set
            {
                if (!hid_init || current_model != Model.FLEX1500) return;
                HIDAnt old = rx_ant_1500;
                rx_ant_1500 = value;
                if (value != old || initializing)
                {
                    switch (rx_ant_1500)
                    {
                        case HIDAnt.PA:
                            lblAntRX1.Text = "RX: PA";
                            USBHID.SetRXAnt(0);
                            break;
                        case HIDAnt.XVTX_COM:
                            lblAntRX1.Text = "RX: XVTX/COM";
                            USBHID.SetRXAnt(2);
                            break;
                        case HIDAnt.XVRX:
                            lblAntRX1.Text = "RX: XVRX";
                            USBHID.SetRXAnt(1);
                            break;
                        case HIDAnt.BITE:
                            lblAntRX1.Text = "RX: BITE";
                            USBHID.SetRXAnt(3);
                            break;
                    }
                }
            }
        }

		bool tx_ant_6m_reset = false;
		private FWCAnt tx_ant = FWCAnt.ANT1;
		public FWCAnt TXAnt
		{
			get { return tx_ant; }
			set
			{
                if (!fwc_init || current_model != Model.FLEX5000) return;
				FWCAnt old = tx_ant;
				tx_ant = value;
				if(old != value || tx_ant_6m_reset || initializing || tx_cal)
				{
					if(tx_ant_6m_reset) tx_ant_6m_reset = false;

                    switch (tx_ant)
					{
						case FWCAnt.ANT1:
							lblAntTX.Text = "TX   : ANT1"; // ke9ns mod (add 2 spaces)
							FWC.SetTXAnt(1);
							break;
						case FWCAnt.ANT2:
							lblAntTX.Text = "TX   : ANT2";
							FWC.SetTXAnt(2);
							break;
						case FWCAnt.ANT3:
							lblAntTX.Text = "TX   : ANT3";
							FWC.SetTXAnt(3);
							break;
					}
				}
			}
		}

        private HIDAnt tx_ant_1500 = HIDAnt.PA;
        public HIDAnt TXAnt1500
        {
            get { return tx_ant_1500; }
            set
            {
                if (!hid_init || current_model != Model.FLEX1500) return;
                HIDAnt old = tx_ant_1500;
                tx_ant_1500 = value;
                if (old != value || initializing)
                {
                    switch (tx_ant_1500)
                    {
                        case HIDAnt.PA:
                            lblAntTX.Text = "TX: PA";
                            USBHID.SetTXAnt(0);
                            Set1500Filters(VFOAFreq);
                            break;
                        case HIDAnt.XVTX_COM:
                            lblAntTX.Text = "TX: XVTX/COM";
                            USBHID.SetTXAnt(2);
                            HIDPAFilter = 0;
                            break;
                        case HIDAnt.BITE:
                            lblAntTX.Text = "TX: BITE";
                            USBHID.SetTXAnt(3);
                            HIDPAFilter = 0;
                            break;
                    }
                }
            }
        }

		private bool zero_beat_rit = false;
		public bool ZeroBeatRIT
		{
			get { return zero_beat_rit; }
			set { zero_beat_rit = value; }
		}

		private float fwc_preamp_offset = 13.0f;
		public float FWCPreampOffset
		{
			get { return fwc_preamp_offset; }
			set { fwc_preamp_offset = value; }
		}

		/*private bool fwc_att_on = false;
		public bool FWCATTOn
		{
			get { return fwc_att_on; }
			set
			{
				fwc_att_on = value;
				FWC.SetAttOn(fwc_index, fwc_att_on);
				UpdateDisplayOffset();
			}
		}*/

		/*private float[] fwc_att_offset = new float[32];
		private int fwc_att_val = 0;
		public int FWCATTVal
		{
			get { return fwc_att_val; }
			set
			{
				fwc_att_val = value;
				FWC.SetAttVal(fwc_index, fwc_att_val);
				UpdateDisplayOffset();
			}
		}*/

		private float meter_offset = 0.0f;
		private void UpdateDisplayOffsets()
		{
            Display.RX1PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];
			Display.RX2PreampOffset = rx2_preamp_offset[(int)rx2_preamp_mode];
            Display.RX1DisplayCalOffset = rx1_level_table[(int)rx1_band][0] + rx1_path_offset + rx1_xvtr_gain_offset + rx1_loop_offset;
            Display.RX2DisplayCalOffset = rx2_level_table[(int)rx2_band][0] + rx2_path_offset + rx2_xvtr_gain_offset + rx2_loop_offset;

		}

		private bool snap_to_click_tuning = true;
		public bool SnapToClickTuning
	    {	
			get { return snap_to_click_tuning; }
			set { snap_to_click_tuning = value; }
		}

		private bool xvtr_tune_power = false;
		public bool XVTRTunePower
		{
			get { return xvtr_tune_power; }
			set { xvtr_tune_power = value; }
		}

		public bool DisableToolTips
		{
			set
			{
				if(toolTip1 != null) toolTip1.Active = !value;
			}
		}

		public bool X2TR
		{
			get
			{
				if(chkX2TR != null) return chkX2TR.Checked;
				else return false;
			}
			set
			{
				if(chkX2TR != null) chkX2TR.Checked = value;
			}
		}

		public string TXProfile
		{
			get
			{
				if(comboTXProfile != null) return comboTXProfile.Text;
				else return "";
			}
			set
			{
				if(comboTXProfile != null) comboTXProfile.Text = value;
				if(comboDigTXProfile != null) comboDigTXProfile.Text = value;
                if (comboCWTXProfile != null) comboCWTXProfile.Text = value;  // ke9ns add
                if (comboFMTXProfile != null) comboFMTXProfile.Text = value; // ke9ns add

            }
        }

        private string vac_sample_rate = "48000";
        public string VACSampleRate
        {
            get { return vac_sample_rate; }

            set
            {
                vac_sample_rate = value;

                if (comboVACSampleRate != null && !(chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    comboVACSampleRate.Text = value;
                }
            }
        }

        private string vac2_sample_rate = "48000";
        public string VAC2SampleRate
        {
            get { return vac2_sample_rate; }

            set
            {
                vac2_sample_rate = value;

                if (comboVACSampleRate != null && chkVAC2.Checked && chkVFOBTX.Checked)
                {
                    comboVACSampleRate.Text = value;
                }
            }
        }
        private bool vac_stereo = false;
		public bool VACStereo
		{
			get { return vac_stereo; } 
			
			set
			{
                vac_stereo = value;

                if (chkVACStereo != null && !(chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    chkVACStereo.Checked = value;
                }
			}
		}

        private bool vac2_stereo = false;
        public bool VAC2Stereo
        {
            get { return vac2_stereo; }

            set
            {
                vac2_stereo = value;

                if (chkVACStereo != null && chkVAC2.Checked && chkVFOBTX.Checked)
                {
                    chkVACStereo.Checked = value;
                }
            }
        }

		public bool CWIambic
		{
			get 
			{
				if(chkCWIambic != null) return chkCWIambic.Checked;
				else return false;
			}

			set
			{
				if(chkCWIambic != null) chkCWIambic.Checked = value;
			}
		}

        //================================================================
        //================================================================
        // ke9ns  comes here after you go to setup->appearance-> meters
        // used to cycle through and select meter from list
        //================================================================
        //================================================================
        private MultiMeterDisplayMode current_meter_display_mode = MultiMeterDisplayMode.Analog; // ke9ns mod was Edge
		public MultiMeterDisplayMode CurrentMeterDisplayMode
		{
			get { return current_meter_display_mode; }
			set
			{
				switch(current_meter_display_mode)
				{
		
                    case MultiMeterDisplayMode.Edge:
					        switch(value) // value = CurrentMeterDisplayMode being passed into this routine
                             {
						        case MultiMeterDisplayMode.Edge:
                                picMultiMeterDigital.Invalidate();
                                picMultiMeterDigital.BackColor = edge_meter_background_color;
                                picRX2Meter.Invalidate();
                                    picRX2Meter.BackColor = edge_meter_background_color;
							    break; // edge

                                case MultiMeterDisplayMode.Original:
                                picMultiMeterDigital.Invalidate();
                                 picMultiMeterDigital.BackColor = meter_background_color;
                                picRX2Meter.Invalidate();
                                picRX2Meter.BackColor = meter_background_color;
                                break; // original

                                case MultiMeterDisplayMode.Analog:
                                
                                picMultiMeterDigital.BackColor = analog_meter_background_color;
                                picMultiMeterDigital.Invalidate();
                              
                                picRX2Meter.BackColor = analog_meter_background_color;
                                picRX2Meter.Invalidate();

                                break; // original
					        }
					break; // edge

                    case MultiMeterDisplayMode.Original:
                    switch (value)
                    {
                        case MultiMeterDisplayMode.Edge:
                            picMultiMeterDigital.Invalidate();
                             picMultiMeterDigital.BackColor = edge_meter_background_color;
                            picRX2Meter.Invalidate();
                             picRX2Meter.BackColor = edge_meter_background_color;
                            break; // edge

                        case MultiMeterDisplayMode.Original:
                            picMultiMeterDigital.Invalidate();
                           picMultiMeterDigital.BackColor = meter_background_color;
                            picRX2Meter.Invalidate();
                             picRX2Meter.BackColor = meter_background_color;
                            break; // original

                        case MultiMeterDisplayMode.Analog:
                                picMultiMeterDigital.BackColor = analog_meter_background_color;
                                picMultiMeterDigital.Invalidate();

                                picRX2Meter.BackColor = analog_meter_background_color;
                                picRX2Meter.Invalidate();

                                break; // original

                    }

                    break; // original

                    case MultiMeterDisplayMode.Analog:
                    switch (value)
                    {
                        case MultiMeterDisplayMode.Edge:
                            picMultiMeterDigital.Invalidate();
                            picMultiMeterDigital.BackColor = edge_meter_background_color;
                            picRX2Meter.Invalidate();
                            picRX2Meter.BackColor = edge_meter_background_color;
                            break; // edge

                        case MultiMeterDisplayMode.Original:
                            picMultiMeterDigital.Invalidate();
                             picMultiMeterDigital.BackColor = meter_background_color;
                            picRX2Meter.Invalidate();
                             picRX2Meter.BackColor = meter_background_color;
                            break; // original

                        case MultiMeterDisplayMode.Analog:
                                picMultiMeterDigital.BackColor = analog_meter_background_color;
                                picMultiMeterDigital.Invalidate();

                                picRX2Meter.BackColor = analog_meter_background_color;
                                picRX2Meter.Invalidate();

                                break; // original

                    }

                    break; // analog

                } //switch(current_meter_display_mode

				current_meter_display_mode = value;
				picMultiMeterDigital.Invalidate();

			} // set


		} // MultiMeterDisplayMode CurrentMeterDisplayMode
//==========================================================================================


		private static Color gen_background_color = SystemColors.Control;//k6jca 1/13/08

		public Color GenBackgroundColor							  //k6jca  1/13/08
		{
			get
			{
				return gen_background_color;
			}
			set
			{
				/*gen_background_color = value;
				this.BackColor = value;
				grpVFOA.BackColor = value;
				grpVFOB.BackColor = value;*/
			}
		}

		public bool VFOSync
		{
			get { return chkVFOSync.Checked; }
			set { chkVFOSync.Checked = value; }
		}

		private static Color vfo_background_color = Color.Black;
		public  Color VFOBackgroundColor
		{
			get { return vfo_background_color; }
			set
			{
				vfo_background_color = value;
				txtVFOAFreq.BackColor = value;
				txtVFOAMSD.BackColor = value;
				txtVFOALSD.BackColor = value;
				txtVFOBFreq.BackColor = value;
				txtVFOBMSD.BackColor = value;
				txtVFOBLSD.BackColor = value;
				panelVFOAHover.BackColor = value;
				panelVFOBHover.BackColor = value;
			}
		}

		private static Color meter_digital_text_color = Color.Yellow;
		public Color MeterDigitalTextColor
		{
			get { return meter_digital_text_color; }
			set
			{
				meter_digital_text_color = value;
				txtMultiText.ForeColor = value;
                txtRX2Meter.ForeColor = value;
			}
		}

		private static Color meter_digital_background_color = Color.Black;
		public Color MeterDigitalBackgroundColor
		{
			get { return meter_digital_background_color; }
			set
			{
				meter_digital_background_color = value;
				txtMultiText.BackColor = value;
                txtRX2Meter.BackColor = value;
			}
		}

		private static Color band_background_color = Color.Black;
		public Color BandBackgroundColor
		{
			get { return band_background_color; }
			set
			{
				band_background_color = value;
				txtVFOABand.BackColor = value;
				txtVFOBBand.BackColor = value;
			}
		}


        //===========================================================================
        // ke9ns EDGE meter colors
        private static Color edge_meter_background_color = Color.Black;
		public Color EdgeMeterBackgroundColor
		{
			get { return edge_meter_background_color; }
			set
			{
			    edge_meter_background_color = value;

                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.BackColor = value; // background is black
                    picMultiMeterDigital.Invalidate();

                    picRX2Meter.BackColor = value;
                   picRX2Meter.Invalidate();  // RX2
                }
                else if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                {
                    picMultiMeterDigital.BackColor = Color.Black; // background is black
                    picMultiMeterDigital.Invalidate();

                    picRX2Meter.BackColor = Color.Black;
                     picRX2Meter.Invalidate();  // RX2
                }
             
		        
            } // set
		}
      
		private static Color edge_low_color = Color.White;
		public Color EdgeLowColor
		{
			get { return edge_low_color; }
			set
			{
				edge_low_color = value;
				if(current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.Invalidate();
                    picRX2Meter.Invalidate();
                }
			}
		}

		private static Color edge_high_color = Color.Red;
		public Color EdgeHighColor
		{
			get { return edge_high_color; }
			set
			{
				edge_high_color = value;
				if(current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.Invalidate();
                     picRX2Meter.Invalidate();
                }
			}
		}

		private static Color edge_avg_color = Color.Yellow;  // ke9ns needle color
		public Color EdgeAVGColor
		{
			get { return edge_avg_color; }
			set
			{
				edge_avg_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Edge)
                {
                    picMultiMeterDigital.Invalidate();
                     picRX2Meter.Invalidate();
                }
               
            }
		}

    
        //===========================================================================
        // ke9ns ANALOG meter colors

        private static Color analog_low_color = Color.White;
        public Color AnalogLowColor
        {
            get { return analog_low_color; }
            set
            {
                analog_low_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Analog)
                {
                    picMultiMeterDigital.Invalidate();
                    picRX2Meter.Invalidate();
                }
            }
        }

        private static Color analog_high_color = Color.Red;
        public Color AnalogHighColor
        {
            get { return analog_high_color; }
            set
            {
                analog_high_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Analog)
                {
                    picMultiMeterDigital.Invalidate();
                      picRX2Meter.Invalidate(); //  if (chkRX2.Checked)
                }
            }
        }

        private static Color analog_avg_color = Color.Yellow;  // ke9ns needle color
        public Color AnalogAVGColor
        {
            get { return analog_avg_color; }
            set
            {
                analog_avg_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Analog)
                {
                    picMultiMeterDigital.Invalidate();
                    picRX2Meter.Invalidate();
                }
                
            }
        }


        //====================================================================================
        // ke9ns add
        private bool meterLMB = false; // light meter background = true
        private bool meterDMB = false; // dark meter background = true

        public bool AnalogMeterLMB
        {

            get { return meterLMB; }
            set
            {
                meterLMB = value;
            }

        } // AnalogMeterLMB

        public bool AnalogMeterDMB
        {

            get { return meterDMB; }
            set
            {
                meterDMB = value;
            }

        } // AnalogMeterDMB

        private bool meterPointer = false;
        public bool AnalogPointer
        {

            get { return meterPointer; }
            set
            {
                meterPointer = value;
            }

        } // AnalogMeterDMB

        private static Color analog_meter_background_color = Color.Black;
        public Color AnalogMeterBackgroundColor
        {
            get { return analog_meter_background_color; }
            set
            {
                analog_meter_background_color = value;
               
                if (current_meter_display_mode == MultiMeterDisplayMode.Analog)
                {
                    picMultiMeterDigital.BackColor = value; // background is black
                    picMultiMeterDigital.Invalidate();

                    picRX2Meter.BackColor = value;
                    picRX2Meter.Invalidate();  // RX2
                }
                else if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                {
                    picMultiMeterDigital.BackColor = Color.Black; // background is black
                    picMultiMeterDigital.Invalidate();

                    picRX2Meter.BackColor = Color.Black;
                    picRX2Meter.Invalidate();  // RX2
                }
        

            }// set
     

        } // AnalogMeterBackgroundcolor


        private static Color meter_background_color = Color.Black; // ke9ns used by original meter 
/*
        public Color MeterBackgroundColor
        {
            get { return meter_background_color; }
            set
            {
                meter_background_color = value;
                if (current_meter_display_mode == MultiMeterDisplayMode.Original)
                {

                    picMultiMeterDigital.BackColor = value;
                    picMultiMeterDigital.Invalidate();

                    picRX2Meter.BackColor = value;
                    if (chkRX2.Checked) picRX2Meter.Invalidate();

                }
            }
        }
*/
        //=======================================================================


        private static Color peak_background_color = Color.Black;
		public Color PeakBackgroundColor
		{
			get { return peak_background_color; }
			set
			{
				peak_background_color = value;
				txtDisplayCursorOffset.BackColor = value;
				txtDisplayCursorPower.BackColor = value;
				txtDisplayCursorFreq.BackColor = value;

				txtDisplayPeakOffset.BackColor = value;
				txtDisplayPeakPower.BackColor = value;
				txtDisplayPeakFreq.BackColor = value;

				autoBrightBox.BackColor = value;
			}
		}

		private bool small_lsd = true;
		public bool SmallLSD
		{
			get { return small_lsd; }
			set
			{
				small_lsd = value;
				txtVFOALSD.Visible = value;
				txtVFOAMSD.Visible = value;
				txtVFOBLSD.Visible = value;
				txtVFOBMSD.Visible = value;
			}
		}

		private static Color small_vfo_color = Color.OrangeRed;	
		public Color SmallVFOColor
		{
			get { return small_vfo_color; }
			set
			{
				small_vfo_color = value;
				if(small_lsd && chkPower.Checked)
				{
					txtVFOALSD.ForeColor = small_vfo_color;
					if(chkVFOSplit.Checked)
						txtVFOBLSD.ForeColor = small_vfo_color;
				}
			}
		}


        //============================================================
        // ke9ns add
        private Color ring_vfo_color = Color.DarkGreen;
        public Color RingVFOColor
        {
            get { return ring_vfo_color; }
            set
            {
                ring_vfo_color = value;
                grpVFOA.Invalidate();
                grpVFOB.Invalidate();
                grpMultimeter.Invalidate();
                grpRX2Meter.Invalidate();
                grpVFOBetween.Invalidate();
                panelDateTime.Invalidate();
                panelAntenna.Invalidate();
                panelOptions.Invalidate();

                panelModeSpecificPhone.Invalidate();
                panelModeSpecificFM.Invalidate();
                panelModeSpecificCW.Invalidate();
                panelModeSpecificDigital.Invalidate();

                panelBandHF.Invalidate();
                panelBandGN.Invalidate();
                panelBandVHF.Invalidate();

                panelMode.Invalidate();
                panelFilter.Invalidate();
                panelRX2Filter.Invalidate();
                panelRX2Mode.Invalidate();

                panelTSBandStack.Invalidate();

            }

        } //RingVFOColor


        private int default_low_cut = 150;
		public int DefaultLowCut
		{
			get { return default_low_cut; }
			set
			{				
				for(DSPMode m = DSPMode.FIRST+1; m < DSPMode.LAST; m++)
				{
					for(Filter f = Filter.FIRST+1; f < Filter.LAST; f++)
					{
						int low = rx1_filters[(int)m].GetLow(f);
						int high = rx1_filters[(int)m].GetHigh(f);
                        // Removed DIGU and DIGL cases - W4TME
						switch(m) 
						{
							case DSPMode.USB:
                                /* case DSPMode.DIGU: */
								if(low == default_low_cut)	rx1_filters[(int)m].SetLow(f, value);
								break; 
							case DSPMode.LSB:
                                /* case DSPMode.DIGL: */
								if(high == -default_low_cut)	rx1_filters[(int)m].SetHigh(f, -value); 
								break;
						}
					}
				}
				default_low_cut = value;
				RX1Filter = rx1_filter;
			}
		}

		public int CPDRVal
		{
			get
			{
				if(ptbCPDR != null) return ptbCPDR.Value;
				else return -1;
			}
			set
			{
                if (ptbCPDR != null) ptbCPDR.Value = value;
                ptbCPDR_Scroll(this, EventArgs.Empty);
			}
		}

		public int NoiseGate
		{
			get
			{
				if(ptbNoiseGate != null) return ptbNoiseGate.Value;
				else return -1;
			}
			set
			{
				if(ptbNoiseGate != null)
				{
					if(value > ptbNoiseGate.Maximum) value = ptbNoiseGate.Maximum;
					ptbNoiseGate.Value = value;
                    ptbNoiseGate_Scroll(this, EventArgs.Empty);
				}
			}
		}
		
		public int VOXSens
		{
			get
			{
				if(ptbVOX != null) return ptbVOX.Value;
				else return -1;
			}
			set
			{
                if (ptbVOX != null)
                {
                    ptbVOX.Value = value;
                    ptbVOX_Scroll(this, EventArgs.Empty);
                }
			}
		}

		public bool NoiseGateEnabled
		{
			get 
			{
				if(chkNoiseGate != null) return chkNoiseGate.Checked;
				else return false;
			}
			set
			{
				if(chkNoiseGate != null) chkNoiseGate.Checked = value;
			}
		}

        private int vac_rx_gain = 0;
		public int VACRXGain
		{
			get { return vac_rx_gain; }
			set
			{
                vac_rx_gain = value;

                if (ptbVACRXGain != null && !(chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    ptbVACRXGain.Value = value;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);
                }
			}
		}

        private int vac2_rx_gain = 0;
        public int VAC2RXGain
        {
            get { return vac2_rx_gain; }
            set
            {
                vac2_rx_gain = value;

                if (ptbVACRXGain != null && chkVAC2.Checked && chkVFOBTX.Checked)
                {
                    ptbVACRXGain.Value = value;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);
                }
            }
        }

        private int vac_tx_gain = 0;
		public int VACTXGain
		{
			get { return vac_tx_gain; }
			set
			{
                vac_tx_gain = value;

                if (ptbVACTXGain != null && !(chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    ptbVACTXGain.Value = value;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);
                }
			}
		}

        private int vac2_tx_gain = 0;
        public int VAC2TXGain
        {
            get { return vac2_tx_gain; }
            set
            {
                vac2_tx_gain = value;

                if (ptbVACTXGain != null && chkVAC2.Checked && chkVFOBTX.Checked)
                {
                    ptbVACTXGain.Value = value;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);
                }
            }
        }

		public bool BreakInEnabled
		{
			get
			{
				if(chkCWBreakInEnabled != null) return chkCWBreakInEnabled.Checked;
				else return false;
			}
			set
			{
				if(chkCWBreakInEnabled != null) chkCWBreakInEnabled.Checked = value;
			}
		}

		public bool VOXEnable
		{
			get
			{
				if(chkVOX != null) return chkVOX.Checked;
				else return false;
			}
			set
			{
				if(chkVOX != null) chkVOX.Checked = value;
			}
		}

		public int RF
		{
			get
			{
				if(ptbRF != null) return ptbRF.Value;
				else return -1;
			}
			set
			{
                if (ptbRF != null)
                {
                    ptbRF.Value = value;
                    ptbRF_Scroll(this, EventArgs.Empty);
                }
			}
		}

		public int RX2RF
		{
			get
			{
                if (ptbRX2RF != null) return ptbRX2RF.Value;
				else return -1;
			}
			set
			{
                if (ptbRX2RF != null)
                {
                    ptbRX2RF.Value = value;
                    ptbRX2RF_Scroll(this, EventArgs.Empty);
                }
			}
		}

		private bool enable_kb_shortcuts = true;
		public bool EnableKBShortcuts
		{
			get { return enable_kb_shortcuts; }
			set { enable_kb_shortcuts = value; }
		}

		private bool save_filter_changes = true;
		public bool SaveFilterChanges
		{
			get { return save_filter_changes; }
			set { save_filter_changes = value; }
		}

        //=====================================================================================
        private int max_filter_shift = 9999;
		public int MaxFilterShift
		{
			get { return max_filter_shift; }
			set
			{
				max_filter_shift = value;
				UpdateRX1Filters(dsp.GetDSPRX(0, 0).RXFilterLow, dsp.GetDSPRX(0, 0).RXFilterHigh);
			}
		}

        //=====================================================================================
        private int max_filter_width = 9999;
		public int MaxFilterWidth
		{
			get { return max_filter_width; }
			set
			{
				max_filter_width = value;
				UpdateRX1Filters(dsp.GetDSPRX(0, 0).RXFilterLow, dsp.GetDSPRX(0, 0).RXFilterHigh);
			}
		}

        //=====================================================================================
        private bool mic_boost = false;
		public bool MicBoost
		{
			get { return mic_boost; }
			set 
			{
				mic_boost = value;
				ptbMic_Scroll(this, EventArgs.Empty);
			}
		}

        //=====================================================================================
        // ke9ns add  checkbox in setup to allow 2nd TX meter
        private bool tx_meter2 = false;
        public bool TXMeter2
        {
            get
            {
                if (setupForm != null) tx_meter2 = setupForm.chkTXMeter2.Checked;
                return tx_meter2;
            }
            set
            {
                tx_meter2 = value;

                Debug.WriteLine("TXMETER2 " + tx_meter2);

                if (!FWCEEPROM.RX2OK)  // if no 2nd receiver then make the 2nd meter visable
                {
                    if (tx_meter2 == true)
                    {
                     //   grpRX2Meter.Text = "------------------------ TX Meter (2nd)";
                                            
                        comboRX2MeterMode.Visible = false;
                        grpRX2Meter.Visible = true;
                    }
                    else
                    {
                        grpRX2Meter.Visible = false;
                    }

                }
            }
        } // TXMeter2



        //=====================================================================================
        // ke9ns add  checkbox in setup for vfo dials
        private bool vfodial = false;

        public bool VFODIAL
        {
            get
            {
                if (setupForm != null) vfodial = setupForm.chkBoxDial.Checked;
                return vfodial;
            }
            set
            {
                vfodial = value;

                Debug.WriteLine("vfodial " + vfodial);

                if (vfodial == true)
                {

                    try
                    {
                        Thread t = new Thread(new ThreadStart(DIALA));
                        t.Name = "rotate vfoAdial dial Thread";
                        t.IsBackground = true;
                        t.Priority = ThreadPriority.Normal;
                        t.Start();

                        Thread t1 = new Thread(new ThreadStart(DIALB));
                        t1.Name = "rotate vfoB dial Thread";
                        t1.IsBackground = true;
                        t1.Priority = ThreadPriority.Normal;
                        t1.Start();
                    }
                    catch (Exception)
                    {

                    }
                }
                else
                {

                }
            }
        } // vfodial



        private bool always_on_top = false;
		public bool AlwaysOnTop
		{
			get { return always_on_top; }
			set
			{
				always_on_top = value;
				if(value)
				{
					Win32.SetWindowPos(this.Handle.ToInt32(),
						-1, this.Left, this.Top, this.Width, this.Height, 0);
				}
				else
				{
					Win32.SetWindowPos(this.Handle.ToInt32(),
						-2, this.Left, this.Top, this.Width, this.Height, 0);
				}
			}
		}

		private bool quick_qsy = true;
		public bool QuickQSY
		{
			get { return quick_qsy; }
			set { quick_qsy = value; }
		}

		public HW Hdw 
		{
			set { hw = value; }
			get { return hw ; }
		}

		public SIOListenerII Siolisten 
		{
			get { return siolisten;}
			set { siolisten = value; }
		}

        // ke9ns add ant rotor control
        public SIOListenerIII Siolisten1
        {
            get { return siolisten1; }
            set { siolisten1 = value; }
        }

        public bool HideTuneStep
		{
			get { return txtWheelTune.Visible; }
			set
			{
				if(setupForm != null)
					txtWheelTune.Visible = value;
			}
		}

		public string DisplayModeText
		{
			get { return comboDisplayMode.Text; }
			set { comboDisplayMode.Text = value; }
		}

		private bool auto_mute = false;
		public bool AutoMute
		{
			get { return auto_mute; }
			set { auto_mute = value; }
		}

		private float multimeter_avg_mult_old = 1 - (float)1/10;
		private float multimeter_avg_mult_new = (float)1/10;
		private int multimeter_avg_num_blocks = 10;
		public int MultiMeterAvgBlocks
		{
			get { return multimeter_avg_num_blocks; }
			set
			{
				multimeter_avg_num_blocks = value;
				multimeter_avg_mult_old = 1 - (float)1/multimeter_avg_num_blocks;
				multimeter_avg_mult_new = (float)1/multimeter_avg_num_blocks;
			}
		}

        private float multimeter_peak_mult_old = 1 - (float)1 / 10; // ke9ns  
        private float multimeter_peak_mult_new = (float)1 / 10;
        private int multimeter_peak_num_blocks = 10;
        public int MultiMeterPeakBlocks
        {
            get { return multimeter_peak_num_blocks; }
            set
            {
                multimeter_peak_num_blocks = value;
                multimeter_peak_mult_old = 1 - (float)1 / multimeter_peak_num_blocks;
                multimeter_peak_mult_new = (float)1 / multimeter_peak_num_blocks;
            }
        }

        private bool vac_auto_enable = false;
		public bool VACAutoEnable
		{
			get { return vac_auto_enable; }
			set
			{
				vac_auto_enable = value; 
				if(setupForm == null) return;
				if(vac_auto_enable)
				{
					switch(rx1_dsp_mode)
					{
						case DSPMode.DIGL:
						case DSPMode.DIGU:
                        case DSPMode.DRM:
							setupForm.VACEnable = true;
							break;
						default:
							setupForm.VACEnable = false;
							break;
					}
				}
				else setupForm.VACEnable = false;
			}
		}

        private bool vac2_rx2 = true;
        public bool VAC2RX2
        {
            get { return vac2_rx2; }
            set 
            { 
                vac2_rx2 = value;
                Audio.VAC2RX2 = value;
                if (vac2_auto_enable)
                {
                    DSPMode dsp_mode = rx1_dsp_mode;
                    if (vac2_rx2) dsp_mode = rx2_dsp_mode;

                    switch (dsp_mode)
                    {
                        case DSPMode.DIGL:
                        case DSPMode.DIGU:
                        case DSPMode.DRM:
                            setupForm.VAC2Enable = true;
                            break;
                        default:
                            setupForm.VAC2Enable = false;
                            break;
                    }
                }
            }
        }




        private bool vac2_auto_enable = false;
        public bool VAC2AutoEnable
        {
            get { return vac2_auto_enable; }
            set
            {
                vac2_auto_enable = value;
                if (setupForm == null) return;

                if (vac2_auto_enable)
                {
                    DSPMode dsp_mode = rx1_dsp_mode;
                    if (vac2_rx2) dsp_mode = rx2_dsp_mode;

                    switch (dsp_mode)
                    {
                        case DSPMode.DIGL:
                        case DSPMode.DIGU:
                        case DSPMode.DRM:
                            setupForm.VAC2Enable = true;
                            break;
                        default:
                            setupForm.VAC2Enable = false;
                            break;
                    }
                }
                else setupForm.VAC2Enable = false; // ke9ns 
            }
        }

		private float rx1_display_cal_offset;					// display calibration offset per volume setting in dB
		public float RX1DisplayCalOffset
		{
			get { return rx1_display_cal_offset; }
			set
			{
				rx1_display_cal_offset = value;
				//Display.RX1DisplayCalOffset = value;
				UpdateDisplayOffsets();
			}
		}

		private float rx2_display_cal_offset;					// display calibration offset per volume setting in dB
		public float RX2DisplayCalOffset
		{
			get { return rx2_display_cal_offset; }
			set
			{
				rx2_display_cal_offset = value;
				//Display.RX2DisplayCalOffset = value;
				UpdateDisplayOffsets();
			}
		}

		private int display_cursor_x;						// x-coord of the cursor when over the display
		public int DisplayCursorX
		{
			get { return display_cursor_x; }
			set
			{
				display_cursor_x = value;
				Display.DisplayCursorX = value;
			}
		}

		private int display_cursor_y;						// y-coord of the cursor when over the display
		public int DisplayCursorY
		{
			get { return display_cursor_y; }
			set
			{
				display_cursor_y = value;
				Display.DisplayCursorY = value;
			}
		}

		//private bool long_crosshair;						// If true, the long yellow cursors are displayed
		//public bool LongCrosshair
		//{
		//	get { return long_crosshair; }
		//	set { long_crosshair = value; }
		//}

		private ClickTuneMode current_click_tune_mode = ClickTuneMode.Off;
		public ClickTuneMode CurrentClickTuneMode
		{
			get { return current_click_tune_mode; }
			set
			{
				current_click_tune_mode = value;
				Display.CurrentClickTuneMode = value;
                switch (current_click_tune_mode)
                {
                    case ClickTuneMode.Off:
                        break;
                    default:
                        picDisplay.Cursor = Cursors.Cross;
                        break;
                }
			}
		}

		private DisplayEngine current_display_engine = DisplayEngine.GDI_PLUS;
		public DisplayEngine CurrentDisplayEngine
		{
			get { return current_display_engine; }
			set
			{
				/*switch(value)
				{
					case DisplayEngine.GDI_PLUS:
						current_display_engine = value;
						Display.DirectXRelease();
						break;
					case DisplayEngine.DIRECT_X:
						Display.DirectXInit();
						current_display_engine = value;
						Display.PrepareDisplayVars(Display.CurrentDisplayMode);
						Display.DrawBackground();
						break;
				}*/
				Display.CurrentDisplayEngine = value;
			}
		}

        private float waterfall_high_threshold_160m = -80.0F;
        public float WaterfallHighThreshold160m
        {
            get { return waterfall_high_threshold_160m; }
            set { waterfall_high_threshold_160m = value; }
        }

        private float waterfall_low_threshold_160m = -120.0F;
        public float WaterfallLowThreshold160m
        {
            get { return waterfall_low_threshold_160m; }
            set { waterfall_low_threshold_160m = value; }
        }

        private float waterfall_high_threshold_80m = -80.0F;
        public float WaterfallHighThreshold80m
        {
            get { return waterfall_high_threshold_80m; }
            set { waterfall_high_threshold_80m = value; }
        }

        private float waterfall_low_threshold_80m = -120.0F;
        public float WaterfallLowThreshold80m
        {
            get { return waterfall_low_threshold_80m; }
            set { waterfall_low_threshold_80m = value; }
        }

        private float waterfall_high_threshold_60m = -80.0F;
        public float WaterfallHighThreshold60m
        {
            get { return waterfall_high_threshold_60m; }
            set { waterfall_high_threshold_60m = value; }
        }

        private float waterfall_low_threshold_60m = -120.0F;
        public float WaterfallLowThreshold60m
        {
            get { return waterfall_low_threshold_60m; }
            set { waterfall_low_threshold_60m = value; }
        }

        private float waterfall_high_threshold_40m = -80.0F;
        public float WaterfallHighThreshold40m
        {
            get { return waterfall_high_threshold_40m; }
            set { waterfall_high_threshold_40m = value; }
        }

        private float waterfall_low_threshold_40m = -120.0F;
        public float WaterfallLowThreshold40m
        {
            get { return waterfall_low_threshold_40m; }
            set { waterfall_low_threshold_40m = value; }
        }

        private float waterfall_high_threshold_30m = -80.0F;
        public float WaterfallHighThreshold30m
        {
            get { return waterfall_high_threshold_30m; }
            set { waterfall_high_threshold_30m = value; }
        }

        private float waterfall_low_threshold_30m = -130.0F;
        public float WaterfallLowThreshold30m
        {
            get { return waterfall_low_threshold_30m; }
            set { waterfall_low_threshold_30m = value; }
        }

        private float waterfall_high_threshold_20m = -80.0F;
        public float WaterfallHighThreshold20m
        {
            get { return waterfall_high_threshold_20m; }
            set { waterfall_high_threshold_20m = value; }
        }

        private float waterfall_low_threshold_20m = -130.0F;
        public float WaterfallLowThreshold20m
        {
            get { return waterfall_low_threshold_20m; }
            set { waterfall_low_threshold_20m = value; }
        }

        private float waterfall_high_threshold_17m = -80.0F;
        public float WaterfallHighThreshold17m
        {
            get { return waterfall_high_threshold_17m; }
            set { waterfall_high_threshold_17m = value; }
        }

        private float waterfall_low_threshold_17m = -130.0F;
        public float WaterfallLowThreshold17m
        {
            get { return waterfall_low_threshold_17m; }
            set { waterfall_low_threshold_17m = value; }
        }

        private float waterfall_high_threshold_15m = -80.0F;
        public float WaterfallHighThreshold15m
        {
            get { return waterfall_high_threshold_15m; }
            set { waterfall_high_threshold_15m = value; }
        }

        private float waterfall_low_threshold_15m = -130.0F;
        public float WaterfallLowThreshold15m
        {
            get { return waterfall_low_threshold_15m; }
            set { waterfall_low_threshold_15m = value; }
        }

        private float waterfall_high_threshold_12m = -80.0F;
        public float WaterfallHighThreshold12m
        {
            get { return waterfall_high_threshold_12m; }
            set { waterfall_high_threshold_12m = value; }
        }

        private float waterfall_low_threshold_12m = -140.0F;
        public float WaterfallLowThreshold12m
        {
            get { return waterfall_low_threshold_12m; }
            set { waterfall_low_threshold_12m = value; }
        }

        private float waterfall_high_threshold_10m = -80.0F;
        public float WaterfallHighThreshold10m
        {
            get { return waterfall_high_threshold_10m; }
            set { waterfall_high_threshold_10m = value; }
        }

        private float waterfall_low_threshold_10m = -140.0F;
        public float WaterfallLowThreshold10m
        {
            get { return waterfall_low_threshold_10m; }
            set { waterfall_low_threshold_10m = value; }
        }

        private float waterfall_high_threshold_6m = -80.0F;
        public float WaterfallHighThreshold6m
        {
            get { return waterfall_high_threshold_6m; }
            set { waterfall_high_threshold_6m = value; }
        }

        private float waterfall_low_threshold_6m = -140.0F;
        public float WaterfallLowThreshold6m
        {
            get { return waterfall_low_threshold_6m; }
            set { waterfall_low_threshold_6m = value; }
        }

        private float waterfall_high_threshold_wwv = -80.0F;
        public float WaterfallHighThresholdWWV
        {
            get { return waterfall_high_threshold_wwv; }
            set { waterfall_high_threshold_wwv = value; }
        }

        private float waterfall_low_threshold_wwv = -130.0F;
        public float WaterfallLowThresholdWWV
        {
            get { return waterfall_low_threshold_wwv; }
            set { waterfall_low_threshold_wwv = value; }
        }

        private float waterfall_high_threshold_gen = -80.0F;
        public float WaterfallHighThresholdGEN
        {
            get { return waterfall_high_threshold_gen; }
            set { waterfall_high_threshold_gen = value; }
        }

        private float waterfall_low_threshold_gen = -130.0F;
        public float WaterfallLowThresholdGEN
        {
            get { return waterfall_low_threshold_gen; }
            set { waterfall_low_threshold_gen = value; }
        }

        private float waterfall_high_threshold_xvtr = -80.0F;
        public float WaterfallHighThresholdXVTR
        {
            get { return waterfall_high_threshold_xvtr; }
            set { waterfall_high_threshold_xvtr = value; }
        }

        private float waterfall_low_threshold_xvtr = -140.0F;
        public float WaterfallLowThresholdXVTR
        {
            get { return waterfall_low_threshold_xvtr; }
            set { waterfall_low_threshold_xvtr = value; }
        }
//==========================================================================================
      

        private float waterfall_lowRX2_threshold_160m = -120.0F;
        public float WaterfallLowRX2Threshold160m
        {
            get { return waterfall_lowRX2_threshold_160m; }
            set { waterfall_lowRX2_threshold_160m = value; }
        }

        private float waterfall_lowRX2_threshold_80m = -120.0F;
        public float WaterfallLowRX2Threshold80m
        {
            get { return waterfall_lowRX2_threshold_80m; }
            set { waterfall_lowRX2_threshold_80m = value; }
        }

        private float waterfall_lowRX2_threshold_60m = -120.0F;
        public float WaterfallLowRX2Threshold60m
        {
            get { return waterfall_lowRX2_threshold_60m; }
            set { waterfall_lowRX2_threshold_60m = value; }
        }

        private float waterfall_lowRX2_threshold_40m = -120.0F;
        public float WaterfallLowRX2Threshold40m
        {
            get { return waterfall_lowRX2_threshold_40m; }
            set { waterfall_lowRX2_threshold_40m = value; }
        }

        private float waterfall_lowRX2_threshold_30m = -130.0F;
        public float WaterfallLowRX2Threshold30m
        {
            get { return waterfall_lowRX2_threshold_30m; }
            set { waterfall_lowRX2_threshold_30m = value; }
        }

        private float waterfall_lowRX2_threshold_20m = -130.0F;
        public float WaterfallLowRX2Threshold20m
        {
            get { return waterfall_lowRX2_threshold_20m; }
            set { waterfall_lowRX2_threshold_20m = value; }
        }

        private float waterfall_lowRX2_threshold_17m = -130.0F;
        public float WaterfallLowRX2Threshold17m
        {
            get { return waterfall_lowRX2_threshold_17m; }
            set { waterfall_lowRX2_threshold_17m = value; }
        }

        private float waterfall_lowRX2_threshold_15m = -130.0F;
        public float WaterfallLowRX2Threshold15m
        {
            get { return waterfall_lowRX2_threshold_15m; }
            set { waterfall_lowRX2_threshold_15m = value; }
        }

        private float waterfall_lowRX2_threshold_12m = -140.0F;
        public float WaterfallLowRX2Threshold12m
        {
            get { return waterfall_lowRX2_threshold_12m; }
            set { waterfall_lowRX2_threshold_12m = value; }
        }

        private float waterfall_lowRX2_threshold_10m = -140.0F;
        public float WaterfallLowRX2Threshold10m
        {
            get { return waterfall_lowRX2_threshold_10m; }
            set { waterfall_lowRX2_threshold_10m = value; }
        }

        private float waterfall_lowRX2_threshold_6m = -140.0F;
        public float WaterfallLowRX2Threshold6m
        {
            get { return waterfall_lowRX2_threshold_6m; }
            set { waterfall_lowRX2_threshold_6m = value; }
        }

        private float waterfall_lowRX2_threshold_wwv = -130.0F;
        public float WaterfallLowRX2ThresholdWWV
        {
            get { return waterfall_lowRX2_threshold_wwv; }
            set { waterfall_lowRX2_threshold_wwv = value; }
        }

        private float waterfall_lowRX2_threshold_gen = -130.0F;
        public float WaterfallLowRX2ThresholdGEN
        {
            get { return waterfall_lowRX2_threshold_gen; }
            set { waterfall_lowRX2_threshold_gen = value; }
        }

        private float waterfall_lowRX2_threshold_xvtr = -140.0F;
        public float WaterfallLowRX2ThresholdXVTR
        {
            get { return waterfall_lowRX2_threshold_xvtr; }
            set { waterfall_lowRX2_threshold_xvtr = value; }
        }



        //=======================================================================================
        //=======================================================================================
        // ke9ns add: TX Low waterfall level setting communicate with display.cs
        //=======================================================================================
        //=======================================================================================
        private float waterfall_low_threshold_Mic = -100.0F; // ke9ns ADD
        public float WaterfallLowThresholdMic
        {
            get { return waterfall_low_threshold_Mic; }
            set { waterfall_low_threshold_Mic = value; }
        }
        //=====================================================

        private int waterfall_update_period = 50;
        public int WaterfallUpdatePeriod
        {
            get { return waterfall_update_period; }
            set { waterfall_update_period = value; }
        }

        private string lsb_txprofile = "Default";
        public string LSB_TXProfile
        {
            get { return lsb_txprofile; }
            set { lsb_txprofile = value; }
        }

        private string usb_txprofile = "Default";
        public string USB_TXProfile
        {
            get { return usb_txprofile; }
            set { usb_txprofile = value; }
        }

        private string dsb_txprofile = "Default";
        public string DSB_TXProfile
        {
            get { return dsb_txprofile; }
            set { dsb_txprofile = value; }
        }

        private string cwl_txprofile = "Default";
        public string CWL_TXProfile
        {
            get { return cwl_txprofile; }
            set { cwl_txprofile = value; }
        }

        private string cwu_txprofile = "Default";
        public string CWU_TXProfile
        {
            get { return cwu_txprofile; }
            set { cwu_txprofile = value; }
        }
        private string fm_txprofile = "Default";
        public string FM_TXProfile
        {
            get { return fm_txprofile; }
            set { fm_txprofile = value; }
        }

        private string am_txprofile = "Default";
        public string AM_TXProfile
        {
            get { return am_txprofile; }
            set { am_txprofile = value; }
        }

        private string sam_txprofile = "Default";
        public string SAM_TXProfile
        {
            get { return sam_txprofile; }
            set { sam_txprofile = value; }
        }

        private string spec_txprofile = "Default";
        public string SPEC_TXProfile
        {
            get { return spec_txprofile; }
            set { spec_txprofile = value; }
        }

        private string digl_txprofile = "Default";
        public string DIGL_TXProfile
        {
            get { return digl_txprofile; }
            set { digl_txprofile = value; }
        }

        private string digu_txprofile = "Default";
        public string DIGU_TXProfile
        {
            get { return digu_txprofile; }
            set { digu_txprofile = value; }
        }

        private string drm_txprofile = "Default";
        public string DRM_TXProfile
        {
            get { return drm_txprofile; }
            set { drm_txprofile = value; }
        }
        private bool tx_profile_by_mode = false;
        public bool TXProfileByMode
        {
            get { return tx_profile_by_mode; }
            set { tx_profile_by_mode = value; }
        }

		private int digu_click_tune_offset = 1500;
		public int DIGUClickTuneOffset
		{
			get { return digu_click_tune_offset; }
			set 
            {
                digu_click_tune_offset = value;
                Filter filter1 = RX1Filter;     // save RX1 filter
                Filter filter2 = RX2Filter;     // save RX2 filter
                //reset preset filter's center frequency - W4TME
                
                for (Filter f = Filter.F1; f < Filter.LAST; f++)
                {
                    int low = rx1_filters[(int)DSPMode.DIGU].GetLow(f);
                    int high = rx1_filters[(int)DSPMode.DIGU].GetHigh(f);
                    string name = rx1_filters[(int)DSPMode.DIGU].GetName(f);

                    int bw = high - low;
                    low = digu_click_tune_offset - bw / 2;
                    high = digu_click_tune_offset + bw / 2;
                    rx1_filters[(int)DSPMode.DIGU].SetFilter(f, low, high, name);
                    rx2_filters[(int)DSPMode.DIGU].SetFilter(f, low, high, name);
                }
                RX1Filter = filter1;            // restore RX1 filter
                RX2Filter = filter2;            // restore RX2 filter
            }
		}

		private int digl_click_tune_offset = 2210;
		public int DIGLClickTuneOffset
		{
			get { return digl_click_tune_offset; }
			set 
            { 
                digl_click_tune_offset = value;
                Filter filter1 = RX1Filter;     // save RX1 filter
                Filter filter2 = RX2Filter;     // save RX2 filter
                //reset preset filter's center frequency - W4TME
                
                for (Filter f = Filter.F1; f < Filter.LAST; f++)
                {
                    int low = rx1_filters[(int)DSPMode.DIGL].GetLow(f);
                    int high = rx1_filters[(int)DSPMode.DIGL].GetHigh(f);
                    string name = rx1_filters[(int)DSPMode.DIGL].GetName(f);

                    int bw = high - low;
                    low = -digl_click_tune_offset - bw / 2;
                    high = -digl_click_tune_offset + bw / 2;
                    rx1_filters[(int)DSPMode.DIGL].SetFilter(f, low, high, name);
                    rx2_filters[(int)DSPMode.DIGL].SetFilter(f, low, high, name);
                }
                RX1Filter = filter1;        // restore RX1 filter
                RX2Filter = filter2;        // restore RX2 filter
            }
		}

		private double vox_hang_time = 250.0;
		public double VOXHangTime
		{
			get { return vox_hang_time; }
			set	{ vox_hang_time = value; }
		}

		private bool vox_active = false;
		public bool VOXActive
		{
			get { return vox_active; }
			set { vox_active = value; }
		}

        private bool save_txprofile_on_exit = true;
        public bool SaveTXProfileOnExit
        {
            get { return save_txprofile_on_exit; }
            set { save_txprofile_on_exit = value; }
        }

		private SoundCard current_soundcard = SoundCard.UNSUPPORTED_CARD;
		public SoundCard CurrentSoundCard
		{
			get { return current_soundcard; }
			set 
			{
				current_soundcard = value;
				Audio.CurSoundCard = value;
				if(setupForm != null && setupForm.CurrentSoundCard != current_soundcard)
					setupForm.CurrentSoundCard = current_soundcard;
			}
		}

		private Model current_model = Model.FLEX5000;
        public Model CurrentModel
        {
            get { return current_model; }
            set
            {
                Model saved_model = current_model;
                if (value == Model.SDR1000 && hw == null)
                {
                    hw = new HW(0x378);
                    hw.USBPresent = usb_present;
                }
                current_model = value;
                Display.CurrentModel = value;
                chkFullDuplex.Visible = false;
                switch (current_model)
                {
                    case Model.FLEX5000:
                        MinFreq = Math.Max(if_freq, 0.000001);
                        MaxFreq = 65.0;
                        if (!fwc_init)
                        {
                            //fwc_init = FWCMidi.Open();
                            fwc_init = Pal.Init();
                            if (fwc_init)
                            {
                                FWCEEPROM.Init();
                                FWC.SetPalCallback();
                            }
                        }
                        if (fwc_init)
                        {
                            /*string preamp = comboPreamp.Text;
                            comboPreamp.Items.Clear();
                            comboPreamp.Items.Add("Off");
                            comboPreamp.Items.Add("On");
                            if(preamp == "Off") comboPreamp.Text = "Off";
                            else comboPreamp.Text = "On";*/

                            comboPreamp.Visible = false;
                            //lblPreamp.Visible = false;
                            chkRX1Preamp.Visible = true;
                            chkRX1Preamp_CheckedChanged(this, EventArgs.Empty);

                            if (!comboMeterTXMode.Items.Contains("Ref Pwr"))  comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                            if (!comboMeterTXMode.Items.Contains("SWR"))  comboMeterTXMode.Items.Insert(2, "SWR");
                            if (comboMeterTXMode.SelectedIndex < 0)   comboMeterTXMode.SelectedIndex = 0;

                            //ke9ns add below
                            if (!comboMeterTX1Mode.Items.Contains("Ref Pwr")) comboMeterTX1Mode.Items.Insert(1, "Ref Pwr"); // 
                            if (!comboMeterTX1Mode.Items.Contains("SWR")) comboMeterTX1Mode.Items.Insert(2, "SWR"); // 
                            if (comboMeterTX1Mode.SelectedIndex < 0) comboMeterTX1Mode.SelectedIndex = 0; //

                            chkBCI.Visible = false;
                            chkBCI.Checked = false;

                            //mnuFWC.Visible = true;
                            mixerToolStripMenuItem.Visible = true;
                            antennaToolStripMenuItem.Visible = true;
                            herosToolStripMenuItem.Visible = true;
                            //mnuRelays.Visible = true;
                            //mnuInfo.Visible = true;

                            FWC.WriteCodecReg(0x1B, 0x02);
                            byte reg_7;
                            FWC.ReadCodecReg(0x07, out reg_7);
                            FWC.WriteCodecReg(0x07, (byte)(reg_7 & 0xFC));
                            if (fwcMixForm == null) fwcMixForm = new FWCMixForm(this);
                            if (fwcAntForm == null) fwcAntForm = new FWCAntForm(this);

                            chkFWCATUBypass.Visible = true;

                            if (FWCEEPROM.ATUOK)
                            {
                                aTUToolStripMenuItem.Visible = true;
                                if (fwcAtuForm == null) fwcAtuForm = new FWCATUForm(this);

                                if ((chkTUN.Text != "TUN")) chkFWCATU.Enabled = false;  // ke9ns add
                                else chkFWCATU.Enabled = true;   // ke9ns mod

                                //  chkFWCATU.Enabled = true; // original code

                                chkFWCATU.Text = "ATU";
                                chkFWCATUBypass.Enabled = true;
                                chkFWCATUBypass.Text = "BYP";
                            }
                            else
                            {
                                chkX2TR.Text = "";
                                chkX2TR.Enabled = false;
                            }
                            if (flex5000DebugForm == null) flex5000DebugForm = new FLEX5000DebugForm(this);

                            if (FWCEEPROM.RX2OK)  // RX2 option
                            {
                                eSCToolStripMenuItem.Enabled = true;
                                if (dax_audio_enum)chkVAC2.Enabled = true;
                            }

                          //  chkVAC2.Enabled = true; // ke9ns 


                         //   chkFullDuplex.Visible = true; // ke9ns this is normally false
                            panelAntenna.Visible = true; // this is for model 5000
                        }
                        else
                        {
                            chkPower.Enabled = false;
                        }
                        
                        DttSP.SetSwchFlag(0, true);
                        DttSP.SetSwchRiseThresh(0, 3e-4f);

                        break;

                    case Model.FLEX3000:
                        MinFreq = Math.Max(if_freq, 0.000001);
                        MaxFreq = 65.0;
                        FWCDDSClockCorrection = fwc_dds_clock_correction;
                        if (!fwc_init)
                        {
                            //fwc_init = FWCMidi.Open();
                            fwc_init = Pal.Init();
                            if (fwc_init)
                            {
                                FWCEEPROM.Init();
                                FWC.SetPalCallback();
                            }
                        }
                        if (fwc_init)
                        {
                            comboPreamp.Visible = true;
                            chkRX1Preamp.Visible = false;
                            //lblPreamp.Text = "RX Gain";
                            string preamp = comboPreamp.Text;
                            comboPreamp.Items.Clear();
                            comboPreamp.Items.Add("Attn");
                            comboPreamp.Items.Add("Off");
                            comboPreamp.Items.Add("Pre1");
                            comboPreamp.Items.Add("Pre2");
                            comboPreamp.Text = preamp;
                            if (comboPreamp.SelectedIndex < 0)
                                comboPreamp.SelectedIndex = 1;
                            //comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
                            Application.DoEvents();

                            if (!comboMeterTXMode.Items.Contains("Ref Pwr"))  comboMeterTXMode.Items.Insert(1, "Ref Pwr");
                            if (!comboMeterTXMode.Items.Contains("SWR"))  comboMeterTXMode.Items.Insert(2, "SWR");
                            if (comboMeterTXMode.SelectedIndex < 0)  comboMeterTXMode.SelectedIndex = 0;

                            //ke9ns add below
                            if (!comboMeterTX1Mode.Items.Contains("Ref Pwr")) comboMeterTX1Mode.Items.Insert(1, "Ref Pwr");
                            if (!comboMeterTX1Mode.Items.Contains("SWR")) comboMeterTX1Mode.Items.Insert(2, "SWR");
                            if (comboMeterTX1Mode.SelectedIndex < 0) comboMeterTX1Mode.SelectedIndex = 0;


                            chkBCI.Visible = false;
                            chkBCI.Checked = false;

                            //mnuFWC.Visible = true;
                            mixerToolStripMenuItem.Visible = true;
                            antennaToolStripMenuItem.Visible = false;
                            herosToolStripMenuItem.Visible = true;
                            //mnuRelays.Visible = true;
                            //mnuInfo.Visible = true;

                            //FWC.WriteCodecReg(0x1B, 0x02);
                            //if(fwcMixForm == null) fwcMixForm = new FWCMixForm(this);
                            if (flex3000MixerForm == null) flex3000MixerForm = new FLEX3000MixerForm(this);
                            //if(fwcAntForm == null) fwcAntForm = new FWCAntForm(this);
                            chkFWCATUBypass.Visible = true;

                            try
                            {
                                ATUDLLTest.test();
                                oldATU = false;
                                aTUToolStripMenuItem.Visible = true;

#if (NO_NEW_ATU)
                                //force old atu because exception won't be caught
                                oldATU = true;
                                aTUToolStripMenuItem.Visible = false;
#endif

                            }
                            catch (Exception)
                            {
                                oldATU = true;
                                aTUToolStripMenuItem.Visible = false;
                            }


                            if (flex3000ATUForm == null) flex3000ATUForm = new FLEX3000ATUForm(this);

                           
                              if ((chkTUN.Text != "TUN")) chkFWCATU.Enabled = false;  // ke9ns add
                              else chkFWCATU.Enabled = true;   // ke9ns mod
                           
                            //  chkFWCATU.Enabled = true; // original code

                            chkFWCATU.Text = "ATU";
                            chkFWCATUBypass.Enabled = true;
                            chkFWCATUBypass.Text = "BYP";		

                            chkX2TR.Text = "";
                            chkX2TR.Enabled = false;

                            if (flex5000DebugForm == null) flex5000DebugForm = new FLEX5000DebugForm(this);

                            //chkFullDuplex.Visible = true;
                            panelAntenna.Visible = false; // this is for model 3000

                          //   chkVAC2.Enabled = true; // ke9ns add chkVAC2


                            /*if(fwcTestForm == null || fwcTestForm.IsDisposed)
                                fwcTestForm = new FWCTestForm(this);
                            fwcTestForm.Show();*/
                        }
                        else
                        {
                            chkPower.Enabled = false;
                        }

                        DttSP.SetSwchFlag(0, true);
                        DttSP.SetSwchRiseThresh(0, 3e-4f);
                        break;
                    case Model.FLEX1500:
                        MinFreq = Math.Max(if_freq, 0.000001);
                        MaxFreq = 54.0;

                        if (!hid_init)
                        {
                            hid_init = Flex1500.Init();
                            if (hid_init)
                                HIDEEPROM.Init();
                        }
                        if (hid_init)
                        {
                            chkVOX.Visible = false;
                            ptbVOX.Visible = false;
                            picVOX.Visible = false;
                            lblVOXVal.Visible = false;
                            lblPreamp.Text = "Preamp";
                            comboPreamp.Items.Clear();
                            comboPreamp.Items.Add("-10");
                            comboPreamp.Items.Add("  0");
                            comboPreamp.Items.Add("+10");
                            comboPreamp.Items.Add("+20");
                            comboPreamp.Items.Add("+30");
                            comboPreamp.Visible = true;
                            chkRX1Preamp.Visible = false;
                            comboPreamp.Text = "  0";
                            comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);

                            if (comboMeterTXMode.Items.Contains("Ref Pwr"))
                                comboMeterTXMode.Items.Remove("Ref Pwr");
                            if (comboMeterTXMode.Items.Contains("SWR"))
                                comboMeterTXMode.Items.Remove("SWR");

                            if (comboMeterTXMode.SelectedIndex < 0 ||
                                comboMeterTXMode.SelectedIndex > comboMeterTXMode.Items.Count - 1)
                                comboMeterTXMode.SelectedIndex = 0;

                            // ke9ns add below for 2nd meter
                            if (comboMeterTX1Mode.Items.Contains("Ref Pwr"))
                                comboMeterTX1Mode.Items.Remove("Ref Pwr");
                            if (comboMeterTX1Mode.Items.Contains("SWR"))
                                comboMeterTX1Mode.Items.Remove("SWR");

                            if (comboMeterTX1Mode.SelectedIndex < 0 ||
                                comboMeterTX1Mode.SelectedIndex > comboMeterTX1Mode.Items.Count - 1)
                                comboMeterTX1Mode.SelectedIndex = 0;


                            chkBCI.Visible = false;
                            chkBCI.Checked = false;

                            dsp.GetDSPRX(0, 0).DCBlock = true;
                            dsp.GetDSPRX(0, 1).DCBlock = true;

                            mixerToolStripMenuItem.Visible = true;
                            if (flex1500MixerForm == null) flex1500MixerForm = new FLEX1500MixerForm(this);

                            chkX2TR.Text = "";
                            chkX2TR.Enabled = false;

                            if (hidAntForm == null) hidAntForm = new HIDAntForm(this);
                            antennaToolStripMenuItem.Visible = true;
                            herosToolStripMenuItem.Visible = true;
                            panelAntenna.Visible = true;  // this is for model 1500
                            chkFWCATUBypass.Enabled = false;

                            //DttSP.SetCorrectIQEnable(0); // disable IQ correction -- for now

                            //USBHID.WriteI2C2Value(0x30, 0x0C, 0x50); // turn HPF on
                        }
                        else
                        {
                            chkPower.Enabled = false;
                        }
                        break;
                 /*   case Model.SDR1000:
                        MinFreq = Math.Max(if_freq, 0.000001);
                        if (XVTRPresent)
                            MaxFreq = 146.0;
                        else MaxFreq = 65.0;
                        comboPreamp.Items.Clear();
                        comboPreamp.Items.Add("Off");
                        comboPreamp.Items.Add("Low");
                        comboPreamp.Items.Add("Med");
                        comboPreamp.Items.Add("High");
                        comboPreamp.Visible = true;
                        //lblPreamp.Visible = true;
                        chkRX1Preamp.Visible = false;
                        comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);

                        chkBCI.Visible = true;
                        //mnuFWC.Visible = false;
                        mixerToolStripMenuItem.Visible = false;
                        antennaToolStripMenuItem.Visible = false;
                        relaysToolStripMenuItem.Visible = false;
                        aTUToolStripMenuItem.Visible = false;
                        panelAntenna.Visible = false;
                        chkFWCATU.Visible = false;
                        chkFWCATUBypass.Visible = false;
                        break;
                    case Model.SOFTROCK40:
                        MinFreq = soft_rock_center_freq - sample_rate1 / 2 * 1e-6;
                        MaxFreq = soft_rock_center_freq + sample_rate1 / 2 * 1e-6;
                        //mnuFWC.Visible = false;
                        mixerToolStripMenuItem.Visible = false;
                        antennaToolStripMenuItem.Visible = false;
                        aTUToolStripMenuItem.Visible = false;
                        panelAntenna.Visible = false;
                        chkFWCATU.Visible = false;
                        chkFWCATUBypass.Visible = false;
                        break;
                 */   case Model.DEMO:
                        MinFreq = Math.Max(if_freq, 0.000001);
                        if (XVTRPresent)
                            MaxFreq = 146.0;
                        else MaxFreq = 65.0;
                        //mnuFWC.Visible = false;
                        mixerToolStripMenuItem.Visible = false;
                        antennaToolStripMenuItem.Visible = false;
                        aTUToolStripMenuItem.Visible = false;
                        panelAntenna.Visible = false;
                        chkFWCATU.Visible = false;
                        chkFWCATUBypass.Visible = false;
                        break;
                }
                if (setupForm != null && saved_model != current_model)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

		private DateTimeMode current_datetime_mode = DateTimeMode.LOCAL;
		public DateTimeMode CurrentDateTimeMode
		{
			get { return current_datetime_mode; }
			set
			{
				current_datetime_mode = value;
				if(current_datetime_mode == DateTimeMode.OFF)
				{
                    panelDateTime.Text = "Date/Time - Off";
					timer_clock.Enabled = false;
					txtDate.Text = "";
					txtTime.Text = "";
				}
				else
				{
                    if (panelDateTime.Text != "Date/Time")  panelDateTime.Text = "Date/Time";
					if(!timer_clock.Enabled)	timer_clock.Enabled = true;
				}
			}
		}

		private double soft_rock_center_freq = 7.056;
		public double SoftRockCenterFreq
		{
			get { return soft_rock_center_freq; }
			set
			{
				soft_rock_center_freq = value;
			/*	if(current_model == Model.SOFTROCK40)
				{
					MinFreq = soft_rock_center_freq - sample_rate1/2*1e-6;
					MaxFreq = soft_rock_center_freq + sample_rate1/2*1e-6;
					if(setupForm != null)
						txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				} */
			}
		}

		private double saved_vfoa_freq = 7.0;
		/*		public float SavedVFOAFreq
				{
					get { return saved_vfoa_freq; }
					set { saved_vfoa_freq = value; }
				}
		*/

		private double saved_vfoa_sub_freq = 7.0;

        private double saved_vfob_freq = 7.0;
		/*		public float SavedVFOBFreq
				{
					get { return saved_vfob_freq; }
					set { saved_vfob_freq = value; }
				}
		*/
		private bool ext_ctrl_enabled = false;
		public bool ExtCtrlEnabled
		{
			get { return ext_ctrl_enabled; }
			set { ext_ctrl_enabled = value; }
		}

		private bool cw_semi_break_in_enabled = true;
		public bool CWSemiBreakInEnabled
		{
			get { return cw_semi_break_in_enabled; }
			set { cw_semi_break_in_enabled = value; }
		}

		private bool cw_sidetone = true;
		public bool CWSidetone
		{
			get { return cw_sidetone; }
			set
			{
                cw_sidetone = value;
				if(chkCWSidetone != null) chkCWSidetone.Checked = value;
                
                DSPMode tx_mode = rx1_dsp_mode;
                if (chkVFOBTX.Checked && chkRX2.Checked) tx_mode = rx2_dsp_mode;

                if (tx_mode == DSPMode.CWL || tx_mode == DSPMode.CWU)   chkMON.Checked = value;
			}
		}

		public float RX1FilterSizeCalOffset
		{
			get { return rx1_filter_size_cal_offset; }
			set { rx1_filter_size_cal_offset = value; }
		}

		public float RX2FilterSizeCalOffset
		{
			get { return rx2_filter_size_cal_offset; }
			set { rx2_filter_size_cal_offset = value; }
		}

		private PTTMode current_ptt_mode = PTTMode.NONE;
		public PTTMode CurrentPTTMode
		{
			get { return current_ptt_mode; }
			set { current_ptt_mode = value; }
		}

#region X2 Properties

		private byte x2_160_rx = 0;
		public byte X2160RX
		{
			get { return x2_160_rx; }
			set
			{
				x2_160_rx = value;
				if(tx_band == Band.B160M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}
		
		private byte x2_160_tx = 0;
		public byte X2160TX
		{
			get { return x2_160_tx; }
			set 
			{
				x2_160_tx = value;
				if(tx_band == Band.B160M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_80_rx = 0;
		public byte X280RX
		{
			get { return x2_80_rx; }
			set
			{
				x2_80_rx = value;
				if(tx_band == Band.B80M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_80_tx = 0;
		public byte X280TX
		{
			get { return x2_80_tx; }
			set 
			{
				x2_80_tx = value;
				if(tx_band == Band.B80M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_60_rx = 0;
		public byte X260RX
		{
			get { return x2_60_rx; }
			set
			{
				x2_60_rx = value;
				if(tx_band == Band.B60M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_60_tx = 0;
		public byte X260TX
		{
			get { return x2_60_tx; }
			set 
			{
				x2_60_tx = value;
				if(tx_band == Band.B60M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_40_rx = 0;
		public byte X240RX
		{
			get { return x2_40_rx; }
			set
			{
				x2_40_rx = value;
				if(tx_band == Band.B40M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_40_tx = 0;
		public byte X240TX
		{
			get { return x2_40_tx; }
			set 
			{
				x2_40_tx = value;
				if(tx_band == Band.B40M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_30_rx = 0;
		public byte X230RX
		{
			get { return x2_30_rx; }
			set
			{
				x2_30_rx = value;
				if(tx_band == Band.B30M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_30_tx = 0;
		public byte X230TX
		{
			get { return x2_30_tx; }
			set 
			{
				x2_30_tx = value;
				if(tx_band == Band.B30M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_20_rx = 0;
		public byte X220RX
		{
			get { return x2_20_rx; }
			set
			{
				x2_20_rx = value;
				if(tx_band == Band.B20M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_20_tx = 0;
		public byte X220TX
		{
			get { return x2_20_tx; }
			set 
			{
				x2_20_tx = value;
				if(tx_band == Band.B20M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_17_rx = 0;
		public byte X217RX
		{
			get { return x2_17_rx; }
			set
			{
				x2_17_rx = value;
				if(tx_band == Band.B17M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_17_tx = 0;
		public byte X217TX
		{
			get { return x2_17_tx; }
			set 
			{
				x2_17_tx = value;
				if(tx_band == Band.B17M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_15_rx = 0;
		public byte X215RX
		{
			get { return x2_15_rx; }
			set
			{
				x2_15_rx = value;
				if(tx_band == Band.B15M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_15_tx = 0;
		public byte X215TX
		{
			get { return x2_15_tx; }
			set 
			{
				x2_15_tx = value;
				if(tx_band == Band.B15M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_12_rx = 0;
		public byte X212RX
		{
			get { return x2_12_rx; }
			set
			{
				x2_12_rx = value;
				if(tx_band == Band.B12M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_12_tx = 0;
		public byte X212TX
		{
			get { return x2_12_tx; }
			set 
			{
				x2_12_tx = value;
				if(tx_band == Band.B12M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_10_rx = 0;
		public byte X210RX
		{
			get { return x2_10_rx; }
			set
			{
				x2_10_rx = value;
				if(tx_band == Band.B10M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_10_tx = 0;
		public byte X210TX
		{
			get { return x2_10_tx; }
			set 
			{
				x2_10_tx = value;
				if(tx_band == Band.B10M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_6_rx = 0;
		public byte X26RX
		{
			get { return x2_6_rx; }
			set
			{
				x2_6_rx = value;
				if(tx_band == Band.B6M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_6_tx = 0;
		public byte X26TX
		{
			get { return x2_6_tx; }
			set 
			{
				x2_6_tx = value;
				if(tx_band == Band.B6M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_2_rx = 0;
		public byte X22RX
		{
			get { return x2_2_rx; }
			set
			{
				x2_2_rx = value;
				if(tx_band == Band.B2M && !mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private byte x2_2_tx = 0;
		public byte X22TX
		{
			get { return x2_2_tx; }
			set 
			{
				x2_2_tx = value;
				if(tx_band == Band.B2M && mox)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

#endregion

		private bool vfo_lock = false; 
		public bool VFOLock 
		{
			get { return vfo_lock; } 
			set 
			{
				vfo_lock = value;
				bool enabled = !value;
				txtVFOAFreq.Enabled = enabled; 
				radBand160.Enabled = enabled; 
				radBand80.Enabled = enabled; 
				radBand60.Enabled = enabled; 
				radBand40.Enabled = enabled; 
				radBand30.Enabled = enabled; 
				radBand20.Enabled = enabled; 
				radBand17.Enabled = enabled; 
				radBand15.Enabled = enabled; 
				radBand12.Enabled = enabled; 
				radBand10.Enabled = enabled;
				radBand6.Enabled = enabled; 
				radBand2.Enabled = enabled; 
				radBandWWV.Enabled = enabled; 
				radBandGEN.Enabled = enabled; 

				btnBandVHF.Enabled = enabled;
				radBandVHF0.Enabled = enabled;
				radBandVHF1.Enabled = enabled;
				radBandVHF2.Enabled = enabled;
				radBandVHF3.Enabled = enabled;
				radBandVHF4.Enabled = enabled;
                radBandVHF5.Enabled = enabled;
                radBandVHF6.Enabled = enabled;
                radBandVHF7.Enabled = enabled;
                radBandVHF8.Enabled = enabled;
                radBandVHF5.Enabled = enabled;
                radBandVHF9.Enabled = enabled;
                radBandVHF10.Enabled = enabled;
                radBandVHF11.Enabled = enabled;
                radBandVHF12.Enabled = enabled;
                radBandVHF13.Enabled = enabled;

                btnBandHF1.Enabled = enabled; // ke9ns add
                radBandGN0.Enabled = enabled;
                radBandGN1.Enabled = enabled;
                radBandGN2.Enabled = enabled;
                radBandGN3.Enabled = enabled;
                radBandGN4.Enabled = enabled;
                radBandGN5.Enabled = enabled;
                radBandGN6.Enabled = enabled;
                radBandGN7.Enabled = enabled;
                radBandGN8.Enabled = enabled;
                radBandGN5.Enabled = enabled;
                radBandGN9.Enabled = enabled;
                radBandGN10.Enabled = enabled;
                radBandGN11.Enabled = enabled;
                radBandGN12.Enabled = enabled;
                radBandGN13.Enabled = enabled;


                radModeLSB.Enabled = enabled;
				radModeUSB.Enabled = enabled;
				radModeDSB.Enabled = enabled;
				radModeCWL.Enabled = enabled;
				radModeCWU.Enabled = enabled;
				radModeFMN.Enabled = enabled;
				radModeAM.Enabled = enabled;
				radModeSAM.Enabled = enabled;
				radModeSPEC.Enabled = enabled;
				radModeDIGL.Enabled = enabled;
				radModeDIGU.Enabled = enabled;
				radModeDRM.Enabled = enabled;

				btnVFOBtoA.Enabled = enabled; 
				btnVFOSwap.Enabled = enabled; 

				btnMemoryQuickRestore.Enabled = enabled; 
			}
		} // VFOlock



        //==================================================================================================
        // ke9ns    playback audio file on vf0a only
		private double wave_freq = 0.0;
		private bool wave_playback = false;
		public bool WavePlayback
		{
			get { return wave_playback; }
			set
			{
				wave_playback = value;
				if(wave_playback)
				{
					wave_freq = (VFOAFreq * 1e6) % sample_rate1; // 25000 hz = (3.865 * 1mhz) % 192000hz  (modulus is remainder only)
                  //  Debug.WriteLine("wave_freq " + wave_freq);  // ke9ns test
                  //  Debug.WriteLine("VFO_freq " + VFOAFreq);  // ke9ns test
                  //  Debug.WriteLine("SR " + sample_rate1);  // ke9ns test

                }
                else
				{
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				}
			}
        } // WavePlayback




        private bool saved_rx_only = false;
		private bool rx_only = false;
		public bool RXOnly
		{
			get { return rx_only; }
			set
			{
				rx_only = value;
				if(rx1_dsp_mode != DSPMode.SPEC &&
					rx1_dsp_mode != DSPMode.DRM &&
					chkPower.Checked)
					chkMOX.Enabled = !rx_only;
				chkTUN.Enabled = !rx_only;
				chkVOX.Enabled = !rx_only;
				if(rx_only && chkMOX.Checked)
					chkMOX.Checked = false;

                if (setupForm != null)
                {
                    if (setupForm.RXOnly != rx_only)
                        setupForm.RXOnly = rx_only;
                }
			}
		}

		private XVTRTRMode current_xvtr_tr_mode = XVTRTRMode.NEGATIVE;
		public XVTRTRMode CurrentXVTRTRMode
		{
			get { return current_xvtr_tr_mode; }
			set	
			{
                if (current_model != Model.SDR1000) return;
				current_xvtr_tr_mode = value;
				switch(current_xvtr_tr_mode)
				{
					case XVTRTRMode.NEGATIVE:
						Hdw.XVTR_TR = true;			// Set to receive
						break;
					case XVTRTRMode.POSITIVE:
						Hdw.XVTR_TR = false;			// Set to receive
						break;
					case XVTRTRMode.NONE:
						Hdw.XVTR_TR = false;
						break;
				}
			}
		}

		private double dds_step_size = 200.0 / 0xFFFFFFFFFFFF;
		private double corrected_dds_clock = 200.0;
		private double dds_clock_correction = 0.0;
		public double DDSClockCorrection
		{
			get	{ return dds_clock_correction; }
            set
            {
                dds_clock_correction = value;
                corrected_dds_clock = 200.0 + dds_clock_correction;
                dds_step_size = corrected_dds_clock / 0xFFFFFFFFFFFF;
                DDSFreq = dds_freq;
            }
		}

		private double fwc_dds_step_size = 500.0 / 0xFFFFFFFF;
		private double fwc_corrected_dds_clock = 500.0;
		private double fwc_dds_clock_correction = 0.0;
		public double FWCDDSClockCorrection
		{
			get	{ return fwc_dds_clock_correction; }
			set
			{
				double clock = 500.0;
				switch(current_model)
				{
					case Model.FLEX3000:
						clock = 499.201;
						break;
					case Model.FLEX5000:
						clock = 500.0;						
						break;
				}

				fwc_dds_clock_correction = value;
				fwc_corrected_dds_clock = clock + fwc_dds_clock_correction;
				fwc_dds_step_size = fwc_corrected_dds_clock / 0xFFFFFFFF;
				if(setupForm != null)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

        private double hid_dds_step_size = 384.0 / 0xFFFFFFFF / 2;
        private double hid_corrected_dds_clock = 384.0;
        private double hid_dds_clock_correction = 0.0;
        public double HIDDDSClockCorrection
        {
            get { return hid_dds_clock_correction; }
            set
            {
                double clock = 384.0;
                if (flex_1500_xref)
                    clock = 400.0;

                hid_dds_clock_correction = value;
                hid_corrected_dds_clock = clock + hid_dds_clock_correction;
                hid_dds_step_size = hid_corrected_dds_clock / 0xFFFFFFFF / 2;
                if (setupForm != null)
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

		/*private double rx2_dds_step_size = 500.0 / 0xFFFFFFFF;
		private double rx2_corrected_dds_clock = 500.0;
		private double rx2_dds_clock_correction = 0.0;
		public double RX2DDSClockCorrection
		{
			get	{ return rx2_dds_clock_correction; }
			set
			{
				rx2_dds_clock_correction = value;
				rx2_corrected_dds_clock = 500.0 + rx2_dds_clock_correction;
				rx2_dds_step_size = rx2_corrected_dds_clock / 0xFFFFFFFF;
				RX2DDSFreq = rx2_dds_freq;
			}
		}*/

        public FRSRegion current_region = FRSRegion.US;
        public FRSRegion CurrentRegion
        {
            get {
                return current_region;
            }
            set {
                current_region = value;
            }
        }

		private bool spur_reduction = true;
		public bool SpurReduction
		{
			get { return spur_reduction; }
			set
			{
				spur_reduction = value;
				if(setupForm != null) txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				chkSR.Checked = value;
			}
		}

		private bool rx2_spur_reduction = true;
		public bool RX2SpurReduction
		{
			get { return rx2_spur_reduction; }
			set
			{
				rx2_spur_reduction = value;
				if(setupForm != null && rx2_enabled)
					txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				chkRX2SR.Checked = value;
				if(!rx2_spur_reduction) rx2_last_tw = 0;
			}
		}

		public long Freq2TW(double freq)
		{
			long tw = 0;
			switch(current_model)
			{
				//case Model.SDR1000:
				//	tw = (long)(0xFFFFFFFFFFFF*freq/corrected_dds_clock);
				//	break;
				case Model.FLEX3000:
				case Model.FLEX5000:
					tw = (long)(0xFFFFFFFF*freq/fwc_corrected_dds_clock);
                    break;
                case Model.FLEX1500:
                    tw = (long)(0xFFFFFFFF * freq*2 / hid_corrected_dds_clock);
                    break;
			}
			return tw;
		}

		private double TW2Freq(long tw)
		{
			double freq = 0.0;
			switch(current_model)
			{
				//case Model.SDR1000:
				//	freq = tw*corrected_dds_clock/0xFFFFFFFFFFFF;
				//	break;
				case Model.FLEX3000:
				case Model.FLEX5000:
					freq = tw*fwc_corrected_dds_clock/0xFFFFFFFF;
					break;
                case Model.FLEX1500:
                    freq = tw * hid_corrected_dds_clock / 0xFFFFFFFF / 2;
                    break;
			}
			return freq;
		}

        bool rx1_dds_freq_updated = false;
        uint rx1_dds_freq_tw;
        float rx1_dds_freq_mhz;
        private void UpdateRX1DDSFreq()
        {
            while (chkPower.Checked)
            {
                if (rx1_dds_freq_updated)
                {
                    uint tw = rx1_dds_freq_tw;
                    float freq = rx1_dds_freq_mhz;
                    rx1_dds_freq_updated = false;
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                        case Model.FLEX3000:
                            FWC.SetRX1FreqTW(tw, freq); // ke9ns send new freq to radio 
                            break;
                        case Model.FLEX1500:
                            USBHID.SetFreqTW(tw);
                            Set1500Filters(TW2Freq(tw));
                            break;
                    }

                    if (!mox)
                        WBIRRX1Holdoff();
                }
                else Thread.Sleep(100);
            }
        }

        bool rx2_dds_freq_updated = false;
        uint rx2_dds_freq_tw;
        float rx2_dds_freq_mhz;
        private void UpdateRX2DDSFreq()
        {
            while (chkPower.Checked)
            {
                if (rx2_dds_freq_updated)
                {
                    uint tw = rx2_dds_freq_tw;
                    float freq = rx2_dds_freq_mhz;
                    rx2_dds_freq_updated = false;
                    FWC.SetRX2FreqTW(tw, freq);
                    if (!mox)
                        WBIRRX1Holdoff();
                }
                else Thread.Sleep(100);
            }
        }

        bool tx_dds_freq_updated = false;
        uint tx_dds_freq_tw;
        float tx_dds_freq_mhz;
        double last_tx_carrier_key = 0.0;
        private void UpdateTXDDSFreq()
        {
            while (chkPower.Checked)
            {
                if (tx_dds_freq_updated)
                {
                    uint tw = tx_dds_freq_tw;
                    float freq = tx_dds_freq_mhz;
                    tx_dds_freq_updated = false;
                    FWC.SetTXFreqTW(tw, freq);

                    double key = 0.0;
                    if(FindNearestKey<uint>(tx_dds_freq_mhz, tx_carrier_cal, out key))
                    {
                        if (key != last_tx_carrier_key || calibrating)
                        {
                            uint val = tx_carrier_cal[key];
                            FWC.SetTRXPot(val);
                            last_tx_carrier_key = key;

                            flex5000DebugForm.SetTRXPot(0, (byte)(val >> 24));
                            flex5000DebugForm.SetTRXPot(1, (byte)(val >> 16));
                            flex5000DebugForm.SetTRXPot(2, (byte)(val >> 8));
                            flex5000DebugForm.SetTRXPot(3, (byte)(val >> 0));
                        }
                    }
                }
                else Thread.Sleep(100);
            }
        }

		private uint last_tw = 0;
		private double fwc_dds_freq = 7.0;
		public double FWCDDSFreq
		{
			get { return fwc_dds_freq; }
			set
			{
				fwc_dds_freq = value;
				
				if(spur_reduction)
				{
					double f = fwc_dds_freq + vfo_offset;
					if(if_shift) f -= if_freq;
					uint tw = (uint)Freq2TW(f); //Debug.WriteLine("tw: "+tw.ToString("X"));
					uint sr_tw = tw & 0xFFFF0000;

                    double step_size = fwc_dds_step_size;
                    if(current_model == Model.FLEX1500)
                        step_size = hid_dds_step_size;

					double dsp_osc_freq = (double)(1e6 * ((tw - sr_tw) * step_size));
					if(if_shift) dsp.GetDSPRX(0, 0).RXOsc = -dsp_osc_freq - if_freq * 1e6 + vfo_offset;
					else dsp.GetDSPRX(0, 0).RXOsc = -dsp_osc_freq + vfo_offset;
					if(last_tw != sr_tw)
					{
						//Debug.WriteLine("sr_tw: "+sr_tw.ToString("X")+" VFO: "+VFOAFreq.ToString("F6"));
						if(fwc_init || hid_init)
						{
							switch(current_model)
							{
									/*case Model.SDRX:
										FWC.SetDDSFreq(fwc_index, (float)TW2Freq(sr_tw));
										break;*/
                                case Model.FLEX5000:
                                    rx1_dds_freq_tw = sr_tw;
                                    rx1_dds_freq_mhz = (float)TW2Freq(sr_tw) * (float)(500.0 / fwc_corrected_dds_clock);
                                    rx1_dds_freq_updated = true;
                                 //   Debug.WriteLine("DDS_FREQ===sr_tw=====" + sr_tw);
                                //    Debug.WriteLine("DDS_FREQ===freqMhz=====" + rx1_dds_freq_mhz);

                                    //FWC.SetRX1FreqTW(sr_tw, (float)TW2Freq(sr_tw) * (float)(500.0 / fwc_corrected_dds_clock));
                                    //FWC.SetRX1Freq((float)TW2Freq(sr_tw) * (float)(500.0 / fwc_corrected_dds_clock));
                                    break;
                                case Model.FLEX3000:
                                    rx1_dds_freq_tw = sr_tw;
                                    rx1_dds_freq_mhz = (float)TW2Freq(sr_tw) * (float)(499.2 / fwc_corrected_dds_clock);
                                    rx1_dds_freq_updated = true;
                                    //FWC.SetRX1FreqTW(sr_tw, (float)TW2Freq(sr_tw) * (float)(499.2 / fwc_corrected_dds_clock));
                                    //FWC.SetRX1Freq((float)TW2Freq(sr_tw) * (float)(499.2 / fwc_corrected_dds_clock));
                                    break;
                                case Model.FLEX1500:
                                    rx1_dds_freq_tw = sr_tw;
                                    double clock = 384.0;
                                    if (flex_1500_xref) clock = 400.0;
                                    rx1_dds_freq_mhz = (float)TW2Freq(sr_tw) * (float)(clock / fwc_corrected_dds_clock);
                                    rx1_dds_freq_updated = true;
                                    break;
							}
						}
					}
					last_tw = sr_tw;
					//Debug.WriteLine("sr_tw freq: "+TW2Freq(sr_tw).ToString("f6")+" osc: "+(-dsp_osc_freq*1e-6).ToString("f6")+" total: "+(TW2Freq(sr_tw)+dsp_osc_freq*1e-6).ToString("f6"));
				}
				else
				{
					if(fwc_init || hid_init)
					{
						switch(current_model)
						{
								/*case Model.SDRX:
									FWC.SetDDSFreq(fwc_index, (float)fwc_dds_freq-(float)if_freq);
									break;*/
                            case Model.FLEX5000:
                            case Model.FLEX3000:
                                double f = fwc_dds_freq + vfo_offset;
                                if (if_shift) f -= if_freq;
                                uint tw = (uint)Freq2TW(f);
                                rx1_dds_freq_tw = tw;
                                rx1_dds_freq_mhz = (float)f;
                                rx1_dds_freq_updated = true;
                                //FWC.SetRX1FreqTW(tw, (float)f);
                                break;
                            case Model.FLEX1500:
                                f = fwc_dds_freq + vfo_offset;
                                if (if_shift) f -= if_freq;
                                tw = (uint)Freq2TW(f);
                                rx1_dds_freq_tw = tw;
                                rx1_dds_freq_updated = true;
                                break;
						}
					}
					if(if_shift)
						dsp.GetDSPRX(0, 0).RXOsc = -if_freq*1e6;
					else
						dsp.GetDSPRX(0, 0).RXOsc = 0.0;
					last_tw = 0;
					//Debug.WriteLine("dds: "+fwc_dds_freq.ToString("f6")+" osc: "+(-if_freq*1e6).ToString("f6")+" total: "+(fwc_dds_freq+if_freq).ToString("f6"));
				}
			}
		}

		private uint rx2_last_tw = 0;
		private double rx2_dds_freq = 7.0;
		public double RX2DDSFreq
		{
			get { return rx2_dds_freq; }
			set
			{
				rx2_dds_freq = value;
				
				if(rx2_spur_reduction)
				{
					double f = rx2_dds_freq + rx2_vfo_offset;
					if(rx2_if_shift) f -= rx2_if_freq;
					uint tw = (uint)Freq2TW(f); //Debug.WriteLine("tw: "+tw.ToString("X"));
					uint sr_tw = tw & 0xFFFF0000;
					double dsp_osc_freq = (double)(1e6 * ((tw - sr_tw) * fwc_dds_step_size));
					if(rx2_if_shift) dsp.GetDSPRX(1, 0).RXOsc = -dsp_osc_freq - rx2_if_freq * 1e6 + rx2_vfo_offset;
					else dsp.GetDSPRX(1, 0).RXOsc = -dsp_osc_freq + rx2_vfo_offset;
					if(rx2_last_tw != sr_tw)
					{
						//Debug.WriteLine("sr_tw: "+sr_tw.ToString("X")+" VFO: "+VFOAFreq.ToString("F6"));
						if(fwc_init)
						{
							switch(current_model)
							{
									/*case Model.SDRX:
										FWC.SetDDSFreq(fwc_index, (float)TW2Freq(sr_tw));
										break;*/
                                case Model.FLEX5000:
                                    //FWC.SetRX2Freq((float)TW2Freq(sr_tw) * (float)(500.0 / fwc_corrected_dds_clock));
                                    //FWC.SetRX2FreqTW(sr_tw, (float)TW2Freq(sr_tw) * (float)(500.0 / fwc_corrected_dds_clock));
                                    rx2_dds_freq_tw = sr_tw;
                                    rx2_dds_freq_mhz = (float)TW2Freq(sr_tw) * (float)(500.0 / fwc_corrected_dds_clock);
                                    rx2_dds_freq_updated = true;
                                    break;
							}
						}
 					}
					rx2_last_tw = sr_tw;
					//Debug.WriteLine("sr_tw freq: "+TW2Freq(sr_tw).ToString("f6")+" osc: "+(-dsp_osc_freq*1e-6).ToString("f6")+" total: "+(TW2Freq(sr_tw)+dsp_osc_freq*1e-6).ToString("f6"));
				}
				else
				{
					if(fwc_init)
					{
						switch(current_model)
						{
								/*case Model.SDRX:
									FWC.SetDDSFreq(fwc_index, (float)fwc_dds_freq-(float)if_freq);
									break;*/
                            case Model.FLEX5000:
                                double f = rx2_dds_freq + rx2_vfo_offset;
                                if (rx2_if_shift) f -= rx2_if_freq;
                                uint tw = (uint)Freq2TW(f);
                                //FWC.SetRX2FreqTW(tw, (float)f);
                                rx2_dds_freq_tw = tw;
                                rx2_dds_freq_mhz = (float)f;
                                rx2_dds_freq_updated = true;
                                break;
						}
					}

					if(rx2_if_shift)
						dsp.GetDSPRX(1, 0).RXOsc = -rx2_if_freq * 1e6;
					else
						dsp.GetDSPRX(1, 0).RXOsc = 0.0;
					last_tw = 0;
					//Debug.WriteLine("dds: "+fwc_dds_freq.ToString("f6")+" osc: "+(-if_freq*1e6).ToString("f6")+" total: "+(fwc_dds_freq+if_freq).ToString("f6"));
				}
			}
		}

		private double dds_freq = 7.0;
		public double DDSFreq
		{
			get { return dds_freq; }
			set
			{
				dds_freq = value;
				//Debug.WriteLine("dds_freq: "+dds_freq.ToString("f6"));

				double vfoFreq = value, f = value;
				double dsp_osc_freq = 0;

                //calculate DDS Tuning Word
                // ke9ns test
                if (xvtr_present && f >= 122 && f <= 165)        // If transverter enabled compute 28MHz IF frequency
                {
                    f -= 116;     // 94                               // Subtract 116MHz (144-28) from VFO display frequency
                }
               

/*
                if (xvtr_present && f >= 144 && f <= 146)        // If transverter enabled compute 28MHz IF frequency
                {
                    f -= 116;                                   // Subtract 116MHz (144-28) from VFO display frequency
                }
*/
                if (if_shift) 
				{
					f -= if_freq;								// adjust for IF shift
					dsp_osc_freq = -if_freq*1e6;
				}

				f += vfo_offset;								// adjust for vfo offset
				/*if(mox && current_dsp_mode == DSPMode.DRM)
					f -= 0.008;*/
				long tuning_word = (long)(f / corrected_dds_clock * Math.Pow(2, 48));

				if(spur_reduction)
				{
					long sr_tuning_word = tuning_word &		// start with current tuning word
						~(0x8000ffffffff);	// clear first bit, low 32 bits

					double software_offset = (sr_tuning_word - tuning_word) * dds_step_size;
					dsp_osc_freq += 1000000.0*software_offset;

					tuning_word = sr_tuning_word;
				}

             /*   if (current_model == Model.SDR1000)
                {
                    if (Hdw.DDSTuningWord != tuning_word)
                        WBIRRX1Holdoff();

                    Hdw.DDSTuningWord = tuning_word;
                    SetHWFilters(dds_freq);
                }
			*/	if(!mox) dsp.GetDSPRX(0, 0).RXOsc = dsp_osc_freq;
			}
		} // DDSfreq

		public double TuningWordToFreq(long word)
		{
			return word * corrected_dds_clock / Math.Pow(2, 48);
		}

		private double min_freq = 0.011025;
		public double MinFreq
		{
			get { return min_freq; }
			set 
			{
				min_freq = value;
				if(VFOAFreq < min_freq)
					VFOAFreq = min_freq;
			}
		}

		private double max_freq = 65.0;
		public double MaxFreq
		{
			get { return max_freq; }
			set
			{
				max_freq = value;
				
				if(setupForm == null) return;
				if(VFOAFreq > max_freq && rx1_xvtr_index < 0)
					VFOAFreq = max_freq;
			}
		}

		private double vfo_offset = 0.0;
		public double VFOOffset
		{
			get	{ return vfo_offset; }
			set	{ vfo_offset = value; }
		}

		private double rx2_vfo_offset = 0.0;
		public double RX2VFOOffset
		{
			get	{ return rx2_vfo_offset; }
			set	{ rx2_vfo_offset = value; }
		}

		private double if_freq = 0.009000;
		public double IFFreq
		{
			get { return if_freq; }
			set
			{
				if_freq = value;
				if(setupForm != null) 
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                ptbDisplayPan_Scroll(this, EventArgs.Empty);
			}
		}

		private double rx2_if_freq = 0.009000;
		public double RX2IFFreq
		{
			get { return rx2_if_freq; }
			set
			{
				rx2_if_freq = value;
				if(setupForm != null && rx2_enabled)
					txtVFOBFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private bool if_shift = true;
		public bool IFShift
		{
			get { return if_shift; }
			set { if_shift = value; }
		}

		private bool rx2_if_shift = true;
		public bool RX2IFShift
		{
			get { return rx2_if_shift; }
			set { rx2_if_shift = value; }
		}

		private bool extended = false;
		public bool Extended
		{
			get { return extended; }
			set { extended = value; }
		}

		private bool enable_LPF0 = false;
		public bool EnableLPF0
		{
			get { return enable_LPF0; }
			set { enable_LPF0 = value; }
		}

		private int latch_delay = 0;
		public int LatchDelay
		{
			get { return latch_delay;}
			set { latch_delay = value;}
		}

		private bool x2_enabled = false;
		public bool X2Enabled
		{
			get { return x2_enabled; }
			set
			{
				x2_enabled = value;
				X2TR = value;
              //  if (current_model == Model.SDR1000)
              //  {
                 //   if (value && mox)
                  //      Hdw.X2 |= 0x40;
                 //   else Hdw.X2 &= 0xBF;
               // }
			}
		}

		private int x2_delay = 500;
		public int X2Delay
		{
			get { return x2_delay; }
			set { x2_delay = value; }
		}

		public bool CPDR
		{
			get { return chkCPDR.Checked; }
			set
			{
				if(setupForm == null)
					return;
				
				chkCPDR.Checked = value;
			}
		}

		public int CPDRLevel
		{
			get { return ptbCPDR.Value; }
			set
			{
				if(setupForm == null) return;
				ptbCPDR.Value = value;
                ptbCPDR_Scroll(this, EventArgs.Empty);
			}
		}

		public int Mic
		{
			get { return ptbMic.Value; }
			set
			{
				if(setupForm == null)
					return;

				ptbMic.Value = value;
                ptbMic_Scroll(this, EventArgs.Empty);
			}
		}

        public int FMMic  // W4TME
        {
            get { return ptbFMMic.Value; }
            set
            {
                if (setupForm == null)
                    return;
                ptbFMMic.Value = value;
                ptbFMMic_Scroll(this, EventArgs.Empty);
            }
        }



#region CAT Properties
		
		// props for cat control 

        public double CATVFOA
        {
            get { return saved_vfoa_freq; }
        }

        public double CATVFOB
        {
            get { return saved_vfob_freq; }
        }

		public int CATTXProfileCount
		{
			get
			{
				return comboTXProfile.Items.Count;
			}
		}

		public int CATTXProfile
		{
			get
			{
				return comboTXProfile.SelectedIndex;
			}
			set
			{
                UpdateTXProfile(value);
			}
		}

		public string CATPanSwap
		{
			get
			{
				if(chkPanSwap.Checked)
					return "1";
				else
					return "0";
			}
			set
			{
				if(value == "1")
					chkPanSwap.Checked = true;
				else
					chkPanSwap.Checked = false;
			}
		}

		public string CATPhoneDX
		{
			get
			{
				if(chkDX.Checked)
					return "1";
				else
					return "0";
			}
			set
			{
				if(value == "1")
					chkDX.Checked = true;
				else
					chkDX.Checked = false;
			}
		}

		public string CATMultRX
		{
			get
			{
				if(chkEnableMultiRX.Checked)
					return "1";
				else
					return "0";
			}
			set
			{
				if(value == "1")
					chkEnableMultiRX.Checked = true;
				else
					chkEnableMultiRX.Checked = false;
			}

		}

		public string CATRXEQ
		{
			get
			{
				if(chkRXEQ.Checked)
					return "1";
				else
					return "0";
			}
			set
			{
				if(value == "1")
					chkRXEQ.Checked = true;
				else 
					chkRXEQ.Checked = false;
			}
		}

		public string CATTXEQ
		{
			get
			{
				if(chkTXEQ.Checked)
					return "1";
				else
					return "0";
			}
			set
			{
				if(value == "1")
					chkTXEQ.Checked = true;
				else 
					chkTXEQ.Checked = false;
			}
		}

		public string CATDispPeak
		{
			get 
			{
				if(chkDisplayPeak.Checked)
					return "1";
				else
					return "0";
			}
			set 
			{
				if(value == "1")
					chkDisplayPeak.Checked = true;
				else 
					chkDisplayPeak.Checked = false;
			}

		}

		public string CATDispCenter
		{
			set
			{
				btnDisplayPanCenter.PerformClick();
			}
		}

		public string CATDispZoom
		{
			set
			{
				switch(value)
				{
					case "0":
						radDisplayZoom05.PerformClick();
						break;
					case "1":
						radDisplayZoom1x.PerformClick();
						break;
					case "2":
						radDisplayZoom2x.PerformClick();
						break;
					case "3":
						radDisplayZoom4x.PerformClick();
						break;
					default:
						radDisplayZoom1x.PerformClick();
						break;
				}
			}

			get
			{
				if(radDisplayZoom05.Checked)
					return "0";
				else if(radDisplayZoom1x.Checked)
					return "1";
				else if(radDisplayZoom2x.Checked)
					return "2";
				else if(radDisplayZoom4x.Checked)
					return "3";
				else
					return "4";
			}
		}

		public string CATZB
		{
			set
			{
				btnZeroBeat.PerformClick();
			}
		}

		public void CATTuneStepUp()
		{
			ChangeTuneStepUp();
		}

		public void CATTuneStepDown()
		{
			ChangeTuneStepDown();
		}


		//Added 03/18/07 BT BCI Reject
		private int cat_bci_reject = 0;
		public int CATBCIReject
		{
			get
			{
				if(chkBCI.Checked)
					cat_bci_reject = 1;
				else
					cat_bci_reject = 0;
				return cat_bci_reject;
			}
			set
			{
				if(value == 1)
					chkBCI.Checked = true;
				else
					chkBCI.Checked = false;
			}
		}
		// Added 06/20/05 BT for CAT commands
		private int cat_nr_status = 0;
		public int CATNR
		{
			get{return cat_nr_status;}
			set
			{
				if(value == 0)
					chkNR.Checked = false;
				else if(value == 1)
					chkNR.Checked = true;
			}
		}

		// Added 06/20/05 BT for CAT commands
		private int cat_anf_status = 0;
		public int CATANF
		{
			get{return cat_anf_status;}
			set
			{
				if(value == 0)
					chkANF.Checked = false;
				else if(value == 1)
					chkANF.Checked = true;
			}
		}

		// Added 06/21/05 BT for CAT Commands
		private int cat_nb1_status = 0;
		public int CATNB1
		{
			get{return cat_nb1_status;}
			set
			{
				if(value == 0)
					chkNB.Checked = false;
				else if(value == 1)
					chkNB.Checked = true;
			}
		}

		// Added 06/21/05 BT for CAT commands
		private int cat_nb2_status = 0;
		public int CATNB2
		{
			get{return cat_nb2_status;}
			set
			{
				if(value == 0)
					chkDSPNB2.Checked = false;
				else if(value == 1)
					chkDSPNB2.Checked = true;
			}
		}

        public bool CATATU
        {
            get { return chkFWCATU.Checked; }
            set {
                if (value)
                    chkFWCATU_Click(this.chkFWCATU, EventArgs.Empty);
                }
        }

        public bool CATBYP
        {
            get { return chkFWCATUBypass.Checked; }
            set
            {
                chkFWCATUBypass_Click(this.chkFWCATUBypass, EventArgs.Empty);
            }
        }



        private int cat_rx2nb1_status = 0;
        public int CATRX2NB1
        {
            get
            {
                if (this.CurrentModel == Model.FLEX5000 && FWCEEPROM.RX2OK)
                    return cat_rx2nb1_status;
                else
                    return 0;
            }
            set
            {
                if (this.CurrentModel == Model.FLEX5000 && FWCEEPROM.RX2OK)
                {
                    if (value == 0)
                        chkRX2NB.Checked = false;
                    else
                        chkRX2NB.Checked = true;
                }
            }
        }

        public void CATRX2BandUpDown(int direction)
        {
            comboRX2Band.Focus();

            string filter = "", mode = "", next = "", previous = "";
            string new_band = "";
            double freq = 0.0;
            bool b = false;
            switch (comboRX2Band.Text)
            {
                case "160m": next = "80m"; previous = "GEN"; break;
                case "80m": next = "60m"; previous = "160m"; break;
                case "60m": next = "40m"; previous = "80m"; break;
                case "40m": next = "30m"; previous = "60m"; break;
                case "30m": next = "20m"; previous = "40m"; break;
                case "20m": next = "17m"; previous = "30m"; break;
                case "17m": next = "15m"; previous = "20m"; break;
                case "15m": next = "12m"; previous = "17m"; break;
                case "12m": next = "10m"; previous = "12m"; break;
                case "10m": next = "6m"; previous = "12m"; break;
                case "6m": next = "2m"; previous = "10m"; break;
                case "2m": next = "WWV"; previous = "6m"; break;
                case "GEN": next = "160m"; previous = "VHF13"; break;
                case "WWV": next = "VHF0"; previous = "6m"; break;

                case "VU 2m": next = "VHF1"; previous = "WWV"; break;
                case "VU 70cm": next = "VHF2"; previous = "VHF0"; break;
                case "VHF2": next = "VHF3"; previous = "VHF1"; break;
                case "VHF3": next = "VHF4"; previous = "VHF2"; break;
                case "VHF4": next = "VHF5"; previous = "VHF3"; break;
                case "VHF5": next = "VHF6"; previous = "VHF4"; break;
                case "VHF6": next = "VHF7"; previous = "VHF5"; break;
                case "VHF7": next = "VHF8"; previous = "VHF6"; break;
                case "VHF8": next = "VHF9"; previous = "VHF7"; break;
                case "VHF9": next = "VHF10"; previous = "VHF8"; break;
                case "VHF10": next = "VHF11"; previous = "VHF9"; break;
                case "VHF11": next = "VHF12"; previous = "VHF10"; break;
                case "VHF12": next = "VHF13"; previous = "VHF11"; break;
                case "VHF13": next = "GEN"; previous = "VHF12"; break;
            }


            if (next.StartsWith("VHF"))                                 //see if the next vhf entry is enabled
            {
                int next_ndx = Convert.ToInt32(next.Substring(3));
                if (!this.xvtrForm.GetEnabled(next_ndx))
                    next = "GEN";                                       //if not, go back to GEN
            }

            if (previous.StartsWith("VHF"))
            {
                int previous_ndx = Convert.ToInt32(previous.Substring(3));
                if (previous_ndx != 0)
                {
                    if (previous_ndx > 0)
                    {
                        for (int n = previous_ndx - 1; n >= 0; n--)     //find the last enabled VHF entry
                        {
                            if (this.xvtrForm.GetEnabled(n))
                            {
                                previous = "VHF" + n.ToString();
                                break;
                            }
                            else
                                previous = "WWV";                       //or default to the value just below the VHF selections
                        }
                    }
                    else
                        previous = "WWV";
                }
            }
            
  
            if (direction == 1)
                new_band = next;
            else
                new_band = previous;


            int register = -1;
            switch (new_band)
            {
                case "160m": register = band_160m_register; break;
                case "80m": register = band_80m_register; break;
                case "60m": register = band_60m_register; break;
                case "40m": register = band_40m_register; break;
                case "30m": register = band_30m_register; break;
                case "20m": register = band_20m_register; break;
                case "17m": register = band_17m_register; break;
                case "15m": register = band_15m_register; break;
                case "12m": register = band_12m_register; break;
                case "10m": register = band_10m_register; break;
                case "6m": register = band_6m_register; break;
                case "2m": register = band_2m_register; break;
                case "GEN": register = band_gen_register; break;
                case "WWV": register = band_wwv_register; break;

                case "LMF": register = band_LMF_register; break; // ke9ns add
                case "120M": register = band_120m_register; break;
                case "90M": register = band_90m_register; break;
                case "61M": register = band_61m_register; break;
                case "49M": register = band_49m_register; break;
                case "41M": register = band_41m_register; break;
                case "31M": register = band_31m_register; break;
                case "25M": register = band_25m_register; break;
                case "22M": register = band_22m_register; break;
                case "19M": register = band_19m_register; break;
                case "16M": register = band_16m_register; break;
                case "14M": register = band_14m_register; break;
                case "13M": register = band_13m_register; break;
                case "11M": register = band_11m_register; break;

                case "VHF0": register = band_vhf0_register; break;
                case "VHF1": register = band_vhf1_register; break;
                case "VHF2": register = band_vhf2_register; break;
                case "VHF3": register = band_vhf3_register; break;
                case "VHF4": register = band_vhf4_register; break;
                case "VHF5": register = band_vhf5_register; break;
                case "VHF6": register = band_vhf6_register; break;
                case "VHF7": register = band_vhf7_register; break;
                case "VHF8": register = band_vhf8_register; break;
                case "VHF9": register = band_vhf9_register; break;
                case "VHF10": register = band_vhf10_register; break;
                case "VHF11": register = band_vhf11_register; break;
                case "VHF12": register = band_vhf12_register; break;
                case "VHF13": register = band_vhf13_register; break;

              

            }
            
            //if(new_band.StartsWith("VHF"))
            //{
            //    int ndx = Convert.ToInt32(new_band.Substring(3));
            //    if (this.xvtrForm.GetEnabled(ndx))
            //        b = DB.GetBandStack(new_band, 0, out mode, out filter, out freq);
            //    else
            //        b = DB.GetBandStack("160m", 0, out mode, out filter, out freq);
            //}
            //else
                b = DB.GetBandStack(new_band, 0, out mode, out filter, out freq);


            if (b)
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                VFOBFreq = freq;
                RX2DSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), mode);
                VFOBFreq = freq;
               
                RX2Filter = (Filter)Enum.Parse(typeof(Filter), filter);
            }

            btnHidden.Focus();
          }

        private int cat_rx2nb2_status = 0;
        public int CATRX2NB2
        {
            get
            {
                if (this.CurrentModel == Model.FLEX5000 && FWCEEPROM.RX2OK)
                    return cat_rx2nb2_status;
                else
                    return 0;
            }
            set
            {
                if (this.CurrentModel == Model.FLEX5000 && FWCEEPROM.RX2OK)
                {
                    if (value == 0)
                        chkRX2NB2.Checked = false;
                    else
                        chkRX2NB2.Checked = true;
                }
            }
        }


		// Added 06/22/05 BT for CAT commands
		private int cat_cmpd_status = 0;
		public int CATCmpd
		{
			get{return cat_cmpd_status;}
			set
			{
				if(value == 0)
					chkCPDR.Checked = false;
				else if(value == 1)
					chkCPDR.Checked = true;
			}
		}

		// Added 06/22/05 BT for CAT commands
		private int cat_mic_status = 0;
		public int CATMIC
		{
			get
			{
				cat_mic_status = ptbMic.Value;
				return cat_mic_status;
			}
			set
			{
				value = Math.Max(0, value);
				value = Math.Min(100, value);
				ptbMic.Value = value;
                ptbMic_Scroll(this, EventArgs.Empty);
			}
		}

		// Added 06/22/05 BT for CAT commands
		// modified 07/22/05 to fix display problem
		private int cat_filter_width = 0;
		public int CATFilterWidth
		{
			get
			{
				cat_filter_width = ptbFilterWidth.Value;
				return cat_filter_width;
			}
			set
			{
				value = Math.Max(1, value);
				value = Math.Min(10000, value);
				ptbFilterWidth.Value = value;
				ptbFilterWidth_Scroll(this.ptbFilterWidth, EventArgs.Empty);	// added
			}
		}

		// Added 07/22/05 for cat commands
		public int CATFilterShift
		{
			get
			{
				return ptbFilterShift.Value;
			}
			set
			{
				value = Math.Max(-1000, value);
				value = Math.Min(1000, value);
				ptbFilterShift.Value = value;
				ptbFilterShift_Scroll(this.ptbFilterShift, EventArgs.Empty);
			}
		}

		// Added 07/22/05 for CAT commands
		public int CATFilterShiftReset
		{
			set
			{
				if(value == 1)
					btnFilterShiftReset.PerformClick();
			}
		}

		// Added 06/22/05 BT for CAT commands
		private int cat_bin_status = 0;
		public int CATBIN
		{
			get
			{
				if(chkBIN.Checked)
					cat_bin_status = 1;
				else
					cat_bin_status = 0;

				return cat_bin_status;
			}
			set
			{
				if(value == 1)
					chkBIN.Checked = true;
				else if(value == 0)
					chkBIN.Checked = false;
			}
		}

		// Added/repaired 7/10/05 BT for cat commands
		public PreampMode CATPreamp
		{
			//set{comboPreamp.SelectedIndex = value;}
			//get{return comboPreamp.SelectedIndex;}
            set { RX1PreampMode = value; }
            get { return RX1PreampMode; }
		}

		// Added 06/30/05 BT for CAT commands
		public int CATCWSpeed
		{
			get
			{
				return ptbCWSpeed.Value;
			}
			set
			{
				value = Math.Max(1,value);
				value = Math.Min(60, value);
				ptbCWSpeed.Value = value;
                ptbCWSpeed_Scroll(this, EventArgs.Empty);
			}
		}

		// Added 06/30/05 BT for CAT commands
		private int cat_display_avg_status = 0;
		public int CATDisplayAvg
		{
			get
			{
				if(chkDisplayAVG.Checked)
					cat_display_avg_status = 1;
				else
					cat_display_avg_status = 0;

				return cat_display_avg_status;
			}
			set
			{
				if(value == 1)
					chkDisplayAVG.Checked = true;
				else
					chkDisplayAVG.Checked = false;
			}
		}

		// Added 06/30/05 BT for CAT commands
		private int cat_squelch_status = 0;
		public int CATSquelch
		{
			get
			{
				if(chkSquelch.Checked)
					cat_squelch_status = 1;
				else
					cat_squelch_status = 0;

				return cat_squelch_status;
			}
			set
			{
				if(value == 1)
					chkSquelch.Checked = true;
				else
					chkSquelch.Checked = false;
			}
		}

        public string CATSquelch2
        {
            get
            {
                if (FWCEEPROM.RX2OK && chkRX2Squelch.Checked)
                    return "1";
                else
                    return "0";
            }
            set
            {
                if (FWCEEPROM.RX2OK)
                {
                    if (value == "1")
                        chkRX2Squelch.Checked = true;
                    else
                        chkRX2Squelch.Checked = false;
                }
            }
        }

		// Added 7/9/05 BT for cat commands
		public string CATQMSValue
		{
			get{return this.txtMemoryQuick.Text;}
		}

		private Parity cat_parity;
		public Parity CATParity 
		{
			set {cat_parity = value; }
			get { return cat_parity; }
		}

		private StopBits cat_stop_bits; 
		public StopBits CATStopBits 
		{
			set { cat_stop_bits = value; }
			get { return cat_stop_bits; } 
		}

        private Handshake cat_handshake;
        public Handshake CATHandshake
        {
            set { cat_handshake = value; }
            get { return cat_handshake; }
        }

		private int cat_data_bits; 
		public int CATDataBits 
		{
			set { cat_data_bits = value; }
			get { return cat_data_bits; } 
		}
		
		private int cat_baud_rate; 
		public int CATBaudRate 
		{
			set { cat_baud_rate = value; } 
			get { return cat_baud_rate; } 
		}

		private bool cat_enabled; 
		public bool CATEnabled 
		{
			set 
			{
                try
                {
                    cat_enabled = value;
                    if (siolisten != null)  // if we've got a listener tell them about state change 
                    {
                        if (cat_enabled)
                        {
                            Siolisten.enableCAT();
                           
                        }
                        else
                        {
                            Siolisten.disableCAT();
                            
                        }
                    }
                }
                catch (Exception)
                {
                    if (cat_port != 0)
                    {
                        MessageBox.Show("Error enabling CAT on COM" + cat_port + ".\n" +
                            "Please check CAT settings and try again.",
                            "CAT Initialization Error",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Error enabling CAT comm port.\n" +
                            "Previously defined CAT comm port not enumerated.\n" +
                            "Please check CAT settings and try again.",
                            "CAT Initialization Error",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }

                    if (setupForm != null) setupForm.CATEnabled = false;
                }
			}
			get { return cat_enabled; } 
		} // CATEnabled
		
		private int cat_rig_type;
		public int CATRigType
		{
			get { return cat_rig_type; }
			set { cat_rig_type = value; }
		}

		private int cat_port; 
		public int CATPort 
		{
			get { return cat_port; }
			set { cat_port = value; } 
		}

        //========================================================================================
        //========================================================================================
        // ke9ns antennar rotor control via DDUtil VSP rotor port using Hygain protocol
        private bool rotor_enabled;
        public bool ROTOREnabled
        {
            set
            {
                try
                {
                    Debug.WriteLine("ROTORENabled " + value);
                    rotor_enabled = value;

                    if (siolisten1 != null)  // if we've got a listener tell them about state change 
                    {
                        if (rotor_enabled)
                        {
                            Siolisten1.enableROTOR();
                           
                        }
                        else
                        {
                            Siolisten1.disableROTOR();
                           
                        }
                    }
                }
                catch (Exception)
                {
                    if (rotor_port != 0)
                    {
                        MessageBox.Show("Error enabling ROTOR on COM" + rotor_port + ".\n" +
                            "Please check ROTOR settings and try again.",
                            "ROTOR Initialization Error",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show("Error enabling ROTOR comm port.\n" +
                            "Previously defined ROTOR comm port not enumerated.\n" +
                            "Please check ROTOR settings and try again.",
                            "ROTOR Initialization Error",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Error);
                    }

                    if (setupForm != null) setupForm.ROTOREnabled = false;
                }
            }
            get { return rotor_enabled; }

        } // ROTOREnabled


        private int rotor_port;
        public int ROTORPort
        {
            get { return rotor_port; }
            set { rotor_port = value; }
        }


        //========================================================================================
        //========================================================================================


        private bool cat_ptt_rts = false; 
		public bool CATPTTRTS 
		{
			get { return cat_ptt_rts; }
			set { cat_ptt_rts = value; }
		}

		private bool cat_ptt_dtr;
		public bool CATPTTDTR
		{
			get { return cat_ptt_dtr; }
			set { cat_ptt_dtr = value; }
		}

		public SerialPortPTT serialPTT = null; 
		private bool ptt_bit_bang_enabled; 
		public bool PTTBitBangEnabled 
		{
			get { return ptt_bit_bang_enabled; }
			set 
			{
				ptt_bit_bang_enabled = value; 
				if ( serialPTT != null )  // kill current serial PTT if we have one 
				{ 
					serialPTT.Destroy(); 
					serialPTT = null; 
				} 
				if ( ptt_bit_bang_enabled )  
				{ 
					// wjt -- don't really like popping a msg box in here ...   nasty when we do a remoted 
					// setup ... will let that wait for the great console refactoring 
					try 
					{ 
						serialPTT = new SerialPortPTT(cat_ptt_bit_bang_port, cat_ptt_rts, cat_ptt_dtr); 
						serialPTT.Init(); 						
					}
					catch ( Exception ex ) 
					{
						ptt_bit_bang_enabled = false; 
						if ( setupForm != null ) 
						{ 
							setupForm.copyCATPropsToDialogVars(); // need to make sure the props on the setup page get reset 
						}
						MessageBox.Show("Could not initialize PTT Bit Bang control.  Exception was:\n\n " + ex.Message + 
							"\n\nPTT Bit Bang control has been disabled.", "Error Initializing PTT control", 
							MessageBoxButtons.OK, MessageBoxIcon.Error);
 
					}
				} 
			}
		}

		private int cat_ptt_bit_bang_port; 
		public int CATPTTBitBangPort 
		{
			get { return cat_ptt_bit_bang_port; }
			set { cat_ptt_bit_bang_port = value; }
		}

	
#endregion

		private int tune_power;								// power setting to use when TUN button is pressed
		public int TunePower
		{
			get { return tune_power; }
			set
			{
				tune_power = value;

                ptbTune.Value = value; // ke9ns add
                lblTUNE.Text = "Tune: " + ptbTune.Value.ToString(); // ke9ns add


                if (setupForm != null)	setupForm.TunePower = tune_power;

				if(chkTUN.Checked)
				{
					if(atu_present)
					{
						if((ATUTuneMode)comboTuneMode.SelectedIndex == ATUTuneMode.BYPASS) PWR = tune_power;
					}
					else PWR = tune_power;
				}
			}
		}

		private int previous_pwr = 50;
		public int PreviousPWR
		{
			get { return previous_pwr; }
			set	{ previous_pwr = value; }
		}

		private bool no_hardware_offset = false;
		public bool NoHardwareOffset
		{
			get { return no_hardware_offset; }
			set
			{
				no_hardware_offset = value;
				comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
			}
		}

#region CAT Properties


        //==================================================================
		private Band rx1_band;
        public Band RX1Band
        {
            get { return rx1_band; }
            set
            {
              //  Debug.WriteLine("RX1BAND " + value + " , " + VFOAFreq);
                Band old_band = rx1_band;
                rx1_band = value;

                Band lo_band = Band.FIRST;

                if (rx1_xvtr_index >= 0)
                {
                    lo_band = BandByFreq(xvtrForm.TranslateFreq(VFOAFreq), -1, false, current_region);
                }

                if (rx1_band != old_band && flex_wire_ucb)
                {
                    if (ucbForm != null && !ucbForm.IsDisposed)
                    {
                        ushort val = 0;
                        byte b1 = 0;
                        byte b2 = 0;

                        if(rx1_xvtr_index >= 0)
                        {
                            val = ucbForm.GetLine(rx1_xvtr_index);
                            b1 = (byte)val;
                            b2 = (byte)(val >> 8);
                        }

                        switch (current_model)
                        {
                            case Model.FLEX5000:
                            case Model.FLEX3000:
                                if (fwc_init)
                                {
                                    FWC.FlexWire_Write2Value(0x4C, 0x06, 0x00);
                                    FWC.FlexWire_Write2Value(0x4C, 0x07, 0x00);
                                    FWC.FlexWire_Write2Value(0x4C, 0x02, b1);
                                    FWC.FlexWire_Write2Value(0x4C, 0x03, b2);
                                }
                                break;
                            case Model.FLEX1500:
                                if (hid_init)
                                {
                                    USBHID.FlexWire_Write2Value(0x4C, 0x06, 0x00);
                                    USBHID.FlexWire_Write2Value(0x4C, 0x07, 0x00);
                                    USBHID.FlexWire_Write2Value(0x4C, 0x02, b1);
                                    USBHID.FlexWire_Write2Value(0x4C, 0x03, b2);
                                }
                                break;
                        }
                    }
                }

                if(rx1_preamp_mode > PreampMode.FIRST)    rx1_preamp_by_band[(int)old_band] = rx1_preamp_mode;

                /*                  moved logic to txtVFOAFreq_LostFocus
                if (fwc_init)
                {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            double freq = VFOAFreq;
                            if (freq < 2.0)
                            {
                                if (chkRX1Preamp.Enabled) chkRX1Preamp.Enabled = false;
                                if (chkRX1Preamp.Checked) chkRX1Preamp.Checked = false;
                            }
                            else if (freq >= 28.0 && rx1_xvtr_index < 0 && !enable_6m_preamp)
                            {
                                if (chkRX1Preamp.Enabled) chkRX1Preamp.Enabled = false;
                                if (!chkRX1Preamp.Checked) chkRX1Preamp.Checked = true;
                            }
                            else if (!chkRX1Preamp.Enabled) chkRX1Preamp.Enabled = true;
                            break;
                        case Model.FLEX3000:
                            freq = VFOAFreq;
                            if (FWCEEPROM.TRXRev >> 8 < 6) // before rev G
                            {
                                if (freq < 2.0)
                                {
                                    if (!comboPreamp.Items.Contains("Attn"))
                                        comboPreamp.Items.Insert(0, "Attn");
                                    if (!comboPreamp.Items.Contains("Off"))
                                        comboPreamp.Items.Insert(1, "Off");
                                    if (comboPreamp.Items.Contains("Pre1"))
                                        comboPreamp.Items.Remove("Pre1");
                                    if (comboPreamp.Items.Contains("Pre2"))
                                        comboPreamp.Items.Remove("Pre2");

                                    if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                        comboPreamp.SelectedIndex = 1; // Off
                                }
                                else
                                {
                                    if (!comboPreamp.Items.Contains("Attn"))
                                        comboPreamp.Items.Insert(0, "Attn");
                                    if (!comboPreamp.Items.Contains("Off"))
                                        comboPreamp.Items.Insert(1, "Off");
                                    if (!comboPreamp.Items.Contains("Pre1"))
                                        comboPreamp.Items.Insert(2, "Pre1");
                                    if (!comboPreamp.Items.Contains("Pre2"))
                                        comboPreamp.Items.Insert(3, "Pre2");

                                    if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                        comboPreamp.SelectedIndex = 3; // Pre2
                                }
                            }
                            else // revs G+
                            {                               
                                if (freq < 7.0)
                                {
                                    if (!comboPreamp.Items.Contains("Attn"))
                                        comboPreamp.Items.Insert(0, "Attn");
                                    if (!comboPreamp.Items.Contains("Off"))
                                        comboPreamp.Items.Insert(1, "Off");
                                    if (comboPreamp.Items.Contains("Pre1"))
                                        comboPreamp.Items.Remove("Pre1");
                                    if (comboPreamp.Items.Contains("Pre2"))
                                        comboPreamp.Items.Remove("Pre2");

                                    if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                        comboPreamp.SelectedIndex = 1; // Off
                                }
                                else if (freq < 13.0)
                                {
                                    if (!comboPreamp.Items.Contains("Attn"))
                                        comboPreamp.Items.Insert(0, "Attn");
                                    if (!comboPreamp.Items.Contains("Off"))
                                        comboPreamp.Items.Insert(1, "Off");
                                    if (!comboPreamp.Items.Contains("Pre1"))
                                        comboPreamp.Items.Insert(2, "Pre1");
                                    if (comboPreamp.Items.Contains("Pre2"))
                                        comboPreamp.Items.Remove("Pre2");

                                    if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                        comboPreamp.SelectedIndex = 1; // Off
                                }
                                else
                                {
                                    if (!comboPreamp.Items.Contains("Attn"))
                                        comboPreamp.Items.Insert(0, "Attn");
                                    if (!comboPreamp.Items.Contains("Off"))
                                        comboPreamp.Items.Insert(1, "Off");
                                    if (!comboPreamp.Items.Contains("Pre1"))
                                        comboPreamp.Items.Insert(2, "Pre1");
                                    if (!comboPreamp.Items.Contains("Pre2"))
                                        comboPreamp.Items.Insert(3, "Pre2");

                                    if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                        comboPreamp.SelectedIndex = 1; // Off
                                }                                
                            }
                            break;
                    }
                }
                */

                if (rx1_band != old_band || initializing)
                {

                    //================================================================================           
                    // ke9ns ADD for use by scanner so it knows which band button your on currently

                    ScanControl.ScanRST = 0;


                    if (RX1Band == Band.B160M)
                    {
                        ScanControl.freq_Low = 1.8;
                        ScanControl.freq_High = 2.0;
                    }
                    else if (RX1Band == Band.B80M)
                    {
                        ScanControl.freq_Low = 3.6;
                        ScanControl.freq_High = 4.0;
                    }
                    else if (RX1Band == Band.B60M)
                    {
                        ScanControl.freq_Low = 5.3;
                        ScanControl.freq_High = 5.6;
                    }
                    else if (RX1Band == Band.B40M)
                    {
                        ScanControl.freq_Low = 7.0;
                        ScanControl.freq_High = 7.3;
                    }
                    else if (RX1Band == Band.B30M)
                    {
                        ScanControl.freq_Low = 10.1;
                        ScanControl.freq_High = 10.15;
                    }
                    else if (RX1Band == Band.B20M)
                    {
                        ScanControl.freq_Low = 14.150;
                        ScanControl.freq_High = 14.35;
                    }
                    else if (RX1Band == Band.B17M)
                    {
                        ScanControl.freq_Low = 18.11;
                        ScanControl.freq_High = 18.168;
                    }
                    else if (RX1Band == Band.B15M)
                    {
                        ScanControl.freq_Low = 21.2;
                        ScanControl.freq_High = 21.45;
                    }
                    else if (RX1Band == Band.B12M)
                    {
                        ScanControl.freq_Low = 24.93;
                        ScanControl.freq_High = 24.990;
                    }
                    else if (RX1Band == Band.B10M)
                    {
                        ScanControl.freq_Low = 28.0;
                        ScanControl.freq_High = 29.7;
                    }
                    else if (RX1Band == Band.B6M)
                    {
                        ScanControl.freq_Low = 50.0;
                        ScanControl.freq_High = 54.0;
                    }
                    else if (RX1Band == Band.B2M)
                    {
                        ScanControl.freq_Low = 144.0;
                        ScanControl.freq_High = 148.0;
                    }
                    else if (RX1Band == Band.VHF0)
                    {
                        ScanControl.freq_Low = 144.0;
                        ScanControl.freq_High = 148.0;
                    }
                    else if (RX1Band == Band.VHF1)
                    {
                        ScanControl.freq_Low = 430.0;
                        ScanControl.freq_High = 450.0;
                    }
                    else if (RX1Band == Band.BLMF)
                    {
                        ScanControl.freq_Low = 0.2;
                        ScanControl.freq_High = 1.8;
                    }
                    else if (RX1Band == Band.B120M)
                    {
                        ScanControl.freq_Low = 2.3;
                        ScanControl.freq_High = 3.0;
                    }
                    else if (RX1Band == Band.B90M)
                    {
                        ScanControl.freq_Low = 3.0;
                        ScanControl.freq_High = 3.5;
                    }
                    else if (RX1Band == Band.B61M)
                    {
                        ScanControl.freq_Low = 4.0;
                        ScanControl.freq_High = 5.3;
                    }
                    else if (RX1Band == Band.B49M)
                    {
                        ScanControl.freq_Low = 5.4;
                        ScanControl.freq_High = 7.0;
                    }
                    else if (RX1Band == Band.B41M)
                    {
                        ScanControl.freq_Low = 7.2;
                        ScanControl.freq_High = 9.0;
                    }
                    else if (RX1Band == Band.B31M)
                    {
                        ScanControl.freq_Low = 9.0;
                        ScanControl.freq_High = 9.99;
                    }
                    else if (RX1Band == Band.B25M)
                    {
                        ScanControl.freq_Low = 10.0;
                        ScanControl.freq_High = 13.57;
                    }
                    else if (RX1Band == Band.B22M)
                    {
                        ScanControl.freq_Low = 13.57;
                        ScanControl.freq_High = 13.87;
                    }
                    else if (RX1Band == Band.B19M)
                    {
                        ScanControl.freq_Low = 15.1;
                        ScanControl.freq_High = 17.0;
                    }
                    else if (RX1Band == Band.B16M)
                    {
                        ScanControl.freq_Low = 17.0;
                        ScanControl.freq_High = 18.0;
                    }
                    else if (RX1Band == Band.B14M)
                    {
                        ScanControl.freq_Low = 18.0;
                        ScanControl.freq_High = 21.0;
                    }
                    else if (RX1Band == Band.B13M)
                    {
                        ScanControl.freq_Low = 21.0;
                        ScanControl.freq_High = 25.0;
                    }
                    else if (RX1Band == Band.B11M)
                    {
                        ScanControl.freq_Low = 25.0;
                        ScanControl.freq_High = 28.0;
                    }


                    ScanForm.lowFBox.Text = ScanControl.freq_Low.ToString("f6");

                    ScanForm.highFBox.Text = ScanControl.freq_High.ToString("f6");

                    //============================================================== ke9ns end


                    WBIRRX1Holdoff();

                    // save values for old band
                    rx1_agct_by_band[(int)old_band] = ptbRF.Value;

                    RX1PreampMode = rx1_preamp_by_band[(int)value];
                    RF = rx1_agct_by_band[(int)value];
                    ptbRF_Scroll(this, EventArgs.Empty);

                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            if (!fwc_init) break;

                            if (current_ant_mode == AntMode.Expert)
                            {
                                // set saved values for new band
                                int band = (int)value;
                                if (rx1_xvtr_index >= 0)   band = (int)Band.VHF0 + rx1_xvtr_index;

                                if (rx1_ant != FWCAnt.SIG_GEN)
                                {
                                    if (FWCEEPROM.VUOK &&
                                    (rx1_band == Band.VHF0 || rx1_band == Band.VHF1 || // going to VU band
                                     old_band == Band.VHF0 || old_band == Band.VHF1)) // coming from VU band
                                        vu_ant = true;
                                    RX1Ant = rx1_ant_by_band[band];
                                    if (vu_ant) vu_ant = false;
                                }
                                if (rx1_ant != FWCAnt.RX1IN) RX1Loop = rx1_loop_by_band[band];
                            }
                            else // Simple antenna mode
                            {
                                if (FWCEEPROM.VUOK &&
                                    (rx1_band == Band.VHF0 || rx1_band == Band.VHF1 || // going to VU band
                                     old_band == Band.VHF0 || old_band == Band.VHF1)) // coming from VU band
                                {
                                    vu_ant = true;
                                    RX1Ant = rx1_ant;
                                    vu_ant = false;
                                }
                            }

                            Band b = rx1_band;
                            if (rx1_xvtr_index >= 0) b = lo_band;

                            if (fwc_init && FWCEEPROM.VUOK)
                            {
                                switch(rx1_xvtr_index)
                                {
                                    case 0: // 2m on 19-23MHz
                                        b = Band.B15M;
                                        break;
                                    case 1: // 70cm on 30-50MHz
                                        b = Band.B6M;
                                        break;
                                }
                            }

                            RX1DisplayCalOffset = rx1_level_table[(int)b][0];
                            rx1_preamp_offset[(int)PreampMode.OFF] = 0.0f;
                            rx1_preamp_offset[(int)PreampMode.HIGH] = rx1_level_table[(int)b][1];
                            rx1_meter_cal_offset = rx1_level_table[(int)b][2];
                            UpdateDisplayOffsets();

                            if (FWCEEPROM.RX1ImageVer == 5)
                            {
                                dsp.GetDSPRX(0, 0).SetRXCorrectIQW(rx1_image_gain_table[(int)b], rx1_image_phase_table[(int)b]);
                                dsp.GetDSPRX(0, 1).SetRXCorrectIQW(rx1_image_gain_table[(int)b], rx1_image_phase_table[(int)b]);
                            }

                            Audio.IQGain = 1.0f + 0.001f * rx1_image_gain_table[(int)b];
                            Audio.IQPhase = 0.001f * rx1_image_phase_table[(int)b];

                            Debug.WriteLine("band value " + value);

                            if (fwcAntForm != null && !fwcAntForm.IsDisposed)   fwcAntForm.SetBand(value);

                            break;
                        case Model.FLEX3000:
                            if (!fwc_init) break;
                            b = rx1_band;
                            if (rx1_xvtr_index >= 0) b = lo_band;
                            RX1DisplayCalOffset = rx1_level_table[(int)b][0];
                            rx1_preamp_offset[(int)PreampMode.OFF] = rx1_level_table[(int)b][1];
                            rx1_preamp_offset[(int)PreampMode.LOW] = 0.0f;
                            rx1_preamp_offset[(int)PreampMode.MED] = rx1_level_table[(int)b][1] + rx1_level_table[(int)b][2];
                            rx1_preamp_offset[(int)PreampMode.HIGH] = rx1_level_table[(int)b][2];
                            rx1_meter_cal_offset = rx1_level_table[(int)b][0] + 27.2f;
                            UpdateDisplayOffsets();

                            if (FWCEEPROM.RX1ImageVer == 4)
                            {
                                dsp.GetDSPRX(0, 0).SetRXCorrectIQW(rx1_image_gain_table[(int)b], rx1_image_phase_table[(int)b]);
                                dsp.GetDSPRX(0, 1).SetRXCorrectIQW(rx1_image_gain_table[(int)b], rx1_image_phase_table[(int)b]);
                            }

                            Audio.IQGain = 1.0f + 0.001f * rx1_image_gain_table[(int)b];
                            Audio.IQPhase = 0.001f * rx1_image_phase_table[(int)b];
                            break;
                        case Model.FLEX1500:
                            if (!hid_init) break;
                            b = rx1_band;
                            if (current_ant_mode == AntMode.Expert)
                            {
                                int band = (int)value;
                                if (rx1_xvtr_index >= 0)
                                    band = (int)Band.VHF0 + rx1_xvtr_index;

                                if (rx_ant_1500 != HIDAnt.BITE)
                                    RXAnt1500 = rx_ant_1500_by_band[band];
                            }
                            RX1DisplayCalOffset = rx1_level_table[(int)b][0];
                            rx1_preamp_offset[(int)PreampMode.OFF] = rx1_level_table[(int)b][1] + 10.0f; // -10
                            rx1_preamp_offset[(int)PreampMode.LOW] = rx1_level_table[(int)b][1]; // 0
                            rx1_preamp_offset[(int)PreampMode.MED] = +10.0f; // +10
                            rx1_preamp_offset[(int)PreampMode.HIGH] = 0.0f; // +20
                            rx1_preamp_offset[(int)PreampMode.LAST] = -10.0f; // +30
                            rx1_meter_cal_offset = rx1_level_table[(int)b][0] + 27.2f;
                            UpdateDisplayOffsets();

                            dsp.GetDSPRX(0, 0).SetRXCorrectIQW(rx1_image_gain_table[(int)b], rx1_image_phase_table[(int)b]);
                            dsp.GetDSPRX(0, 1).SetRXCorrectIQW(rx1_image_gain_table[(int)b], rx1_image_phase_table[(int)b]);

                            //Audio.IQGain = 1.0f + 0.001f * rx1_image_gain_table[(int)b];
                            //Audio.IQPhase = 0.001f * rx1_image_phase_table[(int)b];

                            if (hidAntForm != null && !hidAntForm.IsDisposed)
                                hidAntForm.SetBand(value);
                            break;
                    } // current model



                } // rx1_band != oldBand
            }
        } // rx1_band

        private string BandToString(Band b)
        {
            string ret = "GEN";
            switch (b)
            {
                case Band.GEN: ret = "GEN"; break;
                case Band.B160M: ret = "160m"; break;
                case Band.B80M: ret = "80m"; break;
                case Band.B60M: ret = "60m"; break;
                case Band.B40M: ret = "40m"; break;
                case Band.B30M: ret = "30m"; break;
                case Band.B20M: ret = "20m"; break;
                case Band.B17M: ret = "17m"; break;
                case Band.B15M: ret = "15m"; break;
                case Band.B12M: ret = "12m"; break;
                case Band.B10M: ret = "10m"; break;
                case Band.B6M: ret = "6m"; break;
                case Band.B2M: ret = "2m"; break;
                case Band.WWV: ret = "WWV"; break;

                case Band.BLMF: ret = "LMF"; break;  // ke9ns add
                case Band.B120M: ret = "120m"; break;
                case Band.B90M: ret = "90m"; break;
                case Band.B61M: ret = "61m"; break;
                case Band.B49M: ret = "49m"; break;
                case Band.B41M: ret = "41m"; break;
                case Band.B31M: ret = "31m"; break;
                case Band.B25M: ret = "25m"; break;
                case Band.B22M: ret = "22m"; break;
                case Band.B19M: ret = "19m"; break;
                case Band.B16M: ret = "16m"; break;
                case Band.B14M: ret = "14m"; break;
                case Band.B13M: ret = "13m"; break;
                case Band.B11M: ret = "11m"; break;

                case Band.VHF0: ret = "VU 2m"; break;
                case Band.VHF1: ret = "VU 70cm"; break;
                case Band.VHF2: ret = "VHF2"; break;
                case Band.VHF3: ret = "VHF3"; break;
                case Band.VHF4: ret = "VHF4"; break;
                case Band.VHF5: ret = "VHF5"; break;
                case Band.VHF6: ret = "VHF6"; break;
                case Band.VHF7: ret = "VHF7"; break;
                case Band.VHF8: ret = "VHF8"; break;
                case Band.VHF9: ret = "VHF9"; break;
                case Band.VHF10: ret = "VHF10"; break;
                case Band.VHF11: ret = "VHF11"; break;
                case Band.VHF12: ret = "VHF12"; break;
                case Band.VHF13: ret = "VHF13"; break;
                default: ret = "GEN"; break;
            }

            return ret;
        }

        private Band StringToBand(string s)
        {
            Band b = Band.GEN;
            switch (s)
            {
                case "GEN": b = Band.GEN; break;
                case "160m": b = Band.B160M; break;
                case "80m": b = Band.B80M; break;
                case "60m": b = Band.B60M; break;
                case "40m": b = Band.B40M; break;
                case "20m": b = Band.B20M; break;
                case "17m": b = Band.B17M; break;
                case "15m": b = Band.B15M; break;
                case "12m": b = Band.B12M; break;
                case "10m": b = Band.B10M; break;                
                case "6m": b = Band.B6M; break;
                case "2m": b = Band.B2M; break;
                case "WWV": b = Band.WWV; break;

                case "LMF": b = Band.BLMF; break; // ke9ns add
                case "120m": b = Band.B120M; break;
                case "90m": b = Band.B90M; break;
                case "61m": b = Band.B61M; break;
                case "49m": b = Band.B49M; break;
                case "41m": b = Band.B41M; break;
                case "31m": b = Band.B31M; break;
                case "25m": b = Band.B25M; break;
                case "22m": b = Band.B22M; break;
                case "19m": b = Band.B19M; break;
                case "16m": b = Band.B16M; break;
                case "14m": b = Band.B14M; break;
                case "13m": b = Band.B13M; break;
                case "11m": b = Band.B11M; break;

                case "VU 2m": b = Band.VHF0; break;
                case "VU 70cm": b = Band.VHF1; break;
                case "VHF2": b = Band.VHF2; break;
                case "VHF3": b = Band.VHF3; break;
                case "VHF4": b = Band.VHF4; break;
                case "VHF5": b = Band.VHF5; break;
                case "VHF6": b = Band.VHF6; break;
                case "VHF7": b = Band.VHF7; break;
                case "VHF8": b = Band.VHF8; break;
                case "VHF9": b = Band.VHF9; break;
                case "VHF10": b = Band.VHF10; break;
                case "VHF11": b = Band.VHF11; break;
                case "VHF12": b = Band.VHF12; break;
                case "VHF13": b = Band.VHF13; break;
            }

            return b;
        }

		private Band rx2_band;
		public Band RX2Band
		{
			get { return rx2_band; }
			set
			{
                if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK)
                    return;

				Band old_band = rx2_band;
				rx2_band = value;
                //comboRX2Band.Focus();

				//comboRX2Band.SelectedIndex = Math.Min(Math.Max(0, (int)value), comboRX2Band.Items.Count-1);
                comboRX2Band.Text = BandToString(rx2_band);
                //btnHidden.Focus();

				Band lo_band = Band.FIRST;
				if(rx2_xvtr_index >= 0)
                    lo_band = BandByFreq(xvtrForm.TranslateFreq(VFOBFreq), -1, false, current_region);

				rx2_preamp_by_band[(int)old_band] = rx2_preamp_mode;

					double freq = VFOBFreq;
					if(freq < 2.0)
					{
						if(chkRX2Preamp.Enabled) chkRX2Preamp.Enabled = false;
						if(chkRX2Preamp.Checked) chkRX2Preamp.Checked = false;
					}
					else if(freq >= 28.0 && rx2_xvtr_index < 0 && !enable_6m_preamp)
					{
						if(chkRX2Preamp.Enabled) chkRX2Preamp.Enabled = false;
						if(!chkRX2Preamp.Checked) chkRX2Preamp.Checked = true;
					}
					else if(!chkRX2Preamp.Enabled) chkRX2Preamp.Enabled = true;

				if(rx2_band != old_band || initializing)
				{
                    WBIRRX2Holdoff();

					// save values for old band
					rx2_agct_by_band[(int)old_band] = ptbRX2RF.Value;

					RX2PreampMode = rx2_preamp_by_band[(int)value];
					RX2RF = rx2_agct_by_band[(int)value];
                    ptbRX2RF_Scroll(this, EventArgs.Empty);

                    if (current_ant_mode == AntMode.Expert)
                    {
                        int band = (int)value;
                        if (rx2_xvtr_index >= 0)
                            band = (int)Band.VHF0 + rx2_xvtr_index;

                        if (FWCEEPROM.VUOK &&
                            (rx2_band == Band.VHF0 || rx2_band == Band.VHF1 || // going to a VU band
                             old_band == Band.VHF0 || old_band == Band.VHF1)) // coming from a VU band
                            vu_ant = true;
                        RX2Ant = rx2_ant_by_band[band];
                        if (vu_ant) vu_ant = false;
                    }
                    else // simple antenna mode
                    {
                        if (FWCEEPROM.VUOK &&
                            (rx2_band == Band.VHF0 || rx2_band == Band.VHF1 || // going to a VU band
                             old_band == Band.VHF0 || old_band == Band.VHF1)) // coming from a VU band
                        {
                            vu_ant = true;
                            RX2Ant = rx2_ant;
                            vu_ant = false;
                        }
                    }

					Band b = rx2_band;
					if(rx2_xvtr_index >= 0) b = lo_band;

                    if (FWCEEPROM.VUOK)
                    {
                        switch (rx2_xvtr_index)
                        {
                            case 0: // 2m on 19-23MHz
                                b = Band.B15M;
                                break;
                            case 1: // 70cm on 30-50MHz
                                b = Band.B6M;
                                break;
                        }
                    }

					RX2DisplayCalOffset = rx2_level_table[(int)b][0];
					rx2_preamp_offset[(int)PreampMode.OFF] = 0.0f;
					rx2_preamp_offset[(int)PreampMode.HIGH] = rx2_level_table[(int)b][1];
					rx2_meter_cal_offset = rx2_level_table[(int)b][2];
					UpdateDisplayOffsets();

                    if (FWCEEPROM.RX2ImageVer == 5)
                    {
                        dsp.GetDSPRX(1, 0).SetRXCorrectIQW(rx2_image_gain_table[(int)b], rx2_image_phase_table[(int)b]);
                        dsp.GetDSPRX(1, 1).SetRXCorrectIQW(rx2_image_gain_table[(int)b], rx2_image_phase_table[(int)b]);
                    }		

					if(fwcAntForm != null && !fwcAntForm.IsDisposed) fwcAntForm.SetBand(value);
				}
			}
		}

        //===================================================
		private Band tx_band;
		public Band TXBand
		{
			get { return tx_band; }
			set
			{                
				Band old_band = tx_band;
				tx_band = value;

				Band lo_band = Band.FIRST;

                if (tx_xvtr_index >= 0)
                {
                    lo_band = BandByFreq(xvtrForm.TranslateFreq(VFOAFreq), -1, true, current_region);
                }

                /*
                if (FWCEEPROM.VUOK)//  && tx_xvtr_index != last_tx_xvtr_index)
                {
                    if (tx_xvtr_index == 0)
                    {
                        FWC.SetVU_TXBand(0);
                    }
                    else if (tx_xvtr_index == 1)
                    {
                        FWC.SetVU_TXBand(1);
                    }
                    else
                    {
                        FWC.SetVU_TXBand(2);
                    }
                }     
*/
				if(tx_band != old_band || initializing)
				{
                    WBIRRX1Holdoff();

					// save values for old band
					int old_pwr = ptbPWR.Value;
					power_by_band[(int)old_band] = old_pwr;

                    //if (tx_xvtr_index < 0)
                        PWR = power_by_band[(int)value];

					ptbPWR_Scroll(this, EventArgs.Empty);

                    // save FM TX Offset
                    fm_tx_offset_by_band_mhz[(int)old_band] = fm_tx_offset_mhz;
                    udFMOffset.Value = (decimal)(fm_tx_offset_by_band_mhz[(int)value]);

                    switch(current_model)
                    {
                        case Model.FLEX5000:
                            if(!fwc_init) break;

                            if (FWCEEPROM.VUOK && tx_xvtr_index != last_tx_xvtr_index)
                            {
                                if (tx_xvtr_index == 0)
                                {
                                    FWC.SetVU_TXBand(0);
                                }
                                else if (tx_xvtr_index == 1)
                                {
                                    FWC.SetVU_TXBand(1);
                                    //SetVURXPath();
                                }
                                else
                                {
                                    FWC.SetVU_TXBand(2);
                                }
                            }

                            if (value == Band.B6M && (byte)FWCEEPROM.RFIORev < 34)
                            {
                                FWC.SetTXAnt(3);
                                tx_ant_by_band[(int)value] = FWCAnt.ANT3;
                            }

                            if (old_band == Band.B6M && (byte)FWCEEPROM.RFIORev < 34 && current_ant_mode == AntMode.Simple)
                                tx_ant_6m_reset = true;

                            if (current_ant_mode == AntMode.Expert)
                            {
                                int band = (int)value;
                                if (tx_xvtr_index >= 0)  band = (int)Band.VHF0 + tx_xvtr_index;

                                TXAnt = tx_ant_by_band[band];

                                FWCAmpTX1 = tx1_by_band[band];
                                FWCAmpTX2 = tx2_by_band[band];
                                FWCAmpTX3 = tx3_by_band[band];
                            }
                            else if (value != Band.B6M)  TXAnt = tx_ant;

                            Band b = tx_band;

                            if (tx_xvtr_index >= 0)  b = lo_band;

                            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
                            {
                                switch (tx_xvtr_index)
                                {
                                    case 0: // 2m on 19-23MHz
                                        b = Band.B15M;
                                        break;
                                    case 1: // 70cm on 30-50MHz
                                        b = Band.B10M;
                                        break;
                                }
                            }

                            /*if (flex5000DebugForm != null && !flex5000DebugForm.IsDisposed)
                            {
                                flex5000DebugForm.SetTRXPot(0, (byte)tx_carrier_table[(int)b][0]);
                                flex5000DebugForm.SetTRXPot(1, (byte)tx_carrier_table[(int)b][1]);
                                flex5000DebugForm.SetTRXPot(2, (byte)tx_carrier_table[(int)b][2]);
                                flex5000DebugForm.SetTRXPot(3, (byte)tx_carrier_table[(int)b][3]);
                            }*/

                            if (fwcAtuForm != null && !fwcAtuForm.IsDisposed && !fwcAtuForm.ATUEnabledOnBandChange())
                            {
                                switch (fwcAtuForm.CurrentTuneMode)
                                {
                                    case FWCATUMode.SemiAutomatic:
                                        fwcAtuForm.CurrentTuneMode = FWCATUMode.Bypass;
                                        break;
                                }
                                FWCATUBypass();
                            }

                            /*uint temp = 0;
                            for (int i = 0; i < 4; i++)
                                temp += (uint)((byte)tx_carrier_table[(int)b][i] << (8 * (3 - i)));
                            FWC.SetTRXPot(temp);*/


                            Debug.WriteLine("TXband value " + value);

                            if (!extended) // ke9ns add this if statement. extended uses ham bands to transmit on but antenna switch gets confused when RXBand and TXBand dont match when in SWL bands
                            {
                                if (fwcAntForm != null && !fwcAntForm.IsDisposed) fwcAntForm.SetBand(value); // ke9ns test commented this out
                            }

                            bool tx1, tx2, tx3;
                            if (flex5000RelayForm != null) flex5000RelayForm.UpdateRelayState(out tx1, out tx2, out tx3);
                            break;

                        case Model.FLEX3000:
                            if(!fwc_init) break;

                            b = tx_band;
                            if (tx_xvtr_index >= 0) b = lo_band;

                            /*if (flex5000DebugForm != null && !flex5000DebugForm.IsDisposed)
                            {
                                flex5000DebugForm.SetTRXPot(0, (byte)tx_carrier_table[(int)b][0]);
                                flex5000DebugForm.SetTRXPot(1, (byte)tx_carrier_table[(int)b][1]);
                                flex5000DebugForm.SetTRXPot(2, (byte)tx_carrier_table[(int)b][2]);
                                flex5000DebugForm.SetTRXPot(3, (byte)tx_carrier_table[(int)b][3]);
                            }*/

                            if (flex3000ATUForm != null && !flex3000ATUForm.IsDisposed)
                            {
                                flex3000ATUForm.DoBypass();
                                FWCATUBypass();
                            }                            

                            /*temp = 0;
                            for (int i = 0; i < 4; i++)
                                temp += (uint)((byte)tx_carrier_table[(int)b][i] << (8 * (3 - i)));
                            FWC.SetTRXPot(temp);*/
                            break;
                            
                        case Model.FLEX1500:
                            if (current_ant_mode == AntMode.Expert)
                            {
                                int band = (int)value;
                                if (tx_xvtr_index >= 0)
                                    band = (int)Band.VHF0 + tx_xvtr_index;

                                HIDAnt old_ant = tx_ant_1500;
                                TXAnt1500 = tx_ant_1500_by_band[band];
                                if (old_ant != tx_ant_1500)
                                    ptbPWR_Scroll(this, EventArgs.Empty);
                            }
                            break;
                    }

                    switch (current_model)
                    {
                        case Model.FLEX5000:
                        case Model.FLEX3000:
                        case Model.FLEX1500:
                            Band b = tx_band;
                            if (tx_xvtr_index >= 0) b = lo_band;
                            
                            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
                            {
                                switch (tx_xvtr_index)
                                {
                                    case 0: // 2m on 19-23MHz
                                        b = Band.B15M;
                                        break;
                                    case 1: // 70cm on 30-50MHz
                                        b = Band.B10M;
                                        break;
                                }
                            }

                            if (setupForm != null && !setupForm.IsDisposed)
                            {
                                setupForm.ImageGainTX = tx_image_gain_table[(int)b];
                                setupForm.ImagePhaseTX = tx_image_phase_table[(int)b];
                            }
                            break;
                    }

                    if (tx_band == Band.B60M)
                    {
                        tx_filter_low_save = tx_filter_low;
                        tx_filter_high_save = tx_filter_high;

                        if (tx_filter_low < 100)
                            setupForm.TXFilterLow = 100;

                        if(tx_filter_high > 2900)
                            setupForm.TXFilterHigh = 2900;
                    }

                    if(old_band == Band.B60M)
                    {
                        if(tx_filter_low != tx_filter_low_save)
                            setupForm.TXFilterLow = tx_filter_low_save;

                        if(tx_filter_high != tx_filter_high_save)
                            setupForm.TXFilterHigh = tx_filter_high_save;
                    }
				}
			}
		} // TXBand

        private int tx_filter_low_save = 200;
        private int tx_filter_high_save = 3100;

		// Added 06/24/05 BT for CAT commands
		public bool CATVFOLock
		{
			get{return chkVFOLock.Checked;}
			set{chkVFOLock.Checked = value;}
		}

		public string CATGetVersion()
		{
			Assembly assembly = Assembly.GetExecutingAssembly();
			FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
			//			int current_version = VersionTextToInt(fvi.FileVersion);
			return fvi.FileVersion;
		}

		// Added 07/30/05 BT for cat commands next 8 functions

		public string CATReadSigStrength()
		{
			float num = 0f;
			num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                rx1_preamp_offset[(int)rx1_preamp_mode] +
                rx1_filter_size_cal_offset +
                rx1_path_offset +
                rx1_xvtr_gain_offset;
			return num.ToString("f1")+" dBm";
		}

		public string CATReadAvgStrength()
		{
			float num = 0f;
			num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.AVG_SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                rx1_preamp_offset[(int)rx1_preamp_mode] +
                rx1_filter_size_cal_offset +
                rx1_path_offset +
                rx1_xvtr_gain_offset;
			return num.ToString("f1")+" dBm";
		}

        //=======================================================================================
        // ke9ns add
        public int ReadAvgStrength(uint sub ) // DttSP.MeterType.AVG_SIGNAL_STRENGTH
        {
            float num = 0f;
            num = DttSP.CalculateRXMeter(0, sub, DttSP.MeterType.AVG_SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                rx1_preamp_offset[(int)rx1_preamp_mode] +
                rx1_filter_size_cal_offset +
                rx1_path_offset +
                rx1_xvtr_gain_offset;
            return (int)num;
        }

        //=======================================================================================
        // ke9ns add
        public int ReadStrength(uint sub) // DttSP.MeterType.AVG_SIGNAL_STRENGTH
        {
            float num = 0f;
            num = DttSP.CalculateRXMeter(0, sub, DttSP.MeterType.SIGNAL_STRENGTH);
            num = num +
                rx1_meter_cal_offset +
                rx1_preamp_offset[(int)rx1_preamp_mode] +
                rx1_filter_size_cal_offset +
                rx1_path_offset +
                rx1_xvtr_gain_offset;
            return (int)num;

        } // int ReadStrength(uint sub)



       
        public Mutex WWV_mutex = new Mutex();                // ke9ns add 

        public float[] WWV_data = new float[16384];          // ke9ns add    used to get out_l_ptr1 audio stream in 2048 pieces at a time

        public int WWVframeCount = 0;

        public int WWV_Count = 0;

        public int WWVTone = 0;                             // ke9ns add   Magnetude of the Tone received in audio.cs routine

        public bool WWVReady = false;                       // ke9ns add  let you know when a new magnetude is updated
        public  Stopwatch WWVST = new Stopwatch();           // ke9ns add 

        //=======================================================================================
        // ke9ns add
        public void ReadScope()      // get dBm value at dead center of current spectrum (defined by LOW / HIGH filters)
        {
            WWV_mutex.WaitOne();

          //  Debug.WriteLine("scopetime" + scope_time);
            fixed (float* ptr = &wwvbuf[0])
            {
                DttSP.GetScope(0, ptr, 2048);  // scope time = 50
            }

            WWV_mutex.ReleaseMutex();


        } //  ReadScope()


        //=======================================================================================
        // ke9ns add
        public int ReadSpectrum()      // get dBm value at dead center of current spectrum (defined by LOW / HIGH filters)
        {
            float[] buf = new float[Display.BUFFER_SIZE];
          
            float num = 0f;

            WWV_mutex.WaitOne();
           
            fixed (float* ptr = &buf[0])            // ke9ns prevent garbage collecion from moving this pointer data
            {
                DttSP.GetSpectrum(0, ptr);      // get the spectrum values
            }
        
            WWV_mutex.ReleaseMutex();
         
            num = buf[2047]; // get data from middle of spectrum 

            num = num + Display.RX1DisplayCalOffset + Display.RX1PreampOffset;


            return (int)num;

        } //  ReadSpectrum(uint sub) 


        //=======================================================================================
        // ke9ns
        public void ReadPLL(uint c, float* a, float* b)     // 
        {
            DttSP.GetSAMPLLvals(0, c, a, b);            // ke9ns save original a and b values to put back after you getfreq
            
        }

        //=======================================================================================
        // ke9ns
        public void SetPLL(uint c, float a, float b)        // a=alpha, b=beta
        {
          
            DttSP.SetSAMPLLvals(0, c, a, b);     // ke9ns 
        }

        //=======================================================================================
        // ke9ns
        public void SetPLL1(uint c, float a, float b)        // a=alpha, b=beta
        {
            float a1 = a * 0.1f;
            float b1 = 0.25f * a1 * a1;            // ke9ns a1 = 10% of original value, b1= 25% of a1^2

            DttSP.SetSAMPLLvals(0, c, a1, b1);     // ke9ns 
        }


        //=======================================================================================
        // ke9ns
        public float ReadPLLFreq(uint c )     // 
        {
            float temp;
            DttSP.GetSAMFreq(0, c, &temp);                   // ke9ns ?? returns a freq matching the SetPLL ?
            return temp;
        }


        //==============================================================
        public string CATReadADC_L()
		{
			float num = 0f;
			num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_REAL);
			return num.ToString("f1")+" dBFS";
		}

		public string CATReadADC_R()
		{
			float num = 0f;
			num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_IMAG);
			return num.ToString("f1")+" dBFS";
		}

		public string CATReadALC()
		{
			float num = 0f;

            if (peak_tx_meter) 
                num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC_PK));
            else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC) + 3.0f);
			return num.ToString("f0")+" dB";
		}

		public string CATReadFwdPwr()
		{
            string ret_val = "";
			double power = 0.0;
			float num = 0f;
            switch(current_model)
            {
              /*  case Model.SDR1000:            
                    if (pa_present && VFOAFreq < 30.0)
                    {
                        //pa_power_mutex.WaitOne();
                        power = PAPower(pa_fwd_power);
                        //pa_power_mutex.ReleaseMutex();

                        ret_val = power.ToString("f0") + " W";
                    }
                    else
                    {
                        num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(0, DttSP.MeterType.PWR));
                        num *= (float)((double)ptbPWR.Value * 0.01);
                        ret_val = num.ToString("f2") + " W";
                    }
                    break;
              */  case Model.FLEX5000:
                case Model.FLEX3000:          
                    power = FWCPAPower(pa_fwd_power);
                    ret_val = power.ToString("f0") + " W";
                    break;
                case Model.FLEX1500:
                    num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(0, DttSP.MeterType.PWR));
                    num *= (float)(5.0*(double)ptbPWR.Value / 70.0);
                    ret_val = num.ToString("f1") + " W";
                    break;
            }

            return ret_val;
		}

		public string CATReadPeakPwr()
		{
			float num = 0f;

			if(pa_present && VFOAFreq < 30.0)
			{
				num = (float)Math.Max(0.0,DttSP.CalculateTXMeter(0, DttSP.MeterType.ALC));
				num *= (float)ptbPWR.Value;
						
				meter_text_history[meter_text_history_index] = num;
				meter_text_history_index = (meter_text_history_index+1)%multimeter_text_peak_samples;
				float max = float.MinValue;
				for(int i=0; i < multimeter_text_peak_samples; i++)
				{
					if(meter_text_history[i] > max)
						max = meter_text_history[i];
				}
				num = max;

				return num.ToString("f0")+" W";
			}
			else
			{
				num = (float)Math.Max(0.0,DttSP.CalculateTXMeter(0, DttSP.MeterType.ALC));
				num *= (float)((float)ptbPWR.Value*0.01);
				return num.ToString("f2")+" W";
			}
		}

		public string CATReadRevPwr()
		{
			double power = 0.0;
            switch (current_model)
            {
              //  case Model.SDR1000:
               //     power = PAPower(pa_rev_power);
             //       break;
                case Model.FLEX5000:
                case Model.FLEX3000:
                    power = FWCPAPower(pa_rev_power);
                    break;
                default:
                    power = 0.0;
                    break;
            }

			return power.ToString("f0")+" W";
		}

		public string CATReadSWR()
		{
			double swr = 0.0;

            switch (current_model)
            {
              //  case Model.SDR1000:
              //      swr = SWR(pa_fwd_power, pa_rev_power);
             //       break;
                case Model.FLEX5000:
                case Model.FLEX3000:
                    swr = FWCSWR(pa_fwd_power, pa_rev_power);
                    break;
                default:
                    swr = 0.0;
                    break;
            }
			
            return swr.ToString("f1")+" : 1";
		}

		//*************end of 8 functions.

		private bool kw_auto_information = false;
		public bool KWAutoInformation
		{
			get{return kw_auto_information;}
			set{kw_auto_information = value;}
		}

#endregion

		private DSPMode rx1_dsp_mode = DSPMode.FIRST;
		public DSPMode RX1DSPMode
		{
			get { return rx1_dsp_mode; }
			set
			{
				RadioButtonTS r = null;
				switch(value)
				{
					case DSPMode.LSB:
						r = radModeLSB;
						break;
					case DSPMode.USB:
						r = radModeUSB;
						break;
					case DSPMode.DSB:
						r = radModeDSB;
						break;
					case DSPMode.CWL:
						r = radModeCWL;
						break;
					case DSPMode.CWU:
						r = radModeCWU;
						break;
					case DSPMode.FM:
						r = radModeFMN;
						break;
					case DSPMode.AM:
						r = radModeAM;
						break;
					case DSPMode.SAM:
						r = radModeSAM;
						break;
					case DSPMode.SPEC:
						r = radModeSPEC;
						break;
					case DSPMode.DIGL:
						r = radModeDIGL;
						break;
					case DSPMode.DIGU:
						r = radModeDIGU;
						break;
					case DSPMode.DRM:
						r = radModeDRM;
						break;
				}

				r.Checked = true;
			}
		} // RX1DSPMODE

		private DSPMode rx2_dsp_mode = DSPMode.FIRST;
		public DSPMode RX2DSPMode
		{
			get { return rx2_dsp_mode; }
			set
			{
				RadioButtonTS r = null;
				switch(value)
				{
					case DSPMode.LSB:
						r = radRX2ModeLSB;
						break;
					case DSPMode.USB:
						r = radRX2ModeUSB;
						break;
					case DSPMode.DSB:
						r = radRX2ModeDSB;
						break;
					case DSPMode.CWL:
						r = radRX2ModeCWL;
						break;
					case DSPMode.CWU:
						r = radRX2ModeCWU;
						break;
					case DSPMode.FM:
						r = radRX2ModeFMN;
						break;
					case DSPMode.AM:
						r = radRX2ModeAM;
						break;
					case DSPMode.SAM:
						r = radRX2ModeSAM;
						break;
					case DSPMode.DIGL:
						r = radRX2ModeDIGL;
						break;
					case DSPMode.DIGU:
						r = radRX2ModeDIGU;
						break;
					case DSPMode.DRM:
						r = radRX2ModeDRM;
						break;
				}

				r.Checked = true;
			}
		} // RX2DSPMODE

		private Filter rx1_filter = Filter.FIRST;
		public Filter RX1Filter
		{
			get { return rx1_filter; }
			set
			{
				RadioButtonTS r = null;
				switch(value)
				{
					case Filter.F1:
						r = radFilter1;
						break;
					case Filter.F2:
						r = radFilter2;
						break;
					case Filter.F3:
						r = radFilter3;
						break;
					case Filter.F4:
						r = radFilter4;
						break;
					case Filter.F5:
						r = radFilter5;
						break;
					case Filter.F6:
						r = radFilter6;
						break;
					case Filter.F7:
						r = radFilter7;
						break;
					case Filter.F8:
						r = radFilter8;
						break;
					case Filter.F9:
						r = radFilter9;
						break;
					case Filter.F10:
						r = radFilter10;
						break;
					case Filter.VAR1:
						r = radFilterVar1;
						break;
					case Filter.VAR2:
						r = radFilterVar2;
						break;
					case Filter.NONE:
						SetRX1Filter(Filter.NONE);
						break;
				}

				if(r != null)
				{
					if(r.Checked)
					{
						r.Checked = false;
					}

					r.Checked = true;
				}
			}
		}

     
		private Filter rx2_filter = Filter.FIRST;
		public Filter RX2Filter
		{
			get { return rx2_filter; }
			set
			{
				//comboRX2Filter.SelectedIndex = (int)value;
				RadioButtonTS r = null;
				switch(value)
				{
					case Filter.F1:
						r = radRX2Filter1;
						break;
					case Filter.F2:
						r = radRX2Filter2;
						break;
					case Filter.F3:
						r = radRX2Filter3;
						break;
					case Filter.F4:
						r = radRX2Filter4;
						break;
					case Filter.F5:
						r = radRX2Filter5;
						break;
					case Filter.F6:
						r = radRX2Filter6;
						break;
					case Filter.F7:
						r = radRX2Filter7;
						break;
					case Filter.VAR1:
						r = radRX2FilterVar1;
						break;
					case Filter.VAR2:
						r = radRX2FilterVar2;
						break;
					case Filter.NONE:
						SetRX2Filter(Filter.NONE);
						break;
				}

				if(r != null)
				{
					if(r.Checked)
					{
						r.Checked = false;
					}

					r.Checked = true;
				}
			}
		}

		private MeterRXMode current_meter_rx_mode = MeterRXMode.SIGNAL_STRENGTH;
		public MeterRXMode CurrentMeterRXMode
		{
			get { return current_meter_rx_mode; }
			set
			{
				string text = "";
				switch(value)
				{
					case MeterRXMode.SIGNAL_STRENGTH:
						text = "Signal";
						break;
					case MeterRXMode.SIGNAL_AVERAGE:
						text = "Sig Avg";
						break;
                    case MeterRXMode.SIGNAL_PEAK: // ke9ns ADD signal peak and hold meter
                        text = "Sig Pk";
                        break;
					case MeterRXMode.ADC_L:
						text = "ADC L";
						break;
					case MeterRXMode.ADC_R:
						text = "ADC R";
						break;
					case MeterRXMode.ADC2_L:
						text = "ADC2 L";
						break;
					case MeterRXMode.ADC2_R:
						text = "ADC2 R";
						break;
					case MeterRXMode.OFF:	// BT Added 7/24/05 for CAT commands
						text = "Off";
						break;
				}

				if(text == "") return;

				comboMeterRXMode.Text = text;
			}
		}

		private MeterRXMode rx2_meter_mode = MeterRXMode.SIGNAL_STRENGTH;
		public MeterRXMode RX2MeterMode
		{
			get { return rx2_meter_mode; }
			set
			{
				string text = "";
				switch(value)
				{
					case MeterRXMode.SIGNAL_STRENGTH:
						text = "Signal";
						break;
					case MeterRXMode.SIGNAL_AVERAGE:
						text = "Sig Avg";
						break;
                    case MeterRXMode.SIGNAL_PEAK: // ke9ns ADD signal peak and hold meter
                        text = "Sig Pk";
                        break;
					case MeterRXMode.ADC_L:
						text = "ADC L";
						break;
					case MeterRXMode.ADC_R:
						text = "ADC R";
						break;
					case MeterRXMode.ADC2_L:
						text = "ADC2 L";
						break;
					case MeterRXMode.ADC2_R:
						text = "ADC2 R";
						break;
					case MeterRXMode.OFF:	// BT Added 7/24/05 for CAT commands
						text = "Off";
						break;
				}

				if(text == "") return;

				comboRX2MeterMode.Text = text;
			}
		} // RX2metermode

      //=====================================================================================================
      // ke9ns for RX1 meter

		private MeterTXMode current_meter_tx_mode = MeterTXMode.FIRST;
        public MeterTXMode CurrentMeterTXMode
		{
			get { return current_meter_tx_mode; }
			set
			{
				string text = "";
				switch(value)
				{
					case MeterTXMode.FORWARD_POWER:
						text = "Fwd Pwr";
						break;
					case MeterTXMode.REVERSE_POWER:
						text = "Ref Pwr";
						break;
					case MeterTXMode.MIC:
						text = "Mic";
						break;
					case MeterTXMode.EQ:
						text = "EQ";
						break;
					case MeterTXMode.LEVELER:
						text = "Leveler";
						break;
					case MeterTXMode.LVL_G:
						text = "Lvl Gain";
						break;
					case MeterTXMode.CPDR:
						text = "CPDR";
						break;
					case MeterTXMode.ALC:
						text = "ALC";
						break;					
					case MeterTXMode.ALC_G:
						text = "ALC Comp";
						break;					
					case MeterTXMode.SWR:
						text = "SWR";
						break;
					case MeterTXMode.OFF:		// BT Added 07/24/05 for CAT commands
						text = "Off";
						break;
				}
				if(text == "") return;

				comboMeterTXMode.Text = text;
			}

		} //currentmeterTXmode


        //==============================================================================================
        // ke9ns add  for 2nd TX meter function using the RX2 meter movement
        private MeterTXMode current_meter_tx1_mode = MeterTXMode.FIRST;
        public MeterTXMode CurrentMeterTX1Mode
        {
            get { return current_meter_tx1_mode; }
            set
            {
                string text = "";
                switch (value)
                {
                    case MeterTXMode.FORWARD_POWER:
                        text = "Fwd Pwr";
                        break;
                    case MeterTXMode.REVERSE_POWER:
                        text = "Ref Pwr";
                        break;
                    case MeterTXMode.MIC:
                        text = "Mic";
                        break;
                    case MeterTXMode.EQ:
                        text = "EQ";
                        break;
                    case MeterTXMode.LEVELER:
                        text = "Leveler";
                        break;
                    case MeterTXMode.LVL_G:
                        text = "Lvl Gain";
                        break;
                    case MeterTXMode.CPDR:
                        text = "CPDR";
                        break;
                    case MeterTXMode.ALC:
                        text = "ALC";
                        break;
                    case MeterTXMode.ALC_G:
                        text = "ALC Comp";
                        break;
                    case MeterTXMode.SWR:
                        text = "SWR";
                        break;
                    case MeterTXMode.OFF:       // BT Added 07/24/05 for CAT commands
                        text = "Off";
                        break;
                }
                if (text == "") return;

                comboMeterTX1Mode.Text = text;
            }

        } //currentmetertx1mode




        private int cw_pitch = 600;
		public int CWPitch
		{
			get { return cw_pitch; }
			set
			{
				int diff = cw_pitch - value;
				cw_pitch = value;
                //CWSynth.Pitch = value;

                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                        CWSynth.Pitch = cw_pitch;
                        break;
                    case DSPMode.CWU:
                        CWSynth.Pitch = -cw_pitch;
                        break;
                }

                Audio.SineFreq1 = cw_pitch;
                udCWPitch.Value = cw_pitch;
                Display.CWPitch = cw_pitch;
                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                    FWC.SetCWPitch((uint)cw_pitch);

				for(Filter f = Filter.F1; f<Filter.LAST; f++)
				{
					int low = rx1_filters[(int)DSPMode.CWL].GetLow(f);
					int high = rx1_filters[(int)DSPMode.CWL].GetHigh(f);
					string name = rx1_filters[(int)DSPMode.CWL].GetName(f);

					int bw = high - low;
					low = -cw_pitch - bw/2;
					high = -cw_pitch + bw/2;
					rx1_filters[(int)DSPMode.CWL].SetFilter(f, low, high, name);
					rx2_filters[(int)DSPMode.CWL].SetFilter(f, low, high, name); // n6vl

					low = rx1_filters[(int)DSPMode.CWU].GetLow(f);
					high = rx1_filters[(int)DSPMode.CWU].GetHigh(f);
					name = rx1_filters[(int)DSPMode.CWU].GetName(f);

					bw = high - low;
					low = cw_pitch - bw/2;
					high = cw_pitch + bw/2;
					rx1_filters[(int)DSPMode.CWU].SetFilter(f, low, high, name);
					rx2_filters[(int)DSPMode.CWU].SetFilter(f, low, high, name); // n6vl
				}

				switch(rx1_dsp_mode)
				{
					case DSPMode.CWL:                        
						diff = -diff;
						if(mox)
						{
							VFOAFreq += (double)diff/1e6;
							if(chkVFOSplit.Checked) VFOBFreq += (double)diff/1e6;
						}
						else
						{
							txtVFOAFreq_LostFocus(this, EventArgs.Empty);
							txtVFOBFreq_LostFocus(this, EventArgs.Empty); // n6vl
						}
						RX1Filter = rx1_filter;
						RX2Filter = rx2_filter; // n6vl
						break;
					case DSPMode.CWU:
						if(mox)
						{
							VFOAFreq += (double)diff/1e6;
							if(chkVFOSplit.Checked) VFOBFreq += (double)diff/1e6;
						}
						else
						{
							txtVFOAFreq_LostFocus(this, EventArgs.Empty);
							txtVFOBFreq_LostFocus(this, EventArgs.Empty); // n6vl
						}
						RX1Filter = rx1_filter;
						RX2Filter = rx2_filter; // n6vl
						break;
				}
			}
		}

		private int histogram_hang_time = 100;
		public int HistogramHangTime
		{
			get { return histogram_hang_time; }
			set { histogram_hang_time = value; }
		}

      //  string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;


        public double VFOAFreq // output in mhz  7.185 mhz
		{
			get 
			{
				try
				{
					return double.Parse(txtVFOAFreq.Text);
				}
				catch(Exception)
				{
                    Debug.WriteLine("VFOAFreq convert string to double failed");
					return 0;
				}
			}
			set
			{
				if(vfo_lock || setupForm == null) return;

              

                if (!this.InvokeRequired)
                {
                    txtVFOAFreq.Text = value.ToString("f6");
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    VFOUpdateDel del = new VFOUpdateDel(VFOAUpdate);
                    Invoke(del, new object[] { value });
                }

               // voacap
            }


        } // VFOAFreq



        private delegate void VFOUpdateDel(double freq);
        private void VFOAUpdate(double freq)
        {
             txtVFOAFreq.Text = freq.ToString("f6"); // fixed point with 6 digits
             txtVFOAFreq_LostFocus(this, EventArgs.Empty);
        }

		public double VFOASubFreq
		{
			get 
			{
				if(!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return -999.999;
				try
				{
					return double.Parse(txtVFOABand.Text);
				}
				catch(Exception)
				{
					return -999.999;
				}
			}

			set
			{
				if(vfo_lock || setupForm == null) return;
				txtVFOABand.Text = value.ToString("f6");
				txtVFOABand_LostFocus(this, EventArgs.Empty);
			}
		}

		public double VFOBFreq
		{
			get 
			{
				try
				{
					return double.Parse(txtVFOBFreq.Text);
				}
				catch(Exception)
				{
					return 0;
				}
			}
			set
			{
				value = Math.Max(0, value);
				txtVFOBFreq.Text = value.ToString("f6");
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
			}
		}

        public int PWR
		{
			get { return ptbPWR.Value; }
			set
			{
				value = Math.Max(0, value);			// lower bound
				value = Math.Min(100, value);		// upper bound

				ptbPWR.Value = value;
                ptbPWR_Scroll(this, EventArgs.Empty);
			}
		}

        
		public int AF
		{
			get {
              
                return ptbAF.Value; }
			set
			{
				value = Math.Max(0, value);			// lower bound
				value = Math.Min(100, value);		// upper bound
               

				ptbAF.Value = value;
				ptbAF_Scroll(this, EventArgs.Empty);
			}
		}


		private int rxaf = 50;
		public int RXAF                  // ke9ns used to keep the last value of the AF to put back after unkeying the flex radio
		{
			get { return rxaf; }
			set { rxaf = value; }
		}

       
        private int txaf = 50;
		public int TXAF
		{
			get { return txaf; }
			set
			{
				txaf = value;

                ptbMON.Value = txaf; // ke9ns add
                lblMON.Text = "MON: " + ptbMON.Value.ToString(); // ke9ns add


                if (setupForm != null) 
				{
					setupForm.TXAF = txaf;

                    if ((mox) && ((chkMON.Checked == true) || (ckQuickPlay.Checked == true)) )// && ((setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == true && setupForm.chkRX2AutoMuteRX1OnVFOBTX.Checked == true)))  // ke9ns add    (dont go into MON if in full duplex mode, leave as AF)
                    {
                        ptbAF.Value = txaf;
                       
                        
                    }
				}
			}
		}

		public bool DisplayAVG
		{
			get { return chkDisplayAVG.Checked; }
			set	{ chkDisplayAVG.Checked = value; }
		}

        public bool RX2DisplayAVG
        {
            get { return chkRX2DisplayAVG.Checked; }
            set { chkRX2DisplayAVG.Checked = value; }
        }

		private double break_in_delay = 300;
		public double BreakInDelay
		{
			get { return break_in_delay; }
			set
			{
				break_in_delay = value;
				udCWBreakInDelay.Value = (int)value;
			}
		}

		private bool cat_ptt = false;
		public bool CATPTT
		{
			get { return cat_ptt; }
			set { cat_ptt = value; }
		}

        private bool cw_auto_mode_switch = false;
        public bool CWAutoModeSwitch
        {
            get { return cw_auto_mode_switch; }
            set { cw_auto_mode_switch = value; }
        }

        private DSPMode saved_cw_auto_switch_dsp_mode = DSPMode.FIRST;
        private void SetConsoleMox(bool b)
        {
            if (disable_ptt && b) return;
            DSPMode tx_mode = dsp.GetDSPTX(0).CurrentDSPMode;

            if (cw_auto_mode_switch)
            {
                CWAutoSwitchMode(b, tx_mode);
            }
            else
            {
                switch (tx_mode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        MOX = b;
                        break;
                }
            }
        }

        private void CWAutoSwitchMode(bool b, DSPMode tx_mode)
        {
            if (b)
            {
                if (saved_cw_auto_switch_dsp_mode != tx_mode)
                    saved_cw_auto_switch_dsp_mode = tx_mode;

                switch (tx_mode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        break; // do nothing
                    case DSPMode.LSB:
                    case DSPMode.DIGL:
                        if (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK && rx2_enabled && chkVFOBTX.Checked)
                            Invoke(new MethodInvoker(radRX2ModeCWL.Select)); // switch RX2 to CWL mode
                        else Invoke(new MethodInvoker(radModeCWL.Select)); // switch RX1 to CWL mode
                        break;
                    case DSPMode.USB:
                    case DSPMode.DIGU:
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                    case DSPMode.DSB:
                    case DSPMode.DRM:
                        if (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK && rx2_enabled && chkVFOBTX.Checked)
                            Invoke(new MethodInvoker(radRX2ModeCWU.Select)); // switch RX2 to CWU mode    
                        else Invoke(new MethodInvoker(radModeCWU.Select)); // switch RX1 to CWU mode
                        break;
                }

                MOX = true;                
            }
            else
            {
                MOX = false;
                switch (saved_cw_auto_switch_dsp_mode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        break; // do nothing
                    default:
                        RadioButtonTS rad = null;
                        bool rx2 = (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK && rx2_enabled && chkVFOBTX.Checked);
                        switch (saved_cw_auto_switch_dsp_mode)
                        {
                            case DSPMode.LSB:
                                if (rx2) rad = radRX2ModeLSB;
                                else rad = radModeLSB;
                                break;
                            case DSPMode.USB:
                                if (rx2) rad = radRX2ModeUSB;
                                else rad = radModeUSB;
                                break;
                            case DSPMode.DSB:
                                if (rx2) rad = radRX2ModeDSB;
                                else rad = radModeDSB;
                                break;
                            case DSPMode.FM:
                                if (rx2) rad = radRX2ModeFMN;
                                else rad = radModeFMN;
                                break;
                            case DSPMode.AM:
                                if (rx2) rad = radRX2ModeAM;
                                else rad = radModeAM;
                                break;
                            case DSPMode.SAM:
                                if (rx2) rad = radRX2ModeSAM;
                                else rad = radModeSAM;
                                break;
                            case DSPMode.DIGL:
                                if (rx2) rad = radRX2ModeDIGL;
                                else rad = radModeDIGL;
                                break;
                            case DSPMode.DIGU:
                                if (rx2) rad = radRX2ModeDIGU;
                                else rad = radModeDIGU;
                                break;
                            case DSPMode.DRM:
                                if (rx2) rad = radRX2ModeDRM;
                                else rad = radModeDRM;
                                break;
                        }

                        if (rad != null)
                            Invoke(new MethodInvoker(rad.Select));
                        break;
                }                
            }
        }

        private void SetTRMute(bool b)
        {
            if (!b) // RX
            {
                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        Audio.MuteOutput = false;
                        break;
                    default:
                        USBHID.WriteI2C2Value(0x30, 0x25, 0xC0);
                        break;
                }
            }
            else // TX
            {
                USBHID.WriteI2C2Value(0x30, 0x25, 0xC0);
            }
        }

		public bool MOX
		{
			get { return chkMOX.Checked; }
            set { chkMOX.Checked = value; }
		}

		public bool MOXEnabled
		{
			get { return chkMOX.Enabled; }
			set	{ chkMOX.Enabled = value; }
		}

        private bool monback = false;
		public bool MON
		{
			get
            {
                monback = chkMON.Checked;
                return chkMON.Checked;
            }
			set	{ chkMON.Checked = value; }
		}

        public byte MONINIT // ke9ns add
        {
            get { return moninit; }
            set { moninit = value; }
        }
        public bool MUT
		{
			get { return chkMUT.Checked; }
            
            set	{
               
                chkMUT.Checked = value;

              
                if (chkMUT.Checked) // ke9ns add
                {
                    chkMUT.BackColor = button_selected_color;
                }
                else
                {
                    chkMUT.BackColor = SystemColors.Control;
                }
            }
		}

        public bool MUT2
        {
            get { return chkRX2Mute.Checked; }
            set { chkRX2Mute.Checked = value; }
        }

		public bool TUN
		{
			get { return chkTUN.Checked; }
			set	{ chkTUN.Checked = value; }
		}

		public bool TUNEnabled
		{
			get { return chkTUN.Enabled; }
			set { chkTUN.Enabled = value; }
		}
		
		public int RX1FilterLow
		{
			get { return (int)udFilterLow.Value; }
			set { udFilterLow.Value = value; }
		}

		public int RX1FilterHigh
		{
			get { return (int)udFilterHigh.Value; }
			set	{ udFilterHigh.Value = value; }
		}

		public int RX2FilterLow
		{
			get { return (int)udRX2FilterLow.Value; }
			set { udRX2FilterLow.Value = value; }
		}

		public int RX2FilterHigh
		{
			get { return (int)udRX2FilterHigh.Value; }
			set	{ udRX2FilterHigh.Value = value; }
		}

		public int FilterShiftValue
		{
			get { return ptbFilterShift.Value; }
			set	{ ptbFilterShift.Value = value; }
		}

		private PreampMode rx2_preamp_mode = PreampMode.HIGH;
		public PreampMode RX2PreampMode
		{
			get { return rx2_preamp_mode; }
			set
			{
				if(!fwc_init || current_model != Model.FLEX5000) return;
				rx2_preamp_mode = value;
                if (initializing) return;
				switch(rx2_preamp_mode)
				{
					case PreampMode.OFF:
						FWCRX2Preamp = false;
						chkRX2Preamp.Checked = false;
						break;
					case PreampMode.HIGH:
						FWCRX2Preamp = true;
						chkRX2Preamp.Checked = true;
						break;
				}

                SetWBIRRX2Mu();  // tell DSP about the premap amount

				Display.RX2PreampOffset = rx2_preamp_offset[(int)rx2_preamp_mode];

              //  Debug.WriteLine("preamp rx2 " + rx2_preamp_mode);  // ke9ns rx2 preamp issue  pos 14 when it should be -14
               // Debug.WriteLine("offset " + Display.RX2PreampOffset);

                if (chkRX2Squelch.Checked)
					ptbRX2Squelch_Scroll(this, EventArgs.Empty);
			} // set

		} // rx2preampmode



		private PreampMode rx1_preamp_mode = PreampMode.HIGH;
        public PreampMode RX1PreampMode
        {
            get { return rx1_preamp_mode; }
            set
            {
                rx1_preamp_mode = value;
                if (initializing) return;
                switch (current_model)
                {
                    case Model.FLEX5000:
                        if (!fwc_init) return;
                        switch (rx1_preamp_mode)
                        {
                            case PreampMode.OFF:
                            case PreampMode.LOW:
                                FWCRX1Preamp = false;
                                chkRX1Preamp.Checked = false;
                                break;
                            case PreampMode.MED:
                            case PreampMode.HIGH:
                                FWCRX1Preamp = true;
                                chkRX1Preamp.Checked = true;
                                break;
                        }
                        break;
                    case Model.FLEX3000:
                        if (!fwc_init) return;
                        switch (rx1_preamp_mode)
                        {
                            case PreampMode.OFF: // -20dB
                                FWCRX1Preamp = false;
                                FWCRX1Attn = true;
                                break;
                            case PreampMode.LOW: // 0dB
                                FWCRX1Preamp = false;
                                FWCRX1Attn = false;
                                break;
                            case PreampMode.MED:
                                FWCRX1Preamp = true;
                                FWCRX1Attn = true;
                                break;
                            case PreampMode.HIGH: // +26dB
                                FWCRX1Preamp = true;
                                FWCRX1Attn = false;
                                break;
                        }
                        break;
                    case Model.FLEX1500:
                        if (!hid_init) return;
                        USBHID.SetPreamp((FLEX1500PreampMode)rx1_preamp_mode);
                        break;
                /*    case Model.SDR1000:
                        switch (rx1_preamp_mode)
                        {
                            case PreampMode.OFF:
                                Hdw.Attn = true;
                                Hdw.GainRelay = true;	// 0dB
                                break;
                            case PreampMode.LOW:
                                Hdw.Attn = false;
                                Hdw.GainRelay = true;	// +6dB
                                break;
                            case PreampMode.MED:
                                Hdw.Attn = true;
                                Hdw.GainRelay = false;	// 26dB
                                break;
                            case PreampMode.HIGH:
                                Hdw.Attn = false;
                                Hdw.GainRelay = false;
                                break;
                        }
                        break; */
                }

                switch (current_model)
                {
                    case Model.FLEX5000: // do nothing here -- handled above
                        break;
                    case Model.FLEX3000:
                        switch (rx1_preamp_mode)
                        {
                            case PreampMode.OFF:
                                comboPreamp.Text = "Attn";
                                break;
                            case PreampMode.LOW:
                                comboPreamp.Text = "Off";
                                break;
                            case PreampMode.MED:
                                comboPreamp.Text = "Pre1";
                                break;
                            case PreampMode.HIGH:
                                comboPreamp.Text = "Pre2";
                                break;
                        }
                        break;
                    case Model.FLEX1500:
                        switch ((FLEX1500PreampMode)rx1_preamp_mode)
                        {
                            case FLEX1500PreampMode.MINUS_10:
                                comboPreamp.Text = "-10";
                                break;
                            case FLEX1500PreampMode.ZERO:
                                comboPreamp.Text = "  0";
                                break;
                            case FLEX1500PreampMode.PLUS_10:
                                comboPreamp.Text = "+10";
                                break;
                            case FLEX1500PreampMode.PLUS_20:
                                comboPreamp.Text = "+20";
                                break;
                            case FLEX1500PreampMode.PLUS_30:
                                comboPreamp.Text = "+30";
                                break;
                        }
                        break;
                    default:
                        switch (rx1_preamp_mode)
                        {
                            case PreampMode.OFF:
                                comboPreamp.Text = "Off";
                                break;
                            case PreampMode.LOW:
                                comboPreamp.Text = "Low";
                                break;
                            case PreampMode.MED:
                                comboPreamp.Text = "Med";
                                break;
                            case PreampMode.HIGH:
                                comboPreamp.Text = "High";
                                break;
                        }
                        break;
                }

                SetWBIRRX1Mu();

                Display.RX1PreampOffset = rx1_preamp_offset[(int)rx1_preamp_mode];

                if (chkSquelch.Checked)
                    ptbSquelch_Scroll(this, EventArgs.Empty);

                //Debug.WriteLine("RX1PreampMode: " + rx1_preamp_mode);
            }
        }

		public int Squelch
		{
			get { return ptbSquelch.Value; }
            set
            {
                ptbSquelch.Value = value;
                if (chkSquelch.Checked)
                    ptbSquelch_Scroll(this, EventArgs.Empty);
            }
		}

        public int Squelch2
        {
            get {
                if (FWCEEPROM.RX2OK)
                    return ptbRX2Squelch.Value;
                else
                    return -1;
                }
            set
            {
                if (FWCEEPROM.RX2OK)
                {
                    ptbRX2Squelch.Value = value;
                    if (chkRX2Squelch.Checked)
                        ptbRX2Squelch_Scroll(this, EventArgs.Empty);
                }
            }
        }


        public int Zoom
        {
            get { return ptbDisplayZoom.Value; }
            set
            {
                ptbDisplayZoom.Value = value;
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
            }
        }

        public int Pan
        {
            get { return ptbDisplayPan.Value; }
            set
            {
                ptbDisplayPan.Value = value;
                ptbDisplayPan_Scroll(this, EventArgs.Empty);
            }
        }

		public AGCMode RX1AGCMode
		{
			get { return (AGCMode)comboAGC.SelectedIndex; }
			set	{ comboAGC.SelectedIndex = (int)value; }
		}

		public AGCMode RX2AGCMode
		{
			get
			{
				if(!fwc_init || current_model != Model.FLEX5000) return AGCMode.FIRST;
				return (AGCMode)comboRX2AGC.SelectedIndex;
			}
			set
			{
				if(!fwc_init || current_model != Model.FLEX5000) return;
				comboRX2AGC.SelectedIndex = (int)value;
			}
		}

		public bool VFOSplit
		{
			get { return chkVFOSplit.Checked; }
			set	{ chkVFOSplit.Checked = value; }
		}

		public bool RIT
		{
			get { return chkRIT.Checked; }
			set	{ chkRIT.Checked = value; }
		}

		public bool RITOn
		{
			get { return chkRIT.Checked; }
			set { chkRIT.Checked = value; }
		}

		public int RITValue
		{
			get { return (int)udRIT.Value; }
			set	{
                    int n = 0;
                    if(value <= 0)
                        n = Math.Max(-99999, value);
                    else
                        n = Math.Min(99999, value);
                    udRIT.Value = n; 
                }
		}

		public bool XITOn
		{
			get { return chkXIT.Checked; }
			set	{ chkXIT.Checked = value; }
		}

		public int XITValue
		{
			get { return (int)udXIT.Value; }
			set	{ udXIT.Value = value; }
		}

		private int tx_filter_high = 3100;
		public int TXFilterHigh
		{
			get{ return tx_filter_high; }
			set
			{
				tx_filter_high = value;

				SetTXFilters(rx1_dsp_mode, tx_filter_low, tx_filter_high);

                if (Display.DrawTXFilter && !chkPower.Checked)
				{
					switch(Display.CurrentDisplayMode)
					{
						case DisplayMode.PANADAPTER:
						case DisplayMode.SPECTRUM:
						case DisplayMode.HISTOGRAM:
						case DisplayMode.WATERFALL:
						case DisplayMode.PANAFALL:
						case DisplayMode.PANASCOPE:
							Display.DrawBackground();
							break;
					}
				}
			}
		}

		private int tx_filter_low = 200;
		public int TXFilterLow
		{
			get{ return tx_filter_low; }
			set
			{
				tx_filter_low = value;
				SetTXFilters(rx1_dsp_mode, tx_filter_low, tx_filter_high);
                if (Display.DrawTXFilter && !chkPower.Checked)
				{
					switch(Display.CurrentDisplayMode)
					{
						case DisplayMode.PANADAPTER:
						case DisplayMode.SPECTRUM:
						case DisplayMode.HISTOGRAM:
						case DisplayMode.WATERFALL:
						case DisplayMode.PANAFALL:
						case DisplayMode.PANASCOPE:
							Display.DrawBackground();
							break;
					}
				}
			}
		}

		private delegate void SetTimerDel(System.Windows.Forms.Timer t, bool enable);
		private void SetTimer(System.Windows.Forms.Timer t, bool enable)
		{
			t.Enabled = enable;
		}

		private bool high_swr = false;
		public bool HighSWR
		{
			get { return high_swr; }
			set
			{
				high_swr = value;
				Display.HighSWR = value;
				//Display.DrawBackground();
			}
		}

		private bool disable_ptt = false;
		public bool DisablePTT
		{
			get { return disable_ptt; }
			set { disable_ptt = value; }
		}

		public bool PowerOn
		{
			get { return chkPower.Checked; }
			set { chkPower.Checked = value;	}
		}

		public bool PowerEnabled
		{
			get { return chkPower.Enabled; }
			set { chkPower.Enabled = value; }
		}

		private bool second_sound_card_stereo = false;
		public bool SecondSoundCardStereo
		{
			get { return second_sound_card_stereo; }
			set 
			{
				second_sound_card_stereo = value;
				Audio.VACStereo = value;
			}
		}

        // w4tme
        private bool third_sound_card_stereo = false;
        public bool ThirdSoundCardStereo
        {
            get { return third_sound_card_stereo; }
            set
            {
                third_sound_card_stereo = value;
                Audio.VAC2Stereo = value;
            }
        }

		private bool vac_enabled = false;
		public bool VACEnabled
		{
			get { return vac_enabled; }
			set 
			{
				vac_enabled = value;
				Audio.VACEnabled = value;
				if (chkVAC1 != null) chkVAC1.Checked = value;
			}
		}

        private bool vac2_enabled = false;
        public bool VAC2Enabled // called by setup.cs
        {
            get { return vac2_enabled; }
            set
            {
             // if ((current_model == Model.FLEX5000 && FWCEEPROM.RX2OK) )   // ke9ns mod to allow all models to use VAC2
            //  {
                    vac2_enabled = value;
                    Audio.VAC2Enabled = value;
                    if (chkVAC2 != null) chkVAC2.Checked = value;
            //  }
            }
        }

		private int audio_driver_index1 = 0;
		public int AudioDriverIndex1
		{
			get { return audio_driver_index1; }
			set { audio_driver_index1 = value; }
		}

		private int audio_driver_index2 = 0;
		public int AudioDriverIndex2
		{
			get { return audio_driver_index2; }
			set { audio_driver_index2 = value; }
		}

        private int audio_driver_index3 = 0;
        public int AudioDriverIndex3
        {
            get { return audio_driver_index3; }
            set { audio_driver_index3 = value; }
        }

		private int audio_input_index1 = 0;
		public int AudioInputIndex1
		{
			get { return audio_input_index1; }
			set { audio_input_index1 = value; }
		}

		private int audio_input_index2 = 0;
		public int AudioInputIndex2
		{
			get { return audio_input_index2; }
			set { audio_input_index2 = value; }
		}

        private int audio_input_index3 = 0;
        public int AudioInputIndex3
        {
            get { return audio_input_index3; }
            set { audio_input_index3 = value; }
        }

		private int audio_output_index1 = 0;
		public int AudioOutputIndex1
		{
			get { return audio_output_index1; }
			set { audio_output_index1 = value; }
		}

		private int audio_output_index2 = 0;
		public int AudioOutputIndex2
		{
			get { return audio_output_index2; }
			set { audio_output_index2 = value; }
		}

        private int audio_output_index3 = 0;
        public int AudioOutputIndex3
        {
            get { return audio_output_index3; }
            set { audio_output_index3 = value; }
        }

		private double audio_volts1 = 2.23;
		public double AudioVolts1
		{
			get { return audio_volts1; }
			set
			{
				audio_volts1 = value; 
				Audio.AudioVolts1 = audio_volts1;
				ptbPWR_Scroll(this, EventArgs.Empty);
			}
		}

		private int mixer_id1 = 0;
		public int MixerID1
		{
			get { return mixer_id1; }
			set { mixer_id1 = value; }
		}

		private int mixer_id2 = 0;
		public int MixerID2
		{
			get { return mixer_id2; }
			set { mixer_id2 = value; }
		}

		private int mixer_rx_mux_id1 = 0;
		public int MixerRXMuxID1
		{
			get { return mixer_rx_mux_id1; }
			set	{ mixer_rx_mux_id1 = value;	}
		}

		private int mixer_tx_mux_id1 = 0;
		public int MixerTXMuxID1
		{
			get { return mixer_tx_mux_id1; }
			set { mixer_tx_mux_id1 = value; }
		}

		private int mixer_rx_mux_id2 = 0;
		public int MixerRXMuxID2
		{
			get { return mixer_rx_mux_id2; }
			set { mixer_rx_mux_id2 = value; }
		}

		private int mixer_tx_mux_id2 = 0;
		public int MixerTXMuxID2
		{
			get { return mixer_tx_mux_id2; }
			set { mixer_tx_mux_id2 = value; }
		}

		private int sample_rate1 = 48000;
		public int SampleRate1         //ke9ns used only by wave.cs
		{
			get { return sample_rate1; }
			set 
			{
				sample_rate1 = value;
				DSP.SampleRate = value;
				Audio.SampleRate1 = value;
				Display.SampleRate = value;
                CWSynth.SampleRate = value;
				switch(rx1_dsp_mode)
				{
					case DSPMode.SPEC:
						SetRX1Mode(DSPMode.SPEC);
						break;
				}
				
				switch(Display.CurrentDisplayMode)
				{
					case DisplayMode.PANADAPTER:
					case DisplayMode.WATERFALL:
					case DisplayMode.PANAFALL:
					case DisplayMode.PANASCOPE:
       
						if (CTUN == false) CalcDisplayFreq(); // ke9ns mod
						btnDisplayPanCenter.PerformClick();
						break;
				}				
			}
		} // SampleRate1

		private int sample_rate2 = 48000;
		public int SampleRate2
		{
			get { return sample_rate2; }
			set
			{
				sample_rate2 = value;
				Audio.SampleRate2 = value;
			}
		}

        private int sample_rate3 = 48000;
        public int SampleRate3
        {
            get { return sample_rate3; }
            set
            {
                sample_rate3 = value;
                Audio.SampleRate3 = value;
            }
        }

		private int num_channels = 2;
		public int NumChannels
		{
			get { return num_channels; }
			set { num_channels = value; }
		}

		private int block_size1;
		public int BlockSize1
		{
			get { return block_size1; }
			set
			{
				block_size1 = value;
				Audio.BlockSize = value;
				dsp.GetDSPRX(0, 0).AudioSize = value;
			}
		}

		private int block_size2;
		public int BlockSize2
		{
			get { return block_size2; }
			set 
			{ 
				block_size2 = value; 
				Audio.BlockSizeVAC = value;
			}
		}

        private int block_size3;
        public int BlockSize3
        {
            get { return block_size3; }
            set
            {
                block_size3 = value;
                Audio.BlockSizeVAC2 = value;
            }
        }

		private int peak_text_delay = 500;
		public int PeakTextDelay
		{
			get { return peak_text_delay; }
			set
			{
				peak_text_delay = value;
				timer_peak_text.Interval = value;
			}
		}

		private int meter_delay = 100;
		public int MeterDelay
		{
			get { return meter_delay; }
			set
			{
				meter_delay = value;
				MultimeterPeakHoldTime = MultimeterPeakHoldTime;
			}
		}

		private int meter_dig_delay = 500;
		public int MeterDigDelay
		{
			get { return meter_dig_delay; }
			set { meter_dig_delay = value; }
		}

		private int cpu_meter_delay = 1000;
		public int CPUMeterDelay
		{
			get { return cpu_meter_delay; }
			set
			{
				cpu_meter_delay = value;
				timer_cpu_meter.Interval = value;
			}
		}

		private int display_fps = 15;
		private int display_delay = 1000 / 15;
		public int DisplayFPS
		{
			get{ return display_fps;}
			set
			{
				display_fps = value;
				display_delay = 1000 / display_fps;
			}
		}

		private int multimeter_peak_hold_time = 1000;
		private int multimeter_peak_hold_samples = 10;
		public int MultimeterPeakHoldTime
		{
			get { return multimeter_peak_hold_time; }
			set
			{
				multimeter_peak_hold_time = value;
				multimeter_peak_hold_samples = value / meter_delay;
			}
		}

		private int multimeter_text_peak_time = 500;
		private int multimeter_text_peak_samples = 5;
		public int MultimeterTextPeakTime
		{
			get { return multimeter_text_peak_time; }
			set
			{
				multimeter_text_peak_time = value;
				multimeter_text_peak_samples = value / meter_delay;
				if(multimeter_text_peak_samples > meter_text_history.Length)
				{
					float[] temp = new float[multimeter_text_peak_samples];
					for(int i=0; i<meter_text_history.Length; i++)
						temp[i] = meter_text_history[i];
					meter_text_history = temp;
				}
			}
		}

		private static Color vfo_text_light_color = Color.Yellow;
		public Color VFOTextLightColor
		{
			get { return vfo_text_light_color; }
			set
			{
				if(chkPower.Checked)
				{
					txtVFOAFreq.ForeColor = value;
					txtVFOAMSD.ForeColor = value;
				}

				vfo_text_light_color = value;
			}
		}

        bool vfoopenfont = false; // ke9ns add

        public bool VFOOpenFont
        {
            get { return false; }

            set
            {
                vfoopenfont = value;

              
            }


        } // VFOOpenFont


        //===============================================================
        // ke9ns add to allow swapping fonts for VFO
        private Font Hold1 = null;
        private Font Hold2 = null;

        private int boldfont = 4;  // ke9ns adjustment for mouse hover digit select
        private int boldfont1 = -5;// ke9ns adjustment for mouse hover digit select

        public bool VFOBoldFont
        {
            get { return false; }
            set
            {

           
                if (Hold1 == null)
                {
                    Hold1 = txtVFOAFreq.Font; // store original font for VFOA/B BOLD FOnt
                    Hold2 = txtVFOALSD.Font;
                

                }

                if (value == true) 
                {

                    if (vfoopenfont == true)
                    {
                        txtVFOAFreq.Font = ff9; // ke9ns add embedded Swis721 B and I
                        txtVFOBFreq.Font = ff9; // ke9ns add embedded Swis721
                        txtVFOAMSD.Font = ff9; // ke9ns add embedded Swis721
                        txtVFOBMSD.Font = ff9; // ke9ns add embedded Swis721

                        txtVFOALSD.Font = ff9a; // ke9ns add embedded Swis721
                        txtVFOBLSD.Font = ff9a; // ke9ns add embedded Swis721

                        boldfont = 4;
                        boldfont1 = -5;
                    }
                    else
                    {
                        txtVFOAFreq.Font = ff6; // ke9ns add embedded Swis721 B and I
                        txtVFOBFreq.Font = ff6; // ke9ns add embedded Swis721
                        txtVFOAMSD.Font = ff6; // ke9ns add embedded Swis721
                        txtVFOBMSD.Font = ff6; // ke9ns add embedded Swis721

                        txtVFOALSD.Font = ff7; // ke9ns add embedded Swis721
                        txtVFOBLSD.Font = ff7; // ke9ns add embedded Swis721

                        boldfont = 6;
                        boldfont1 = -5;
                    }

                  

                }
                else
                {
                    if (Hold1 != null)
                    {
                        txtVFOAFreq.Font = Hold1; // ke9ns add  put back standard MS sans Serif
                        txtVFOBFreq.Font = Hold1; // 
                        txtVFOAMSD.Font = Hold1; //  
                        txtVFOBMSD.Font = Hold1; // 
                        txtVFOALSD.Font = Hold2; // 
                        txtVFOBLSD.Font = Hold2; // 

                        boldfont = 4;
                        boldfont1 = -5;
                    }

                }

                GetVFOCharWidth(); // ke9ns update widths based on new font

            } // set

        } // VFOBoldFont



        private static Color vfo_text_dark_color = Color.Olive;
     
        public Color VFOTextDarkColor
		{
			get { return vfo_text_dark_color; }
			set
			{

                if (!chkPower.Checked)
				{
                   
                    txtVFOAFreq.ForeColor = value;
					txtVFOAMSD.ForeColor = value;
					txtVFOALSD.ForeColor = value;
				}
				if(!chkVFOSplit.Checked)
				{
					txtVFOBFreq.ForeColor = value;
					txtVFOBMSD.ForeColor = value;
					txtVFOBLSD.ForeColor = value;
				}

				vfo_text_dark_color = value;
			}
		}

		private static Color band_text_light_color = Color.Lime;
		public Color BandTextLightColor
		{
			get { return band_text_light_color; }
			set
			{
				if(chkPower.Checked)
					txtVFOABand.ForeColor = value;
				if(chkVFOSplit.Checked)
					txtVFOBBand.ForeColor = value;
				
				band_text_light_color = value;
			}
		}

		private static Color band_text_dark_color = Color.Green;
		public Color BandTextDarkColor
		{
			get { return band_text_dark_color; }
			set
			{
				if(!chkPower.Checked)
					txtVFOABand.ForeColor = value;
				if(!chkVFOSplit.Checked)
					txtVFOBBand.ForeColor = value;

				band_text_dark_color = value;
			}
		}

		private static Color peak_text_color = Color.DodgerBlue;
		public Color PeakTextColor
		{
			get { return peak_text_color; }
			set
			{
				peak_text_color = value;
				txtDisplayCursorOffset.ForeColor = value;
				txtDisplayCursorPower.ForeColor = value;
				txtDisplayCursorFreq.ForeColor = value;
				txtDisplayPeakOffset.ForeColor = value;
				txtDisplayPeakPower.ForeColor = value;
				txtDisplayPeakFreq.ForeColor = value;
			}
		}

		private static Color out_of_band_color = Color.DimGray;
		public Color OutOfBandColor
		{
			get { return out_of_band_color; }
			set
			{
				out_of_band_color = value;
				if(setupForm != null)
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
		}

		private static Color button_selected_color = Color.Yellow;
		public Color ButtonSelectedColor
		{
			get { return button_selected_color; }
			set
			{
				button_selected_color = value;
				if(!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK)
					rx1_band_color = button_selected_color;
				CheckSelectedButtonColor();
			}
		}

//=================================================================
        // ke9ns old ORIGINAL meter colors

		private static Color meter_left_color = Color.Green;
		public Color MeterLeftColor
		{
			get { return meter_left_color; }
			set
			{
				meter_left_color = value;
				picMultiMeterDigital.Invalidate();
			}
		}

		private static Color meter_right_color = Color.Lime;
		public Color MeterRightColor
		{
			get { return meter_right_color; }
			set
			{
				meter_right_color = value;
				picMultiMeterDigital.Invalidate();
			}
		}

//=======================================================================

		private static Color rx1_band_color = Color.Yellow;
		public Color RX1BandColor
		{
			get { return rx1_band_color; }
			set
			{
				rx1_band_color = value;
			}
		}

		private static Color rx2_band_color = Color.Green;
		public Color RX2BandColor
		{
			get { return rx2_band_color; }
			set
			{
				rx2_band_color = value;
			}
		}

		private static Color tx_band_color = Color.Red;
		public Color TXBandColor
		{
			get { return tx_band_color; }
			set
			{
				tx_band_color = value;
			}
		}

		private Keys key_tune_up_1 = Keys.Q;
		public Keys KeyTuneUp1
		{
			get{ return key_tune_up_1;}
			set{ key_tune_up_1 = value;}
		}

		private Keys key_tune_down_1 = Keys.A;
		public Keys KeyTuneDown1
		{
			get{ return key_tune_down_1;}
			set{ key_tune_down_1 = value;}
		}

		private Keys key_tune_up_2 = Keys.W;
		public Keys KeyTuneUp2
		{
			get{ return key_tune_up_2;}
			set{ key_tune_up_2 = value;}
		}

		private Keys key_tune_down_2 = Keys.S;
		public Keys KeyTuneDown2
		{
			get{ return key_tune_down_2;}
			set{ key_tune_down_2 = value;}
		}

		private Keys key_tune_up_3 = Keys.E;
		public Keys KeyTuneUp3
		{
			get{ return key_tune_up_3;}
			set{ key_tune_up_3 = value;}
		}

		private Keys key_tune_down_3 = Keys.D;
		public Keys KeyTuneDown3
		{
			get{ return key_tune_down_3;}
			set{ key_tune_down_3 = value;}
		}

		private Keys key_tune_up_4 = Keys.R;
		public Keys KeyTuneUp4
		{
			get{ return key_tune_up_4;}
			set{ key_tune_up_4 = value;}
		}

		private Keys key_tune_down_4 = Keys.F;
		public Keys KeyTuneDown4
		{
			get{ return key_tune_down_4;}
			set{ key_tune_down_4 = value;}
		}

		private Keys key_tune_up_5 = Keys.T;
		public Keys KeyTuneUp5
		{
			get{ return key_tune_up_5;}
			set{ key_tune_up_5 = value;}
		}

		private Keys key_tune_down_5 = Keys.G;
		public Keys KeyTuneDown5
		{
			get{ return key_tune_down_5;}
			set{ key_tune_down_5 = value;}
		}

		private Keys key_tune_up_6 = Keys.Y;
		public Keys KeyTuneUp6
		{
			get{ return key_tune_up_6;}
			set{ key_tune_up_6 = value;}
		}

		private Keys key_tune_down_6 = Keys.H;
		public Keys KeyTuneDown6
		{
			get{ return key_tune_down_6;}
			set{ key_tune_down_6 = value;}
		}

		private Keys key_tune_up_7 = Keys.U;
		public Keys KeyTuneUp7
		{
			get{ return key_tune_up_7;}
			set{ key_tune_up_7 = value;}
		}

		private Keys key_tune_down_7 = Keys.J;
		public Keys KeyTuneDown7
		{
			get{ return key_tune_down_7;}
			set{ key_tune_down_7 = value;}
		}

		private Keys key_rit_up = Keys.O;
		public Keys KeyRITUp
		{
			get { return key_rit_up; }
			set { key_rit_up = value; }
		}

		private Keys key_rit_down = Keys.I;
		public Keys KeyRITDown
		{
			get { return key_rit_down; }
			set { key_rit_down = value; }
		}

		private int rit_step_rate = 50;
		public int RITStepRate
		{
			get { return rit_step_rate; }
			set { rit_step_rate = value; }
		}

		private Keys key_xit_up = Keys.OemOpenBrackets;
		public Keys KeyXITUp
		{
			get { return key_xit_up; }
			set { key_xit_up = value; }
		}

		private Keys key_xit_down = Keys.P;
		public Keys KeyXITDown
		{
			get { return key_xit_down; }
			set { key_xit_down = value; }
		}

		private int xit_step_rate = 50;
		public int XITStepRate
		{
			get { return xit_step_rate; }
			set { xit_step_rate = value; }
		}

		private Keys key_band_up = Keys.M;
		public Keys KeyBandUp
		{
			get{ return key_band_up;}
			set{ key_band_up = value;}
		}

		private Keys key_band_down = Keys.N;
		public Keys KeyBandDown
		{
			get{ return key_band_down;}
			set{ key_band_down = value;}
		}

		private Keys key_filter_up = Keys.B;
		public Keys KeyFilterUp
		{
			get{ return key_filter_up;}
			set{ key_filter_up = value;}
		}

		private Keys key_filter_down = Keys.V;
		public Keys KeyFilterDown
		{
			get{ return key_filter_down;}
			set{ key_filter_down = value;}
		}

		private Keys key_mode_up = Keys.X;
		public Keys KeyModeUp
		{
			get{ return key_mode_up;}
			set{ key_mode_up = value;}
		}

		private Keys key_mode_down = Keys.Z;
		public Keys KeyModeDown
		{
			get{ return key_mode_down;}
			set{ key_mode_down = value;}
		}

		private Keys key_cw_dot = Keys.OemPeriod;
		public Keys KeyCWDot
		{
			get { return key_cw_dot; }
			set { key_cw_dot = value; }
		}

		private Keys key_cw_dash = Keys.OemQuestion;
		public Keys KeyCWDash
		{
			get { return key_cw_dash; }
			set { key_cw_dash = value; }
		}

		private bool rfe_pa_tr_enable = false;
		public bool RFE_PA_TR_enable
		{
			get { return rfe_pa_tr_enable; }
			set
			{
				rfe_pa_tr_enable = value;
				if(setupForm != null)
					setupForm.RFE_PA_TR = value;
			}
		}

		private bool xvtr_present = false;
		public bool XVTRPresent
		{
			get { return xvtr_present; }
			set 
			{
				xvtr_present = value;
				radBand2.Enabled = value;
				Hdw.XVTRPresent = value;
				if(value)
					MaxFreq = 146.0;
				else
					MaxFreq = 65.0;
			}
		}

		private bool pa_present = false;
		public bool PAPresent
		{
			get { return pa_present; }
			set
			{
				pa_present = value;
                if (current_model != Model.SDR1000) return;

                Hdw.PAPresent = value;
				if(pa_present)
				{
					if(!comboMeterTXMode.Items.Contains("Ref Pwr"))
						comboMeterTXMode.Items.Insert(1, "Ref Pwr");
					if(!comboMeterTXMode.Items.Contains("SWR"))
						comboMeterTXMode.Items.Insert(2, "SWR");

					if(comboMeterTXMode.SelectedIndex < 0)
						comboMeterTXMode.SelectedIndex = 0;

                    // ke9ns add below for 2nd tx meter
                    if (!comboMeterTX1Mode.Items.Contains("Ref Pwr"))
                        comboMeterTX1Mode.Items.Insert(1, "Ref Pwr");
                    if (!comboMeterTX1Mode.Items.Contains("SWR"))
                        comboMeterTX1Mode.Items.Insert(2, "SWR");

                    if (comboMeterTX1Mode.SelectedIndex < 0)
                        comboMeterTX1Mode.SelectedIndex = 0;



                }
                else
				{
					string cur_txt = comboMeterTXMode.Text;
					if(comboMeterTXMode.Items.Contains("Ref Pwr"))
						comboMeterTXMode.Items.Remove("Ref Pwr");
					if(comboMeterTXMode.Items.Contains("SWR"))
						comboMeterTXMode.Items.Remove("SWR");
					
					comboMeterTXMode.Text = cur_txt;
					if(comboMeterTXMode.SelectedIndex < 0 &&
						comboMeterTXMode.Items.Count > 0)
						comboMeterTXMode.SelectedIndex = 0;

                    // ke9ns add below
                    cur_txt = comboMeterTX1Mode.Text;
                    if (comboMeterTX1Mode.Items.Contains("Ref Pwr"))
                        comboMeterTX1Mode.Items.Remove("Ref Pwr");
                    if (comboMeterTX1Mode.Items.Contains("SWR"))
                        comboMeterTX1Mode.Items.Remove("SWR");

                    comboMeterTX1Mode.Text = cur_txt;
                    if (comboMeterTX1Mode.SelectedIndex < 0 &&
                        comboMeterTX1Mode.Items.Count > 0)
                        comboMeterTX1Mode.SelectedIndex = 0;


                }
				ptbPWR_Scroll(this, EventArgs.Empty);
			}
		} // PAPresent

		private bool atu_present = false;
		public bool ATUPresent
		{
			get { return atu_present; }
			set
			{
				atu_present = value;
                if (current_model != Model.SDR1000) return;
				comboTuneMode.Visible = atu_present;
                comboTuneMode.SelectedIndex = 0;
			}
		}

		private bool usb_present = false;
		public bool USBPresent
		{
			get { return usb_present; }
			set
			{
				usb_present = value;
                if (current_model != Model.SDR1000) return;
    			Hdw.USBPresent = value;
				if(setupForm != null)
					setupForm.USBPresent = value;
			}
		}

		private PerformanceCounter cpu_usage;
		public float CpuUsage
		{
			get
			{
				try
				{
					if (cpu_usage == null)
					{
						cpu_usage = new PerformanceCounter(
							"Processor", "% Processor Time", "_Total", true);
					}
					return cpu_usage.NextValue(); 
				}
				catch(Exception)
				{
					timer_cpu_meter.Enabled = false;
					lblCPUMeter.Visible = false;

					return 0.0f;
				}
			}
		}

		private int scope_time = 50;
		public int ScopeTime
		{
			get { return scope_time; }
			set
			{
				scope_time = value;
				Display.ScopeTime = value;
			}
		}

		// Added 6/11/05 BT to support CAT
		public float MultiMeterCalOffset
		{
			get{return rx1_meter_cal_offset;}
		}

        //Added 7/11/2010 BT to support CAT
        public float RX2MeterCalOffset
        {
            get { return rx2_meter_cal_offset; }
        }

		public float PreampOffset
		{
			get { return rx1_preamp_offset[(int) rx1_preamp_mode]; }
		}

		public bool RXEQ
		{
			get
			{
				if(chkRXEQ != null) return chkRXEQ.Checked;
				else return false;
			}
			set
			{
				if(chkRXEQ != null) chkRXEQ.Checked = value;
			}
		}

		public bool TXEQ
		{
			get
			{
				if(chkTXEQ != null) return chkTXEQ.Checked;
				else return false;
			}
			set
			{
				if(chkTXEQ != null) chkTXEQ.Checked = value;
			}
		}

		private bool disable_split_on_bandchange = true;
		public bool DisableSplitOnBandchange
		{
			get{return disable_split_on_bandchange;}
			set{disable_split_on_bandchange = value;}
		}

        private bool disable_split_on_modechange = false;
        public bool DisableSplitOnModeChange
        {
            get { return disable_split_on_modechange; }
            set { disable_split_on_modechange = value; }
        }

        private bool spacenav_controlvfos = true;
        public bool SpaceNavControlVFOs
        {
            get { return spacenav_controlvfos; }
            set { spacenav_controlvfos = value; }
        }

        private bool spacenav_flypanadapter = false;
        public bool SpaceNavFlyPanadapter
        {
            get { return spacenav_flypanadapter; }
            set { spacenav_flypanadapter = value; }
        }

        private bool enable_vu_power_curve = true;
        public bool Enable_VU_Power_Curve
        {
            get { return enable_vu_power_curve; }
            set { enable_vu_power_curve = value; }
        }

        private string current_skin = "Default";
        public string CurrentSkin
        {
            get { return current_skin; }
            set
            {
                current_skin = value;
            }
        }

        private bool radar_color_update = false;
        public bool RadarColorUpdate
        {
            get { return radar_color_update; }
            set
            {
                radar_color_update = value;
            }
        }

        private double fm_tx_offset_mhz = 0;
        public double FMTXOffsetMHz
        {
            get { return fm_tx_offset_mhz; }
            set
            {
                fm_tx_offset_mhz = value;
                if (udFMOffset.Value != (decimal)fm_tx_offset_mhz)
                    udFMOffset.Value = (decimal)fm_tx_offset_mhz;
            }
        }

        private FMTXMode current_fm_tx_mode = FMTXMode.Simplex;
        public FMTXMode CurrentFMTXMode
        {
            get { return current_fm_tx_mode; }
            set
            {
                current_fm_tx_mode = value;
                switch (current_fm_tx_mode)
                {
                    case FMTXMode.High:
                        if (!chkFMTXHigh.Checked)
                            chkFMTXHigh.Checked = true;
                        break;
                    case FMTXMode.Simplex:
                        if (!chkFMTXSimplex.Checked)
                            chkFMTXSimplex.Checked = true;
                        break;
                    case FMTXMode.Low:
                        if (!chkFMTXLow.Checked)
                            chkFMTXLow.Checked = true;
                        break;
                }
                txtVFOAFreq_LostFocus(this, EventArgs.Empty);
            }
        }

        private int fm_deviation_hz = 5000;
        public int FMDeviation_Hz
        {
            get { return fm_deviation_hz; }
            set
            {
                fm_deviation_hz = value;

                if (fm_deviation_hz == FMDataDeviation) // ke9ns add
                {
                    radFMDeviation2kHz.Checked = false;
                    radFMDeviation5kHz.Checked = false;
                }
                else if (fm_deviation_hz == 5000)
                {
                     radFMDeviation2kHz.Checked = false;
                     radFMDeviation5kHz.Checked = true;
                }
                else if (fm_deviation_hz == 2500)
                {
                    radFMDeviation5kHz.Checked = false;
                    radFMDeviation2kHz.Checked = true;
                }
            }
        }

#endregion

#region Display Routines

		public void UpdateDisplay()
		{


            switch (current_display_engine)
			{
				case DisplayEngine.GDI_PLUS:

                    picDisplay.Invalidate();
                   
                    
					break;
					/*case DisplayEngine.DIRECT_X:
						Display.RenderDirectX();
						break;
						*/
			}
		}

     //   public static int continuum_peak = 0;

        //==================================================
        // ke9ns   those  peak digital values in the lower right corner of the panadapter

		private void UpdatePeakText()
		{
           
                if (txtVFOAFreq.Text == "" ||   txtVFOAFreq.Text == "." ||  txtVFOAFreq.Text == ",")    return;

                // update peak value
                float x = PixelToHz(Display.MaxX);
                float y = PixelToDb(Display.MaxY);
                y = Display.MaxY; // ke9ns used in continuum mode

            //   continuum_peak = (int)(Math.Abs(y)); // ke9ns add

                double freq = double.Parse(txtVFOAFreq.Text) + (double)x * 0.0000010;

                if (rx1_dsp_mode == DSPMode.CWL)     freq += (double)cw_pitch * 0.0000010;
                else if (rx1_dsp_mode == DSPMode.CWU)     freq -= (double)cw_pitch * 0.0000010;

                Display.MaxY = picDisplay.Height;

            if (Display.continuum == 1) // ke9ns add
            {
                 float tempf = (Display.RXDisplayHigh - Display.RXDisplayLow) / 1000;
                autoBrightBox.Text = tempf.ToString("f0") + " KHz";
     
            }
            else
            {
                //  autoBrightBox.Text = "Auto Wtr Level";
            }


            if (peak1 == 0)  // ke9ns ADD:  turn off peak value on screen if you click on them
            {
                txtDisplayPeakOffset.Text = x.ToString("f1") + "Hz";

                txtDisplayPeakPower.Text = y.ToString("f1") + "dBm"; // ke9ns this value can be used in Continuum mode waterfall

                string temp_text = freq.ToString("f6") + " MHz";
                int jper = temp_text.IndexOf(separator) + 4;
                txtDisplayPeakFreq.Text = String.Copy(temp_text.Insert(jper, " "));

               
            }
            else
            {
                txtDisplayPeakOffset.Text = "";  // ke9ns ADD
                txtDisplayPeakPower.Text = "";
                txtDisplayPeakFreq.Text = "";
               // autoBrightBox.Text = "Auto Wtr Level";

            }

		} //UpdatePeakText()




        private float PixelToHz(float x)
		{
			int low, high;
			if(!mox)
			{
				low = Display.RXDisplayLow;
				high = Display.RXDisplayHigh;
			}
			else
			{
				low = Display.TXDisplayLow;
				high = Display.TXDisplayHigh;
			}

			if(!chkMOX.Checked)
			{
				if(chkRIT.Checked)
				{
					int offset = (int)udRIT.Value;
					low += offset;
					high += offset;
				}
			}
			else
			{
				if(chkXIT.Checked)
				{
					int offset = (int)udXIT.Value;
					low += offset;
					high += offset;
				}
			}

			int width = high - low;
			return (float)(low + (double)x/(double)picDisplay.Width*(double)width);
			//return (float)(low + ((double)x*(high - low)/picDisplay.Width));
		}

		private int HzToPixel(float freq)
		{
			int low, high;
			if(!mox)
			{
				low = Display.RXDisplayLow;
				high = Display.RXDisplayHigh;
			}
			else
			{
				low = Display.TXDisplayLow;
				high = Display.TXDisplayHigh;
			}

			int width = high - low;
			return (int)((double)(freq-low)/(double)width*(double)picDisplay.Width);
			//return picDisplay.Width/2+(int)(freq/(high-low)*picDisplay.Width);
		}

       // ke9ns mod 
		private float PixelToDb(float y)
		{
			if(chkSplitDisplay.Checked || Display.CurrentDisplayMode == DisplayMode.PANAFALL ||   // ke9ns pan
				Display.CurrentDisplayMode == DisplayMode.PANASCOPE)
			{
                //     if(y <=  picDisplay.Height/2) y = y * 2.0f; 
                //     else y = (y- picDisplay.Height/2) * 2.0f;

                if (y <= H7) y = y * H9; // ke9ns account for new proportions of rx1 and rx2 areas
                else y = (y - H7) * H9;

            }
            return (float)(Display.SpectrumGridMax - y * (double)(Display.SpectrumGridMax - Display.SpectrumGridMin) / picDisplay.Height);
		}


        // ke9ns mod
        private float WaterfallPixelToTime(float y)
        {
            if (chkSplitDisplay.Checked || Display.CurrentDisplayMode == DisplayMode.PANAFALL)    // ke9ns pan
			{
                //     if(y <=  picDisplay.Height/2) y = y * 2.0f; 
                //     else y = (y- picDisplay.Height/2) * 2.0f;



                if (y <= H7) y = y * 1.0f; // ke9ns account for new proportions of rx1 and rx2 areas
                else y = (y - H7) * 1.0f;

            }

            if (y < 16) return 0f;

			int i;
			for(i=1; i*display_delay < Display.WaterfallUpdatePeriod; i++)
			{

			}
			return (y-16)*i*display_delay; // ke9ns msec of waterfall history above cursor, based on cursor position in waterfall history and speed of watefall

        } // WaterfallPixelToTime

        #endregion

        #region Paint Event Handlers
        // ======================================================
        // Paint Event Handlers
        // ======================================================


        PaintEventArgs PD;

        private void picDisplay_Paint(object sender, PaintEventArgs e) //System.Windows.Forms.PaintEventArgs
        {
            PD = e;

            Debug.WriteLine("picDisplay Paint here");

            if (panelTSBandStack.Enabled == true) // ke9ns add
            {
              
                picDisplay.Width = panelDisplay.Width - panelTSBandStack.Width - 18;

            }

           

            switch (current_display_engine)
			{
				case DisplayEngine.GDI_PLUS:

                   
                    Display.RenderGDIPlus(ref PD);  // System.Windows.Forms.PaintEventArgs
                    break;
				case DisplayEngine.DIRECT_X:
					/*Thread t = new Thread(new ThreadStart(Display.RenderDirectX));
						t.Name = "DirectX Background Update";
						t.IsBackground = true;
						t.Priority = ThreadPriority.Normal;
						t.Start();*/
					break;
			}
		} //picDisplay_paint



        //========================================================================================
        //========================================================================================
        //========================================================================================
        // ke9ns add

        Point[] dest =  // ke9ns add rotation points for meter pointer in both RX1 and RX2 using small PNG pointers
        {
            new Point(0,0), // upper left
            new Point(0,0), // upper right
            new Point(0,0) // lower left (lower right is extrapolated automatically)
        };

        // signal is the radian version of the angle

        //  var x1 = 82.0;  //(double)Origin_x; // original line 82
        //  var y1 = 118.0; // (double)Origin_y; // original line 118 (below the visable area of the meter)
        // fact is H * 1.25 or 1.65
        const double offsetpix = 5.0; // half of pointer image width

        int x1p = 0;
        int x2p = 0;
        int x3p = 0;

        int y1p = 0;
        int y2p = 0;
        int y3p = 0;

        double Vect = 0;
        double x2 = 0;
        double y2 = 0;

        private void RotatePointer(double signal, double fact, double x1, double y1)
        {
            if (meterPause == true)
            {
                Debug.WriteLine("ROTATE SKIPPED panel change");
                return; // dont waste time rotating pointer if updating images of buttons on console window
            }

            if (Skin.meterPause == true)
            {
                Debug.WriteLine("ROTATE SKIPPED button push");

                return;
            }

            x2 = x1 - fact * Math.Cos(signal);  // 1.25 convert signal to arc
            y2 = y1 - fact * Math.Sin(signal);   // 1.25

            Vect = Math.Sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); // get vector for parallel linesdd

            x1p = (int)(x1 - offsetpix * (y2 - y1) / Vect); // bottom x parallel line (to the left)
            y1p = (int)(y1 - offsetpix * (x1 - x2) / Vect); // bottom y
            x2p = (int)(x2 - offsetpix * (y2 - y1) / Vect); // top x
            y2p = (int)(y2 - offsetpix * (x1 - x2) / Vect); // top y

            x3p = (int)(x1 + offsetpix * (y2 - y1) / Vect); // bottom x parallel line (to the right)
            y3p = (int)(y1 + offsetpix * (x1 - x2) / Vect); // bottom y
                                                            

            dest[0] = new Point(x1p, y1p); // upper left
            dest[1] = new Point(x3p, y3p); // upper right
            dest[2] = new Point(x2p, y2p); // lower left       (lower right is extrapolated automatically by drawimage)
           

        } // RotatePointer

        //========================================================================================
        // ke9ns add works but is slow

        Graphics g1; // ke9ns add for rotateimage routine
        Bitmap rotatedImage = new Bitmap(164, 79); // ke9ns add output of rotated image
        double angle = 0; // ke9ns add needs this: float angle = (float)signal - 90;

        //  RotateImage(red, angle);
        //  g.DrawImageUnscaled(rotatedImage, 0, 0);


       
        private void RotateImage(int z, double angle, int y)
        {

            if (meterPause == true)
            {
                Debug.WriteLine("ROTATE SKIPPED panel change");
                return; // dont waste time rotating pointer if updating images of buttons on console window
            }

            if (Skin.meterPause == true)
            {
                Debug.WriteLine("ROTATE SKIPPED button push");

                return;
            }

            rotatedImage = new Bitmap(164, 79); // reset the frame to the start position
            g1 = Graphics.FromImage(rotatedImage); // create a new 

            g1.InterpolationMode = InterpolationMode.HighQualityBicubic;
            g1.SmoothingMode = SmoothingMode.HighQuality;
            g1.PixelOffsetMode = PixelOffsetMode.HighQuality;

            g1.TranslateTransform(82, y); //set the rotation point as the center into the matrix
            g1.RotateTransform((float)angle - 90.0F); //rotate
            g1.TranslateTransform(-82, -y); //restore rotation point into the matrix

            // png is 11 pixels wide
            if (z == 0) g1.DrawImageUnscaled(white1, 77, 10); // insert pointer into rotated transparent background, creating a rotatedimage bitmap
            else if (z == 1) g1.DrawImageUnscaled(yell1, 77, 10);
            else if (z == 2) g1.DrawImageUnscaled(black1, 77, 10);
            else g1.DrawImageUnscaled(red1, 76, 10);


            //  return rotatedImage;

        } // RotateImage


       

        //=========================================================================================
        public double avg_num = -130.0; // signal strength adjusted

        public double FREQA = 0; // ke9ns ADD used for S9 meter correction (-93db above 30mhz)
        public double FREQB = 0; // ke9ns ADD used for S9 meter correction (-93db above 30mhz)

        static Pen low_brush1;  // white
        static Pen high_brush2; // blue
        static Pen high_brush1; // red
        static Pen high_brush3; // yellow
        static Pen high_brush5; // 
        static Pen high_brush4; // 

        static Pen line_pen;
        static Pen line_dark_pen; // edge meter shadow around needle
        static Pen line_dark_pen1; // ke9ns add analog meter shadow around needle
        static Pen line_dark_pen2; // ke9ns add analog meter shadow around needle


        static int shadow = 0;   // ke9ns add amount of shadow


        static Pen MBC; // ke9ns meter background color

        static SolidBrush b;
        static SolidBrush low_brush; // white
        static SolidBrush high_brush; // red

        static double signal = 0;


        const float arc_thick = 2.0F; // ke9ns add for new analog meters
        const float arc_thick1 = 2.4F;
        const float tick_thin = 1.0F;
        const float tick_thick = 1.5F;

        //=================================================================================================
        private void picMultiMeterDigital_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			int H = picMultiMeterDigital.ClientSize.Height;
			int W = picMultiMeterDigital.ClientSize.Width;

			Graphics g = e.Graphics; // so everything we add to g here will go to paint the meter
			double num;


            line_dark_pen = new Pen( // this causes a shadow color around the needle of the EDGE meters
                         Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2, // red
                         (edge_avg_color.G + edge_meter_background_color.G) / 2, // green
                         (edge_avg_color.B + edge_meter_background_color.B) / 2)); // blue

        

            int pixel_x = 0;
            int pixel_x1 = 0; // ke9ns ADD for peak routine
			string output = "";

            //  Debug.WriteLine("freqA " + FREQA);
            //  Debug.WriteLine("freqB " + FREQB);

         //   g.CompositingMode = CompositingMode.SourceOver;
          //  g.CompositingQuality = CompositingQuality.HighQuality;

            g.InterpolationMode = InterpolationMode.HighQualityBicubic;
            g.SmoothingMode = SmoothingMode.HighQuality;
            g.PixelOffsetMode = PixelOffsetMode.HighQuality;

            switch (current_meter_display_mode)
			{


                //=============================================================
                //=============================================================
                // KE9NS mod 1 RX1 ANALOG TR7 METERS
                //=============================================================
                //=============================================================

                    
                case MultiMeterDisplayMode.Original:
#region AnalogTR7
    
                    if (meter_data_ready)
                    {
                        current_meter_data = new_meter_data;
                       // Debug.WriteLine("currntmeterdata " + current_meter_data);

                        meter_data_ready = false;
                    }

                    

                    if (avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
                    {
                        num = avg_num = current_meter_data; // ke9ns mod was _data
                    }
                    else
                    {
                        if (current_meter_data > avg_num)
                            num = avg_num = current_meter_data * 0.8 + avg_num * 0.2; // fast rise
                        else
                            num = avg_num = current_meter_data * 0.2 + avg_num * 0.8; // slow decay
                    }


                   
                   
                    g.DrawRectangle(new Pen(meter_background_color), 0, 0, W, H); // ke9ns refresh meter background for next needle update

                  low_brush = new SolidBrush(edge_low_color); // white
                  high_brush = new SolidBrush(edge_high_color); // red

                //=============================================
                // Receiver meters ke9ns10
                //=============================================

                    if (!mox)
                    {
                        switch (current_meter_rx_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                            case MeterRXMode.SIGNAL_PEAK:       // ke9ns ADD

                                //=================================================================
                                                             
                           
                                int Origin_x = W / 2;
                                int Origin_y = (int)( (double)(H * 1.5)) ; //1.5=118 1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                                 low_brush1 = new Pen(edge_low_color);  // white

                                 high_brush2 = new Pen(Brushes.Red); // blue

                                 high_brush1 = new Pen(Brushes.Red); // red
                                double spacing;
                                double string_height = 0;

                             //=======================================
                             // meter image TR7
                             //=======================================
                            
                               //  Image src = new Bitmap(meter_image);

                                // Image src = new Bitmap("Met3.jpg"); // local image only, but now embeded resource

                                g.DrawImage(TR7, new Rectangle(0, 5,W,H));  // rectangle to show bitmap image in

                                
                                if (FREQA < 30) // ke9ns add  (too much gain over S9) too little gain under S9
                                {
                                    if (num > -73) // at or over S9
                                    {
                                        pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.475 - 3));                  //  pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (73.0 + meter_peak_value) / 63.0 * (W * 0.475 - 3));
                                    }
                                    else // under S9
                                    {
                                        pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.475));                                      //   pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                        pixel_x1 = (int)((meter_peak_value + 133.0) / 60.0 * (W * 0.475));
                                    }
                                } // < 30 mhz
                                else // correction for freq > 29 mhz
                                {
                                    if (num > -93) // ke9ns ADD correct S9 above 30mhz
                                    {
                                        pixel_x = (int)(W * 0.5 + (93.0 + num) / 43.0 * (W * 0.475 - 3));                    //  pixel_x = (int)(W * 0.5 + (93.0 + num) / 43.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (93.0 + meter_peak_value) / 43.0 * (W * 0.475 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 40.0 * (W * 0.475));                           //  pixel_x = (int)((num + 133.0) / 40.0 * (W * 0.5));
                                        pixel_x1 = (int)((meter_peak_value + 133.0) / 40.0 * (W * 0.475));// was 133 but should be 153 but chose to instead drop 60.0 down to 40.0
                                    }

                                } // > 29 mhz


                                break; // case MeterRXMode.SIGNAL_AVERAGE

                         //===================================TR7
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                            case MeterRXMode.ADC2_L:
                            case MeterRXMode.ADC2_R:

                                spacing = ((double)W - 5.0) / 6.0;
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W - 3.0 - spacing), 2);
                                g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 4, (int)spacing, 2);
                                for (int i = 1; i < 7; i++)
                                {
                                     b = low_brush;
                                    if (i == 6) b = high_brush;
                                    g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 8 - 3-3, 1, 6);
                                    g.FillRectangle(b, (int)(i * spacing), H - 8 -6- 6, 2, 12);
          
                                    //    Font f = new Font("Swis721 BlkEx BT", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7
                                   
                                    string s = (-120 + i * 20).ToString();
                                    SizeF size = g.MeasureString(s, ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                    string_height = size.Height - 2.0;

                                    g.DrawString(s, ff, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 8 - 12-3 - string_height));
                                }

                                pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                                break; // case MeterRXMode.ADC2_R:


                            case MeterRXMode.OFF:
                                break;
                        } // switch (current_meter_rx_mode)
                    } // !mox

                     //=============================================
                     // Transmitter meters TR7
                     //=============================================
                   
                    else
                    {
                        MeterTXMode mode = current_meter_tx_mode;
                        if (chkTUN.Checked) mode = tune_meter_tx_mode;
                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.CPDR:
                            case MeterTXMode.ALC:

                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                                
                                double line1 = 0;
                                int angle_start = 45;
                                int angle_span = 90;

                                int Origin_x = W / 2;
                                int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                                 low_brush1 = new Pen(edge_low_color);  // white
                                 high_brush2 = new Pen(Brushes.Blue); // blue
                                 high_brush1 = new Pen(Brushes.Red); // red
                                 high_brush3 = new Pen(Brushes.Yellow); // yellow
                             //   high_brush4 = new Pen(Brushes.BurlyWood); //  
                                 high_brush5 = new Pen(Brushes.Green); // 
                                 high_brush4 = new Pen(Brushes.DarkSlateGray); // 


                                double spacing = (W * 0.665 - 2.0) / 3.0;
                                double string_height = 0;

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -75, -61); // draw OUTER arc


                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -27); // draw OUTER arc  -31

                                //======================================
                                // Draw GREEN full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc
                                                                
              
                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 4; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers

                                 
                                  //  Font f = new Font("Swis721 BlkEx BT", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7
                                   
                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);

                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.335 - 2.0 - 3.0) / 3.0;

                                for (double i = 1; i < 4; i++) //red
                                {

                                    line1 = W * 0.665 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.665 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                  //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString(i.ToString(), ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = (W * 0.665 + i * spacing - (int)string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString(i.ToString(), ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text


                                if (num > 0.0) // high area
                                {
                                    pixel_x = (int)(W * 0.665 + num / 3.0 * (W * 0.335 - 4));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 30.0) / 30.0 * (W * 0.665 - 1.0));
                                }
                                break; // ALC TR7 rx1

                         //===========================================TR7

                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:
                               
                              if (pa_present || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                                    (hid_init && current_model == Model.FLEX1500))
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    //   string[] list = { "5", "10", "50", "100" };
                                 
                                  //  Image src = new Bitmap(meter_image); // tr7 met3

                                    g.DrawImage(TR7, new Rectangle(0, 5,W,H));  // rectangle to show bitmap image in

                                    //====================================TR7
                                    // redone to work with TR7 scale ke9ns scale
                                    // 19pixel = 0watts on scale
                                    // 50px = 10watts (jumps 5px from 0 to 10)
                                    // 92px = 50watts (jumps 10px from 10watts to 50w)
                                    // 108px = 90watts (jumps 3px form 50 to 100w)

                                    
                                     spacing = (W * 0.75 - 2.0) / 4.0;                //  (W * 0.75 - 2.0) / 4.0; = 28.5

                                    if (num <= 9.0)
                                    {
                                        pixel_x = (int)(num / 9.0 * (int)spacing);          // pixel_x = (int)(num / 5.0 * (int)spacing);
                                    }
                                    else if (num <= 50.0)
                                    {

                                        pixel_x = (int)(spacing + (num - 9.0) / 22.0 * spacing);// pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                    }
                                    else
                                    {
                                        pixel_x = (int)((1.863 * spacing) + spacing + (num - 50.0) / 80.0 * spacing);
                                    }
                                   
                                    pixel_x = pixel_x + 19; // zero point

                                  
                                } // 100watt TR7 scale


                                else // 1W version
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "100", "250", "500", "800", "1000" };
                                
      
                                  
                                  for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                       // Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                          g.DrawString(s, ff, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 + (int)(i / 2) - (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                     }
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                      //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.DrawString("1000", ff, high_brush, (int)(W * 0.75 + 2 + i * spacing - (int)4.0 * string_width), (int)(H - 4 - 8 - string_height));
                                    }


                                  
                                    num *= 1000;
                                    if (num < 801.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 100.0)
                                            pixel_x = (int)(num / 100.0 * spacing);
                                        else if (num <= 250.0)
                                            pixel_x = (int)(spacing + (num - 100.0) / 150.0 * spacing);
                                        else if (num <= 500.0)
                                            pixel_x = (int)(2 * spacing + (num - 250.0) / 250.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 500.0) / 300.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                        pixel_x = (int)(W * 0.75 + (num - 800.0) / 200.0 * spacing);
                                    }
                                } // 1 watt version
                                  



                                break; //POWER RX1 TR7

                            //==========================================TR7

                            case MeterTXMode.SWR:


                                //=================================================================
                                // Draw curved meter movement for SWR
                                //=================================================================
                             
                                 line1 = 0;
                                angle_start = 45;
                                angle_span = 90;

                                Origin_x = W / 2;
                                Origin_y = (int)((double)(H * 1.5)); // 118.5 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                                low_brush1 = new Pen(edge_low_color);  // white
                                high_brush2 = new Pen(Brushes.Red); // blue
                                high_brush1 = new Pen(Brushes.Red); // red
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush4 = new Pen(Brushes.AntiqueWhite); // 

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -88, -48); // draw OUTER arc -75  -61


                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -41); // draw OUTER arc -41

                                //======================================
                                // Draw Yellow full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush3.Width = arc_thick1;
                                g.DrawArc(high_brush3, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc
                                                                
                                //======================================
                                // WHITE  tick marks and text


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] swr_list = { "1.5", "2", "5", "10", "20" };

                                for (double i = 1; i < 5; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers

                                    string s = swr_list[(int)i - 1];

                                 //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test

                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = (double)W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush2, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = (double)W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                  //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = W * 0.75 + i * spacing - (int)3.5 * string_width;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString("20+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text
                                 
                              
                             

                                if (num < 10.0) // low area
                                {
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 3.0 * spacing);
                                    else
                                        pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    pixel_x = (int)(W * 0.75 + (num - 10.0) / 10.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;

                                break;// case MeterTXMode.SWR:

                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:


                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                             
                                line1 = 0;
                                angle_start = 45;
                                angle_span = 90;

                                Origin_x = W / 2;
                                Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                                low_brush1 = new Pen(edge_low_color);  // white
                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush1 = new Pen(Brushes.Red); // red
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                              //  high_brush4 = new Pen(Brushes.BurlyWood); //  
                                high_brush5 = new Pen(Brushes.Green); // 
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] gain_list = { "5", "10", "15", "20", "25" };


                                //=================================================================
                                // Draw curved meter movement for Power
                                //=================================================================

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -67, -68); // draw OUTER arc


                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                 g.DrawArc(high_brush1, 0, 37, W, W, -44, -20); // draw OUTER arc -24

                                //======================================
                                // Draw GREEN full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc
                                                                
                                        
                               //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 5; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick; 
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers

                                    string s = gain_list[(int)i - 1];
                                  //  Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);
                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                 //   Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;


                                    line1 = (W * 0.75 + i * spacing - (int)2.5 * string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString("25+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text

                                spacing = (W * 0.75 - 2.0) / 4.0;
                                pixel_x = (int)(num / 5.0 * spacing);


                            break;// case MeterTXMode.LVL_G:
                            case MeterTXMode.OFF:
                                break;
                        } // switch (mode)
                    } // mox


                //=============================================
                // ke9ns needle movement TR7 rx1 
                //=============================================

                    if (  // EDGE meter movement here
                            (((current_meter_rx_mode == MeterRXMode.ADC2_R) || (current_meter_rx_mode == MeterRXMode.ADC2_L) ||
                            (current_meter_rx_mode == MeterRXMode.ADC_R) || (current_meter_rx_mode == MeterRXMode.ADC_L)) && (!mox && current_meter_rx_mode != MeterRXMode.OFF))
                        || ((mox && current_meter_tx_mode != MeterTXMode.OFF) && (current_meter_tx_mode != MeterTXMode.LVL_G) && (current_meter_tx_mode != MeterTXMode.ALC_G) && (current_meter_tx_mode != MeterTXMode.CPDR) && (current_meter_tx_mode != MeterTXMode.LEVELER) && (current_meter_tx_mode != MeterTXMode.EQ) && (current_meter_tx_mode != MeterTXMode.MIC) && (current_meter_tx_mode != MeterTXMode.ALC) && (current_meter_tx_mode != MeterTXMode.SWR) && (current_meter_tx_mode != MeterTXMode.FORWARD_POWER) && (current_meter_tx_mode != MeterTXMode.REVERSE_POWER))
                         )       
                                                                                     // if meter is ON in RX or TX mode, then draw line
                    {
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);

                        line_pen = new Pen(edge_avg_color);

                     //   line_dark_pen = new Pen(
                     //       Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,
                     //       (edge_avg_color.G + edge_meter_background_color.G) / 2,
                      //      (edge_avg_color.B + edge_meter_background_color.B) / 2));

                      
                        g.DrawLine(line_dark_pen, pixel_x - 1, 0, pixel_x - 1, H); // rx1 tr7 edge
                        g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
                        g.DrawLine(line_dark_pen, pixel_x + 1, 0, pixel_x + 1, H);

                    
                    }
                    else if (  // TX meter movments
                                 ( (mox && current_meter_tx_mode != MeterTXMode.OFF) && ( (current_meter_tx_mode == MeterTXMode.LVL_G) || 
                                 (current_meter_tx_mode == MeterTXMode.ALC_G) || (current_meter_tx_mode == MeterTXMode.EQ) || 
                                 (current_meter_tx_mode == MeterTXMode.MIC) || (current_meter_tx_mode == MeterTXMode.ALC) || 
                                 (current_meter_tx_mode == MeterTXMode.SWR) ) )
                            )
               
                    {

                        // pixel_x (i.e. signal) goes from 0 to W  Width 
                        // posx = originx + (2 * D * cos (angle))
                        // posy = originy + (2 * D * sin (angle))
                        // for a meter of 45deg to 135deg = 90deg total span :   
                        // but sin and cos in radians not degs.
                        // posx = originx + (2 * D * cos (angle*PI/180))

                        //  box dimensions:
                        //  0,0   W,0
                        //  0,H   W,H

                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        

                        line_pen = new Pen(Color.Blue);
                        line_pen.Width = 2.8F;


                        int Origin_x = W / 2;
                        int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 90;
                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                        int POSW = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                        int POSH = (int)((double)(H * 1.25) * Math.Sin(signal));

                        g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)


                    
                    
                    } // SWR TX curved needle

                // POWER ONLY===TR7========================================================================================= ke9ns scale
                    else if ( 
                        ( (mox && current_meter_tx_mode != MeterTXMode.OFF) && ( (current_meter_tx_mode == MeterTXMode.FORWARD_POWER) ||
                        (current_meter_tx_mode == MeterTXMode.REVERSE_POWER)) )
                        )
                    {
                    
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        line_pen = new Pen(Color.Red); // rx 

                       
                         // 54 = 10 watts" 
                        // 80 = 40 watts

                       
                            int Origin_x = (W / 2) - 1;
                            int Origin_y = (int)((double)(H * 1.84)); //1.90  1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                             double angle_start = 45;
                             double angle_span = 89;


                            angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                            signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                            int POSW = (int)((double)(H * 1.6) * Math.Cos(signal));  // 1.65 convert signal to arc
                            int POSH = (int)((double)(H * 1.6) * Math.Sin(signal));


                        line_pen.Width = 2.8F; // 2.5f

                        g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)
       
                              
                    } // power
                      // SIGNAL ONLY===TR7==RX1=========================================================================================================
                      // this should be SIGNAL, AVG SIGNAL, PEAK SIGNAL
                    else if (
                                (((current_meter_rx_mode == MeterRXMode.SIGNAL_STRENGTH) || (current_meter_rx_mode == MeterRXMode.SIGNAL_AVERAGE) ||
                                    (current_meter_rx_mode == MeterRXMode.SIGNAL_PEAK)) && (!mox && current_meter_rx_mode != MeterRXMode.OFF))
                       )
                    {
                        // SIGNAL ONLY
                        
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        pixel_x1 = Math.Max(0, pixel_x1);
                        pixel_x1 = Math.Min(W - 3, pixel_x1);                                             // define limits of X dimension

                        line_pen = new Pen(Color.Yellow); // rx 
                       
                       
                        int Origin_x = (W / 2)-3;
                        int Origin_y = (int)((double)(H * 1.9)); // 1.84 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 89;
                       
                       
                        if ((current_meter_rx_mode == MeterRXMode.SIGNAL_PEAK) && (!mox && current_meter_rx_mode != MeterRXMode.OFF)) // ke9ns ADD
                        {
                  
                           angle = signal = (angle_start + ((double)pixel_x1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                           signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math


                            if ( (meterPointer == true)) // Dark meter background, so needle shadow is light
                            {
                                 RotateImage(red, angle, Origin_y);
                                 g.DrawImageUnscaled(rotatedImage, 0, 0);

                             //   RotatePointer(signal, H * 1.6, Origin_x, Origin_y); // come up with vector to rotate image pointer
                             //   g.DrawImage(red1, dest);            // draw rotated image pointer
                            }
                            else
                            {
                               
                                int POSW1 = (int)((double)(H * 1.65) * Math.Cos(signal));  // convert signal to arc 1.6
                                int POSH1 = (int)((double)(H * 1.65) * Math.Sin(signal));

                                line_pen = new Pen(Color.Red);
                                line_pen.Width = 3.0F;
                                g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW1, Origin_y - POSH1);  // draw meter needle movement (by flipping result around since inc values go down not up)
                           }


                        } // peak

                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math


                        if ( (meterPointer == true)) // Dark meter background, so needle shadow is light
                        {
                            RotateImage(yell, angle, Origin_y);
                            g.DrawImageUnscaled(rotatedImage, 0, 0);

                          //  RotatePointer(signal, H * 1.65, Origin_x, Origin_y);
                          //  g.DrawImage(yell1, dest);            // draw rotated image
                        }
                       
                        else
                        { 
                          
                            int POSW = (int)((double)(H * 1.65) * Math.Cos(signal));  // convert signal to arc 1.6 is length of needle
                            int POSH = (int)((double)(H * 1.65) * Math.Sin(signal));

                            line_pen = new Pen(Color.Yellow);
                            line_pen.Width = 2.6F; // 2.5

                            g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)

                        }

    
               
                    } //   if meter is ON in RX or TX mode, then draw line

                  
       
//=============================================
// Type NUMBERS in dbM above meter movement
//=============================================
                    meter_timer.Stop();

                    string format = "f0";
                    if (meter_detail) format = "f1";

                    if (meter_timer.DurationMsec >= meter_dig_delay)
                    {
                        if (!mox)
                        {
                            switch (current_meter_rx_mode)
                            {
                                case MeterRXMode.SIGNAL_STRENGTH:
                               
                                case MeterRXMode.SIGNAL_AVERAGE:
                                    output = num.ToString(format) + " dBm ";
                                    break;
                                case MeterRXMode.SIGNAL_PEAK: // ke9ns ADD 
                                    output = meter_peak_value.ToString(format) + " dBm ";
                                    break;
                                case MeterRXMode.ADC_L:
                                case MeterRXMode.ADC_R:
                                case MeterRXMode.ADC2_L:
                                case MeterRXMode.ADC2_R:
                                    output = num.ToString("f1") + " dBFS ";
                                    break;
                                case MeterRXMode.OFF:
                                    output = "";
                                    break;
                            }// switch (current_meter_rx_mode)
                        }// mox
                        else
                        {
                            MeterTXMode mode = current_meter_tx_mode;
                            if (chkTUN.Checked) mode = tune_meter_tx_mode;
                            switch (mode)
                            {
                                case MeterTXMode.MIC:
                                case MeterTXMode.LEVELER:
                                case MeterTXMode.LVL_G:
                                case MeterTXMode.EQ:
                                case MeterTXMode.CPDR:
                                case MeterTXMode.ALC:
                                case MeterTXMode.ALC_G:
                                    output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                case MeterTXMode.REVERSE_POWER:
                                    switch (current_model)
                                    {
                                       /* case Model.SDR1000:
                                            if (pa_present && VFOAFreq < 30.0)
                                                output = num.ToString("f0") + " W ";
                                            else output = (num * 1000).ToString("f0") + " mW ";
                                            break;
                                      */  case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            output = num.ToString("f0") + " W ";
                                            break;
                                        case Model.FLEX1500:
                                            output = num.ToString("f0") + " % ";
                                            break;
                                    }
                                    break;
                                case MeterTXMode.SWR:
                                    output = num.ToString("f1") + " : 1 ";
                                    break;
                                case MeterTXMode.OFF:
                                    output = "";
                                    break;

                            }// switch mode
                        }//mox

                        txtMultiText.Text = output;
                        meter_timer.Start();

                    }// if (meter_timer.DurationMsec >= meter_dig_delay)

                    if (meter_data_ready)
                    {
                        meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }
                   
#endregion //analogTR7                    

                    break; // original
                    
                //=============================================================
                //=============================================================
                // KE9NS 2 RX1 EDGE meter
                //=============================================================
                //=============================================================
                 
                case MultiMeterDisplayMode.Edge:
#region Edges

                  //  string format = "f0";
                    
                    if(meter_data_ready)
					{
						current_meter_data = new_meter_data;
						meter_data_ready = false;
					}

					if(avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
					{
						num = avg_num = current_meter_data;
					}
					else
					{
						if(current_meter_data > avg_num)
							num = avg_num = current_meter_data * 0.8 + avg_num * 0.2; // fast rise
						else 
							num = avg_num = current_meter_data * 0.2 + avg_num * 0.8; // slow decay
					}

					g.DrawRectangle(new Pen(edge_meter_background_color), 0, 0, W, H); // clear out meter to be redrawn
                    low_brush = new SolidBrush(edge_low_color);
			        high_brush = new SolidBrush(edge_high_color);


					if(!mox)
					{
						switch(current_meter_rx_mode)
						{								
							case MeterRXMode.SIGNAL_STRENGTH:
							case MeterRXMode.SIGNAL_AVERAGE:
                            case MeterRXMode.SIGNAL_PEAK:	 // ke9ns ADD
                            
                                g.FillRectangle(low_brush, 0, H-8, (int)(W*0.5), 2);                    // draw line at bottom of meter white 
								g.FillRectangle(high_brush, (int)(W*0.5), H-8, (int)(W*0.5)-4, 2);      // draw line at bottom of meter red
								
                                double spacing = (W*0.5-2.0)/5.0;
								double string_height = 0;
								
                                for(int i=1; i<6; i++)                                                 // white tick marks and white Signal strength numbers
								{
									g.FillRectangle(low_brush, (int)(i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(low_brush, (int)(i*spacing), H-8-6-6, 2, 12);

                                 //   Font f = new Font("Swis721 BlkEx BT", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7
                                  
                                    SizeF size = g.MeasureString((-1+i*2).ToString(), ff, 1, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									string_height = size.Height-2.0;
									
									g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    g.SmoothingMode = SmoothingMode.AntiAlias;
                                  
                                    g.DrawString((-1+i*2).ToString(), ff, low_brush, (int)(i*spacing-string_width+(int)(i/5)), (int)(H-8-12-3-string_height));
                          
                                    g.SmoothingMode = SmoothingMode.None;
								} // for i
							
                                
                                spacing = ((double)W*0.5-2.0-4.0)/3.0;
                                for (int i = 1; i < 4; i++)                                              // Red tick marks and white Signal strength numbers
								{
									g.FillRectangle(high_brush, (int)((double)W*0.5+i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(high_brush, (int)((double)W*0.5+i*spacing), H-8-6-6, 2, 12);

                                    //   Font f = new Font("swis721blkexbt", 5.5f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("+"+(i*20).ToString(), ff2, 3, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									
									//g.TextRenderingHint = TextRenderingHint.SystemDefault;
									g.DrawString("+"+(i*20).ToString(), ff2, high_brush, (int)(W*0.5+i*spacing-(int)string_width*3-i/3*2), (int)(H-8-12-3-string_height));
								}

                                if (FREQA < 30)
                                {
                                    if (num > -73)
                                    {
                                        pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (73.0 + meter_peak_value) / 63.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                        pixel_x1 = (int)((meter_peak_value + 133.0) / 60.0 * (W * 0.5));
                                    }
                                } // < 30 mhz
                                else // correction for freq > 29 mhz
                                {
                                    if (num > -93) // ke9ns ADD correct S9 above 30mhz
                                    {
                                        pixel_x = (int)(W * 0.5 + (93.0 + num) / 43.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (93.0 + meter_peak_value) / 43.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 40.0 * (W * 0.5));
                                        pixel_x1 = (int)((meter_peak_value + 133.0) / 40.0 * (W * 0.5));
                                    }
                                } // > 29 mhz

                                break; // signal RX1

							case MeterRXMode.ADC_L:
							case MeterRXMode.ADC_R:
							case MeterRXMode.ADC2_L:
							case MeterRXMode.ADC2_R:
								spacing = ((double)W-5.0)/6.0;
								g.FillRectangle(low_brush, 0, H-8, (int)(W-3.0-spacing), 2);
								g.FillRectangle(high_brush, (int)(W-3.0-spacing), H-8, (int)spacing, 2);

                                for (int i=1; i < 7; i++)
								{
									 b = low_brush;
									if(i == 6) b = high_brush;
									g.FillRectangle(b, (int)(i*spacing-spacing/2), H-8-3-3, 1, 6);
									g.FillRectangle(b, (int)(i*spacing), H-8-6-6, 2, 12);

                                 //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    string s = (-120+i*20).ToString();
									SizeF size = g.MeasureString(s, ff, 1, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
									string_height = size.Height-2.0;
									
									g.DrawString(s, ff, b, (int)(i*spacing-(int)string_width*(s.Length)), (int)(H-8-12-3-string_height));
								}

								pixel_x = (int)((num + 120.0)/120.0*(W-5.0));
								break;
							case MeterRXMode.OFF:
								break;
						}
					} // !mox
					else
					{
						MeterTXMode mode = current_meter_tx_mode;
						if(chkTUN.Checked) mode = tune_meter_tx_mode;
						switch(mode)
						{
							case MeterTXMode.MIC:
							case MeterTXMode.EQ:
							case MeterTXMode.LEVELER:
							case MeterTXMode.CPDR:
							case MeterTXMode.ALC:
								g.FillRectangle(low_brush, 0, H-8, (int)(W*0.665), 2);
								g.FillRectangle(high_brush, (int)(W*0.665), H-8, (int)(W*0.335)-2, 2);
								double spacing = (W*0.665-2.0)/3.0;
								double string_height = 0;
								for(int i=1; i<4; i++)
								{
									g.FillRectangle(low_brush, (int)(i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(low_brush, (int)(i*spacing), H-8-6-6, 2, 12);

									string s = (-30+i*10).ToString();
                                 //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									string_height = size.Height-2.0;
									
									g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    g.SmoothingMode = SmoothingMode.AntiAlias;

									g.DrawString(s, ff, low_brush, (int)(i*spacing-string_width*s.Length+1.0-(int)(i/2)+(int)(i/3)), (int)(H-8-12-3-string_height));
									
								}
								spacing = (W*0.335-2.0-3.0)/3.0;
								for(int i=1; i<4; i++)
								{
									g.FillRectangle(high_brush, (int)((double)W*0.665+i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(high_brush, (int)((double)W*0.665+i*spacing), H-8-6-6, 2, 12);

                                 //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString(i.ToString(), ff, 3, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									
									g.TextRenderingHint = TextRenderingHint.SystemDefault;
									g.DrawString(i.ToString(), ff, high_brush, (int)(W*0.665+i*spacing-(int)string_width), (int)(H-8-12-3-string_height));
								}
								
								if(num > 0.0) // high area
								{
									pixel_x = (int)(W*0.665+num/3.0*(W*0.335-4));
								}
								else
								{
									pixel_x = (int)((num + 30.0)/30.0*(W*0.665-1.0));
								}
								break;

							case MeterTXMode.FORWARD_POWER:
							case MeterTXMode.REVERSE_POWER:
								if(pa_present || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                                    (hid_init && current_model == Model.FLEX1500))
								{
									g.FillRectangle(low_brush, 0, H-8, (int)(W*0.75), 2);
									g.FillRectangle(high_brush, (int)(W*0.75), H-8, (int)(W*0.25)-10, 2);
									spacing = (W*0.75-2.0)/4.0;
									string_height = 0;
									string[] list = {"5", "10", "50", "100"};
									for(int i=1; i<5; i++)
									{
										g.FillRectangle(low_brush, (int)(i*spacing-spacing*0.5), H-8-3-3, 1, 6);
										g.FillRectangle(low_brush, (int)(i*spacing), H-8-6-6, 2, 12);

										string s = list[i-1];
                                     //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
										double string_width = size.Width-2.0;
										string_height = size.Height-2.0;
									
											g.DrawString(s, ff, low_brush, (int)(i*spacing-string_width*s.Length+(int)(i/3)+(int)(i/4)), (int)(H-8-12-3-string_height));
										
									}
									spacing = (W*0.25-2.0-10.0)/1.0;
									for(int i=1; i<2; i++)
									{
										g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing-spacing*0.5), H-8-3-3, 1, 6);
										g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing), H-8-6-6, 2, 12);

                                     //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
										double string_width = size.Width-2.0;
									
										g.TextRenderingHint = TextRenderingHint.SystemDefault;
										g.DrawString("120+", ff, high_brush, (int)(W*0.75+i*spacing-(int)3.5*string_width), (int)(H-8-12-3-string_height));
									}
								
									if(num <= 100.0) // low area
									{
										spacing = (W*0.75-2.0)/4.0;
										if(num <= 5.0)
											pixel_x = (int)(num/5.0*(int)spacing);
										else if(num <= 10.0)
											pixel_x = (int)(spacing + (num-5.0)/5.0*spacing);
										else if(num <= 50.0)
											pixel_x = (int)(2*spacing + (num-10.0)/40.0*spacing);
										else
											pixel_x = (int)(3*spacing + (num-50.0)/50.0*spacing);
									}
									else
									{
										spacing = (W*0.25-2.0-10.0)/1.0;
										if(num <= 120.0)
											pixel_x = (int)(W*0.75+(num-100.0)/20.0*spacing);
										else
											pixel_x = (int)(W*0.75+spacing+(num-120.0)/60.0*spacing);
									}
								}
								else // 1W version
								{
									g.FillRectangle(low_brush, 0, H-8, (int)(W*0.75), 2);
									g.FillRectangle(high_brush, (int)(W*0.75), H-8, (int)(W*0.25)-9, 2);
									spacing = (W*0.75-2.0)/4.0;
									string_height = 0;
									string[] list = {"100", "250", "500", "800", "1000"};
									for(int i=1; i<5; i++)
									{
										g.FillRectangle(low_brush, (int)(i*spacing-spacing*0.5), H-8-3-3, 1, 6);
										g.FillRectangle(low_brush, (int)(i*spacing), H-8-6-6, 2, 12);

										string s = list[i-1];
                                      //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
										double string_width = size.Width-2.0;
										string_height = size.Height-2.0;
									
										//g.TextRenderingHint = TextRenderingHint.AntiAlias;
										//g.SmoothingMode = SmoothingMode.AntiAlias;
										g.DrawString(s, ff, low_brush, (int)(i*spacing-string_width*s.Length+1.0+(int)(i/2)-(int)(i/4)), (int)(H-8-12-3-string_height));
										//g.SmoothingMode = SmoothingMode.None;
									}
									spacing = (W*0.25-2.0-9.0)/1.0;
									for(int i=1; i<2; i++)
									{
										g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing-spacing*0.5), H-8-3-3, 1, 6);
										g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing), H-8-6-6, 2, 12);

                                      //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
										double string_width = size.Width-2.0;
									
										//g.TextRenderingHint = TextRenderingHint.SystemDefault;
										g.DrawString("1000", ff, high_brush, (int)(W*0.75+2+i*spacing-(int)4.0*string_width), (int)(H-8-12-3-string_height));
									}
								
									num *= 1000;
									if(num < 801.0) // low area
									{
										spacing = (W*0.75-2.0)/4.0;
										if(num <= 100.0)
											pixel_x = (int)(num/100.0*spacing);
										else if(num <= 250.0)
											pixel_x = (int)(spacing + (num-100.0)/150.0*spacing);
										else if(num <= 500.0)
											pixel_x = (int)(2*spacing + (num-250.0)/250.0*spacing);
										else
											pixel_x = (int)(3*spacing + (num-500.0)/300.0*spacing);
									}
									else
									{
										spacing = (W*0.25-2.0-9.0)/1.0;
										pixel_x = (int)(W*0.75+(num-800.0)/200.0*spacing);
									}
								}
								break;

							case MeterTXMode.SWR:
								g.FillRectangle(low_brush, 0, H-8, (int)(W*0.75), 2);
								g.FillRectangle(high_brush, (int)(W*0.75), H-8, (int)(W*0.25)-9, 2);

                                spacing = (W*0.75-2.0)/4.0;
								string_height = 0;
								string[] swr_list = {"1.5", "2", "5", "10", "20"};
								for(int i=1; i<5; i++)
								{
									g.FillRectangle(low_brush, (int)(i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(low_brush, (int)(i*spacing), H-8-6-6, 2, 12);

									string s = swr_list[i-1];
                                  //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									string_height = size.Height-2.0;
									
									//g.TextRenderingHint = TextRenderingHint.AntiAlias;
									//g.SmoothingMode = SmoothingMode.AntiAlias;
									g.DrawString(s, ff, low_brush, (int)(i*spacing-string_width*s.Length+2.0-2*(int)(i/2)+3*(int)(i/4)), (int)(H-8-12-3-string_height));
									//g.SmoothingMode = SmoothingMode.None;
								}
								spacing = (W*0.25-2.0-9.0)/1.0;
								for(int i=1; i<2; i++)
								{
									g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing), H-8-6-6, 2, 12);

                                 //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									
									//g.TextRenderingHint = TextRenderingHint.SystemDefault;
									g.DrawString("20+", ff, high_brush, (int)(W*0.75+i*spacing-(int)2.5*string_width), (int)(H-8-12-3-string_height));
								}
								
								if(num < 10.0) // low area
								{
									spacing = (W*0.75-2.0)/4.0;
									if(num <= 1.5)
										pixel_x = (int)((num-1.0)/0.5*spacing);
									else if(num <= 2.0)
										pixel_x = (int)(spacing + (num-1.5)/0.5*spacing);
									else if(num <= 5.0)
										pixel_x = (int)(2*spacing + (num-2.0)/3.0*spacing);
									else
										pixel_x = (int)(3*spacing + (num-5.0)/5.0*spacing);
								}
								else
								{
									spacing = (W*0.25-2.0-9.0)/1.0;
									pixel_x = (int)(W*0.75+(num-10.0)/10.0*spacing);
								}
								if(double.IsInfinity(num)) pixel_x = W-2;
								break;

							case MeterTXMode.ALC_G:
							case MeterTXMode.LVL_G:
								g.FillRectangle(low_brush, 0, H-8, (int)(W*0.75), 2);
								g.FillRectangle(high_brush, (int)(W*0.75), H-8, (int)(W*0.25)-9, 2);
								spacing = (W*0.75-2.0)/4.0;
								string_height = 0;
								string[] gain_list = {"5", "10", "15", "20", "25"};
								
                                for(int i=1; i<5; i++)
								{
									g.FillRectangle(low_brush, (int)(i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(low_brush, (int)(i*spacing), H-8-6-6, 2, 12);

									string s = gain_list[i-1];
                                 //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									string_height = size.Height-2.0;
									
									//g.TextRenderingHint = TextRenderingHint.AntiAlias;
									//g.SmoothingMode = SmoothingMode.AntiAlias;
									g.DrawString(s, ff, low_brush, (int)(i*spacing-string_width*s.Length+(int)(i/3)), (int)(H-8-12-3-string_height));
									//g.SmoothingMode = SmoothingMode.None;
								}
								spacing = (W*0.25-2.0-9.0)/1.0;
								for(int i=1; i<2; i++)
								{
									g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing-spacing*0.5), H-8-3-3, 1, 6);
									g.FillRectangle(high_brush, (int)((double)W*0.75+i*spacing), H-8-6-6, 2, 12);

                                  //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
									double string_width = size.Width-2.0;
									
									//g.TextRenderingHint = TextRenderingHint.SystemDefault;
									g.DrawString("25+", ff, high_brush, (int)(W*0.75+i*spacing-(int)2.5*string_width), (int)(H-8-12-3-string_height));
								}
								
								spacing = (W*0.75-2.0)/4.0;
								pixel_x = (int)(num/5.0*spacing);

								break;
							case MeterTXMode.OFF:
								break;
						}
					} // MOX


    //=============edge meter movement RX1

					if((!mox && current_meter_rx_mode != MeterRXMode.OFF) ||
						(mox && current_meter_tx_mode != MeterTXMode.OFF))
					{
						pixel_x = Math.Max(0, pixel_x);
						pixel_x = Math.Min(W-3, pixel_x);

                        pixel_x1 = Math.Max(0, pixel_x1);
                        pixel_x1 = Math.Min(W - 3, pixel_x1);

                       line_pen = new Pen(edge_avg_color);

                      //  line_dark_pen = new Pen(
						//	Color.FromArgb((edge_avg_color.R+edge_meter_background_color.R)/2,
						//	(edge_avg_color.G+edge_meter_background_color.G)/2,
						//	(edge_avg_color.B+edge_meter_background_color.B)/2));

					 
                        if ((current_meter_rx_mode == MeterRXMode.SIGNAL_PEAK) && (!mox && current_meter_rx_mode != MeterRXMode.OFF))  // ke9ns ADD
                        {
                            line_pen = new Pen(Color.Red);
                            line_pen.Width = 3.0F;
                            g.DrawLine(line_pen, pixel_x1, 0, pixel_x1, H);
                  
                        } // peak

                        line_pen = new Pen(edge_avg_color);

                        g.DrawLine(line_dark_pen, pixel_x-1, 0, pixel_x-1, H); // rx1 edge needle
						g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
						g.DrawLine(line_dark_pen, pixel_x+1, 0, pixel_x+1, H);
    

                    }


                   
                    //===================================================
                    meter_timer.Stop();

					format = "f0";
					if(meter_detail) format = "f1";

					if(meter_timer.DurationMsec >= meter_dig_delay)
					{
						if(!mox)
						{
							switch(current_meter_rx_mode)
							{
								case MeterRXMode.SIGNAL_STRENGTH:
                               
								case MeterRXMode.SIGNAL_AVERAGE:
									output = num.ToString(format)+" dBm ";
									break;
                                case MeterRXMode.SIGNAL_PEAK: // ke9ns2 ADD 
                                    output = meter_peak_value.ToString(format) + " dBm ";
                                    break;
                                case MeterRXMode.ADC_L:
								case MeterRXMode.ADC_R:
								case MeterRXMode.ADC2_L:
								case MeterRXMode.ADC2_R:
									output = num.ToString("f1")+" dBFS ";
									break;
								case MeterRXMode.OFF:
									output = "";
									break;
							}
						}
						else
						{
							MeterTXMode mode = current_meter_tx_mode;
							if(chkTUN.Checked) mode = tune_meter_tx_mode;
							switch(mode)
							{
								case MeterTXMode.MIC:
								case MeterTXMode.LEVELER:
								case MeterTXMode.LVL_G:
								case MeterTXMode.EQ:
								case MeterTXMode.CPDR:
								case MeterTXMode.ALC:
								case MeterTXMode.ALC_G:								
									output = num.ToString(format)+" dB ";
									break;
								case MeterTXMode.FORWARD_POWER:
								case MeterTXMode.REVERSE_POWER:
                                    switch (current_model)
                                    {
                                      /*  case Model.SDR1000:
                                            if (pa_present && VFOAFreq < 30.0)
                                                output = num.ToString("f0") + " W ";
                                            else output = (num * 1000).ToString("f0") + " mW ";
                                            break;
                                      */  case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            output = num.ToString("f0") + " W ";
                                            break;
                                        case Model.FLEX1500:
                                            output = num.ToString("f0") + " % ";
                                            break;
                                    }
									break;
								case MeterTXMode.SWR:
									output = num.ToString("f1")+" : 1 ";
									break;
								case MeterTXMode.OFF:
									output = "";
									break;
							}
						}
						txtMultiText.Text = output;
						meter_timer.Start();
					}

					if(meter_data_ready)
					{
						meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
					}

				

#endregion // edge

                    break; // case edge

                //=============================================================
                //=============================================================
                //  KE9NS 3 RX1 ANALOG meter
                //=============================================================
                //=============================================================
                
                case MultiMeterDisplayMode.Analog:
#region Analog
                
                    if (meter_data_ready)
                    {
                        current_meter_data = new_meter_data;
                        meter_data_ready = false;
                    }

                    if (avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
                    {
                        num = avg_num = current_meter_data;
                    }
                    else
                    {
                        if (current_meter_data > avg_num)
                            num = avg_num = current_meter_data * 0.8 + avg_num * 0.2; // fast rise
                        else
                            num = avg_num = current_meter_data * 0.2 + avg_num * 0.8; // slow decay
                    }

                  
                    high_brush = new SolidBrush(analog_high_color); // red


                    //--------------------------------------------------------
                    // ke9ns add below

                
                    if (meterLMB == true)
                    {
                        low_brush = new SolidBrush(Color.Black); // white text
                        low_brush1 = new Pen(Color.Black);  // white

                        g.DrawImageUnscaled(meterback1, 0, 0); // new Rectangle(0, 0, W, H));  // ke9ns light meter image rectangle to show bitmap image in
   
                      //  txtMultiText.ForeColor = Color.Black;
                      //  txtMultiText.BackColor = Color.FromArgb(0xff, 0xff, 0xe4);

                    }
                    else if (meterDMB == true)
                    {
                        low_brush = new SolidBrush(Color.Black); // white text
                        low_brush1 = new Pen(Color.Black);  // white

                        g.DrawImageUnscaled(meterback2, 0, 0); // new Rectangle(0, 0, W, H));  // ke9ns dark meter image rectangle to show bitmap image in
 
                     //   txtMultiText.ForeColor = Color.Black;
                      //  txtMultiText.BackColor = Color.FromArgb(146, 146, 140);
                        
                    }
                    else
                    {
                        low_brush = new SolidBrush(analog_low_color); // white text
                        low_brush1 = new Pen(analog_low_color);  // white

                        g.DrawRectangle(new Pen(analog_meter_background_color), 0, 0, W, H); // black background

                      //  txtMultiText.ForeColor = MeterDigitalTextColor;
                      //  txtMultiText.BackColor = MeterDigitalBackgroundColor;

                    }



                    //=============================================
                    // Receiver meters  ke9ns12 analog RX1
                    //=============================================

                    if (!mox)
                    {
                        switch (current_meter_rx_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                            case MeterRXMode.SIGNAL_PEAK:       // ke9ns ADD
                             
                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                           
                                double line1 = 0;
                                double angle_start = 45;
                                double angle_span = 90;

                                int Origin_x = W / 2;
                                int Origin_y = (int)( (double)(H * 1.5)) ; // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                               
                             //   low_brush1 = new Pen(analog_low_color);  // white
                                

                                high_brush1 = new Pen(analog_high_color); // red Brushes.Red
                                // ke9ns lines under numbers to signify the type of meter
                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush4 = new Pen(Brushes.DarkSlateGray); //  

                                double spacing = ((double)W * 0.5 - 2.0) / 5.0;
                                double string_height = 0;

                              


                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                     low_brush1.Width = arc_thick; // 3.0
                                     g.DrawArc(low_brush1, 0, 37, W, W, -90, -47); // draw OUTER arc
 
                                
                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                    high_brush1.Width = arc_thick; // 3.0
                                    g.DrawArc(high_brush1, 0, 37, W, W, -44, -43); // draw OUTER arc was -47 
                           
                                //======================================
                                // Draw WHITE full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                    high_brush4.Width = arc_thick1; // 3.0
                                    g.DrawArc(high_brush4, 6, 43, W-12, W-12, -43, -94); // draw INNER arc

                                //======================================
                                // Draw Meter Name text behind needle
                                if (current_meter_rx_mode == MeterRXMode.SIGNAL_STRENGTH) g.DrawString("SIG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (current_meter_rx_mode == MeterRXMode.SIGNAL_AVERAGE) g.DrawString("AVG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (current_meter_rx_mode == MeterRXMode.SIGNAL_PEAK) g.DrawString("SIG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA

                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 6; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin; 
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                  

                                    //===============================================
                                    // Draw white numbers

                                    // Font f = new Font("Arial", 8.0f, FontStyle.Bold | FontStyle.Italic); // was 7
                                    //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString((-1 + i * 2).ToString(), ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));  // was 1.45

                              
                                    g.DrawString((-1 + i * 2).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);

                                  

                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = ((double)W * 0.5 - 2.0 - 4.0) / 3.0;

                                for (double i = 1; i < 4; i++) //red
                                {

                                    line1 = W * 0.5 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.5 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                  //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7
                                    SizeF size = g.MeasureString("+" + (i * 20).ToString(), ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = (W * 0.5 + i * spacing - string_width * 3 - i / 3 * 2);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.35) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.35 - (.05 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString("+" + (i * 20).ToString(), ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text


                                //--------------------------------------
                                //ke9ns add
                                //--------------------------------------

                             //   Image src = new Bitmap(meter1_image);
                              //  g.DrawImage(src, new Rectangle(45, 70, 65, 30));  // rectangle to show bitmap image in
                                
                               //---------------------------------------------

                                if (FREQA < 30)
                                {
                                    if (num > -73)
                                    {
                                        pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (73.0 + meter_peak_value) / 63.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                        pixel_x1 = (int)((meter_peak_value + 133.0) / 60.0 * (W * 0.5));
                                    }
                                } // < 30 mhz
                                else // correction for freq > 29 mhz
                                {
                                    if (num > -93) // ke9ns ADD correct S9 above 30mhz
                                    {
                                        pixel_x = (int)(W * 0.5 + (93.0 + num) / 43.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (93.0 + meter_peak_value) / 43.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 40.0 * (W * 0.5));
                                        pixel_x1 = (int)((meter_peak_value + 133.0) / 40.0 * (W * 0.5));
                                    }
                                } // > 29 mhz


                                break; // case MeterRXMode.SIGNAL_AVERAGE

                    //===================================
                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                            case MeterRXMode.ADC2_L:
                            case MeterRXMode.ADC2_R:

                         
                                spacing = ((double)W - 5.0) / 6.0;
                                g.FillRectangle(low_brush, 0, H - 4, (int)(W - 3.0 - spacing), 2);
                                g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 4, (int)spacing, 2);
                                for (int i = 1; i < 7; i++)
                                {
                                     b = low_brush;
                                    if (i == 6) b = high_brush;
                                    g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 8 - 3-3, 1, 6);
                                    g.FillRectangle(b, (int)(i * spacing), H - 8 - 6-6, 2, 12);

                                  //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    string s = (-120 + i * 20).ToString();
                                    SizeF size = g.MeasureString(s, ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                    string_height = size.Height - 2.0;

                                    g.DrawString(s, ff, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 8 - 12-3 - string_height));
                                }

                                pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                                break; // case MeterRXMode.ADC2_R:


                            case MeterRXMode.OFF:
                                break;
                        } // switch (current_meter_rx_mode)
                    } // !mox

 //=============================================
 // Transmitter meters ke9ns12tx RX1 analog
 //=============================================
                   
                    else
                    {
                        MeterTXMode mode = current_meter_tx_mode;
                        if (chkTUN.Checked) mode = tune_meter_tx_mode;
                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.CPDR:
                            case MeterTXMode.ALC:

                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                         
                               double line1 = 0;
                               int angle_start = 45;
                               int angle_span = 90;

                                int Origin_x = W / 2;
                                int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                              
                               //  low_brush1 = new Pen(analog_low_color);  // white
                                 high_brush1 = new Pen(analog_high_color); // red

                                 high_brush2 = new Pen(Brushes.Blue); // blue
                                 high_brush3 = new Pen(Brushes.Yellow); // yellow
                                 high_brush5 = new Pen(Brushes.Green); // 
                                 high_brush4 = new Pen(Brushes.DarkSlateGray); // 

                                double spacing = (W * 0.665 - 2.0) / 3.0;
                                double string_height = 0;

                               //======================================
                               // Draw WHITE arc line
                               // upper left corner x,y , width,height, start angle, sweep angle

                               low_brush1.Width = arc_thick;
                                 g.DrawArc(low_brush1, 0, 37, W, W, -75, -61); // draw OUTER arc


                               //======================================
                               // Draw Red arc line
                               // upper left corner x,y , width,height, start angle, sweep angle

                               high_brush1.Width = arc_thick;
                               g.DrawArc(high_brush1, 0, 37, W, W, -44, -27); // draw OUTER arc -31

                               //======================================
                               // Draw GREEN full arc line under white/red 
                               // upper left corner x,y , width,height, start angle, sweep angle

                               high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc

                                //======================================
                                // Draw TX Meter Name text
                                if (current_meter_tx_mode == MeterTXMode.CPDR) g.DrawString("CPDR", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA
                                else if (current_meter_tx_mode == MeterTXMode.LEVELER) g.DrawString("LVL", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (current_meter_tx_mode == MeterTXMode.EQ) g.DrawString("EQ", ff8, low_brush, W * 0.405F, H * 0.75F); // DDAA
                                else if (current_meter_tx_mode == MeterTXMode.MIC) g.DrawString("MIC", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (current_meter_tx_mode == MeterTXMode.ALC) g.DrawString("ALC", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA

                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 4; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                 

                                    //===============================================
                                    // Draw white numbers ALC RX1 analog


                                    //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.44) * Math.Cos(line));  // 1.4 convert signal to arc
                                    POSH = (int)((double)(H * (1.44 - (.010 * (i - 1)))) * Math.Sin(line));  // 1.48

                             
                                    g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.335 - 2.0 - 3.0) / 3.0;

                                for (double i = 1; i < 4; i++) //red
                                {
                                   
                                    line1 = W * 0.665 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.665 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text alc rx1 analog

                                  //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString(i.ToString(), ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = (W * 0.665 + i * spacing - (int)string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.38) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.38 - (.05 * (i - 1)))) * Math.Sin(line));

                              
                                    g.DrawString(i.ToString(), ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text



                                if (num > 0.0) // high area
                                {
                                    pixel_x = (int)(W * 0.665 + num / 3.0 * (W * 0.335 - 4));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 30.0) / 30.0 * (W * 0.665 - 1.0));
                                }
                                break; // case MeterTXMode.ALC:

                         //===========================================

                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:
                              
                                     line1 = 0;
                                     angle_start = 45;
                                     angle_span = 90;

                                     Origin_x = W / 2;
                                     Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)
                                    
                                
                               
                             //   low_brush1 = new Pen(analog_low_color);  // white
                                high_brush1 = new Pen(analog_high_color); // red

                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 

                                if (pa_present || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                                    (hid_init && current_model == Model.FLEX1500))
                                {

                                    //=================================================================
                                    // Draw curved meter movement for Power
                                    //=================================================================
                                  
                                    //======================================
                                    // Draw WHITE arc line
                                    // upper left corner x,y , width,height, start angle, sweep angle

                                    low_brush1.Width = arc_thick;
                                    g.DrawArc(low_brush1, 0, 37, W, W, -67, -68); // draw OUTER arc

                                    //======================================
                                    // Draw Red arc line
                                    // upper left corner x,y , width,height, start angle, sweep angle

                                    high_brush1.Width = arc_thick;
                                    g.DrawArc(high_brush1, 0, 37, W, W, -44, -20); // draw OUTER arc -24

                                    //======================================
                                    // Draw BLUE full arc line under white/red 
                                    // upper left corner x,y , width,height, start angle, sweep angle

                                    high_brush2.Width = arc_thick1;
                                    g.DrawArc(high_brush2, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc


                                    //======================================
                                    // Draw TX Meter Name text
                                    if (current_meter_tx_mode == MeterTXMode.FORWARD_POWER) g.DrawString("FWD", ff8, low_brush, W * 0.375F, H * 0.75F); // DDAA
                                    else if (current_meter_tx_mode == MeterTXMode.REVERSE_POWER) g.DrawString("REV", ff8, low_brush, W * 0.38F, H * 0.75F); // DDAA

                                    //======================================
                                    // WHITE  tick marks and text


                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                     string_height = 0;
                                    string[] list = { "5", "10", "50", "100" };

                                    for (double i = 1; i < 5; i++)
                                    {

                                        line1 = i * spacing - spacing * 0.5;

                                        double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                        int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                        int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        low_brush1.Width = tick_thin;
                                        g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                        line1 = i * spacing;

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                        POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        low_brush1.Width = tick_thick;
                                        g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                                                                                                         

                                        //===============================================
                                        // Draw white numbers fwd rx1 analog

                                        string s = list[(int)i - 1];
                                      //  Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;
                                       
                                        line1 = i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4);

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.44) * Math.Cos(line));  //1.4  convert signal to arc
                                        POSH = (int)((double)(H * (1.44 - (.010 * (i - 1)))) * Math.Sin(line));  // 1.48

                                        g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);
                                        

                                    } // white ticks and test

                                    // =======================
                                    // RED tick marks and text

                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;

                                    for (double i = 1; i < 2; i++) //red
                                    {

                                        line1 = (double)W * 0.75 + i * spacing - spacing * 0.5;

                                        double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                        int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                        int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        high_brush1.Width = tick_thin;

                                        g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                        line1 = (double)W * 0.75 + i * spacing;

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                        POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        high_brush1.Width = tick_thick;
                                        g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                        //==========================================
                                        // draw red text fwd analog

                                     //   Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        line1 = W * 0.75 + i * spacing - (int)3.5 * string_width;

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.30) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * (1.30 - (.05 * (i - 1)))) * Math.Sin(line));

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("120+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);
    
                                    } // red ticks and text
                                 
 
                                    if (num <= 100.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 5.0)
                                            pixel_x = (int)(num / 5.0 * (int)spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                        else if (num <= 50.0)
                                            pixel_x = (int)(2 * spacing + (num - 10.0) / 40.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 50.0) / 50.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 120.0)
                                            pixel_x = (int)(W * 0.75 + (num - 100.0) / 20.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 120.0) / 60.0 * spacing);
                                    }
                                } //
                               
  

                                break; //case MeterTXMode.REVERSE_POWER:

                            //==========================================

                            case MeterTXMode.SWR:

                                //=================================================================
                                // Draw curved meter movement for SWR
                                //=================================================================
                            
                               line1 = 0;
                               angle_start = 45;
                               angle_span = 90;

                                 Origin_x = W / 2;
                                 Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                               
                              //   low_brush1 = new Pen(analog_low_color);  // white
                                

                                 high_brush2 = new Pen(Brushes.Red); // blue
                                 high_brush1 = new Pen(analog_high_color); // red
                                 high_brush3 = new Pen(Brushes.Yellow); // yellow
                                 high_brush4 = new Pen(Brushes.AntiqueWhite); // 

                              
                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -88, -48); // draw OUTER arc -75  -61

                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -41); // draw OUTER arc -41

                                //======================================
                                // Draw Yellow full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush3.Width = arc_thick1;
                                g.DrawArc(high_brush3, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc

                                //======================================
                                // Draw TX Meter Name text
                                if (current_meter_tx_mode == MeterTXMode.SWR) g.DrawString("SWR", ff8, low_brush, W * 0.375F, H * 0.75F); // DDAA

                                //======================================
                                // WHITE  tick marks and text SWR


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] swr_list = { "1.5", "2", "5", "10", "20" };
                               
                                for (double i = 1; i < 5; i++)
                                {
                                   
                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    
                                    //===============================================
                                    // Draw white numbers rx1 swr analog

                                    string s = swr_list[(int)i - 1];

                                  //  Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                   
                                    line1 = i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4);

                                    if (i == 1) line1 = line1 + 10;

                                  
                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    if (i == 1)
                                    {
                                        POSW = (int)((double)(H * 1.50) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * (1.50 - (.010 * (i - 1)))) * Math.Sin(line));
                                    }
                                    else
                                    {
                                        POSW = (int)((double)(H * 1.44) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * (1.44 - (.010 * (i - 1)))) * Math.Sin(line));
                                    }

                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);
                                   

                                } // white ticks and text

                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = (double)W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = (double)W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                 //   Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = W * 0.75 + i * spacing - (int)3.5 * string_width;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.3) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.3 - (.05 * (i - 1)))) * Math.Sin(line));

                                     g.DrawString("20+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);
                                  
                                } // red ticks and text
                                 


                                if (num < 10.0) // low area
                                {
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 3.0 * spacing);
                                    else
                                        pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    pixel_x = (int)(W * 0.75 + (num - 10.0) / 10.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;

                                break;// case MeterTXMode.SWR:

                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:

                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                            
                                 line1 = 0;
                                 angle_start = 45;
                                 angle_span = 90;

                                 Origin_x = W / 2;
                                 Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                                
                               //     low_brush1 = new Pen(analog_low_color);  // white
                               

                                high_brush2 = new Pen(Brushes.Blue); // blue
                                 high_brush1 = new Pen(analog_high_color); // red
                                 high_brush3 = new Pen(Brushes.Yellow); // yellow
                                  high_brush5 = new Pen(Brushes.Green); // 
                                 high_brush4 = new Pen(Brushes.DarkSlateGray); // 


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] gain_list = { "5", "10", "15", "20", "25" };


                                //=================================================================
                                // Draw curved meter movement for Power
                                //=================================================================

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -67, -68); // draw OUTER arc

                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -20); // draw OUTER arc -24

                                //======================================
                                // Draw Green full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc


                                //======================================
                                // Draw TX Meter Name text
                                if (current_meter_tx_mode == MeterTXMode.LVL_G) g.DrawString("LVLG", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA
                                else if (current_meter_tx_mode == MeterTXMode.ALC_G) g.DrawString("ALCG", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA
                               
                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 5; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers

                                    string s = gain_list[(int)i - 1];
                                 //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                 //  g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);

                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);

                                } // white ticks and test







                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                  //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;


                                    line1 = (W * 0.75 + i * spacing - (int)2.5 * string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString("25+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text

	                            spacing = (W*0.75-2.0)/4.0;
								pixel_x = (int)(num/5.0*spacing);

                            break;// case MeterTXMode.LVL_G:
 					
								
							
  
                            case MeterTXMode.OFF:
                                break;
                        } // switch (mode)
                    } // mox


//=============================================
// ke9ns Needle movement RX1 ANALOG ke9ns12
//=============================================
          
                        
                  if (                  //edge needle if not one of my meter movements
                          ( ((current_meter_rx_mode == MeterRXMode.ADC2_R) || (current_meter_rx_mode == MeterRXMode.ADC2_L) ||
                          (current_meter_rx_mode == MeterRXMode.ADC_R) || (current_meter_rx_mode == MeterRXMode.ADC_L) ) &&
                          (!mox && current_meter_rx_mode != MeterRXMode.OFF) )
                     ) 
                           
                    {
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);

                         line_pen = new Pen(edge_avg_color); // yellow


                    //  line_dark_pen = new Pen(
                     //       Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,
                     //       (edge_avg_color.G + edge_meter_background_color.G) / 2,
                     //       (edge_avg_color.B + edge_meter_background_color.B) / 2));

                    

                        g.DrawLine(line_dark_pen, pixel_x - 1, 0, pixel_x - 1, H); // rx1 analog edge needle
                        g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
                        g.DrawLine(line_dark_pen, pixel_x + 1, 0, pixel_x + 1, H);

                       
                    } // edge needle

                    else if (  // TX meter movements
                                 ((mox && current_meter_tx_mode != MeterTXMode.OFF) && ((current_meter_tx_mode == MeterTXMode.LVL_G) ||
                                 (current_meter_tx_mode == MeterTXMode.ALC_G)||(current_meter_tx_mode == MeterTXMode.CPDR) ||
                                 (current_meter_tx_mode == MeterTXMode.LEVELER) || (current_meter_tx_mode == MeterTXMode.EQ) ||
                                 (current_meter_tx_mode == MeterTXMode.MIC) || (current_meter_tx_mode == MeterTXMode.ALC) ||
                                 (current_meter_tx_mode == MeterTXMode.SWR) || (current_meter_tx_mode == MeterTXMode.FORWARD_POWER) ||
                                 (current_meter_tx_mode == MeterTXMode.REVERSE_POWER)))
                            )
                     {

                         // pixel_x (i.e. signal) goes from 0 to W  Width 
                         // posx = originx + (2 * D * cos (angle))
                         // posy = originy + (2 * D * sin (angle))
                         // for a meter of 45deg to 135deg = 90deg total span :   
                         // but sin and cos in radians not degs.
                         // posx = originx + (2 * D * cos (angle*PI/180))

                         //  box dimensions:
                         //  0,0   W,0
                         //  0,H   W,H

                         pixel_x = Math.Max(0, pixel_x);
                         pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                       //  line_pen = new Pen(analog_avg_color);
                        
                         line_pen = new Pen(analog_high_color); // Color.Red

                         line_pen.Width = 2.8F; // was 2.8F
                     
                         int Origin_x = W / 2;
                         int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                         double angle_start = 45;
                         double angle_span = 90;

                         angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                         signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math


                        if ((meterDMB == true) || (meterPointer == true)) // Dark meter background, so needle shadow is light
                        {

                            if ((meterPointer == true))
                            {
                                RotateImage(yell, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);


                              //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                              //  g.DrawImage(yell1, dest);            // draw rotated image
                            }
                            else
                            {
                                RotateImage(white, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);


                                //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                                //  g.DrawImage(white1, dest);            // draw rotated image

                            }


                        }
                        else if (meterLMB == true) // Dark meter background, so needle shadow is light
                        {
                            RotateImage(black, angle, Origin_y);
                            g.DrawImageUnscaled(rotatedImage, 0, 0);

                            //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                            //  g.DrawImage(black1, dest);            // draw rotated image
                        }
                        else
                        {
                            line_pen = new Pen(analog_avg_color);
                            line_pen.Width = 2.2F; // was 2.6F
     
                            int POSW = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                            int POSH = (int)((double)(H * 1.25) * Math.Sin(signal));

                            g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)

                        }


                        //  Debug.WriteLine("Signal " + signal);

                        //======================================
                        // Draw TX Meter Name text
                     //   if (current_meter_tx_mode == MeterTXMode.LVL_G)  g.DrawString("LVLG", ff8, low_brush, W * 0.35F, H * 0.75F); //DDAA
                     //   else if (current_meter_tx_mode == MeterTXMode.ALC_G) g.DrawString("ALCG", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA
                     //   else if (current_meter_tx_mode == MeterTXMode.CPDR) g.DrawString("CPDR", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA
                     //   else if (current_meter_tx_mode == MeterTXMode.LEVELER) g.DrawString("LVL", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                     //   else if (current_meter_tx_mode == MeterTXMode.EQ) g.DrawString("EQ", ff8, low_brush, W * 0.42F, H * 0.75F); // DDAA
                     //   else if (current_meter_tx_mode == MeterTXMode.MIC) g.DrawString("MIC", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                      //  else if (current_meter_tx_mode == MeterTXMode.ALC) g.DrawString("ALC", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                      //  else if (current_meter_tx_mode == MeterTXMode.SWR) g.DrawString("SWR", ff8, low_brush, W * 0.385F, H * 0.75F); // DDAA
                      //  else if (current_meter_tx_mode == MeterTXMode.FORWARD_POWER) g.DrawString("FWD", ff8, low_brush, W * 0.385F, H * 0.75F); // DDAA
                      //  else if (current_meter_tx_mode == MeterTXMode.REVERSE_POWER) g.DrawString("REV", ff8, low_brush, W * 0.385F, H * 0.75F); // DDAA


                    } // TX curved needle

                    else if (  // SIGNAL, AVG SIGNAL, SIGNAL PEAK rx1 ANALOG
                                 ( ((current_meter_rx_mode == MeterRXMode.SIGNAL_STRENGTH) || (current_meter_rx_mode == MeterRXMode.SIGNAL_AVERAGE) ||
                                     (current_meter_rx_mode == MeterRXMode.SIGNAL_PEAK) ) &&  (!mox && current_meter_rx_mode != MeterRXMode.OFF) )
                        )
                    {
                        // pixel_x (i.e. signal) goes from 0 to W  Width 
                        // posx = originx + (2 * D * cos (angle))
                        // posy = originy + (2 * D * sin (angle))
                        // for a meter of 45deg to 135deg = 90deg total span :   
                        // but sin and cos in radians not degs.
                        // posx = originx + (2 * D * cos (angle*PI/180))

                        //  box dimensions:
                        //  0,0   W,0
                        //  0,H   W,H

                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        pixel_x1 = Math.Max(0, pixel_x1);
                        pixel_x1 = Math.Min(W - 3, pixel_x1);

                       line_pen = new Pen(analog_avg_color);
                        
                     
                      
                        int Origin_x = W / 2;
                        int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 90;
                      
                     
                        if ((current_meter_rx_mode == MeterRXMode.SIGNAL_PEAK) && (!mox && current_meter_rx_mode != MeterRXMode.OFF))  // ke9ns ADD
                        {

                            angle = signal = (angle_start + ((double)pixel_x1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                            signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math


                            if ((meterDMB == true)|| (meterLMB == true) || (meterPointer == true)) // Dark meter background, so needle shadow is light
                            {
                                RotateImage(red, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                                //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                                //   g.DrawImage(red1, dest);            // draw rotated image
                            }
                            else
                            {

                               
                                int POSW1 = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                                int  POSH1 = (int)((double)(H * 1.25) * Math.Sin(signal));

                                line_pen = new Pen(analog_high_color); // Color.Red
                                line_pen.Width = 2.6F;

                                g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW1, Origin_y - POSH1);  // draw meter needle movement (by flipping result around since inc values go down not up)
                            }


                        } // peak


                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math


                       // Analog meter

                        if ((meterDMB == true) || (meterPointer == true)) // Dark meter background, so needle shadow is light
                        {
                            if ((meterPointer == true))
                            {
                                RotateImage(yell, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                                //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                                //   g.DrawImage(yell1, dest);            // draw rotated image

                            }
                            else
                            {
                                RotateImage(white, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                              //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                              //  g.DrawImage(white1, dest);            // draw rotated image

                            }

                           
                        }
                        else if (meterLMB == true) // Dark meter background, so needle shadow is light
                        {
                            RotateImage(black, angle, Origin_y);
                            g.DrawImageUnscaled(rotatedImage, 0, 0);

                            //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                            //  g.DrawImage(black1, dest);            // draw rotated image
                        }
                        else
                        {
                            line_pen = new Pen(analog_avg_color);
                            line_pen.Width = 2.2F; // was 2.6F
  
                            int POSW = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                            int POSH = (int)((double)(H * 1.25) * Math.Sin(signal));

                            g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)


                        }

                        //======================================
                        // Draw Meter Name text in front of needle
                     //   if ( current_meter_rx_mode == MeterRXMode.SIGNAL_STRENGTH)    g.DrawString("SIG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                     //   else if (current_meter_rx_mode == MeterRXMode.SIGNAL_AVERAGE ) g.DrawString("AVG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                     //   else if (current_meter_rx_mode == MeterRXMode.SIGNAL_PEAK) g.DrawString("SIG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                        


                    } //   if meter is ON in RX or TX mode, then draw line



                    //=============================================
                    // Type NUMBERS in dbM above meter movement
                    //=============================================
                    meter_timer.Stop();

                    format = "f0";
                    if (meter_detail) format = "f1";

                    if (meter_timer.DurationMsec >= meter_dig_delay)
                    {
                        if (!mox)
                        {
                            switch (current_meter_rx_mode)
                            {
                                case MeterRXMode.SIGNAL_STRENGTH:
                               
                                case MeterRXMode.SIGNAL_AVERAGE:
                                    output = num.ToString(format) + " dBm ";
                                    break;
                                case MeterRXMode.SIGNAL_PEAK: // ke9ns2 ADD 
                                    output = meter_peak_value.ToString(format) + " dBm ";
                                    break;
                                case MeterRXMode.ADC_L:
                                case MeterRXMode.ADC_R:
                                case MeterRXMode.ADC2_L:
                                case MeterRXMode.ADC2_R:
                                    output = num.ToString("f1") + " dBFS ";
                                    break;
                                case MeterRXMode.OFF:
                                    output = "";
                                    break;
                            }// switch (current_meter_rx_mode)
                        }// mox
                        else
                        {
                            MeterTXMode mode = current_meter_tx_mode;
                            if (chkTUN.Checked) mode = tune_meter_tx_mode;
                            switch (mode)
                            {
                                case MeterTXMode.MIC:
                                case MeterTXMode.LEVELER:
                                case MeterTXMode.LVL_G:
                                case MeterTXMode.EQ:
                                case MeterTXMode.CPDR:
                                case MeterTXMode.ALC:
                                case MeterTXMode.ALC_G:
                                    output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                case MeterTXMode.REVERSE_POWER:
                                    switch (current_model)
                                    {
                                      /*  case Model.SDR1000:
                                            if (pa_present && VFOAFreq < 30.0)
                                                output = num.ToString("f0") + " W ";
                                            else output = (num * 1000).ToString("f0") + " mW ";
                                            break;
                                      */  case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            output = num.ToString("f0") + " W ";
                                            break;
                                        case Model.FLEX1500:
                                            output = num.ToString("f0") + " % ";
                                            break;
                                    }
                                    break;
                                case MeterTXMode.SWR:
                                    output = num.ToString("f1") + " : 1 ";
                                    break;
                                case MeterTXMode.OFF:
                                    output = "";
                                    break;

                            }// switch mode
                        }//mox

                        txtMultiText.Text = output;
                        meter_timer.Start();

                    }// if (meter_timer.DurationMsec >= meter_dig_delay)

                    if (meter_data_ready)
                    {
                        meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
                    }

                   
#endregion //analog
                    break; // RX1 analog

               
            } // switch(current_meter_display_mode)

		} //  picMultiMeterDigital_Paint

        //=============================================================
        //=============================================================
        //=============================================================
        //=============================================================
        //=============================================================



        //========================================================
        // RX2 meters
        //========================================================
        private double rx2_avg_num = -130.0;
		private void picRX2Meter_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			int H = picRX2Meter.ClientSize.Height;
			int W = picRX2Meter.ClientSize.Width;
			Graphics g = e.Graphics;

			double num;
			int pixel_x = 0;
            int pixel_x1 = 0; // ke9ns ADD for new meters
			string output = "";

            g.InterpolationMode = InterpolationMode.HighQualityBicubic;
            g.SmoothingMode = SmoothingMode.AntiAlias;


            line_dark_pen = new Pen( // this causes a shadow color around the needle of the EDGE meters
                        Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2, // red
                        (edge_avg_color.G + edge_meter_background_color.G) / 2, // green
                        (edge_avg_color.B + edge_meter_background_color.B) / 2)); // blue



           

            //---------------------------------------------------------------------------------------------
            bool mox2 = false; // ke9ns add  false = rx    true = 2nd tx meter active

            if ((setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == false) || (TXMeter2 == false) || ((TXMeter2 == true) && (!MOX))) // ke9ns do RX2 if in duplex mode and not in special 2nd TX meter mode
            {
                if ((!FWCEEPROM.RX2OK) || (FWCEEPROM.RX2OK && chkRX2.Checked == false)) mox2 = true; // ke9ns keep meter set for the TX type you wanted all the time
                else mox2 = false; // receiving on RX2 or dont want 2nd tX meter

              //  Debug.WriteLine("wwwwwwwwwwwwwwwwwwwwwwww " + mox2);

               
                if ((mox2 == true) && (current_meter_tx1_mode == MeterTXMode.MIC))
                { 
                        rx2_meter_new_data = (float)tx2_meter_new_data;
                }
            }
            else
            {
                mox2 = true; // transmitting and want 2nd tx meter to function
            }

           
            //---------------------------------------------------------------------------------------------

            switch (current_meter_display_mode) // ke9ns which meter type is selected
			{

               //=============================================================
               //=============================================================
               // KE9NS 4 RX2 TR7 meter
               //=============================================================
               //=============================================================

				case MultiMeterDisplayMode.Original:
#region AnalogTR7

               
					if(rx2_meter_data_ready)
					{
						rx2_meter_current_data = rx2_meter_new_data;
						rx2_meter_data_ready = false;
					}

					if(rx2_avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
					{
						num = rx2_avg_num = rx2_meter_current_data;
					}
					else
					{
						if(rx2_meter_current_data > rx2_avg_num)
							num = rx2_avg_num = rx2_meter_current_data * 0.8 + rx2_avg_num * 0.2; // fast rise
						else 
							num = rx2_avg_num = rx2_meter_current_data * 0.2 + rx2_avg_num * 0.8; // slow decay
					}


                  //  if ((mox2) && (!mox)) num = -100.0;  // zero the value if in 2nd tx mode but not transmitting

                    g.DrawRectangle(new Pen(meter_background_color), 0, 0, W, H);

					 low_brush = new SolidBrush(edge_low_color);
					 high_brush = new SolidBrush(edge_high_color);


                    if (!mox2)
                    {
                        switch (rx2_meter_mode)
                        {

                            //=============================================
                            // Receiver meters ke9ns10
                            //=============================================

                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                            case MeterRXMode.SIGNAL_PEAK:  // ke9ns ADD

                                //=================================================================
                           

                                int Origin_x = W / 2;
                                int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                                low_brush1 = new Pen(edge_low_color);  // white

                                high_brush2 = new Pen(Brushes.Red); // blue

                                high_brush1 = new Pen(Brushes.Red); // red
                                double spacing;
                                double string_height = 0;
                                //=======================================
                                // meter image TR7 rx2
                                //=======================================

                               // Image src = new Bitmap(meter_image);

                                g.DrawImage(TR7, new Rectangle(0, 5, W, H));  // rectangle to show bitmap image in

                                //========================================


                                if (FREQB < 30)
                                {
                                    if (num > -73)
                                    {
                                        pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (73.0 + rx2_meter_peak_value) / 63.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                        pixel_x1 = (int)((rx2_meter_peak_value + 133.0) / 60.0 * (W * 0.5));
                                    }
                                } // < 30 mhz
                                else // correction for freq > 29 mhz
                                {
                                    if (num > -93) // ke9ns ADD correct S9 above 30mhz
                                    {
                                        pixel_x = (int)(W * 0.5 + (93.0 + num) / 43.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (93.0 + rx2_meter_peak_value) / 43.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 40.0 * (W * 0.5));
                                        pixel_x1 = (int)((rx2_meter_peak_value + 133.0) / 40.0 * (W * 0.5));
                                    }
                                } // > 29 mhz

                                break; // signal RX2


                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                            case MeterRXMode.ADC2_L:
                            case MeterRXMode.ADC2_R:

                                spacing = ((double)W - 5.0) / 6.0;
                                g.FillRectangle(low_brush, 0, H - 8, (int)(W - 3.0 - spacing), 2);
                                g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 8, (int)spacing, 2);
                                for (int i = 1; i < 7; i++)
                                {
                                     b = low_brush;
                                    if (i == 6) b = high_brush;
                                    g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(b, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    string s = (-120 + i * 20).ToString();
                                    SizeF size = g.MeasureString(s, ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                    string_height = size.Height - 2.0;

                                    g.DrawString(s, ff, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 8 - 12 - 3 - string_height));
                                }

                                pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                                break;
                            case MeterRXMode.OFF:
                                break;
                        } //rx2_meter_mode

                    } // !MOX2


                    //=============================================
                    // Transmitter meters TR7 RX2
                    //=============================================

                    else
                    {
                        MeterTXMode mode = current_meter_tx1_mode;
                       // if (chkTUN.Checked) mode = tune_meter_tx_mode;
                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.CPDR:
                            case MeterTXMode.ALC:

                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                          
                                double line1 = 0;
                                int angle_start = 45;
                                int angle_span = 90;

                                int Origin_x = W / 2;
                                int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                                low_brush1 = new Pen(edge_low_color);  // white
                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush1 = new Pen(Brushes.Red); // red
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                                                           //   Pen high_brush4 = new Pen(Brushes.BurlyWood); //  
                                high_brush5 = new Pen(Brushes.Green); // 
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 


                                double spacing = (W * 0.665 - 2.0) / 3.0;
                                double string_height = 0;

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -75, -61); // draw OUTER arc


                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -27); // draw OUTER arc  -31

                                //======================================
                                // Draw GREEN full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc


                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 4; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers


                                    //  Font f = new Font("Swis721 BlkEx BT", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);

                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.335 - 2.0 - 3.0) / 3.0;

                                for (double i = 1; i < 4; i++) //red
                                {

                                    line1 = W * 0.665 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.665 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                    //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString(i.ToString(), ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = (W * 0.665 + i * spacing - (int)string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString(i.ToString(), ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text


                                if (num > 0.0) // high area
                                {
                                    pixel_x = (int)(W * 0.665 + num / 3.0 * (W * 0.335 - 4));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 30.0) / 30.0 * (W * 0.665 - 1.0));
                                }
                                break; // ALC TR7 rx1

                            //===========================================TR7

                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:

                                if (pa_present || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                                      (hid_init && current_model == Model.FLEX1500))
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    //   string[] list = { "5", "10", "50", "100" };

                                  //  Image src = new Bitmap(meter_image);

                                    g.DrawImage(TR7, new Rectangle(0, 5, W, H));  // rectangle to show bitmap image in

                                    //====================================TR7
                                    // redone to work with TR7 scale ke9ns scale
                                    // 19pixel = 0watts on scale
                                    // 50px = 10watts (jumps 5px from 0 to 10)
                                    // 92px = 50watts (jumps 10px from 10watts to 50w)
                                    // 108px = 90watts (jumps 3px form 50 to 100w)


                                    spacing = (W * 0.75 - 2.0) / 4.0;                //  (W * 0.75 - 2.0) / 4.0; = 28.5

                                    if (num <= 9.0)
                                    {
                                        pixel_x = (int)(num / 9.0 * (int)spacing);          // pixel_x = (int)(num / 5.0 * (int)spacing);
                                    }
                                    else if (num <= 50.0)
                                    {

                                        pixel_x = (int)(spacing + (num - 9.0) / 22.0 * spacing);// pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                    }
                                    else
                                    {
                                        pixel_x = (int)((1.863 * spacing) + spacing + (num - 50.0) / 80.0 * spacing);
                                    }

                                    pixel_x = pixel_x + 19; // zero point


                                } // 100watt TR7 scale


                                else // 1W version
                                {
                                    g.FillRectangle(low_brush, 0, H - 4, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 4, (int)(W * 0.25) - 9, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "100", "250", "500", "800", "1000" };



                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 4 - 6, 2, 6);

                                        string s = list[i - 1];
                                        // Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        g.DrawString(s, ff, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 + (int)(i / 2) - (int)(i / 4)), (int)(H - 4 - 8 - string_height));
                                    }
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 4 - 3, 1, 3);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 4 - 6, 2, 6);

                                        //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.DrawString("1000", ff, high_brush, (int)(W * 0.75 + 2 + i * spacing - (int)4.0 * string_width), (int)(H - 4 - 8 - string_height));
                                    }



                                    num *= 1000;
                                    if (num < 801.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 100.0)
                                            pixel_x = (int)(num / 100.0 * spacing);
                                        else if (num <= 250.0)
                                            pixel_x = (int)(spacing + (num - 100.0) / 150.0 * spacing);
                                        else if (num <= 500.0)
                                            pixel_x = (int)(2 * spacing + (num - 250.0) / 250.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 500.0) / 300.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                        pixel_x = (int)(W * 0.75 + (num - 800.0) / 200.0 * spacing);
                                    }
                                } // 1 watt version




                                break; //POWER RX1 TR7

                            //==========================================TR7

                            case MeterTXMode.SWR:


                                //=================================================================
                                // Draw curved meter movement for SWR
                                //=================================================================
                        
                                line1 = 0;
                                angle_start = 45;
                                angle_span = 90;

                                Origin_x = W / 2;
                                Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                                low_brush1 = new Pen(edge_low_color);  // white
                                high_brush2 = new Pen(Brushes.Red); // blue
                                high_brush1 = new Pen(Brushes.Red); // red
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush4 = new Pen(Brushes.AntiqueWhite); // 

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -88, -48); // draw OUTER arc -75  -61

                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -41); // draw OUTER arc -41

                                //======================================
                                // Draw Yellow full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush3.Width = arc_thick1;
                                g.DrawArc(high_brush3, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc

                                //======================================
                                // WHITE  tick marks and text


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] swr_list = { "1.5", "2", "5", "10", "20" };

                                for (double i = 1; i < 5; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers

                                    string s = swr_list[(int)i - 1];

                                    //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test

                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = (double)W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush2, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = (double)W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                    //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = W * 0.75 + i * spacing - (int)3.5 * string_width;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString("20+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text




                                if (num < 10.0) // low area
                                {
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 3.0 * spacing);
                                    else
                                        pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    pixel_x = (int)(W * 0.75 + (num - 10.0) / 10.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;

                                break;// case MeterTXMode.SWR:

                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:


                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                         
                                line1 = 0;
                                angle_start = 45;
                                angle_span = 90;

                                Origin_x = W / 2;
                                Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                                low_brush1 = new Pen(edge_low_color);  // white
                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush1 = new Pen(Brushes.Red); // red
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                                                       //  high_brush4 = new Pen(Brushes.BurlyWood); //  
                                high_brush5 = new Pen(Brushes.Green); // 
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] gain_list = { "5", "10", "15", "20", "25" };


                                //=================================================================
                                // Draw curved meter movement for Power
                                //=================================================================

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -67, -68); // draw OUTER arc

                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -20); // draw OUTER arc -24

                                //======================================
                                // Draw GREEN full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc


                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 5; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers

                                    string s = gain_list[(int)i - 1];
                                    //  Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                  //  g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);

                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);

                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                    //   Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;


                                    line1 = (W * 0.75 + i * spacing - (int)2.5 * string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString("25+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text

                                spacing = (W * 0.75 - 2.0) / 4.0;
                                pixel_x = (int)(num / 5.0 * spacing);


                                break;// case MeterTXMode.LVL_G:
                            case MeterTXMode.OFF:
                                break;
                        } // switch (mode)

                    } // mox2



                    //=============================================
                    // ke9ns needle movement TR7 rx2 
                    //=============================================

                    if (  // EDGE meter movement here
                        (((rx2_meter_mode == MeterRXMode.ADC2_R) || (rx2_meter_mode == MeterRXMode.ADC2_L) ||
                       (rx2_meter_mode == MeterRXMode.ADC_R) || (rx2_meter_mode == MeterRXMode.ADC_L)) &&
                       (!mox2 && rx2_meter_mode != MeterRXMode.OFF))
                        || ( (mox2 && current_meter_tx1_mode != MeterTXMode.OFF) && (current_meter_tx1_mode != MeterTXMode.LVL_G) &&
                        (current_meter_tx1_mode != MeterTXMode.ALC_G) && (current_meter_tx1_mode != MeterTXMode.CPDR) &&
                        (current_meter_tx1_mode != MeterTXMode.LEVELER) && (current_meter_tx1_mode != MeterTXMode.EQ) && 
                        (current_meter_tx1_mode != MeterTXMode.MIC) && (current_meter_tx1_mode != MeterTXMode.ALC) &&
                        (current_meter_tx1_mode != MeterTXMode.SWR) && (current_meter_tx1_mode != MeterTXMode.FORWARD_POWER) && 
                        (current_meter_tx1_mode != MeterTXMode.REVERSE_POWER) )
                         )
                    // if meter is ON in RX or TX mode, then draw line
                    {
                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);

                        line_pen = new Pen(edge_avg_color);

                      //  line_dark_pen = new Pen(
                       //     Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,
                       //     (edge_avg_color.G + edge_meter_background_color.G) / 2,
                       //     (edge_avg_color.B + edge_meter_background_color.B) / 2));

                   
                        g.DrawLine(line_dark_pen, pixel_x - 1, 0, pixel_x - 1, H);
                        g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
                        g.DrawLine(line_dark_pen, pixel_x + 1, 0, pixel_x + 1, H);
                       
                    }
                    else if (  // TX TR7 meter movements
                                 ((mox2 && current_meter_tx1_mode != MeterTXMode.OFF) && ((current_meter_tx1_mode == MeterTXMode.LVL_G) ||
                                 (current_meter_tx1_mode == MeterTXMode.ALC_G) || (current_meter_tx1_mode == MeterTXMode.EQ) ||
                                 (current_meter_tx1_mode == MeterTXMode.MIC) || (current_meter_tx1_mode == MeterTXMode.ALC) ||
                                 (current_meter_tx1_mode == MeterTXMode.SWR)))
                            )

                    {

                        // pixel_x (i.e. signal) goes from 0 to W  Width 
                        // posx = originx + (2 * D * cos (angle))
                        // posy = originy + (2 * D * sin (angle))
                        // for a meter of 45deg to 135deg = 90deg total span :   
                        // but sin and cos in radians not degs.
                        // posx = originx + (2 * D * cos (angle*PI/180))

                        //  box dimensions:
                        //  0,0   W,0
                        //  0,H   W,H

                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension


                

                        line_pen = new Pen(Color.Blue);
                        line_pen.Width = 2.8F;


                        int Origin_x = W / 2;
                        int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 90;

                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                        int POSW = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                        int POSH = (int)((double)(H * 1.25) * Math.Sin(signal));

                        g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)


                      


                    } // SWR TX curved needle

                    // POWER ONLY===TR7==RX2======================================================================================= ke9ns scale
                    else if (
                        ((mox2 && current_meter_tx1_mode != MeterTXMode.OFF) && ((current_meter_tx1_mode == MeterTXMode.FORWARD_POWER) ||
                        (current_meter_tx1_mode == MeterTXMode.REVERSE_POWER)))
                        )
                    {

                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        line_pen = new Pen(Color.Red); // rx 

                      

                        // 54 = 10 watts" 
                        // 80 = 40 watts


                        int Origin_x = (W / 2) - 1;
                        int Origin_y = (int)((double)(H * 1.84)); //1.90  1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                        double angle_start = 45;
                        double angle_span = 89;


                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                        int POSW = (int)((double)(H * 1.6) * Math.Cos(signal));  // 1.65 convert signal to arc
                        int POSH = (int)((double)(H * 1.6) * Math.Sin(signal));


                        line_pen.Width = 2.8F;
                        g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)



                    } // power
                      // SIGNAL ONLY===TR7==RX2=========================================================================================================
                      // this should be SIGNAL, AVG SIGNAL, PEAK SIGNAL
                    else if (
                            (((rx2_meter_mode == MeterRXMode.SIGNAL_STRENGTH) || (rx2_meter_mode == MeterRXMode.SIGNAL_AVERAGE) ||
                            (rx2_meter_mode == MeterRXMode.SIGNAL_PEAK)) && (!mox2 && rx2_meter_mode != MeterRXMode.OFF))
                       )
                    {
                        // SIGNAL ONLY

                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        pixel_x1 = Math.Max(0, pixel_x1);
                        pixel_x1 = Math.Min(W - 3, pixel_x1);                                             // define limits of X dimension

                        line_pen = new Pen(Color.Yellow); // rx 


                        int Origin_x = (W / 2) - 3;
                        int Origin_y = (int)((double)(H * 1.9)); // 1.84 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 89;
                        

                        if ((rx2_meter_mode == MeterRXMode.SIGNAL_PEAK) && (!mox2 && rx2_meter_mode != MeterRXMode.OFF)) // ke9ns ADD
                        {

                            angle = signal = (angle_start + ((double)pixel_x1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                            signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                            int POSW1 = (int)((double)(H * 1.65) * Math.Cos(signal));  // convert signal to arc 1.6 length of needle
                            int POSH1 = (int)((double)(H * 1.65) * Math.Sin(signal));

                            line_pen = new Pen(Color.Red);
                            line_pen.Width = 3.0F;
                            g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW1, Origin_y - POSH1);  // draw meter needle movement (by flipping result around since inc values go down not up)


                        } // peak

                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                        int POSW = (int)((double)(H * 1.65) * Math.Cos(signal));  // convert signal to arc
                        int POSH = (int)((double)(H * 1.65) * Math.Sin(signal));

                        line_pen = new Pen(Color.Yellow);

                        line_pen.Width = 2.6F;
                        g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)


                     
                    } //   if meter is ON in RX or TX mode, then draw line


                    //=================================================================
                    // needle RX2 TR7

                    /*
                    if ( // RX2 EDGE movement
                       
                        ( (rx2_meter_mode == MeterRXMode.ADC2_R) || (rx2_meter_mode == MeterRXMode.ADC2_L) ||
                       (rx2_meter_mode == MeterRXMode.ADC_R) || (rx2_meter_mode == MeterRXMode.ADC_L)) && 
                       ((!mox && rx2_meter_mode != MeterRXMode.OFF) || (mox && current_meter_tx1_mode != MeterTXMode.OFF))

                       )  
                 		{
						pixel_x = Math.Max(0, pixel_x);
						pixel_x = Math.Min(W-3, pixel_x);

						line_pen = new Pen(edge_avg_color);
						line_dark_pen = new Pen(
							Color.FromArgb((edge_avg_color.R+edge_meter_background_color.R)/2,
							(edge_avg_color.G+edge_meter_background_color.G)/2,
							(edge_avg_color.B+edge_meter_background_color.B)/2));

						

						g.DrawLine(line_dark_pen, pixel_x-1, 0, pixel_x-1, H);
						g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
						g.DrawLine(line_dark_pen, pixel_x+1, 0, pixel_x+1, H);

						
					}

                   
                    else if ( // RX2 SIGNAL, AVG SIGNAL, PEAK SIGNAL tr7

                            ((rx2_meter_mode == MeterRXMode.SIGNAL_STRENGTH) || (rx2_meter_mode == MeterRXMode.SIGNAL_AVERAGE) ||
                            (rx2_meter_mode == MeterRXMode.SIGNAL_PEAK)) && ( (!mox && rx2_meter_mode != MeterRXMode.OFF)
                                      || (mox && current_meter_tx1_mode != MeterTXMode.OFF) )
                        )

                    {

                        // pixel_x (i.e. signal) goes from 0 to W  Width 
                        // posx = originx + (2 * D * cos (angle))
                        // posy = originy + (2 * D * sin (angle))
                        // for a meter of 45deg to 135deg = 90deg total span :   
                        // but sin and cos in radians not degs.
                        // posx = originx + (2 * D * cos (angle*PI/180))

                        //  box dimensions:
                        //  0,0   W,0
                        //  0,H   W,H


                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        pixel_x1 = Math.Max(0, pixel_x1);
                        pixel_x1 = Math.Min(W - 3, pixel_x1);

                        line_pen = new Pen(Color.Yellow); // rx 
                      //  line_dark_pen = 
                      //  new Pen( Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,(edge_avg_color.G + edge_meter_background_color.G) / 2,(edge_avg_color.B + edge_meter_background_color.B) / 2));

                            
                       

                        int Origin_x = (W / 2)-3;
                        int Origin_y = (int)((double)(H * 1.84)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 89;
                       

                        if ((rx2_meter_mode == MeterRXMode.SIGNAL_PEAK) && (!mox && rx2_meter_mode != MeterRXMode.OFF)) // ke9ns ADD
                        {
                       
                          angle =   signal = (angle_start + ((double)pixel_x1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                            signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                            int POSW1 = (int)((double)(H * 1.6) * Math.Cos(signal));  // convert signal to arc
                            int POSH1 = (int)((double)(H * 1.6) * Math.Sin(signal));

                            line_pen = new Pen(Color.Red);
                            line_pen.Width = 3.5F;
                            g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW1, Origin_y - POSH1);  // draw meter needle movement (by flipping result around since inc values go down not up)

                        } // peak


                       angle =   signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                        int POSW = (int)( (double)(H*1.6) * Math.Cos(signal) );  // convert signal to arc
                        int POSH = (int)( (double)(H*1.6) * Math.Sin(signal) );

                        line_pen = new Pen(Color.Yellow);
                        line_pen.Width = 2.5F;

                        g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)


                      

                       
                       
                    } //   if meter is ON in RX or TX mode, then draw line
                    */
                    //================================================================
                    rx2_meter_timer.Stop();

					string format = "f0";
					if(meter_detail) format = "f1";

                    if (rx2_meter_timer.DurationMsec >= meter_dig_delay) // timer to update numbers 
                    {
                        if (!mox2) // RX
                        {
                            
                                switch (rx2_meter_mode)
                                {
                                    case MeterRXMode.SIGNAL_STRENGTH:

                                    case MeterRXMode.SIGNAL_AVERAGE:
                                        output = num.ToString(format) + " dBm ";
                                        break;
                                    case MeterRXMode.SIGNAL_PEAK: // ke9ns2 ADD 
                                        output = rx2_meter_peak_value.ToString(format) + " dBm ";
                                        break;
                                    case MeterRXMode.ADC_L:
                                    case MeterRXMode.ADC_R:
                                    case MeterRXMode.ADC2_L:
                                    case MeterRXMode.ADC2_R:
                                        output = num.ToString("f1") + " dBFS ";
                                        break;
                                    case MeterRXMode.OFF:
                                        output = "";
                                        break;
                                }
                           
                        }
                       else
                        {

                          
                                MeterTXMode mode = current_meter_tx1_mode;
                            // if (chkTUN.Checked) mode = tune_meter_tx1_mode;
                            switch (mode)
                            {
                                case MeterTXMode.MIC:
                                    output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.LEVELER:
                                case MeterTXMode.LVL_G:
                                case MeterTXMode.EQ:
                                case MeterTXMode.CPDR:
                                case MeterTXMode.ALC:
                                case MeterTXMode.ALC_G:
                                    if (!mox) output = "-30 dB ";
                                    else output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                case MeterTXMode.REVERSE_POWER:
                                    switch (current_model)
                                    {
                                       case Model.FLEX5000:
                                        case Model.FLEX3000:
                                          if (!mox) output =  "0 W ";
                                            else output = num.ToString("f0") + " W ";
                                            break;
                                        case Model.FLEX1500:
                                            if (!mox) output = "0 % ";
                                            else output = num.ToString("f0") + " % ";
                                            break;
                                    }
                                    break;
                                case MeterTXMode.SWR:
                                    if (!mox) output = "0 : 1 ";
                                    else output = num.ToString("f1") + " : 1 ";
                                    break;
                                case MeterTXMode.OFF:
                                    output = "";
                                    break;

                            }// switch mode
                        }//mox2

                            txtRX2Meter.Text = output; //only show digital numbers if RX2 ON or 2nd Meter is ON and in TX mode

						rx2_meter_timer.Start();
					}

					if(rx2_meter_data_ready)
					{
						rx2_meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
					}

					
#endregion

                    break; // RX2 TR7


                //=============================================================
                //=============================================================
                //KE9NS 5 RX2 EDGE
                //=============================================================
                //=============================================================
                
                case MultiMeterDisplayMode.Edge:
#region Edge

                
					if(rx2_meter_data_ready)
					{
						rx2_meter_current_data = rx2_meter_new_data;
						rx2_meter_data_ready = false;
					}

					if(rx2_avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
					{
						num = rx2_avg_num = rx2_meter_current_data;
					}
					else
					{
						if(rx2_meter_current_data > rx2_avg_num)
							num = rx2_avg_num = rx2_meter_current_data * 0.8 + rx2_avg_num * 0.2; // fast rise
						else 
							num = rx2_avg_num = rx2_meter_current_data * 0.2 + rx2_avg_num * 0.8; // slow decay
					}

                 //   if ((mox2) && (!mox)) num = 0.0;  // zero the value if in 2nd tx mode but not transmitting

                    g.DrawRectangle(new Pen(edge_meter_background_color), 0, 0, W, H);

					 low_brush = new SolidBrush(edge_low_color);
					 high_brush = new SolidBrush(edge_high_color);


                    if (!mox2)
                    {
                        switch (rx2_meter_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                            case MeterRXMode.SIGNAL_PEAK:  // ke9ns ADD


                                g.FillRectangle(low_brush, 0, H - 8, (int)(W * 0.5), 2);                    // draw line at bottom of meter white 
                                g.FillRectangle(high_brush, (int)(W * 0.5), H - 8, (int)(W * 0.5) - 4, 2);      // draw line at bottom of meter red

                                double spacing = (W * 0.5 - 2.0) / 5.0;
                                double string_height = 0;

                                for (int i = 1; i < 6; i++)                                                 // white tick marks and white Signal strength numbers
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7


                                    SizeF size = g.MeasureString((-1 + i * 2).ToString(), ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    g.SmoothingMode = SmoothingMode.AntiAlias;

                                    g.DrawString((-1 + i * 2).ToString(), ff, low_brush, (int)(i * spacing - string_width + (int)(i / 5)), (int)(H - 8 - 12 - 3 - string_height));
                                    g.SmoothingMode = SmoothingMode.None;
                                }


                                spacing = ((double)W * 0.5 - 2.0 - 4.0) / 3.0;
                                for (int i = 1; i < 4; i++)                                              // Red tick marks and white Signal strength numbers
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.5 + i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //  Font f = new Font("swis721blkexbt", 5.5f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("+" + (i * 20).ToString(), ff, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("+" + (i * 20).ToString(), ff2, high_brush, (int)(W * 0.5 + i * spacing - (int)string_width * 3 - i / 3 * 2), (int)(H - 8 - 12 - 3 - string_height));
                                }




                                if (FREQB < 30)
                                {
                                    if (num > -73)
                                    {
                                        pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (73.0 + rx2_meter_peak_value) / 63.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                        pixel_x1 = (int)((rx2_meter_peak_value + 133.0) / 60.0 * (W * 0.5));
                                    }
                                } // < 30 mhz
                                else // correction for freq > 29 mhz
                                {
                                    if (num > -93) // ke9ns ADD correct S9 above 30mhz
                                    {
                                        pixel_x = (int)(W * 0.5 + (93.0 + num) / 43.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (93.0 + rx2_meter_peak_value) / 43.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 40.0 * (W * 0.5));
                                        pixel_x1 = (int)((rx2_meter_peak_value + 133.0) / 40.0 * (W * 0.5));
                                    }
                                } // > 29 mhz


                                break; // signal rx2


                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                            case MeterRXMode.ADC2_L:
                            case MeterRXMode.ADC2_R:
                                spacing = ((double)W - 5.0) / 6.0;
                                g.FillRectangle(low_brush, 0, H - 8, (int)(W - 3.0 - spacing), 2);
                                g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 8, (int)spacing, 2);
                                for (int i = 1; i < 7; i++)
                                {
                                     b = low_brush;
                                    if (i == 6) b = high_brush;
                                    g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(b, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    string s = (-120 + i * 20).ToString();
                                    SizeF size = g.MeasureString(s, ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                    string_height = size.Height - 2.0;

                                    g.DrawString(s, ff, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 8 - 12 - 3 - string_height));
                                }

                                pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                                break;
                            case MeterRXMode.OFF:
                                break;
                        } // rx2 meter mode					
                    } // !MOX2

                    else
                    {
                        MeterTXMode mode = current_meter_tx1_mode;
                       // if (chkTUN.Checked) mode = tune_meter_tx1_mode;
                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.CPDR:
                            case MeterTXMode.ALC:
                                g.FillRectangle(low_brush, 0, H - 8, (int)(W * 0.665), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.665), H - 8, (int)(W * 0.335) - 2, 2);
                                double spacing = (W * 0.665 - 2.0) / 3.0;
                                double string_height = 0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                    string s = (-30 + i * 10).ToString();
                                    //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, ff, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 - (int)(i / 2) + (int)(i / 3)), (int)(H - 8 - 12 - 3 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.335 - 2.0 - 3.0) / 3.0;
                                for (int i = 1; i < 4; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.665 + i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.665 + i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString(i.ToString(), ff, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString(i.ToString(), ff, high_brush, (int)(W * 0.665 + i * spacing - (int)string_width), (int)(H - 8 - 12 - 3 - string_height));
                                }

                                if (num > 0.0) // high area
                                {
                                    pixel_x = (int)(W * 0.665 + num / 3.0 * (W * 0.335 - 4));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 30.0) / 30.0 * (W * 0.665 - 1.0));
                                }
                                break;

                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:
                                if (pa_present || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                                    (hid_init && current_model == Model.FLEX1500))
                                {
                                    g.FillRectangle(low_brush, 0, H - 8, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 8, (int)(W * 0.25) - 10, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "5", "10", "50", "100" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                        string s = list[i - 1];
                                        //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, ff, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4)), (int)(H - 8 - 12 - 3 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 8 - 6 - 6, 2, 12);

                                        //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("120+", ff, high_brush, (int)(W * 0.75 + i * spacing - (int)3.5 * string_width), (int)(H - 8 - 12 - 3 - string_height));
                                    }

                                    if (num <= 100.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 5.0)
                                            pixel_x = (int)(num / 5.0 * (int)spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                        else if (num <= 50.0)
                                            pixel_x = (int)(2 * spacing + (num - 10.0) / 40.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 50.0) / 50.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 120.0)
                                            pixel_x = (int)(W * 0.75 + (num - 100.0) / 20.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 120.0) / 60.0 * spacing);
                                    }
                                }
                                else // 1W version
                                {
                                    g.FillRectangle(low_brush, 0, H - 8, (int)(W * 0.75), 2);
                                    g.FillRectangle(high_brush, (int)(W * 0.75), H - 8, (int)(W * 0.25) - 9, 2);
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "100", "250", "500", "800", "1000" };
                                    for (int i = 1; i < 5; i++)
                                    {
                                        g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                        g.FillRectangle(low_brush, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                        string s = list[i - 1];
                                        //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                        //g.SmoothingMode = SmoothingMode.AntiAlias;
                                        g.DrawString(s, ff, low_brush, (int)(i * spacing - string_width * s.Length + 1.0 + (int)(i / 2) - (int)(i / 4)), (int)(H - 8 - 12 - 3 - string_height));
                                        //g.SmoothingMode = SmoothingMode.None;
                                    }
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    for (int i = 1; i < 2; i++)
                                    {
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                        g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 8 - 6 - 6, 2, 12);

                                        //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("1000", ff, high_brush, (int)(W * 0.75 + 2 + i * spacing - (int)4.0 * string_width), (int)(H - 8 - 12 - 3 - string_height));
                                    }

                                    num *= 1000;
                                    if (num < 801.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 100.0)
                                            pixel_x = (int)(num / 100.0 * spacing);
                                        else if (num <= 250.0)
                                            pixel_x = (int)(spacing + (num - 100.0) / 150.0 * spacing);
                                        else if (num <= 500.0)
                                            pixel_x = (int)(2 * spacing + (num - 250.0) / 250.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 500.0) / 300.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                        pixel_x = (int)(W * 0.75 + (num - 800.0) / 200.0 * spacing);
                                    }
                                }
                                break;

                            case MeterTXMode.SWR:
                                g.FillRectangle(low_brush, 0, H - 8, (int)(W * 0.75), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.75), H - 8, (int)(W * 0.25) - 9, 2);

                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] swr_list = { "1.5", "2", "5", "10", "20" };
                                for (int i = 1; i < 5; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                    string s = swr_list[i - 1];
                                    //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, ff, low_brush, (int)(i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4)), (int)(H - 8 - 12 - 3 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                for (int i = 1; i < 2; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("20+", ff, high_brush, (int)(W * 0.75 + i * spacing - (int)2.5 * string_width), (int)(H - 8 - 12 - 3 - string_height));
                                }

                                if (num < 10.0) // low area
                                {
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 3.0 * spacing);
                                    else
                                        pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    pixel_x = (int)(W * 0.75 + (num - 10.0) / 10.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;
                                break;

                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:
                                g.FillRectangle(low_brush, 0, H - 8, (int)(W * 0.75), 2);
                                g.FillRectangle(high_brush, (int)(W * 0.75), H - 8, (int)(W * 0.25) - 9, 2);
                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] gain_list = { "5", "10", "15", "20", "25" };
                                for (int i = 1; i < 5; i++)
                                {
                                    g.FillRectangle(low_brush, (int)(i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(low_brush, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                    string s = gain_list[i - 1];
                                    //   Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.AntiAlias;
                                    //g.SmoothingMode = SmoothingMode.AntiAlias;
                                    g.DrawString(s, ff, low_brush, (int)(i * spacing - string_width * s.Length + (int)(i / 3)), (int)(H - 8 - 12 - 3 - string_height));
                                    //g.SmoothingMode = SmoothingMode.None;
                                }
                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                for (int i = 1; i < 2; i++)
                                {
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing - spacing * 0.5), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(high_brush, (int)((double)W * 0.75 + i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //  Font f = new Font("swis721blkexbt", 7.0f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    //g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                    g.DrawString("25+", ff, high_brush, (int)(W * 0.75 + i * spacing - (int)2.5 * string_width), (int)(H - 8 - 12 - 3 - string_height));
                                }

                                spacing = (W * 0.75 - 2.0) / 4.0;
                                pixel_x = (int)(num / 5.0 * spacing);
                                break;
                            case MeterTXMode.OFF:
                                break;
                        }
                    } // MOX2



                    //===================================================================================
                    if ((!mox2 && rx2_meter_mode != MeterRXMode.OFF) ||	(mox2 && current_meter_tx1_mode != MeterTXMode.OFF))
					{
						pixel_x = Math.Max(0, pixel_x);
						pixel_x = Math.Min(W-3, pixel_x);

                        pixel_x1 = Math.Max(0, pixel_x1);
                        pixel_x1 = Math.Min(W - 3, pixel_x1);

                        line_pen = new Pen(edge_avg_color);

                      //  line_dark_pen = new Pen(
						//	Color.FromArgb((edge_avg_color.R+edge_meter_background_color.R)/2,
						//	(edge_avg_color.G+edge_meter_background_color.G)/2,
						//	(edge_avg_color.B+edge_meter_background_color.B)/2));

					

                        if ((rx2_meter_mode == MeterRXMode.SIGNAL_PEAK) && (!mox2 && rx2_meter_mode != MeterRXMode.OFF)) // ke9ns ADD
                        {
                            line_pen = new Pen(Color.Red);
                            line_pen.Width = 3.0F;
                            g.DrawLine(line_pen, pixel_x1, 0, pixel_x1, H);

                        } // peak

                        line_pen = new Pen(edge_avg_color);
                        g.DrawLine(line_dark_pen, pixel_x-1, 0, pixel_x-1, H); // rx2 edge
						g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
						g.DrawLine(line_dark_pen, pixel_x+1, 0, pixel_x+1, H);


                      
					}

    //====================================================
					rx2_meter_timer.Stop();

					format = "f0";
					if(meter_detail) format = "f1";

					if(rx2_meter_timer.DurationMsec >= meter_dig_delay)
					{
                        if (!mox2) // rx
                        {

                            
                                switch (rx2_meter_mode)
                                {
                                    case MeterRXMode.SIGNAL_STRENGTH:

                                    case MeterRXMode.SIGNAL_AVERAGE:
                                        output = num.ToString(format) + " dBm ";
                                        break;
                                    case MeterRXMode.SIGNAL_PEAK: // ke9ns2 ADD 
                                        output = rx2_meter_peak_value.ToString(format) + " dBm ";
                                        break;
                                    case MeterRXMode.ADC_L:
                                    case MeterRXMode.ADC_R:
                                    case MeterRXMode.ADC2_L:
                                    case MeterRXMode.ADC2_R:
                                        output = num.ToString("f1") + " dBFS ";
                                        break;
                                    case MeterRXMode.OFF:
                                        output = "";
                                        break;
                                }
                            
                        }
                        else
                        {
                            MeterTXMode mode = current_meter_tx1_mode;
                            // if (chkTUN.Checked) mode = tune_meter_tx1_mode;
                            switch (mode)
                            {
                                case MeterTXMode.MIC:
                                    output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.LEVELER:
                                case MeterTXMode.LVL_G:
                                case MeterTXMode.EQ:
                                case MeterTXMode.CPDR:
                                case MeterTXMode.ALC:
                                case MeterTXMode.ALC_G:
                                    if (!mox2) output = "-30 dB ";
                                    else output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                case MeterTXMode.REVERSE_POWER:
                                    switch (current_model)
                                    {
                                        case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            if (!mox) output =  "0 W ";
                                            else output = num.ToString("f0") + " W ";
                                            break;
                                        case Model.FLEX1500:
                                            if (!mox) output = "0 % ";
                                            else output = num.ToString("f0") + " % ";
                                            break;
                                    }
                                    break;
                                case MeterTXMode.SWR:
                                    if (!mox) output = "0 : 1 ";
                                    else output = num.ToString("f1") + " : 1 ";
                                    break;
                                case MeterTXMode.OFF:
                                    output = "";
                                    break;

                            }// switch mode
                        }//mox2


                         txtRX2Meter.Text = output; //only show digital numbers if RX2 ON or 2nd Meter is ON and in TX mode

                        rx2_meter_timer.Start();
					}

					if(rx2_meter_data_ready)
					{
						rx2_meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
					}

					
#endregion
                    break; // RX2 edge

                //========================================mi=====================
                //=============================================================
                // KE9NS 6 RX2 ANALOG
                //=============================================================
                //=============================================================
            
                
                case MultiMeterDisplayMode.Analog:
                    #region Analog

                 //   Debug.WriteLine(rx2_meter_new_data + " dB MIC-");
                  
                   
                 //   Debug.WriteLine(rx2_avg_num + "  rx2_avg_num");

                    if (rx2_meter_data_ready)
					{
						rx2_meter_current_data = rx2_meter_new_data;
						rx2_meter_data_ready = false;
					}

					if(rx2_avg_num == Display.CLEAR_FLAG) // reset average -- just use new value
					{
						num = rx2_avg_num = rx2_meter_current_data;
					}
					else
					{
						if(rx2_meter_current_data > rx2_avg_num)
							num = rx2_avg_num = rx2_meter_current_data * 0.8 + rx2_avg_num * 0.2; // fast rise
						else 
							num = rx2_avg_num = rx2_meter_current_data * 0.2 + rx2_avg_num * 0.8; // slow decay
					}

                 //   Debug.WriteLine(num + " dB MIC--");

                    //  if ((mox2) && (!mox)) num = 0.0;  // zero the value if in 2nd tx mode but not transmitting

                    high_brush = new SolidBrush(analog_high_color);


                    //--------------------------------------------------------
                    // ke9ns add below

                
                    if (meterLMB == true)
                    {
                        low_brush = new SolidBrush(Color.Black); // white text
                        low_brush1 = new Pen(Color.Black);  // white


                        g.DrawImageUnscaled(meterback1, 0, 0); // new Rectangle(0, 0, W, H));  // rectangle to show bitmap image in

                     //   txtRX2Meter.ForeColor = Color.Black;
                     //   txtRX2Meter.BackColor = Color.FromArgb(0xff, 0xff, 0xe4);
                    }
                    else if (meterDMB == true)
                    {
                        low_brush = new SolidBrush(Color.Black); // white text
                        low_brush1 = new Pen(Color.Black);  // white

                        g.DrawImageUnscaled(meterback2, 0, 0); // new Rectangle(0, 0, W, H));  // rectangle to show bitmap image in

                      //  txtRX2Meter.ForeColor = Color.Black;
                      //  txtRX2Meter.BackColor = Color.FromArgb(146, 146, 140);
                    }
                    else
                    {
                        low_brush = new SolidBrush(analog_low_color); // white text
                        low_brush1 = new Pen(analog_low_color);  // white

                        g.DrawRectangle(new Pen(analog_meter_background_color), 0, 0, W, H); // black background

                      //  txtRX2Meter.ForeColor = MeterDigitalTextColor;
                      //  txtRX2Meter.BackColor = MeterDigitalBackgroundColor;
                    }

                    //===========================================================================================
                    // ke9ns add TX meter to RX2 (but only when not using RX2)

                    if (!mox2)
                    {
           
                        switch (rx2_meter_mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                            case MeterRXMode.SIGNAL_AVERAGE:
                            case MeterRXMode.SIGNAL_PEAK:       // ke9ns ADD

                                //=================================================================
                                // Draw curved meter movement for signal strength ke9ns12
                                //=================================================================
                             

                                double line1 = 0;
                                double angle_start = 45;
                                double angle_span = 90;

                                int Origin_x = W / 2;
                                int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                             //   low_brush1 = new Pen(analog_low_color);  // white

                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush1 = new Pen(analog_high_color); // red 
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                                                           // high_brush4 = new Pen(Brushes.BurlyWood); //  
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 


                                double spacing = ((double)W * 0.5 - 2.0) / 5.0;
                                double string_height = 0;

                               
                                //======================================
                                // Draw WHITE arc line

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -90, -47); // draw OUTER arc

                                //======================================
                                // Draw Red arc line

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -43); // draw OUTER arc -47

                                //======================================
                                // Draw WHITE full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush4.Width = arc_thick1;
                                g.DrawArc(high_brush4, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc

                                //======================================
                                // Draw Meter Name text behind needle
                                if (rx2_meter_mode == MeterRXMode.SIGNAL_STRENGTH) g.DrawString("SIG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (rx2_meter_mode == MeterRXMode.SIGNAL_AVERAGE) g.DrawString("AVG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (rx2_meter_mode == MeterRXMode.SIGNAL_PEAK) g.DrawString("SIG", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA

                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 6; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement


                                    //===============================================
                                    // Draw white numbers

                                    //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString((-1 + i * 2).ToString(), ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString((-1 + i * 2).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = ((double)W * 0.5 - 2.0 - 4.0) / 3.0;

                                for (double i = 1; i < 4; i++) //red
                                {

                                    line1 = W * 0.5 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement

                                    line1 = W * 0.5 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement

                                    //==========================================
                                    // draw red text RX2 signal

                                    //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("+" + (i * 20).ToString(), ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = (W * 0.5 + i * spacing - string_width * 3 - i / 3 * 2);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.35) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.35 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString("+" + (i * 20).ToString(), ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text


                                if (FREQB < 30)
                                {
                                    if (num > -73)
                                    {
                                        pixel_x = (int)(W * 0.5 + (73.0 + num) / 63.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (73.0 + rx2_meter_peak_value) / 63.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 60.0 * (W * 0.5));
                                        pixel_x1 = (int)((rx2_meter_peak_value + 133.0) / 60.0 * (W * 0.5));
                                    }
                                } // < 30 mhz
                                else // correction for freq > 29 mhz
                                {
                                    if (num > -93) // ke9ns ADD correct S9 above 30mhz
                                    {
                                        pixel_x = (int)(W * 0.5 + (93.0 + num) / 43.0 * (W * 0.5 - 3));
                                        pixel_x1 = (int)(W * 0.5 + (93.0 + rx2_meter_peak_value) / 43.0 * (W * 0.5 - 3));
                                    }
                                    else
                                    {
                                        pixel_x = (int)((num + 133.0) / 40.0 * (W * 0.5));
                                        pixel_x1 = (int)((rx2_meter_peak_value + 133.0) / 40.0 * (W * 0.5));
                                    }
                                } // > 29 mhz



                                break; // signal RX2 analog

                            case MeterRXMode.ADC_L:
                            case MeterRXMode.ADC_R:
                            case MeterRXMode.ADC2_L:
                            case MeterRXMode.ADC2_R:
                                spacing = ((double)W - 5.0) / 6.0;
                                g.FillRectangle(low_brush, 0, H - 8, (int)(W - 3.0 - spacing), 2);
                                g.FillRectangle(high_brush, (int)(W - 3.0 - spacing), H - 8, (int)spacing, 2);
                                for (int i = 1; i < 7; i++)
                                {
                                     b = low_brush;
                                    if (i == 6) b = high_brush;
                                    g.FillRectangle(b, (int)(i * spacing - spacing / 2), H - 8 - 3 - 3, 1, 6);
                                    g.FillRectangle(b, (int)(i * spacing), H - 8 - 6 - 6, 2, 12);

                                    //  Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    string s = (-120 + i * 20).ToString();
                                    SizeF size = g.MeasureString(s, ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    string_height = size.Height - 2.0;

                                    g.DrawString(s, ff, b, (int)(i * spacing - (int)string_width * (s.Length)), (int)(H - 8 - 12 - 3 - string_height));
                                }

                                pixel_x = (int)((num + 120.0) / 120.0 * (W - 5.0));
                                break;
                            case MeterRXMode.OFF:
                                break;
                        }

                    } // !MOX2 (RX)

                    //=============================================
                    // Transmitter meters ke9ns12tx RX2
                    //=============================================

                    else
                    {

                     // Debug.WriteLine("MOX2T " + num);

                        MeterTXMode mode = current_meter_tx1_mode;
                       // if (chkTUN.Checked) mode = tune_meter_tx1_mode;
                        switch (mode)
                        {
                            case MeterTXMode.MIC:
                            case MeterTXMode.EQ:
                            case MeterTXMode.LEVELER:
                            case MeterTXMode.CPDR:
                            case MeterTXMode.ALC:

                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                              
                                double line1 = 0;
                                int angle_start = 45;
                                int angle_span = 90;

                                int Origin_x = W / 2;
                                int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                             //   low_brush1 = new Pen(analog_low_color);  // white
                                high_brush1 = new Pen(analog_high_color); // red

                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush5 = new Pen(Brushes.Green); // 
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 

                                double spacing = (W * 0.665 - 2.0) / 3.0;
                                double string_height = 0;

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -75, -61); // draw OUTER arc

                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -27); // draw OUTER arc -31

                                //======================================
                                // Draw GREEN full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc


                                //======================================
                                // Draw TX Meter Name text
                                if (mode == MeterTXMode.CPDR) g.DrawString("CPDR", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA
                                else if (mode == MeterTXMode.LEVELER) g.DrawString("LVL", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (mode == MeterTXMode.EQ) g.DrawString("EQ", ff8, low_brush, W * 0.405F, H * 0.75F); // DDAA
                                else if (mode == MeterTXMode.MIC) g.DrawString("MIC", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA
                                else if (mode == MeterTXMode.ALC) g.DrawString("ALC", ff8, low_brush, W * 0.39F, H * 0.75F); // DDAA

                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 4; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers ALC RX1 analog


                                    //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.44) * Math.Cos(line));  // 1.4 convert signal to arc
                                    POSH = (int)((double)(H * (1.44 - (.010 * (i - 1)))) * Math.Sin(line));  // 1.48


                                    g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.335 - 2.0 - 3.0) / 3.0;

                                for (double i = 1; i < 4; i++) //red
                                {

                                    line1 = W * 0.665 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.665 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text alc rx1 analog

                                    //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString(i.ToString(), ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = (W * 0.665 + i * spacing - (int)string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.38) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.38 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString(i.ToString(), ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text



                                if (num > 0.0) // high area
                                {
                                    pixel_x = (int)(W * 0.665 + num / 3.0 * (W * 0.335 - 4));
                                }
                                else
                                {
                                    pixel_x = (int)((num + 30.0) / 30.0 * (W * 0.665 - 1.0));
                                }
                                break; // case MeterTXMode.ALC:

                            //===========================================

                            case MeterTXMode.FORWARD_POWER:
                            case MeterTXMode.REVERSE_POWER:

                                line1 = 0;
                                angle_start = 45;
                                angle_span = 90;

                                Origin_x = W / 2;
                                Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)



                             //   low_brush1 = new Pen(analog_low_color);  // white
                                high_brush1 = new Pen(analog_high_color); // red

                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 

                                if (pa_present || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                                    (hid_init && current_model == Model.FLEX1500))
                                {

                                    //=================================================================
                                    // Draw curved meter movement for Power
                                    //=================================================================

                                    //======================================
                                    // Draw WHITE arc line
                                    // upper left corner x,y , width,height, start angle, sweep angle

                                    low_brush1.Width = arc_thick;
                                    g.DrawArc(low_brush1, 0, 37, W, W, -67, -68); // draw OUTER arc

                                    //======================================
                                    // Draw Red arc line
                                    // upper left corner x,y , width,height, start angle, sweep angle

                                    high_brush1.Width = arc_thick;
                                    g.DrawArc(high_brush1, 0, 37, W, W, -44, -20); // draw OUTER arc -24

                                    //======================================
                                    // Draw BLUE full arc line under white/red 
                                    // upper left corner x,y , width,height, start angle, sweep angle

                                    high_brush2.Width = arc_thick1;
                                    g.DrawArc(high_brush2, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc

                                    //======================================
                                    // Draw TX Meter Name text
                                    if (mode == MeterTXMode.FORWARD_POWER) g.DrawString("FWD", ff8, low_brush, W * 0.375F, H * 0.75F); // DDAA
                                    else if (mode == MeterTXMode.REVERSE_POWER) g.DrawString("REV", ff8, low_brush, W * 0.38F, H * 0.75F); // DDAA


                                    //======================================
                                    // WHITE  tick marks and text


                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    string_height = 0;
                                    string[] list = { "5", "10", "50", "100" };

                                    for (double i = 1; i < 5; i++)
                                    {

                                        line1 = i * spacing - spacing * 0.5;

                                        double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                        int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                        int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        low_brush1.Width = tick_thin;
                                        g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                        line1 = i * spacing;

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                        POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        low_brush1.Width = tick_thick;
                                        g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                        //===============================================
                                        // Draw white numbers fwd rx1 analog

                                        string s = list[(int)i - 1];
                                        //  Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;
                                        string_height = size.Height - 2.0;

                                        line1 = i * spacing - string_width * s.Length + (int)(i / 3) + (int)(i / 4);

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.44) * Math.Cos(line));  //1.4  convert signal to arc
                                        POSH = (int)((double)(H * (1.44 - (.010 * (i - 1)))) * Math.Sin(line));  // 1.48

                                        g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                    } // white ticks and test

                                    // =======================
                                    // RED tick marks and text

                                    spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;

                                    for (double i = 1; i < 2; i++) //red
                                    {

                                        line1 = (double)W * 0.75 + i * spacing - spacing * 0.5;

                                        double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                        int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                        int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        high_brush1.Width = tick_thin;
                                        g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                        line1 = (double)W * 0.75 + i * spacing;

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                        POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                        POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                        high_brush1.Width = tick_thick;
                                        g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                        //==========================================
                                        // draw red text fwd analog

                                        //   Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                        SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                        double string_width = size.Width - 2.0;

                                        line1 = W * 0.75 + i * spacing - (int)3.5 * string_width;

                                        line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                        line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                        POSW = (int)((double)(H * 1.30) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * (1.30 - (.05 * (i - 1)))) * Math.Sin(line));

                                        g.TextRenderingHint = TextRenderingHint.SystemDefault;
                                        g.DrawString("120+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                    } // red ticks and text


                                    if (num <= 100.0) // low area
                                    {
                                        spacing = (W * 0.75 - 2.0) / 4.0;
                                        if (num <= 5.0)
                                            pixel_x = (int)(num / 5.0 * (int)spacing);
                                        else if (num <= 10.0)
                                            pixel_x = (int)(spacing + (num - 5.0) / 5.0 * spacing);
                                        else if (num <= 50.0)
                                            pixel_x = (int)(2 * spacing + (num - 10.0) / 40.0 * spacing);
                                        else
                                            pixel_x = (int)(3 * spacing + (num - 50.0) / 50.0 * spacing);
                                    }
                                    else
                                    {
                                        spacing = (W * 0.25 - 2.0 - 10.0) / 1.0;
                                        if (num <= 120.0)
                                            pixel_x = (int)(W * 0.75 + (num - 100.0) / 20.0 * spacing);
                                        else
                                            pixel_x = (int)(W * 0.75 + spacing + (num - 120.0) / 60.0 * spacing);
                                    }
                                } //



                                break; //case MeterTXMode.REVERSE_POWER:

                            //==========================================

                            case MeterTXMode.SWR:

                                //=================================================================
                                // Draw curved meter movement for SWR RX2
                                //=================================================================
                               
                                line1 = 0;
                                angle_start = 45;
                                angle_span = 90;

                                Origin_x = W / 2;
                                Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                             //   low_brush1 = new Pen(analog_low_color);  // white


                                high_brush2 = new Pen(Brushes.Red); // blue
                                high_brush1 = new Pen(analog_high_color); // red
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush4 = new Pen(Brushes.AntiqueWhite); // 


                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -88, -48); // draw OUTER arc -75  -61

                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -41); // draw OUTER arc -41

                                //======================================
                                // Draw Yellow full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush3.Width = arc_thick1;
                                g.DrawArc(high_brush3, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc

                                //======================================
                                // Draw TX Meter Name text
                                if (mode == MeterTXMode.SWR) g.DrawString("SWR", ff8, low_brush, W * 0.375F, H * 0.75F); // DDAA

                                //======================================
                                // WHITE  tick marks and text SWR


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] swr_list = { "1.5", "2", "5", "10", "20" };

                                for (double i = 1; i < 5; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers rx2 swr analog

                                    string s = swr_list[(int)i - 1];

                                    //  Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;


                                    line1 = i * spacing - string_width * s.Length + 2.0 - 2 * (int)(i / 2) + 3 * (int)(i / 4);

                                    if (i == 1) line1 = line1 + 10;


                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    if (i == 1)
                                    {
                                        POSW = (int)((double)(H * 1.50) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * (1.50 - (.010 * (i - 1)))) * Math.Sin(line));
                                    }
                                    else
                                    {
                                        POSW = (int)((double)(H * 1.44) * Math.Cos(line));  // convert signal to arc
                                        POSH = (int)((double)(H * (1.44 - (.010 * (i - 1)))) * Math.Sin(line));
                                    }

                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test

                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = (double)W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = (double)W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                    //   Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;

                                    line1 = W * 0.75 + i * spacing - (int)3.5 * string_width;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.3) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.3 - (.05 * (i - 1)))) * Math.Sin(line));

                                    g.DrawString("20+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text



                                if (num < 10.0) // low area
                                {
                                    spacing = (W * 0.75 - 2.0) / 4.0;
                                    if (num <= 1.5)
                                        pixel_x = (int)((num - 1.0) / 0.5 * spacing);
                                    else if (num <= 2.0)
                                        pixel_x = (int)(spacing + (num - 1.5) / 0.5 * spacing);
                                    else if (num <= 5.0)
                                        pixel_x = (int)(2 * spacing + (num - 2.0) / 3.0 * spacing);
                                    else
                                        pixel_x = (int)(3 * spacing + (num - 5.0) / 5.0 * spacing);
                                }
                                else
                                {
                                    spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;
                                    pixel_x = (int)(W * 0.75 + (num - 10.0) / 10.0 * spacing);
                                }
                                if (double.IsInfinity(num)) pixel_x = W - 2;

                                break;// case MeterTXMode.SWR:

                            case MeterTXMode.ALC_G:
                            case MeterTXMode.LVL_G:

                                //=================================================================
                                // Draw curved meter movement for signal strength
                                //=================================================================
                              
                                line1 = 0;
                                angle_start = 45;
                                angle_span = 90;

                                Origin_x = W / 2;
                                Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)


                             //   low_brush1 = new Pen(analog_low_color);  // white


                                high_brush2 = new Pen(Brushes.Blue); // blue
                                high_brush1 = new Pen(analog_high_color); // red
                                high_brush3 = new Pen(Brushes.Yellow); // yellow
                                high_brush5 = new Pen(Brushes.Green); // 
                                high_brush4 = new Pen(Brushes.DarkSlateGray); // 


                                spacing = (W * 0.75 - 2.0) / 4.0;
                                string_height = 0;
                                string[] gain_list = { "5", "10", "15", "20", "25" };


                                //=================================================================
                                // Draw curved meter movement for Power
                                //=================================================================

                                //======================================
                                // Draw WHITE arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                low_brush1.Width = arc_thick;
                                g.DrawArc(low_brush1, 0, 37, W, W, -67, -68); // draw OUTER arc

                                //======================================
                                // Draw Red arc line
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush1.Width = arc_thick;
                                g.DrawArc(high_brush1, 0, 37, W, W, -44, -20); // draw OUTER arc -24

                                //======================================
                                // Draw Green full arc line under white/red 
                                // upper left corner x,y , width,height, start angle, sweep angle

                                high_brush5.Width = arc_thick1;
                                g.DrawArc(high_brush5, 6, 43, W - 12, W - 12, -43, -94); // draw INNER arc

                                //======================================
                                // Draw TX Meter Name text
                                if (mode == MeterTXMode.LVL_G) g.DrawString("LVLG", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA
                                else if (mode == MeterTXMode.ALC_G) g.DrawString("ALCG", ff8, low_brush, W * 0.35F, H * 0.75F); // DDAA

                                //======================================
                                // WHITE  tick marks and text

                                for (double i = 1; i < 5; i++)
                                {

                                    line1 = i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thin;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    low_brush1.Width = tick_thick;
                                    g.DrawLine(low_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 


                                    //===============================================
                                    // Draw white numbers

                                    string s = gain_list[(int)i - 1];
                                    //   Font f = new Font("swis721blkexbt", 6.9f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff1, 1, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;
                                    string_height = size.Height - 2.0;

                                    line1 = (i * spacing - string_width + (i / 5));

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.48 - (.010 * (i - 1)))) * Math.Sin(line));

                                  //  g.DrawString((-30 + i * 10).ToString(), ff1, low_brush, Origin_x - POSW, Origin_y - POSH);
                                    g.DrawString(s, ff1, low_brush, Origin_x - POSW, Origin_y - POSH);


                                } // white ticks and test


                                // =======================
                                // RED tick marks and text

                                spacing = (W * 0.25 - 2.0 - 9.0) / 1.0;

                                for (double i = 1; i < 2; i++) //red
                                {

                                    line1 = W * 0.75 + i * spacing - spacing * 0.5;

                                    double line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    int POSW = (int)((double)(H * 1.15) * Math.Cos(line));  // convert signal to arc
                                    int POSH = (int)((double)(H * 1.15) * Math.Sin(line));

                                    int POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    int POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thin;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    line1 = W * 0.75 + i * spacing;

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.25) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * 1.25) * Math.Sin(line));

                                    POSW_BOT = (int)((double)(H * 1.05) * Math.Cos(line));  // convert signal to arc
                                    POSH_BOT = (int)((double)(H * 1.05) * Math.Sin(line));

                                    high_brush1.Width = tick_thick;
                                    g.DrawLine(high_brush1, Origin_x - POSW_BOT, Origin_y - POSH_BOT, Origin_x - POSW, Origin_y - POSH);  // draw meter 

                                    //==========================================
                                    // draw red text

                                    //  Font f = new Font("swis721blkexbt", 5.6f, FontStyle.Bold | FontStyle.Italic); // was 7

                                    SizeF size = g.MeasureString("0", ff2, 3, StringFormat.GenericTypographic);
                                    double string_width = size.Width - 2.0;


                                    line1 = (W * 0.75 + i * spacing - (int)2.5 * string_width);

                                    line = (angle_start + ((double)line1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                                    line = line * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                                    POSW = (int)((double)(H * 1.4) * Math.Cos(line));  // convert signal to arc
                                    POSH = (int)((double)(H * (1.4 - (.05 * (i - 1)))) * Math.Sin(line));


                                    g.DrawString("25+", ff2, high_brush, Origin_x - POSW, Origin_y - POSH);

                                } // red ticks and text

                                spacing = (W * 0.75 - 2.0) / 4.0;
                                pixel_x = (int)(num / 5.0 * spacing);

                                break;// case MeterTXMode.LVL_G:




                            case MeterTXMode.OFF:
                                break;
                        } // switch (mode)

                    } // mox2 (TX)


                //--------------------------------------------------------------------------------

                    //============================
                    // needle meter movement RX2 ANALOG ke9ns12
                    //=============================


                    if ( // EDGE rx2 METER MOVEMENT
                         ( (rx2_meter_mode == MeterRXMode.ADC2_R) || (rx2_meter_mode == MeterRXMode.ADC2_L) ||
                        (rx2_meter_mode == MeterRXMode.ADC_R) || (rx2_meter_mode == MeterRXMode.ADC_L)) 
                        && ( (!mox2 && rx2_meter_mode != MeterRXMode.OFF) || (mox2 && current_meter_tx1_mode != MeterTXMode.OFF) ) 
                         
                        )  

					{
						pixel_x = Math.Max(0, pixel_x);
						pixel_x = Math.Min(W-3, pixel_x);
                       
                        line_pen = new Pen(edge_avg_color); // yellow
                    
					//	line_dark_pen = new Pen(
						//	Color.FromArgb((analog_avg_color.R+edge_meter_background_color.R)/2,
						//	(edge_avg_color.G+edge_meter_background_color.G)/2,
						//	(edge_avg_color.B+edge_meter_background_color.B)/2));

						
						g.DrawLine(line_dark_pen, pixel_x-1, 0, pixel_x-1, H); // rx2 analog edge
						g.DrawLine(line_pen, pixel_x, 0, pixel_x, H);
						g.DrawLine(line_dark_pen, pixel_x+1, 0, pixel_x+1, H);
						
					}

                    else if (  // TX meter movements
                               ((mox2 && current_meter_tx1_mode != MeterTXMode.OFF) && ((current_meter_tx1_mode == MeterTXMode.LVL_G) ||
                               (current_meter_tx1_mode == MeterTXMode.ALC_G) || (current_meter_tx1_mode == MeterTXMode.CPDR) ||
                               (current_meter_tx1_mode == MeterTXMode.LEVELER) || (current_meter_tx1_mode == MeterTXMode.EQ) ||
                               (current_meter_tx1_mode == MeterTXMode.MIC) || (current_meter_tx1_mode == MeterTXMode.ALC) ||
                               (current_meter_tx1_mode == MeterTXMode.SWR) || (current_meter_tx1_mode == MeterTXMode.FORWARD_POWER) ||
                               (current_meter_tx1_mode == MeterTXMode.REVERSE_POWER)))
                          )
                    {

                     
                        // pixel_x (i.e. signal) goes from 0 to W  Width 
                        // posx = originx + (2 * D * cos (angle))
                        // posy = originy + (2 * D * sin (angle))
                        // for a meter of 45deg to 135deg = 90deg total span :   
                        // but sin and cos in radians not degs.
                        // posx = originx + (2 * D * cos (angle*PI/180))

                        //  box dimensions:
                        //  0,0   W,0
                        //  0,H   W,H

                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        line_pen = new Pen(analog_avg_color);
                        line_pen = new Pen(analog_high_color); // Color.Red

                        line_pen.Width = 2.8F;

                        
                        int Origin_x = W / 2;
                        int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 90;

                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                         signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math

                        if ((meterDMB == true) || (meterPointer == true)) // Dark meter background, so needle shadow is light
                        {
                            if ((meterPointer == true))
                            {
                                RotateImage(yell, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                              //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                              //  g.DrawImage(yell1, dest);            // draw rotated image

                            }
                            else
                            {
                                RotateImage(white, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                                // RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                                //  g.DrawImage(white1, dest);            // draw rotated image

                            }


                        }
                        else if (meterLMB == true) // Dark meter background, so needle shadow is light
                        {
                            RotateImage(black, angle, Origin_y);
                            g.DrawImageUnscaled(rotatedImage, 0, 0);

                          //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                          //  g.DrawImage(black1, dest);            // draw rotated image

                        }
                        else
                        {
                            line_pen = new Pen(analog_avg_color);
                            line_pen.Width = 2.2F; // was 2.6F
                          
                            int POSW = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                            int POSH = (int)((double)(H * 1.25) * Math.Sin(signal));

                            g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)

                        }


                        //  Debug.WriteLine("Signal " + signal);


                    } // TX curved needle

                    else if ( //RX2 ANALOG meter movement
                         ((rx2_meter_mode == MeterRXMode.SIGNAL_STRENGTH) || (rx2_meter_mode == MeterRXMode.SIGNAL_PEAK) ||
                        (rx2_meter_mode == MeterRXMode.SIGNAL_AVERAGE)) && ( (!mox2 && rx2_meter_mode != MeterRXMode.OFF) ||
                        (mox2 && current_meter_tx1_mode != MeterTXMode.OFF) ) 
                        
                        )                    
                        
                    {
                        // pixel_x (i.e. signal) goes from 0 to W  Width 
                        // posx = originx + (2 * D * cos (angle))
                        // posy = originy + (2 * D * sin (angle))
                        // for a meter of 45deg to 135deg = 90deg total span :   
                        // but sin and cos in radians not degs.
                        // posx = originx + (2 * D * cos (angle*PI/180))

                        //  box dimensions:
                        //  0,0   W,0
                        //  0,H   W,H

                        pixel_x = Math.Max(0, pixel_x);
                        pixel_x = Math.Min(W - 3, pixel_x);                                             // define limits of X dimension

                        pixel_x1 = Math.Max(0, pixel_x1);
                        pixel_x1 = Math.Min(W - 3, pixel_x1);

                        line_pen = new Pen(analog_avg_color);

                      //  line_dark_pen1 = 
                      //  new Pen( Color.FromArgb((edge_avg_color.R + edge_meter_background_color.R) / 2,(edge_avg_color.G + edge_meter_background_color.G) / 2,(edge_avg_color.B + edge_meter_background_color.B) / 2));

                                                             

                        int Origin_x = W / 2;
                        int Origin_y = (int)((double)(H * 1.5)); // 1.4 slightly below meter window area (where virtual meter adjustment screw would be)

                        double angle_start = 45;
                        double angle_span = 90;
                      
                       
                        if ((rx2_meter_mode == MeterRXMode.SIGNAL_PEAK) && (!mox2 && rx2_meter_mode != MeterRXMode.OFF))  // ke9ns ADD
                        {

                            angle = signal = (angle_start + ((double)pixel_x1 * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                            signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math


                            if ((meterDMB == true) || (meterLMB == true) || (meterPointer == true)) // Dark meter background, so needle shadow is light
                            {
                                RotateImage(red, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                                //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                                //  g.DrawImage(red1, dest);            // draw rotated image
                            }
                            else
                            {
                             
                                int POSW1 = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                                int POSH1 = (int)((double)(H * 1.25) * Math.Sin(signal));

                                line_pen = new Pen(analog_high_color); // Color.Red
                                line_pen.Width = 2.6F;

                                g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW1, Origin_y - POSH1);  // draw meter needle movement (by flipping result around since inc values go down not up)
                            }


                        } // peak

                        angle = signal = (angle_start + ((double)pixel_x * angle_span / (double)W));     // convert signal pixel span (0 to W) int angle span of 45deg to 135deg
                        signal = signal * Math.PI / 180;                                                // convert angle to radians for cos/sin math


                        if ((meterDMB == true) || (meterPointer == true)) // Dark meter background, so needle shadow is light
                        {
                            if ((meterPointer == true))
                            {
                                RotateImage(yell, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                                //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                                //  g.DrawImage(yell1, dest);            // draw rotated image
                            }

                            else
                            {
                                RotateImage(white, angle, Origin_y);
                                g.DrawImageUnscaled(rotatedImage, 0, 0);

                                //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                                //  g.DrawImage(white1, dest);            // draw rotated image
                            }


                        }
                        else if (meterLMB == true) // Dark meter background, so needle shadow is light
                        {
                            RotateImage(black, angle, Origin_y);
                            g.DrawImageUnscaled(rotatedImage, 0, 0);


                            //  RotatePointer(signal, H * 1.25, Origin_x, Origin_y);
                            // g.DrawImage(black1, dest);            // draw rotated image
                        }
                        else
                        {
                            line_pen = new Pen(analog_avg_color);
                            line_pen.Width = 2.2F; // was 2.6F
                          
                            int POSW = (int)((double)(H * 1.25) * Math.Cos(signal));  // convert signal to arc
                            int POSH = (int)((double)(H * 1.25) * Math.Sin(signal));

                            g.DrawLine(line_pen, Origin_x, Origin_y, Origin_x - POSW, Origin_y - POSH);  // draw meter needle movement (by flipping result around since inc values go down not up)


                        }



                        // ke9ns 7 rx2 analog needle



                    } //   if meter is ON in RX or TX mode, then draw line


                    //=========================================================================


                    rx2_meter_timer.Stop();

					format = "f0";
					if(meter_detail) format = "f1";

					if(rx2_meter_timer.DurationMsec >= meter_dig_delay)
					{
                        if (!mox2) // rx
                        {

                           
                                switch (rx2_meter_mode)
                                {
                                    case MeterRXMode.SIGNAL_STRENGTH:

                                    case MeterRXMode.SIGNAL_AVERAGE:
                                        output = num.ToString(format) + " dBm ";
                                        break;
                                    case MeterRXMode.SIGNAL_PEAK: // ke9ns2 ADD 
                                        output = rx2_meter_peak_value.ToString(format) + " dBm ";
                                        break;
                                    case MeterRXMode.ADC_L:
                                    case MeterRXMode.ADC_R:
                                    case MeterRXMode.ADC2_L:
                                    case MeterRXMode.ADC2_R:
                                        output = num.ToString("f1") + " dBFS ";
                                        break;
                                    case MeterRXMode.OFF:
                                        output = "";
                                        break;
                                }
                            
                        }
                        else
                        {

                             MeterTXMode mode = current_meter_tx1_mode;
                           // if (chkTUN.Checked) mode = tune_meter_tx1_mode;
                            switch (mode)
                            {
                                case MeterTXMode.MIC:
                                    output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.LEVELER:
                                case MeterTXMode.LVL_G:
                                case MeterTXMode.EQ:
                                case MeterTXMode.CPDR:
                                case MeterTXMode.ALC:
                                case MeterTXMode.ALC_G:
                                    if (!mox) output = "-30 dB ";
                                    else output = num.ToString(format) + " dB ";
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                case MeterTXMode.REVERSE_POWER:
                                    switch (current_model)
                                    {
                                        case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            if (!mox) output = "0 W ";
                                            else output = num.ToString("f0") + " W ";
                                            break;
                                        case Model.FLEX1500:
                                            if (!mox) output = "0 % ";
                                            else output = num.ToString("f0") + " % ";
                                            break;
                                    }
                                    break;
                                case MeterTXMode.SWR:
                                    if (!mox) output = "0 : 1 ";
                                   else output = num.ToString("f1") + " : 1 ";
                                    break;
                                case MeterTXMode.OFF:
                                    output = "";
                                    break;

                            }// switch mode
                        }//mox2

                           txtRX2Meter.Text = output; //only show digital numbers if RX2 ON or 2nd Meter is ON and in TX mode
                       

                        rx2_meter_timer.Start();
                    } //if(rx2_meter_timer.DurationMsec >= meter_dig_delay)


                    if (rx2_meter_data_ready)
					{
						rx2_meter_data_ready = false;  //We do NOT want to do this before we have consumed it!!!! so do it here.
					}

					
#endregion
                    break;  //  RX2 Analog


            } // switch(current_meter_display_mode)
		} // picRX2Meter_Paint


        //=============================================================
        //=============================================================
        //=============================================================
        //=============================================================
        //=============================================================

        private void ResetMultiMeterPeak()  // 
		{
			meter_peak_count = multimeter_peak_hold_samples;
			avg_num = Display.CLEAR_FLAG;

            multimeter_peak = Display.CLEAR_FLAG; // ke9ns ADD peak values used by new meter
        }

		private void ResetRX2MeterPeak()        // 
		{
			rx2_meter_peak_count = multimeter_peak_hold_samples;
			rx2_meter_avg = Display.CLEAR_FLAG;

            rx2_meter_peak= Display.CLEAR_FLAG; // ke9ns ADD peak values used by new meter

        }


        private void panelVFOAHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			if(vfoa_hover_digit < 0) return;

         	int x = boldfont1; // ke9ns mod  was 0  
			int width = 0;

			if(small_lsd && txtVFOALSD.Visible)
			{
				x += (vfo_char_width + vfo_char_space ) * vfoa_hover_digit; 

                if (vfoa_hover_digit > 3) x += (vfo_decimal_space - vfo_char_space);
				
				if(vfoa_hover_digit > 6)
				{
					x += vfo_small_char_width;
					x += (vfo_small_char_width + vfo_small_char_space - vfo_char_width - vfo_char_space) * (vfoa_hover_digit - boldfont); // ke9ns mod was -6
					width = x + vfo_small_char_width;
				}
				else width = x+vfo_char_width;
			}
			else
			{
				x += (vfo_char_width + vfo_char_space) * vfoa_hover_digit;

                if (vfoa_hover_digit > 3) x += (vfo_decimal_space - vfo_char_space);

				width = x+vfo_char_width;
			}

			e.Graphics.DrawLine(new Pen(txtVFOAFreq.ForeColor, 2.0f), x, 1, width, 1);

        } //panelVFOAHover_Paint


        //============================================================================================================
        private void panelVFOBHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			if(vfob_hover_digit < 0)
				return;

            int x = boldfont1; // ke9ns mod  was 0
            int width = 0;

			if(small_lsd && txtVFOBLSD.Visible)
			{
				x += (vfo_char_width+vfo_char_space) * vfob_hover_digit;
				if(vfob_hover_digit > 3)
					x += (vfo_decimal_space-vfo_char_space);
				
				if(vfob_hover_digit > 6)
				{
					x += vfo_small_char_width;
					x += (vfo_small_char_width+vfo_small_char_space-vfo_char_width-vfo_char_space)*(vfob_hover_digit - boldfont); // ke9ns mod was -6
					width = x + vfo_small_char_width;
				}
				else width = x + vfo_char_width;
			}
			else
			{
				x += (vfo_char_width + vfo_char_space) * vfob_hover_digit;
				if(vfob_hover_digit > 3)
					x += (vfo_decimal_space - vfo_char_space);
				width = x + vfo_char_width;
			}

			e.Graphics.DrawLine(new Pen(txtVFOBFreq.ForeColor, 2.0f), x, 1, width, 1);
		}


//================================================================================================
		public void UpdateRX1DisplayAverage(float[] buffer, float[] new_data) 
		{
			double dttsp_osc = dsp.GetDSPRX(0, 0).RXOsc;
		
           //  Debug.WriteLine("last vfo:  vfo: " + DDSFreq); 
			if(buffer[0] == Display.CLEAR_FLAG)
			{
                //	Debug.WriteLine("Clearing average buf"); 
                for (int i = 0; i < Display.BUFFER_SIZE; i++) // buffer size of 4096 bytes
                {
                    buffer[i] = new_data[i];
                }
			}
			else
			{
                
                // wjt added -- stop hosing the avg display when scrolling the vfo 
                if ((rx1_avg_last_ddsfreq != 0 && rx1_avg_last_ddsfreq != DDSFreq) || (current_model == Model.SOFTROCK40 &&	rx1_avg_last_dttsp_osc != dttsp_osc))   // vfo has changed, need to shift things around 
				{ 
					//Debug.WriteLine("dttsp_osc: " + dttsp_osc); 


					double delta_vfo; 
				//	if ( current_model != Model.SOFTROCK40 ) 
				//	{ 					
						delta_vfo = DDSFreq - rx1_avg_last_ddsfreq;
						delta_vfo *= 1e6; // vfo in mhz moron!
					//}
				//	else 
				//	{ 						
					//	delta_vfo = dttsp_osc - rx1_avg_last_dttsp_osc; 
					//	delta_vfo = -delta_vfo; 
					//	Debug.WriteLine("update from dttsp delta_vfo: " + delta_vfo); 
				//	} 
                
                    					
					double hz_per_bin = sample_rate1/Display.BUFFER_SIZE;   // ke9ns 192000 / 4096 = 46.875 hz per bin

					int bucket_shift = (int)(delta_vfo/hz_per_bin); // ke9ns 

                    double leftover = delta_vfo - ((double)bucket_shift *  hz_per_bin);

                    leftover = leftover/hz_per_bin; // conver to fractions of bucket 

                    double total_leftover = leftover + rx1_last_bin_shift_leftover;

                    if ( total_leftover < -0.5 ) 
					{ 
						bucket_shift -= 1; 
						total_leftover += 1;
						//Debug.WriteLine("bump down"); 
					} 
					else if  ( total_leftover > 0.5 ) 
					{  
						bucket_shift += 1; 
						total_leftover -= 1;
					//	Debug.WriteLine("bump up"); 
					}

                    rx1_last_bin_shift_leftover = total_leftover; 
					//Debug.WriteLine("leftover: " + leftover + " total_leftover: " + total_leftover); 
					
					// bucket_shift = bucket_shift/2; 						
					// indexed_value pre_max = findMax(average_buffer, display_buffer_size); 
					// Debug.WriteLine("\nPre max: " + pre_max.val + " " + pre_max.idx); 
					// Debug.WriteLine("bshift: " + bucket_shift + " delta_vfo: " + delta_vfo); 
					if ( bucket_shift > 0 ) // vfo increased, need to shift avgs to the left 
					{ 
						if ( bucket_shift >= Display.BUFFER_SIZE )  
						{ 
							buffer[0] = Display.CLEAR_FLAG; 
						} 
						else 
						{ 
							for ( int j = 0; j < Display.BUFFER_SIZE - bucket_shift; j++ ) 
								buffer[j]  = buffer[j+bucket_shift];  // wjt fix use memmove 

							// fill avg with last good data on the end
							for ( int j = Display.BUFFER_SIZE - bucket_shift; j < Display.BUFFER_SIZE; j++ ) 
								buffer[j] = buffer[Display.BUFFER_SIZE - bucket_shift - 1];  
						}
					} 
					else if ( bucket_shift < 0 ) // vfo decreased, move samples up 
					{ 
						if ( -bucket_shift >= Display.BUFFER_SIZE ) 
						{
							buffer[0] = Display.CLEAR_FLAG; 
						}
						else 
						{
							for ( int j = Display.BUFFER_SIZE - 1; j > -bucket_shift; j-- ) 
								buffer[j] = buffer[j+bucket_shift]; 								

							for ( int j = 0; j  < -bucket_shift; j++ ) 
								buffer[j] = buffer[-bucket_shift]; 
						}
					}						
					//					indexed_value post_max = findMax(average_buffer, display_buffer_size); 
					//					Debug.WriteLine("Post max: " + post_max.val + " " + post_max.idx); 
					//					indexed_value disp_max = findMax(display_data, display_buffer_size); 		
					//					Debug.WriteLine("Disp max: " + disp_max.val + " " + disp_max.idx); 
				}
				else
				{
					rx1_last_bin_shift_leftover = 0; // reset, this vfo = last vfo 
				} 

				float new_mult = 0.0f;
				float old_mult = 0.0f;

				switch(Display.CurrentDisplayMode)
				{
					case DisplayMode.WATERFALL:
						new_mult = Display.waterfall_avg_mult_new;
						old_mult = Display.waterfall_avg_mult_old;
						break;
					default:
						new_mult = Display.display_avg_mult_new;  // ke9ns  =.2
						old_mult = Display.display_avg_mult_old; // ke9ns = .8
						break;
				}

                for (int i = 0; i < Display.BUFFER_SIZE; i++) // 4096up
                {
                 //   if ((UPDATEOFF1 > 0)) // if changing freq using CTUN, dont avg for a few cycles
                  //  {
                       
                   //     buffer[i] = new_data[i]; // ke9ns 
                  //  }
                 //  else
                  //  {
                        buffer[i] = new_data[i] = (float)((new_data[i] * new_mult) + (buffer[i] * old_mult)); // ke9ns 80% old data and 20% new data when averaging
                  //  }
                }

            }   // if(buffer[0] != Display.CLEAR_FLAG)		

            if ( buffer[0] == Display.CLEAR_FLAG)  // ke9ns =-999.999F
            { 
				rx1_avg_last_ddsfreq = 0; 
				rx1_avg_last_dttsp_osc = 0;
             //   Debug.WriteLine("2Clearing average buf");
            }
			else 
			{
				rx1_avg_last_ddsfreq = DDSFreq; 
				rx1_avg_last_dttsp_osc = dttsp_osc;
              //  Debug.WriteLine("3Clearing average buf");
            }

		} // rx1 avg display





        //==========================================================

		public void UpdateRX2DisplayAverage(float[] buffer, float[] new_data) 
		{
			double dttsp_osc = dsp.GetDSPRX(1, 0).RXOsc;
			// Debug.WriteLine("last vfo: " + avg_last_ddsfreq + " vfo: " + DDSFreq); 
			if(buffer[0] == Display.CLEAR_FLAG)
			{
				//Debug.WriteLine("Clearing average buf"); 
				for(int i=0; i < Display.BUFFER_SIZE; i++)
					buffer[i] = new_data[i];
			}
			else
			{					
				// wjt added -- stop hosing the avg display when scrolling the vfo 
				if((rx2_avg_last_ddsfreq != 0 && rx2_avg_last_ddsfreq != DDSFreq) || 
					(current_model == Model.SOFTROCK40 &&
					rx2_avg_last_dttsp_osc != dttsp_osc))   // vfo has changed, need to shift things around 
				{ 
					//Debug.WriteLine("dttsp_osc: " + dttsp_osc); 
					double delta_vfo; 
				//	if ( current_model != Model.SOFTROCK40 ) 
				//	{ 					
						delta_vfo = DDSFreq - rx2_avg_last_ddsfreq;
						delta_vfo *= 1e6; // vfo in mhz moron!
				//	}
				//	else 
				//	{ 						
					//	delta_vfo = dttsp_osc - rx2_avg_last_dttsp_osc; 
					//	delta_vfo = -delta_vfo; 
						//Debug.WriteLine("update from dttsp delta_vfo: " + delta_vfo); 
				//	} 
                					
					double hz_per_bin = sample_rate1/Display.BUFFER_SIZE; 

					int bucket_shift = (int)(delta_vfo/hz_per_bin); 
					double leftover = delta_vfo - ((double)bucket_shift *  hz_per_bin); 
					leftover = leftover/hz_per_bin; // conver to fractions of bucket 
					double total_leftover = leftover + rx2_last_bin_shift_leftover; 
					if ( total_leftover < -0.5 ) 
					{ 
						bucket_shift -= 1; 
						total_leftover += 1;
						//Debug.WriteLine("bump down"); 
					} 
					else if  ( total_leftover > 0.5 ) 
					{  
						bucket_shift += 1; 
						total_leftover -= 1;
						//Debug.WriteLine("bump up"); 
					}
					rx2_last_bin_shift_leftover = total_leftover; 
					//Debug.WriteLine("leftover: " + leftover + " total_leftover: " + total_leftover); 
					
					// bucket_shift = bucket_shift/2; 						
					// indexed_value pre_max = findMax(average_buffer, display_buffer_size); 
					// Debug.WriteLine("\nPre max: " + pre_max.val + " " + pre_max.idx); 
					// Debug.WriteLine("bshift: " + bucket_shift + " delta_vfo: " + delta_vfo); 
					if ( bucket_shift > 0 ) // vfo increased, need to shift avgs to the left 
					{ 
						if ( bucket_shift >= Display.BUFFER_SIZE )  
						{ 
							buffer[0] = Display.CLEAR_FLAG; 
						} 
						else 
						{ 
							for ( int j = 0; j < Display.BUFFER_SIZE - bucket_shift; j++ ) 
								buffer[j]  = buffer[j+bucket_shift];  // wjt fix use memmove 

							// fill avg with last good data on the end
							for ( int j = Display.BUFFER_SIZE - bucket_shift; j < Display.BUFFER_SIZE; j++ ) 
								buffer[j] = buffer[Display.BUFFER_SIZE - bucket_shift - 1];  
						}
					} 
					else if ( bucket_shift < 0 ) // vfo decreased, move samples up 
					{ 
						if ( -bucket_shift >= Display.BUFFER_SIZE ) 
						{
							buffer[0] = Display.CLEAR_FLAG; 
						}
						else 
						{
							for ( int j = Display.BUFFER_SIZE - 1; j > -bucket_shift; j-- ) 
								buffer[j] = buffer[j+bucket_shift]; 								

							for ( int j = 0; j  < -bucket_shift; j++ ) 
								buffer[j] = buffer[-bucket_shift]; 
						}
					}						
					//					indexed_value post_max = findMax(average_buffer, display_buffer_size); 
					//					Debug.WriteLine("Post max: " + post_max.val + " " + post_max.idx); 
					//					indexed_value disp_max = findMax(display_data, display_buffer_size); 		
					//					Debug.WriteLine("Disp max: " + disp_max.val + " " + disp_max.idx); 
				}
				else
				{
					rx2_last_bin_shift_leftover = 0; // reset, this vfo = last vfo 
				} 

				float new_mult = 0.0f;
				float old_mult = 0.0f;

				switch(Display.CurrentDisplayModeBottom)
				{
                    case DisplayMode.PANADAPTER:                    // ke9ns add to correct for RX2 in pan mode, while rx1 in panafall mode
                        new_mult = Display.display_avg_mult_new; 
                        old_mult = Display.display_avg_mult_old;
                        break;
                    case DisplayMode.WATERFALL:
                        new_mult = Display.waterfall_avg_mult_new;
						old_mult = Display.waterfall_avg_mult_old;
						break;

                    case DisplayMode.PANAFALL:
                        new_mult = Display.display_avg_mult_new;
                        old_mult = Display.display_avg_mult_old;
                        break;

                    default:
						new_mult = Display.display_avg_mult_new;
						old_mult = Display.display_avg_mult_old;
						break;
				}

				for(int i=0; i < Display.BUFFER_SIZE; i++)
					buffer[i] = new_data[i] = 
						(float)(new_data[i]*new_mult + 
						buffer[i]*old_mult);					
			}			

			if ( buffer[0] == Display.CLEAR_FLAG )  
			{ 
				rx2_avg_last_ddsfreq = 0; 
				rx2_avg_last_dttsp_osc = 0; 
			}
			else 
			{
				rx2_avg_last_ddsfreq = DDSFreq; 
				rx2_avg_last_dttsp_osc = dttsp_osc; 
			}
		}

        #endregion

        #region Thread and Timer Routines
        //==============================================================
        //==============================================================
        //==============================================================
        //==============================================================
        // Thread Routines
        //==============================================================
        //==============================================================
        //==============================================================
        // =============================================================

        public uint top_thread1 = 0; // ke9ns add
        public float[] wwvbuf = new float[Display.BUFFER_SIZE];

        public int wwvVal = -300;

        private void RunDisplay()
		{
#if (WRITE_FFT_TEST)
            BinaryWriter writer = new BinaryWriter(File.Open("test.fft", FileMode.OpenOrCreate, FileAccess.Write));
#endif
			//			display_running = true;
			while( (chkPower.Checked) && (Display.CurrentDisplayMode != DisplayMode.OFF) )
			{
                uint top_thread = 0;
                uint bottom_thread = 2;

                if (mox)
                {
                    if (chkVFOATX.Checked || !chkRX2.Checked) top_thread = 1;
                    else if (chkVFOBTX.Checked && chkRX2.Checked) bottom_thread = 1;
                }
				
				if(!Display.DataReady || (chkSplitDisplay.Checked && !Display.DataReadyBottom))
				{
					if (calibration_running) 
					{
						calibration_mutex.WaitOne();
						displaydidit = true;
					}

					if(!Display.DataReady) // ke9ns only get update from Dttsp when display indicates it already used the last data
					{
						switch(Display.CurrentDisplayMode)
						{
							case DisplayMode.SPECTRUM:
							case DisplayMode.HISTOGRAM:
								fixed(float* ptr = &Display.new_display_data[0])
                                {
                                    DttSP.GetSpectrum(top_thread, ptr);
                                }
                                 break;

							case DisplayMode.WATERFALL:
							case DisplayMode.PANADAPTER:
							case DisplayMode.PANAFALL:
							case DisplayMode.PANASCOPE:
                              
                                WWV_mutex.WaitOne();  // ke9ns add dont allow panadapter to mess with the wwv
                               
                                fixed (float* ptr = &Display.new_display_data[0])
                                {
                                     DttSP.GetPanadapter(top_thread, ptr);                // ke9ns  refers to DttSP.dll Process_Panadapter in update.c file
                                }

                                WWV_mutex.ReleaseMutex();

#if (WRITE_FFT_TEST)
                                for (int i = 0; i < Display.new_display_data.Length; i++)
                                    writer.Write(Display.new_display_data[i]);
#endif
                                break;
							case DisplayMode.SCOPE:
                                Debug.WriteLine("===GET SCOPE NW"); // this only called 1 time when you select this view mode
								fixed(float *ptr = &Display.new_display_data[0])
                                   DttSP.GetScope(top_thread, ptr, (int)(scope_time * 48));  // ke9ns does not look like this is necessary since the scope display uses audio.doscope instead
								break;
							case DisplayMode.PHASE:
								fixed(float *ptr = &Display.new_display_data[0])
                                    DttSP.GetPhase(top_thread, ptr, Display.PhaseNumPts);
								break;
							case DisplayMode.PHASE2:
								//Audio.phase_mutex.WaitOne();
								for(int i=0; i<Display.PhaseNumPts; i++)
								{
									Display.new_display_data[i*2]   = Audio.phase_buf_l[i];
									Display.new_display_data[i*2+1] = Audio.phase_buf_r[i];
								}
								//Audio.phase_mutex.ReleaseMutex();
								break;
						}

                         Display.DataReady = true; // ke9ns dont allow screen to show next line of pan data until UPDATEOFF is clear
                                                    // but not used by getscope routine

                    } // if(!Display.DataReady)

                    if (chkSplitDisplay.Checked && !Display.DataReadyBottom)
                    {
						switch(Display.CurrentDisplayModeBottom)
						{
							case DisplayMode.SPECTRUM:
							case DisplayMode.HISTOGRAM:
								fixed(float* ptr = &Display.new_display_data_bottom[0])
									DttSP.GetSpectrum(bottom_thread, ptr);
								break;
							case DisplayMode.WATERFALL:
							case DisplayMode.PANADAPTER:
                            case DisplayMode.PANAFALL:                                      // ke9ns add panafall mode for rx2 added
								fixed(float* ptr = &Display.new_display_data_bottom[0])
                                    DttSP.GetPanadapter(bottom_thread, ptr);
								break;
							case DisplayMode.SCOPE:
								fixed(float *ptr = &Display.new_display_data_bottom[0])
                                    DttSP.GetScope(bottom_thread, ptr, (int)(scope_time * 48));
								break;
							case DisplayMode.PHASE:
								fixed(float *ptr = &Display.new_display_data_bottom[0])
                                    DttSP.GetPhase(bottom_thread, ptr, Display.PhaseNumPts);
								break;
							case DisplayMode.PHASE2:
								//Audio.phase_mutex.WaitOne();
								for(int i=0; i<Display.PhaseNumPts; i++)
								{
									Display.new_display_data_bottom[i*2]   = Audio.phase_buf_l[i];
									Display.new_display_data_bottom[i*2+1] = Audio.phase_buf_r[i];
								}
								//Audio.phase_mutex.ReleaseMutex();
								break;
						}
						Display.DataReadyBottom = true;
					}

					if (displaydidit) 
					{
						displaydidit = false;
						calibration_mutex.ReleaseMutex();
					}					
				}

                 UpdateDisplay(); // ke9ns 


                if (chkPower.Checked)
                {
                   // if (UPDATEOFF > 0) Thread.Sleep(display_delay/4); // ke9sn mod  increase update speed to screen for short time when CTUN is on
                   // else
                    Thread.Sleep(display_delay);
                }


			} // power on and display on	
			//			display_running = false;

#if (WRITE_FFT_TEST)
            writer.Close();
#endif
		} // RunDisplay() thread


        //===============================================================================
        //===============================================================================
        // ke9ns   this is where you update the meter signal that will be given to the draw routine up above
        //         added the peak meter signal below
        //===============================================================================
        //===============================================================================

        private HiPerfTimer meter_timer = new HiPerfTimer();
		private float multimeter_avg = Display.CLEAR_FLAG;
        private float multimeter_peak = Display.CLEAR_FLAG; // ke9ns ADD for RX1 peak meter routine
        private void UpdateMultimeter()
		{
			meter_timer.Start();
			while(chkPower.Checked)
			{
				if(!meter_data_ready)
				{
					if(!mox)
					{
						/*if(Audio.CurrentAudioState1 != Audio.AudioState.DTTSP)
							goto end;*/

						MeterRXMode mode = CurrentMeterRXMode;
						float num = 0f;
                        float peak3 = 0f; // ke9ns ADD for RX1 peak meter routine
                      
                        switch (mode)
						{
							case MeterRXMode.SIGNAL_STRENGTH:

                                num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                          
                                if (fwc_init || hid_init)
								{
									switch(current_model)
									{
										case Model.SDRX:
											num = num +
												rx1_meter_cal_offset +
												meter_offset + 
												rx1_filter_size_cal_offset +
												rx1_xvtr_gain_offset;
											break;
										case Model.FLEX5000:
										case Model.FLEX3000:
                                            /*Debug.WriteLine("RX1: num: " + num.ToString("f1") + "  meter: " + rx1_meter_cal_offset.ToString("f1") +
                                               "  preamp: " + rx1_preamp_offset[(int)rx1_preamp_mode].ToString("f1") + "  filter: " + rx1_filter_size_cal_offset.ToString("f1") +
                                               "  path: " + rx1_path_offset.ToString("f1") + "  xvtr: " + rx1_xvtr_gain_offset.ToString("f1") +
                                               "  loop: " + rx1_loop_offset.ToString("f1"));*/
                                            num = num +
                                                rx1_meter_cal_offset +
                                                rx1_preamp_offset[(int)rx1_preamp_mode] +
                                                rx1_filter_size_cal_offset +
                                                rx1_path_offset +
                                                rx1_xvtr_gain_offset +
                                                rx1_loop_offset;                                           
                                            break;
                                        case Model.FLEX1500:
                                            num = num +
												rx1_meter_cal_offset +
                                                rx1_preamp_offset[(int)rx1_preamp_mode] +
												rx1_filter_size_cal_offset +
												rx1_xvtr_gain_offset;
                                            break;                                 
									}
								}
                                else
								{
									num = num +
										rx1_meter_cal_offset +
										rx1_preamp_offset[(int)rx1_preamp_mode] +
										rx1_filter_size_cal_offset +
										rx1_xvtr_gain_offset;
								}
								//output = num.ToString("f1")+" dBm";
								new_meter_data = num;
								break; // signal
						
                            
                            case MeterRXMode.SIGNAL_AVERAGE:
                            	num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);

                                if (multimeter_avg == Display.CLEAR_FLAG) multimeter_avg = num;

                                num = multimeter_avg_mult_old * multimeter_avg + multimeter_avg_mult_new * num;

                                multimeter_avg = num;

                                if (fwc_init || hid_init)
								{
									switch(current_model)
									{
										case Model.SDRX:
											num = num +
												rx1_meter_cal_offset +
												meter_offset + 
												rx1_filter_size_cal_offset +
												rx1_xvtr_gain_offset;
											break;
										case Model.FLEX5000:
										case Model.FLEX3000:
											num = num +
												rx1_meter_cal_offset +
												rx1_preamp_offset[(int)rx1_preamp_mode] +
												rx1_filter_size_cal_offset +
												rx1_path_offset +
												rx1_xvtr_gain_offset +
												rx1_loop_offset;
											break;
                                        case Model.FLEX1500:
                                            num = num +
                                                rx1_meter_cal_offset +
                                                rx1_preamp_offset[(int)rx1_preamp_mode] +
                                                rx1_filter_size_cal_offset +
                                                rx1_xvtr_gain_offset;
                                            break;  
									}
								}
                                else
                                {
                                    num = num +
                                        rx1_meter_cal_offset +
                                        rx1_preamp_offset[(int)rx1_preamp_mode] +
                                        rx1_filter_size_cal_offset +
                                        rx1_xvtr_gain_offset;
                                }


								//output = num.ToString("f1")+" dBm";
								new_meter_data = num;
								break;  // average


                       //=======================================================================    
                            case MeterRXMode.SIGNAL_PEAK:       // ke9ns ADD RX1 peak

                               peak3 = num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);

                                if (multimeter_peak == Display.CLEAR_FLAG) multimeter_peak = num;

                                if (multimeter_peak < num)   // check for new peak value
                                {
                                    multimeter_peak = num; // new peak value
                                    peak4 = 0;
                                }
                                else
                                {
                                    if (peak4 == 20)
                                    {
                                        if (multimeter_peak > num) multimeter_peak = multimeter_peak - 1;
                                        else peak4 = 0;
                                    }
                                    else peak4++;
                                }

                              //======================================
                                num = peak3; // this is the standard signal needle only (below is the peak)

                                if (fwc_init || hid_init)
                                {
                                    switch (current_model)
                                    {
                                        case Model.SDRX:
                                            num = num +
                                                rx1_meter_cal_offset +
                                                meter_offset +
                                                rx1_filter_size_cal_offset +
                                                rx1_xvtr_gain_offset;
                                            break;
                                        case Model.FLEX5000:
                                        case Model.FLEX3000:
                                                  num = num +
                                                rx1_meter_cal_offset +
                                                rx1_preamp_offset[(int)rx1_preamp_mode] +
                                                rx1_filter_size_cal_offset +
                                                rx1_path_offset +
                                                rx1_xvtr_gain_offset +
                                                rx1_loop_offset;
                                            break;
                                        case Model.FLEX1500:
                                            num = num +
                                                rx1_meter_cal_offset +
                                                rx1_preamp_offset[(int)rx1_preamp_mode] +
                                                rx1_filter_size_cal_offset +
                                                rx1_xvtr_gain_offset;
                                            break;
                                    }
                                }
                                else
                                {
                                    num = num +
                                        rx1_meter_cal_offset +
                                        rx1_preamp_offset[(int)rx1_preamp_mode] +
                                        rx1_filter_size_cal_offset +
                                        rx1_xvtr_gain_offset;
                                }

                                new_meter_data = num;  // send to meter movement

                                //========================================
                                // this is for peak reading only needle and numbers
                                //========================================

                                num = multimeter_peak; // now use current peak value

                                if (fwc_init || hid_init)
                                {
                                    switch (current_model)
                                    {
                                        case Model.SDRX:
                                            num = num +
                                                rx1_meter_cal_offset +
                                                meter_offset +
                                                rx1_filter_size_cal_offset +
                                                rx1_xvtr_gain_offset;
                                            break;
                                        case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            num = num +
                                          rx1_meter_cal_offset +
                                          rx1_preamp_offset[(int)rx1_preamp_mode] +
                                          rx1_filter_size_cal_offset +
                                          rx1_path_offset +
                                          rx1_xvtr_gain_offset +
                                          rx1_loop_offset;
                                            break;
                                        case Model.FLEX1500:
                                            num = num +
                                                rx1_meter_cal_offset +
                                                rx1_preamp_offset[(int)rx1_preamp_mode] +
                                                rx1_filter_size_cal_offset +
                                                rx1_xvtr_gain_offset;
                                            break;
                                    }
                                }
                                else
                                {
                                    num = num +
                                        rx1_meter_cal_offset +
                                        rx1_preamp_offset[(int)rx1_preamp_mode] +
                                        rx1_filter_size_cal_offset +
                                        rx1_xvtr_gain_offset;
                                }

                                 meter_peak_value = num; // RX1 used only for peak needle and numbers

                              
                                break; // peak RX1 ke9ns


                            case MeterRXMode.ADC_L:
								num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_REAL);
								//output = num.ToString("f1")+" dBFS ";
								new_meter_data = num;
								break;
							case MeterRXMode.ADC_R:
								num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_IMAG);
								//output = num.ToString("f1")+" dBFS ";
								new_meter_data = num;
								break;
							case MeterRXMode.ADC2_L:
								num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.ADC_REAL);
								//output = num.ToString("f1")+" dBFS ";
								new_meter_data = num;
								break;
							case MeterRXMode.ADC2_R:
								num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.ADC_IMAG);
								//output = num.ToString("f1")+" dBFS ";
								new_meter_data = num;
								break;
							case MeterRXMode.OFF:
								//output = "";
								new_meter_data = -200.0f;
								break;
						} //mode
                  
                              
                        //-------------------------------------------------------------------------
                        // ke9ns add when in RX, but using 2nd TX meter, return meter back
                        if ((setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == true) && (TXMeter2 == true) && RX2Enabled == false) // ke9ns allow TX 2nd meter if option selected and not in duplex mode
                        {
                            if (new_meter_data2 != -200.0)
                            {
                                rx2_meter_new_data = -200.0f;

                            }

                            if (current_meter_tx1_mode == MeterTXMode.MIC)
                            {
                              
                                 //  Debug.WriteLine("PEAK1 Level" + Audio.Peak1 + " MIC");
                                    tx2_meter_new_data = (double)20 * Math.Log10(Audio.Peak1); // ke9ns get dBm value from MIC audio stream
                      
                            } // ke9ns add check TX2 meter mode to see if we can make it live during RX


                            rx2_meter_data_ready = true;
                            picRX2Meter.Invalidate(); // ke9ns12 add

                        }

                    } // !MOX

                    else //MOX  (TX) 
					{
						MeterTXMode mode = CurrentMeterTXMode;  // ke9ns  RX1 meter first
						float num = 0f;
						double power = 0.0;

						switch(mode)
						{
							case MeterTXMode.MIC:
								if(peak_tx_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.MIC_PK));
								else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.MIC)+3.0f);
								//output = num.ToString("f1")+" dB ";
								new_meter_data = num;
								break;
							case MeterTXMode.EQ:
								if(peak_tx_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.EQ_PK));
								else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.EQ)+3.0f);									
								//output = num.ToString("f1")+" dB ";
								new_meter_data = num;						
								break;
							case MeterTXMode.LEVELER:
								if(peak_tx_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.LEVELER_PK));
								else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.LEVELER)+3.0f);
								//output = num.ToString("f1")+" dB ";
								new_meter_data = num;													
								break;
							case MeterTXMode.LVL_G:
								num = (float)Math.Max(0, DttSP.CalculateTXMeter(1, DttSP.MeterType.LVL_G));
								//output = num.ToString("f1")+" dB ";
								new_meter_data = num;													
								break;
							case MeterTXMode.CPDR:
								if(peak_tx_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.CPDR_PK));
								else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.CPDR)+3.0f);
								//output = num.ToString("f1")+" dB ";
								new_meter_data = num;											
								break;
							case MeterTXMode.ALC:
								if(peak_tx_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC_PK));
								else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC)+3.0f);
								//output = num.ToString("f1")+" dB ";
								new_meter_data = num;			
								break;
							case MeterTXMode.ALC_G:								
								num = (float)Math.Max(0, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC_G));
								//output = num.ToString("f1")+" dB ";
								new_meter_data = num;											
								break;
							case MeterTXMode.FORWARD_POWER:
								switch(current_model)
								{
                                   /* case Model.SDR1000:
                                        if (pa_present && VFOAFreq < 30.0)
                                        {
                                            power = PAPower(pa_fwd_power);
                                            //output = power.ToString("f0")+" W";
                                            new_meter_data = (float)power;
                                        }
                                        else
                                        {
                                            num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(1, DttSP.MeterType.PWR));
                                            num *= (float)((double)ptbPWR.Value * 0.01);
                                            //output = (num*1000).ToString("f0")+" mW";
                                            new_meter_data = num;
                                        }
                                        break;
								*/	case Model.FLEX5000:
									case Model.FLEX3000:
										//output = ((double)pa_fwd_power/4096*2.5).ToString("f3")+" V";
										power = FWCPAPower(pa_fwd_power);
                                        //power = (double)pm.Watts;
                                        //output = power.ToString("f0")+" W";
                                      //  Debug.WriteLine("power " + power); // ke9ns test

										new_meter_data = (float)power;
										break;
                                    case Model.FLEX1500:
                                        num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(1, DttSP.MeterType.PWR));
                                        num *= (float)(ptbPWR.Value);
                                        new_meter_data = num;
                                        break;
								}
								break;
							case MeterTXMode.REVERSE_POWER:
								switch(current_model)
								{
									case Model.FLEX5000:
									case Model.FLEX3000:
										//output = ((double)pa_rev_power/4096*2.5).ToString("f3")+" V";
										power = FWCPAPower(pa_rev_power)*swr_table[(int)tx_band];
										//output = power.ToString("f0")+" W";
										new_meter_data = (float)power;
										break;
                                 /*  case Model.SDR1000:
                                        if (pa_present && VFOAFreq < 30.0)
                                            power = PAPower(pa_rev_power);
                                        else power = 0.0;
                                        //output = power.ToString("f0")+" W";
                                        new_meter_data = (float)power;
                                        break;
								*/	default:
										power = 0.0;
										//output = power.ToString("f0")+" W";
										new_meter_data = (float)power;
										break;
								}
								break;
							case MeterTXMode.SWR:
								double swr = 0.0;
							//	if(chkTUN.Checked)  //ke9ns remove to allow swr anytime AM or FM modes mostly
							//	{
									switch(current_model)
									{
										case Model.FLEX5000:
										case Model.FLEX3000:
											swr = FWCSWR(pa_fwd_power, pa_rev_power);
											//output = swr.ToString("f1")+" : 1 ";	
											break;
									/*	case Model.SDR1000:
                                            if (pa_present && VFOAFreq < 30.0)
                                                swr = SWR(pa_fwd_power, pa_rev_power);
                                            else swr = 1.0;
											//output = swr.ToString("f1")+" : 1 ";
											break; */
									}
							//	}
							//	else
							//	{
							//		//output = "in TUN only ";
							//	}
								new_meter_data = (float)swr;
								break;
							case MeterTXMode.OFF:
								//output = "";
								new_meter_data = -200.0f;
								break;

						} // mode

                        //-----------------------------------------------------------------------------------------------------------------------
                        // ke9ns add  only do a TX meter 2nd function if RX2 or RX2 ON, but not when transmitting  and the setup TX meter2nd function is checked

                        MeterTXMode mode1 = CurrentMeterTX1Mode;
                        num = 0f;
                        power = 0.0;

                        if ( (setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == true) && (TXMeter2 == true) ) // ke9ns allow TX 2nd meter if option selected and not in duplex mode
                        {
                            switch (mode1)
                            {
                                case MeterTXMode.MIC:
                                    if (peak_tx1_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.MIC_PK));
                                    else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.MIC) + 3.0f);
                                    //output = num.ToString("f1")+" dB ";
                                    rx2_meter_new_data = num;
                                    break;
                                case MeterTXMode.EQ:
                                    if (peak_tx1_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.EQ_PK));
                                    else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.EQ) + 3.0f);
                                    //output = num.ToString("f1")+" dB ";
                                    rx2_meter_new_data = num;
                                    break;
                                case MeterTXMode.LEVELER:
                                    if (peak_tx1_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.LEVELER_PK));
                                    else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.LEVELER) + 3.0f);
                                    //output = num.ToString("f1")+" dB ";
                                    rx2_meter_new_data = num;
                                    break;
                                case MeterTXMode.LVL_G:
                                    num = (float)Math.Max(0, DttSP.CalculateTXMeter(1, DttSP.MeterType.LVL_G));
                                    //output = num.ToString("f1")+" dB ";
                                    rx2_meter_new_data = num;
                                    break;
                                case MeterTXMode.CPDR:
                                    if (peak_tx1_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.CPDR_PK));
                                    else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.CPDR) + 3.0f);
                                    //output = num.ToString("f1")+" dB ";
                                    rx2_meter_new_data = num;
                                    break;
                                case MeterTXMode.ALC:
                                    if (peak_tx1_meter) num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC_PK));
                                    else num = (float)Math.Max(-30.0f, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC) + 3.0f);
                                    //output = num.ToString("f1")+" dB ";
                                    rx2_meter_new_data = num;
                                    break;
                                case MeterTXMode.ALC_G:
                                    num = (float)Math.Max(0, -DttSP.CalculateTXMeter(1, DttSP.MeterType.ALC_G));
                                    //output = num.ToString("f1")+" dB ";
                                    rx2_meter_new_data = num;
                                    break;
                                case MeterTXMode.FORWARD_POWER:
                                    switch (current_model)
                                    {
                                     /*   case Model.SDR1000:
                                            if (pa_present && VFOAFreq < 30.0)
                                            {
                                                power = PAPower(pa_fwd_power);
                                                //output = power.ToString("f0")+" W";
                                                rx2_meter_new_data = (float)power;
                                            }
                                            else
                                            {
                                                num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(1, DttSP.MeterType.PWR));
                                                num *= (float)((double)ptbPWR.Value * 0.01);
                                                //output = (num*1000).ToString("f0")+" mW";
                                                rx2_meter_new_data = num;
                                            }
                                            break;
                                     */   case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            //output = ((double)pa_fwd_power/4096*2.5).ToString("f3")+" V";
                                            power = FWCPAPower(pa_fwd_power);
                                            //power = (double)pm.Watts;
                                            //output = power.ToString("f0")+" W";
                                            //  Debug.WriteLine("power " + power); // ke9ns test

                                            rx2_meter_new_data = (float)power;
                                            break;
                                        case Model.FLEX1500:
                                            num = (float)Math.Max(0.0, DttSP.CalculateTXMeter(1, DttSP.MeterType.PWR));
                                            num *= (float)(ptbPWR.Value);
                                            rx2_meter_new_data = num;
                                            break;
                                    }
                                    break;
                                case MeterTXMode.REVERSE_POWER:
                                    switch (current_model)
                                    {
                                        case Model.FLEX5000:
                                        case Model.FLEX3000:
                                            //output = ((double)pa_rev_power/4096*2.5).ToString("f3")+" V";
                                            power = FWCPAPower(pa_rev_power) * swr_table[(int)tx_band];
                                            //output = power.ToString("f0")+" W";
                                            rx2_meter_new_data = (float)power;
                                            break;
                                    /*    case Model.SDR1000:
                                            if (pa_present && VFOAFreq < 30.0)
                                                power = PAPower(pa_rev_power);
                                            else power = 0.0;
                                            //output = power.ToString("f0")+" W";
                                            rx2_meter_new_data = (float)power;
                                            break; */
                                        default:
                                            power = 0.0;
                                            //output = power.ToString("f0")+" W";
                                            rx2_meter_new_data = (float)power;
                                            break;
                                    }
                                    break;
                                case MeterTXMode.SWR:
                                    double swr = 0.0;
                                  //  if (chkTUN.Checked) // ke9ns removed to allow SWR during AM or FM modes as well as tune
                                   // {
                                        switch (current_model)
                                        {
                                            case Model.FLEX5000:
                                            case Model.FLEX3000:
                                                swr = FWCSWR(pa_fwd_power, pa_rev_power);
                                                //output = swr.ToString("f1")+" : 1 ";	
                                                break;
                                         /*   case Model.SDR1000:
                                                if (pa_present && VFOAFreq < 30.0)
                                                    swr = SWR(pa_fwd_power, pa_rev_power);
                                                else swr = 1.0;
                                                //output = swr.ToString("f1")+" : 1 ";
                                                break; */
                                        }
                                  //  }
                                   // else
                                  //  {
                                        //output = "in TUN only ";
                                  //  }
                                    rx2_meter_new_data = (float)swr;
                                    break;
                                case MeterTXMode.OFF:
                                    //output = "";
                                    rx2_meter_new_data = -200.0f;
                                    break;

                            } // mode1

                            rx2_meter_data_ready = true;
                            picRX2Meter.Invalidate(); // ke9ns12 add

                        } // TXMeter2
                        

                    } // TX MOX


                    meter_data_ready = true;
					picMultiMeterDigital.Invalidate();

                   


                } // meterdataready			

                //end:
                if (chkPower.Checked) Thread.Sleep(Math.Min(meter_delay, meter_dig_delay));
			} //

		} //updateMultimeter


        //===============================================================================
        //===============================================================================
        // ke9ns   RX2 this is where you update the meter signal that will be given to the draw routine up above
        //         added the peak meter signal below
        //===============================================================================
        //===============================================================================


        private HiPerfTimer rx2_meter_timer = new HiPerfTimer();
		private float rx2_meter_avg = Display.CLEAR_FLAG;
        private float rx2_meter_peak = Display.CLEAR_FLAG; // ke9ns ADD
        private int peak4 = 0; // ke9ns ADD RX1 peak hold routine
        private int peak5 = 0; // ke9ns ADD RX2 peak hold routine

        private void UpdateRX2MeterData()
		{
			rx2_meter_timer.Start();

			while(chkPower.Checked && fwc_init && (current_model == Model.FLEX5000 && rx2_enabled) )
			{


                if ( (setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == false) ||  (TXMeter2 == false) || ((TXMeter2 == true) && (!MOX)) ) // ke9ns do RX2 if in duplex mode and not in special 2nd TX meter mode
                {

                    if (!rx2_meter_data_ready)
                    {
                        /*if(Audio.CurrentAudioState1 != Audio.AudioState.DTTSP)
                            goto end;*/

                        MeterRXMode mode = RX2MeterMode;
                        float num = 0f;
                        float peak3 = 0f; // ke9ns ADD RX2 temp storage for peak routine

                        switch (mode)
                        {
                            case MeterRXMode.SIGNAL_STRENGTH:
                                num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.SIGNAL_STRENGTH);

                                //   Debug.WriteLine("RX2: num: " + num.ToString("f1") + "  meter: " + rx2_meter_cal_offset.ToString("f1") +
                                //                      "  preamp: " + rx2_preamp_offset[(int)rx2_preamp_mode].ToString("f1") + "  filter: " + rx2_filter_size_cal_offset.ToString("f1") +
                                //                     "  path: " + rx2_path_offset.ToString("f1") + "  xvtr: " + rx2_xvtr_gain_offset.ToString("f1") +
                                //                    "  loop: " + rx2_loop_offset.ToString("f1"));			

                                num = num +
                                    rx2_meter_cal_offset +
                                    rx2_preamp_offset[(int)rx2_preamp_mode] +
                                    rx2_filter_size_cal_offset +
                                    rx2_path_offset +
                                    rx2_xvtr_gain_offset +
                                    rx2_loop_offset;
                                //output = num.ToString("f1")+" dBm";
                                rx2_meter_new_data = num;
                                break; // signal

                            case MeterRXMode.SIGNAL_AVERAGE:

                                num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                                if (rx2_meter_avg == Display.CLEAR_FLAG) rx2_meter_avg = num;

                                num = multimeter_avg_mult_old * rx2_meter_avg + multimeter_avg_mult_new * num;  // new = (.9 * last) + (.1 * new)

                                rx2_meter_avg = num;

                                num = num +
                                    rx2_meter_cal_offset +
                                    rx2_preamp_offset[(int)rx2_preamp_mode] +
                                    rx2_filter_size_cal_offset +
                                    rx2_path_offset +
                                    rx2_xvtr_gain_offset +
                                    rx2_loop_offset;

                                //output = num.ToString("f1")+" dBm";
                                rx2_meter_new_data = num;
                                break; // average


                            case MeterRXMode.SIGNAL_PEAK:       // ke9ns ADD RX2 peak

                                peak3 = num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.SIGNAL_STRENGTH);

                                if (rx2_meter_peak == Display.CLEAR_FLAG) rx2_meter_peak = num;


                                if (rx2_meter_peak < num) // new value larger than before
                                {
                                    rx2_meter_peak = num; // new peak value
                                    peak5 = 0;
                                }
                                else // new value smaller than before
                                {
                                    if (peak5 == 20)
                                    {
                                        //  Debug.WriteLine("peak5 " + rx2_meter_peak);
                                        if (rx2_meter_peak > num) rx2_meter_peak = rx2_meter_peak - 1;
                                        else peak5 = 0;
                                    }
                                    else peak5++;
                                    //   Debug.WriteLine("peak5 " +peak5);


                                }

                                //=======================
                                num = peak3; // this is standard needle (below is peak)

                                num = num +
                                     rx2_meter_cal_offset +
                                     rx2_preamp_offset[(int)rx2_preamp_mode] +
                                     rx2_filter_size_cal_offset +
                                     rx2_path_offset +
                                     rx2_xvtr_gain_offset +
                                     rx2_loop_offset;

                                rx2_meter_new_data = num;


                                //=======================
                                num = rx2_meter_peak;           // peak needle and numbers
                                num = num +
                                       rx2_meter_cal_offset +
                                       rx2_preamp_offset[(int)rx2_preamp_mode] +
                                       rx2_filter_size_cal_offset +
                                       rx2_path_offset +
                                       rx2_xvtr_gain_offset +
                                       rx2_loop_offset;

                                rx2_meter_peak_value = num;

                                break; // peak


                            case MeterRXMode.ADC_L:
                                num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_REAL);
                                //output = num.ToString("f1")+" dBFS ";
                                rx2_meter_new_data = num;
                                break;
                            case MeterRXMode.ADC_R:
                                num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.ADC_IMAG);
                                //output = num.ToString("f1")+" dBFS ";
                                rx2_meter_new_data = num;
                                break;
                            case MeterRXMode.ADC2_L:
                                num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.ADC_REAL);
                                //output = num.ToString("f1")+" dBFS ";
                                rx2_meter_new_data = num;
                                break;
                            case MeterRXMode.ADC2_R:
                                num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.ADC_IMAG);
                                //output = num.ToString("f1")+" dBFS ";
                                rx2_meter_new_data = num;
                                break;
                            case MeterRXMode.OFF:
                                //output = "";
                                rx2_meter_new_data = -200.0f;
                                break;
                        }
                        rx2_meter_data_ready = true;

                        //    Debug.Write(" 333 ");
                        picRX2Meter.Invalidate(); // ke9ns12 add

                    } // !rx2meterdataready			
                } // !mox
			//end:
				if(chkPower.Checked)	Thread.Sleep(Math.Min(meter_delay, meter_dig_delay));


            } //while rx2 UPDATE

        

        } //updaterx2meter

//==========================================================================================

		private float sql_data = -200.0f;
		private void UpdateSQL()
		{
			while(chkPower.Checked)
			{
				if(!mox)
				{
					float num = DttSP.CalculateRXMeter(0, 0, DttSP.MeterType.SIGNAL_STRENGTH);
                    if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                    {
                        num = num +
                            rx1_meter_cal_offset +
                            rx1_preamp_offset[(int)rx1_preamp_mode] +
                            rx1_filter_size_cal_offset +
                            rx1_path_offset;
                    }
                    else if (hid_init && current_model == Model.FLEX1500)
                    {
                        num = num +
                            rx1_meter_cal_offset +
                            rx1_preamp_offset[(int)rx1_preamp_mode] +
                            rx1_filter_size_cal_offset;
                    }
                    else
                    {
                        num = num +
                            rx1_meter_cal_offset +
                            rx1_preamp_offset[(int)rx1_preamp_mode] +
                            rx1_filter_size_cal_offset;
                    }
				
					sql_data = num;
					picSquelch.Invalidate();
				}

				if(chkPower.Checked) Thread.Sleep(100);
			}
		}

		private float rx2_sql_data = -200.0f;
		private void UpdateRX2SQL()
		{
			while(chkPower.Checked && rx2_enabled)
			{
				float num = DttSP.CalculateRXMeter(2, 0, DttSP.MeterType.SIGNAL_STRENGTH);
				//Debug.WriteLine("SQL Read: "+num.ToString("f1"));

				num = num +
					rx2_meter_cal_offset +
					rx2_preamp_offset[(int)rx2_preamp_mode] +
					rx2_filter_size_cal_offset +
					rx2_path_offset;
							
				rx2_sql_data = num;
				picRX2Squelch.Invalidate();

				if(chkPower.Checked && rx2_enabled) Thread.Sleep(100);
			}
		}

		private float noise_gate_data = -200.0f;
		private void UpdateNoiseGate()
		{
			while(chkPower.Checked)
			{
				if(mox)
				{
					float num = -DttSP.CalculateTXMeter(1, DttSP.MeterType.MIC);
					
					noise_gate_data = num + 3.0f;
					picNoiseGate.Invalidate();
				}

				if(chkPower.Checked) Thread.Sleep(100);
			}
		}

		private void UpdateVOX()
		{
			while(chkPower.Checked)
			{
				switch(rx1_dsp_mode)
				{
					case DSPMode.LSB:
					case DSPMode.USB:
					case DSPMode.DSB:
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						picVOX.Invalidate();
						break;
				}

				if(chkPower.Checked) Thread.Sleep(100);
			}
		}



        //=======================================================================================
        // ke9ns PTT thread

		private bool mon_recall = false;
        private byte mon2_recall = 0; // ke9ns to hold mon_pre for going into out of CW mode

        private static HiPerfTimer vox_timer = new HiPerfTimer();
		private void PollPTT()
		{
			//HiPerfTimer cwpolltimer = new HiPerfTimer();
			//cwpolltimer.Start();

            /*HiPerfTimer polltimer = new HiPerfTimer();
            polltimer.Start();
            double msecs = 0.0;
            int pollcount = 0;*/

			while(chkPower.Checked)
			{
				DSPMode tx_mode = rx1_dsp_mode;
				if(chkVFOBTX.Checked && chkRX2.Checked) tx_mode = rx2_dsp_mode;
				/*// reset the CW ring buffers every 5000ms when not in use
				if(current_ptt_mode != PTTMode.NONE)
				{
					switch(tx_mode)
					{
						case DSPMode.CWL:
						case DSPMode.CWU:
							cwpolltimer.Start(); // start over since key is in use
							break;
					}
				}
				else
				{
					switch(tx_mode)
					{
						case DSPMode.CWL:
						case DSPMode.CWU:
							cwpolltimer.Stop(); // check how long since last reset
							if(cwpolltimer.DurationMsec > 5000 + break_in_delay && !mox)
							{
								// if more than 5 sec + break in delay, reset timer and ring buffer
								cwpolltimer.Start();
								DttSP.CWRingRestart();
							}
							break;
					}
				}*/

				if((!manual_mox) && (!disable_ptt) && (!rx_only))
				{
					bool mic_ptt = false, x2_ptt = false, cat_ptt_local = false, vox_ptt = false;

					if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
					{
						mic_ptt = fwc_mic_ptt;

						x2_ptt = fwc_rca_ptt;

						vox_ptt = Audio.VOXActive;

						cat_ptt_local = (ptt_bit_bang_enabled && serialPTT != null && serialPTT.isPTT()) | cat_ptt; 
					}
                    else if (hid_init && current_model == Model.FLEX1500)
                    {
                        mic_ptt = hid_mic_ptt;
                        x2_ptt = hid_ptt_in;
                        vox_ptt = Audio.VOXActive;
                        cat_ptt_local = (ptt_bit_bang_enabled && serialPTT != null && serialPTT.isPTT()) | cat_ptt; 
                    }
                    else
					{
						byte b = 0;
                     //   if(current_model == Model.SDR1000)  b = Hdw.StatusPort();


						mic_ptt = (b & (byte)StatusPin.Dot) != 0;
						x2_ptt = (b & (byte)StatusPin.PIN_11) != 0;

						if(usb_present) x2_ptt = !x2_ptt;

						vox_ptt = Audio.VOXActive;

						cat_ptt_local = (ptt_bit_bang_enabled && serialPTT != null && serialPTT.isPTT()) | cat_ptt; 

						if(auto_mute)
						{
							bool mute = !((b & (byte)StatusPin.PIN_12) != 0);
							if(chkMUT.Checked != mute) chkMUT.Checked = mute;
						}
					}

					/*Debug.WriteLine(cw_ptt.ToString().PadRight(6, ' ')+
						mic_ptt.ToString().PadRight(6, ' ')+
						x2_ptt.ToString().PadRight(6, ' ')+
						vox_ptt.ToString().PadRight(6, ' ')+
						cat_ptt_local.ToString().PadRight(6, ' ')+
						current_ptt_mode.ToString());*/

					if(!mox) // if in receive
					{
						if(x2_ptt)
						{
							current_ptt_mode = PTTMode.X2;
							switch(tx_mode)
							{
								case DSPMode.LSB:
								case DSPMode.USB:
								case DSPMode.DSB:
								case DSPMode.AM:
								case DSPMode.SAM:
								case DSPMode.FM:
								case DSPMode.DIGL:
								case DSPMode.DIGU:
									if(chkVAC1.Checked && allow_vac_bypass)		Audio.VACBypass = true;
									break;
							}

							chkMOX.Checked = true;
							if(!mox)
							{
								chkPower.Checked = false;
								return;
							}
                        } // if(x2_ptt)

                        if (cat_ptt_local)
                        {
                            current_ptt_mode = PTTMode.CAT;

                            chkMOX.Checked = true;
                            if (!mox)
                            {
                                chkPower.Checked = false;
                                return;
                            }
                        } //  if (cat_ptt_local)					

                        if ( (tx_mode == DSPMode.LSB ||
							tx_mode == DSPMode.USB ||
							tx_mode == DSPMode.DSB ||
							tx_mode == DSPMode.AM  ||
							tx_mode == DSPMode.SAM ||
							tx_mode == DSPMode.DIGU ||
							tx_mode == DSPMode.DIGL ||
							tx_mode == DSPMode.FM ||
							all_mode_mic_ptt) &&
							mic_ptt )
						{
							current_ptt_mode = PTTMode.MIC;

                            if (chkVAC1.Checked && allow_vac_bypass)
                            {
                                Audio.VACBypass = true;
                            }

							chkMOX.Checked = true;
							if(!mox)
							{
								chkPower.Checked = false;
								return;
							}
						}

						if((tx_mode == DSPMode.LSB ||
							tx_mode == DSPMode.USB ||
							tx_mode == DSPMode.DSB ||
							tx_mode == DSPMode.AM  ||
							tx_mode == DSPMode.SAM ||
							tx_mode == DSPMode.DIGU ||
							tx_mode == DSPMode.DIGL ||
							tx_mode == DSPMode.FM) &&
							vox_ptt)
						{
							current_ptt_mode = PTTMode.VOX;
							vox_timer.Start();
							chkMOX.Checked = true;
							/*if(!mox)
							{
								chkPower.Checked = false;
								return;
							}*/
						}
					}
					else // else if(mox)
					{
						switch(current_ptt_mode)
						{
							case PTTMode.X2:
								if(!x2_ptt)
								{
									chkMOX.Checked = false;
									switch(tx_mode)
									{
										/*case DSPMode.CWL:
										case DSPMode.CWU:
											if(!cw_disable_monitor)
												chkMON.Checked = mon_recall;
											break;*/
										case DSPMode.LSB:
										case DSPMode.USB:
										case DSPMode.DSB:
										case DSPMode.AM:
										case DSPMode.SAM:
										case DSPMode.FM:
										case DSPMode.DIGL:
										case DSPMode.DIGU:
											if(chkVAC1.Checked && Audio.VACBypass)
												Audio.VACBypass = false;
											break;
									}
								}
								break;
							case PTTMode.CAT:
								if(!cat_ptt_local)
								{
									chkMOX.Checked = false;
									/*if((tx_mode == DSPMode.CWL ||
										tx_mode == DSPMode.CWU) &&
										!cw_disable_monitor)
										chkMON.Checked = mon_recall;*/
								}
								break;
							case PTTMode.MIC:
								if(!mic_ptt)
								{
									chkMOX.Checked = false;
									if(chkVAC1.Checked && Audio.VACBypass)
										Audio.VACBypass = false;
								}
								break;							
							case PTTMode.VOX:
								if(!vox_ptt)
								{
									vox_timer.Stop();
									if(vox_timer.DurationMsec > vox_hang_time)
										chkMOX.Checked = false;
								}
								else vox_timer.Start();
								break;
						}
					}	
				}
				Thread.Sleep(2);
				
				/*if (++pollcount == 1000) 
				{
                    polltimer.Stop();
                    msecs = polltimer.DurationMsec;
                    polltimer.Start();
					msecs *= 0.001;
					Debug.WriteLine("timer average = " +msecs.ToString());	
					pollcount = 0;
				}*/
			}
			//			poll_ptt_running = false;

		} // pollPTT() thread



		private void PollFWCPAPWR()
		{
			if(!fwc_init || (current_model != Model.FLEX5000 && current_model != Model.FLEX3000) || !FWCEEPROM.PAOK) return;
			//int count = 0;
			int high_swr_count = 0;
			int fwd=0, rev=0/*, temp, volts*/;
			//float old_temp = 0.0f, old_supply = 0.0f;
			while(chkPower.Checked)
			{
                if (mox)
                {
                    if (!atu_tuning)
                    {
                        switch (current_model)
                        {
                            case Model.FLEX5000:
                                FWC.ReadPAADC(7, out fwd); // FLEX-5000
                                FWC.ReadPAADC(6, out rev); // FLEX-5000
                                break;
                            case Model.FLEX3000:
                                FWC.ReadPAADC(5, out fwd); // FLEX-3000
                                FWC.ReadPAADC(4, out rev); // FLEX-3000
                                break;
                        }
                    }

                    pa_fwd_power = fwd;
                    pa_rev_power = rev;

                    double swr_scale = SWRScale(FWCPAPower(rev) * swr_table[(int)tx_band]);
                    if (swr_scale < Audio.HighSWRScale)
                    {
                        high_swr_count++;
                        if (high_swr_count >= 3)
                        {
                            high_swr_count = 0;
                            HighSWR = true;
                            Audio.HighSWRScale = swr_scale;
                            UpdateDisplay();
                        }
                    }
                    else
                    {
                        high_swr_count = 0;
                        Audio.HighSWRScale = Math.Min(1.0, Audio.HighSWRScale + 0.01);
                        if (Audio.HighSWRScale == 1.0 && HighSWR)
                            HighSWR = false;
                    }

                    /*if(++count%25 == 24) // check temp every ~5s
                    {
                        Thread.Sleep(40);
                        FWC.ReadPAADC(4, out temp);
                        float c = 301-((float)temp/4096*2.5f)*1000/2.2f;
                        if(old_temp == 0.0f) old_temp = c;
                        else old_temp = (c * 0.1f) + (old_temp * 0.9f);
					
                        if(old_temp >= 70)
                        {
                            if(Audio.TempScale != 0.5)
                            {
                                Audio.TempScale = 0.5;
                                Invoke(new MethodInvoker(TempWarn));
                            }
                        }
                        else Audio.TempScale = 1.0;
                        //Debug.WriteLine("old_temp: "+old_temp.ToString("f1"));
                    }

                    if(count%300 == 299) // check voltage every ~60s
                    {
                        Thread.Sleep(40);
                        FWC.ReadPAADC(2, out volts);
                        float new_supply = (float)volts/4096*2.5f*11;
                        if(old_supply == 0.0f) old_supply = new_supply;
                        else old_supply = (0.1f * new_supply) + (0.9f * old_supply);
                        if(old_supply > 15.0 || old_supply < 13.0)
                            Invoke(new MethodInvoker(VoltsWarn));
                    }*/
                }

				Thread.Sleep(100);
			}

            pa_fwd_power = 0;
            pa_rev_power = 0;
            HighSWR = false;
		}

		/*private void TempWarn()
		{
			MessageBox.Show("The drive has been scaled back to 25% due to high temperature warnings",
				"High Temp Warning: Power Cut to 25%",
				MessageBoxButtons.OK,
				MessageBoxIcon.Warning);
		}

		private void VoltsWarn()
		{
			MessageBox.Show("The voltage output is outside of ideal operating range.",
				"Voltage Warning",
				MessageBoxButtons.OK,
				MessageBoxIcon.Warning);
		}*/

		private void PollPAPWR()
		{
			int first_time_count = 0;
			int high_swr_count = 0;

			while(chkPower.Checked && pa_present)
			{
                if (mox)
                {
                    if (!atu_tuning)
                    {
                        first_time_count++;
                        if ((!x2_enabled && first_time_count >= 2) || first_time_count >= x2_delay / 130)
                        {
                            int temp = (int)Hdw.PA_GetADC(0);
                            if (temp >= 0) pa_fwd_power = temp;
                            if (mox)	// in case state changes already
                            {
                                temp = (int)Hdw.PA_GetADC(1);
                                if (temp >= 0) pa_rev_power = temp;
                            }

                            double fwd_power = PAPower(pa_fwd_power);
                            double rev_power = PAPower(pa_rev_power);

                            /*if(rev_power >= 11)
                            {
                                high_swr_count++;
                                if((high_swr_count >= 3 && !chkTUN.Checked) ||
                                    (high_swr_count >= 75 && chkTUN.Checked))
                                {
                                    HighSWR = true;
                                    UpdateDisplay();
                                }
                            }
                            else
                                high_swr_count = 0;							

                            if(high_swr && !disable_swr_protection)
                            {
                                if(Audio.HighSWRScale != 0.1)
                                    Audio.HighSWRScale = 0.1;
                            }*/

                            double swr_scale = SWRScale(rev_power);
                            if (swr_scale < Audio.HighSWRScale)
                            {
                                high_swr_count++;
                                if (high_swr_count >= 3)
                                {
                                    high_swr_count = 0;
                                    HighSWR = true;
                                    Audio.HighSWRScale = swr_scale;
                                    UpdateDisplay();
                                }
                            }
                            else
                            {
                                if (HighSWR)
                                {
                                    high_swr_count = 0;
                                    Audio.HighSWRScale = Math.Min(1.0, Audio.HighSWRScale + 0.01);
                                    if (Audio.HighSWRScale == 1.0)
                                        HighSWR = false;
                                }
                            }

                            //Debug.WriteLine("SWRScale: "+Audio.HighSWRScale.ToString("f3"));
                        }
                    }
                }

				Thread.Sleep(100);
				// roughly 132ms loop
			}

			pa_fwd_power = 0;
			pa_rev_power = 0;
			HighSWR = false;			
		}

		private double SWRScale(double ref_pow)
		{
			if(ref_pow < 19) return 1.0;
			else return Math.Max((ref_pow*-0.01774)+1.137097, 0.25); // mx+b found using 80% at 19, 25% at 50
		}



        //===============================================================================
        //===============================================================================
        // ke9ns mod this is where the CPU% is updated, I added the PA volt and temp
        //===============================================================================
        //===============================================================================
        private static byte PAON = 0; // ke9ns add  1=C, 2=F, 0=off
        private static byte PAONT = 0; // 1=thread running, 0=thread not running yet
       
        private int last_sec1;		// ke9ns add for time of day clock

        private Color CDTP = Color.WhiteSmoke;  // ke9ns color added to text of currentdatetimepanel

        private void timer_cpu_meter_Tick(object sender, System.EventArgs e)
		{
            //   Stopwatch stopWatch = new Stopwatch();
            //   stopWatch.Start();

            labelTS3.ForeColor = Color.WhiteSmoke;
            labelTS4.ForeColor = Color.WhiteSmoke;
            int cpu = (int)CpuUsage;

            //  lblCPUMeter.Text = " CPU %     " + CpuUsage.ToString("f1"); // stop time = .005 worst case
            lblCPUMeter.Text = " CPU %     " + cpu.ToString(); // stop time = .005 worst case ke9ns mod

            lblCPUMeter.Select(0, 10);
            lblCPUMeter.SelectionColor = CDTP;

            lblCPUMeter.Select(10, lblCPUMeter.TextLength - 10);

          //  Debug.WriteLine("cpu " + cpu);

            if (cpu > 90) lblCPUMeter.SelectionColor = Color.Red;              
            else if (cpu > 79) lblCPUMeter.SelectionColor = Color.Orange;       
            else if (cpu >69 ) lblCPUMeter.SelectionColor = Color.Yellow;       
            else  lblCPUMeter.SelectionColor = Color.LightGreen;               


           if (URLPresent== true) URLPRESENT = false; // reset the http active setting

            // adding PA temp and volt increases total time to .05 seconds from .005



            int chan = 4;
            switch (current_model)
            {
                case Model.FLEX5000:
                    chan = 4;
                    break;
                case Model.FLEX3000:
                    chan = 3;
                    break;
                default:
                    chan = 0;
                    break;
            }

          
            if (chan > 0)
            {
                float temperature = 0;
                double temperature1 = 0;

                float volts = 0;
                float volts1 = 0;

                // ke9ns add

                if (PAON==1) // if you click on temp C or volt it toggle on/off
                {
                    if (PAONT == 0)
                    {
                        PAONT = 1;

                        Thread t5 = new Thread(new ThreadStart(TempVolts));
                        t5.IsBackground = true;
                        t5.Priority = ThreadPriority.Lowest;
                        t5.Name = "Temp and VOlts reading Thread";
                        t5.Start();
                    }

                    temperature = (float)Temp_Value / 4096 * 2.5f;
                    temperature1 = 301 - temperature * 1000 / 2.2;
                    labelTS3.Text = " Temp C°   " + temperature1.ToString("f0"); // ke9ns ADD

                    volts = (float)Volts_Value / 4096 * 2.5f;
                    volts1 = volts * 11;
                    labelTS4.Text = " Volts        " + volts1.ToString("f1");    // ke9ns ADD
                }

                else if (PAON == 2) // toggle temp to F
                {
                    if (PAONT == 0)
                    {
                        PAONT = 1;

                        Thread t5 = new Thread(new ThreadStart(TempVolts));
                        t5.IsBackground = true;
                        t5.Priority = ThreadPriority.Lowest;
                        t5.Name = "Temp and VOlts reading Thread";
                        t5.Start();
                    }

                    temperature = (float)Temp_Value / 4096 * 2.5f;
                    temperature1 = (((301 - temperature * 1000 / 2.2) * 9) / 5) + 32; // convert c to f
                    labelTS3.Text = " Temp F°   " + temperature1.ToString("f0"); // ke9ns ADD

            
                    volts = (float)Volts_Value / 4096 * 2.5f;
                    volts1 = volts * 11;
                    labelTS4.Text = " Volts        " + volts1.ToString("f1");    // ke9ns ADD
                }

                else
                {
                    temperature = 0f;

                    labelTS3.Text = " Temp C°   click";
                    labelTS4.Text = " Volts        click ";
                }


              
                if (temperature != 0f)
                {
                    labelTS3.Select(0, 10);
                    labelTS3.SelectionColor = CDTP;

                    labelTS3.Select(10, labelTS3.TextLength - 10);

                    //  Debug.WriteLine("TEMPERTURE " + temperature.ToString("f6"));
                    //  Debug.WriteLine("volts " + volts.ToString("f6"));


                    if (temperature <= 0.4642F) labelTS3.SelectionColor = Color.Red;  // if temp >= 194F
                    else if (temperature <= 0.4862F) labelTS3.SelectionColor = Color.Orange;  //if temp >= 176F
                    else if (temperature <= 0.509422F) labelTS3.SelectionColor = Color.Yellow;  //if temp >= 157F
                    else if (temperature <= 0.615756F) labelTS3.SelectionColor = Color.LightGreen;  //if temp >= 70F
                    else labelTS3.SelectionColor = Color.LightBlue; // < 70F

                    labelTS4.Select(0, 7);
                    labelTS4.SelectionColor = CDTP;

                    labelTS4.Select(10, labelTS4.TextLength - 10);


                    if (volts > 1.27) labelTS4.SelectionColor = Color.Red;   // 14v
                    else if (volts < 1.09) labelTS4.SelectionColor = Color.LightBlue;  // 12v
                    else labelTS4.SelectionColor = Color.GreenYellow;

                }

                labelTS3.Select(0, 0);
                labelTS4.Select(0, 0);
            }
            else
            {
                labelTS3.Visible = false;
                labelTS4.Visible = false;
            }


            //--------------------------------------------------------------------
            // ke9ns add space weather update to main console window
          
            int sec1 = DateTime.Now.Second;
            if (sec1 != last_sec1)
            {
                last_sec1 = sec1;


                if (chkBoxTimer1 == 0)
                {
                    txtTimer.ForeColor = Color.AntiqueWhite;
                   
                    if (chkBoxTimer2 == true)
                    {
                        txtTimer.Text = "wfID Timer: OFF";
                    }
                    else if (chkBoxTimer3 == true)
                    {
                        txtTimer.Text = "voID Timer: OFF";
                    }
                    else if (chkBoxTimer4 == true)
                    {
                        txtTimer.Text = "cwID Timer: OFF";
                    }
                    else
                    {
                        txtTimer.Text = "  ID Timer: OFF"; // signals a static popup box 
                    }
                    txtTimer.Select(12, 3);
                    txtTimer.SelectionColor = Color.Red;
                    txtTimer.Select(0, 0);
                }

                if (noaaON == 1)
                {
                    //  Debug.WriteLine("time = "+ DateTime.UtcNow.Minute);

                    if ((DateTime.UtcNow.Minute == 0) || (suncounter == 2))  // =2 only at startup
                    {
                        if ((suncounter == 0) || (suncounter == 2)) // 0=already have weather data from before or 2=startup
                        {
                            Debug.WriteLine("update noaa ");


                            Thread t4 = new Thread(new ThreadStart(NOAA));
                            t4.IsBackground = true;
                            t4.Priority = ThreadPriority.Lowest;
                            t4.Name = "NOAA Space Weather Thread";
                            t4.Start();

                        }
                    }
                    else
                    {
                        if (suncounter == 1) suncounter = 0; // 1=have weather data already, so set to 0
                    }


                    // ke9ns add
                    // A    K
                    // 0    0  Quiet
                    // 2    1 
                    // 3    1
                    // 4    1  Unsettled
                    // 7    2 
                    // 15   3  Active
                    // 27   4
                    // 48   5  Minor Storm
                    // 80   6
                    // 132  7  Severe Storm
                    // 208  8  Major Storm
                    // 400  9

                

                    txtNOAA.ForeColor = CDTP;
                    txtNOAA2.ForeColor = CDTP;

                    txtNOAA.Text = "SF: " + SFI + " A: " + Aindex + " K: " + Kindex;
                    txtNOAA2.Text = "ss:" + EISN + " ef:" + SSNE + " SpW:" + RadioBlackout; //   txtNOAA2.Text = "SS: " + EISN + " SpWX: " + RadioBlackout;


                    int lenSFI = SFI.ToString().Length;
                    int lenA = Aindex.ToString().Length;
                    int lenK = Kindex.ToString().Length;
                    int lenEISN = EISN.ToString().Length;
                    int lenSSNE = SSNE.ToString().Length;
                    int lenRadio = RadioBlackout.Length;

                    int startSFI = 4;
                    int startA = 4 + lenSFI + 4;
                    int startK = startA + lenA + 4;

                    int startEISN = 3; // was 4
                    int startSSNE = 3 + lenEISN + 4; // was 4 4

                    int startRadio = startSSNE + lenSSNE  + 5; //  int startRadio = startEISN + lenEISN + 7;


                    if ((Kindex >= 4) || (RadioBlackout != " "))
                    {
                        txtNOAA.Select(startSFI,lenSFI);
                        txtNOAA.SelectionColor = Color.Red;

                        txtNOAA.Select(startA, lenA);
                        txtNOAA.SelectionColor = Color.Red;

                        txtNOAA.Select(startK, lenK);
                        txtNOAA.SelectionColor = Color.Red;

                        txtNOAA2.Select(startEISN, lenEISN);
                        txtNOAA2.SelectionColor = Color.Red;

                        txtNOAA2.Select(startSSNE, lenSSNE);
                        txtNOAA2.SelectionColor = Color.Red;

                        txtNOAA2.Select(startRadio, lenRadio);
                        txtNOAA2.SelectionColor = Color.Red;


                    }
                    else if ((Kindex > 2))
                    {
                        txtNOAA.Select(startSFI, lenSFI);
                        txtNOAA.SelectionColor = Color.Yellow;

                        txtNOAA.Select(startA, lenA);
                        txtNOAA.SelectionColor = Color.Yellow;

                        txtNOAA.Select(startK, lenK);
                        txtNOAA.SelectionColor = Color.Yellow;

                        txtNOAA2.Select(startEISN, lenEISN);
                        txtNOAA2.SelectionColor = Color.Yellow;

                        txtNOAA2.Select(startSSNE, lenSSNE);
                        txtNOAA2.SelectionColor = Color.Yellow;

                        txtNOAA2.Select(startRadio, lenRadio);
                        txtNOAA2.SelectionColor = Color.Yellow;


                    }
                    else
                    {
                        txtNOAA.Select(startSFI, lenSFI);
                        txtNOAA.SelectionColor = Color.GreenYellow;

                        txtNOAA.Select(startA, lenA);
                        txtNOAA.SelectionColor = Color.GreenYellow;

                        txtNOAA.Select(startK, lenK);
                        txtNOAA.SelectionColor = Color.GreenYellow;

                        txtNOAA2.Select(startEISN, lenEISN);
                        txtNOAA2.SelectionColor = Color.GreenYellow;

                        txtNOAA2.Select(startSSNE, lenSSNE);
                        txtNOAA2.SelectionColor = Color.GreenYellow;

                        txtNOAA2.Select(startRadio, lenRadio);
                        txtNOAA2.SelectionColor = Color.GreenYellow;


                    }


                }
                else
                {
                    txtNOAA.ForeColor = Color.AliceBlue;
                    txtNOAA2.ForeColor = Color.AliceBlue;

                    txtNOAA.Text = "Space WX: OFF";
                    txtNOAA2.Text = "Click On";
                }

   
               

                txtNOAA.SelectAll();
                txtNOAA.SelectionAlignment = HorizontalAlignment.Center;

                txtNOAA2.SelectAll();
                txtNOAA2.SelectionAlignment = HorizontalAlignment.Center;

                txtNOAA.Select(0, 0);
                txtNOAA2.Select(0, 0);

            } // if sec1 != lastsec

            //    stopWatch.Stop();        
            //   TimeSpan ts = stopWatch.Elapsed;
            //    Debug.WriteLine("RunTime1 " + ts);


        } // timer_cpu_meter_Tick

        int Volts_Value = 0;
        int Temp_Value = 0;

        //============================================================================================
        // ke9ns add thread for temp,volts
        private void TempVolts()
        {
            while (PAON > 0)
            {
                int chan = 4;
                switch (current_model)
                {
                    case Model.FLEX5000:
                        chan = 4;
                        break;
                    case Model.FLEX3000:
                        chan = 3;
                        break;
                    default:
                        chan = 0;
                        break;
                }

           
                FWC.ReadPAADC(chan, out Temp_Value);  // read temperature
                FWC.ReadPAADC(2, out Volts_Value); // read voltage

                Thread.Sleep(1000); // ke9ns 1 sec update
            }

            PAONT = 0;

        } // TempVolts() thread





        private void timer_peak_text_Tick(object sender, System.EventArgs e)
		{
			switch(Display.CurrentDisplayMode)
			{
				case DisplayMode.HISTOGRAM:
				case DisplayMode.PANADAPTER:
				case DisplayMode.SPECTRUM:
				case DisplayMode.WATERFALL:
				case DisplayMode.PANAFALL:
				case DisplayMode.PANASCOPE:
					UpdatePeakText();
					break;
				default:
					txtDisplayPeakOffset.Text = "";
					txtDisplayPeakPower.Text = "";
					txtDisplayPeakFreq.Text = "";
					break;
			}
		}

		private int last_sec;		// for time of day clock
		private DateTime last_date;	// for date
		private void timer_clock_Tick(object sender, System.EventArgs e)
		{

          
            switch (current_datetime_mode)
			{
				case DateTimeMode.LOCAL:
					DateTime date = DateTime.Now.Date;
					if(date != last_date || txtDate.Text == "")
					{
						last_date = date;
						txtDate.Text = DateTime.Now.ToShortDateString();
					}

					int sec = DateTime.Now.Second;
					if(sec != last_sec)
					{
						last_sec = sec;
						txtTime.Text = "LOC  " + DateTime.Now.ToString("HH:mm:ss");
					}
					break;
				case DateTimeMode.UTC:
					date = DateTime.UtcNow.Date;
					if(date != last_date || txtDate.Text == "")
					{
						last_date = date;
						txtDate.Text = DateTime.UtcNow.ToShortDateString();
					}

					sec = DateTime.UtcNow.Second;
					if(sec != last_sec)
					{
						last_sec = sec;
						txtTime.Text = "UTC  " + DateTime.UtcNow.ToString("HH:mm:ss");
					}
					break;
				case DateTimeMode.OFF:
					txtDate.Text = "Date";
					txtTime.Text = "Time";
					break;
			} // switch

           
            

            txtDate.ForeColor = Color.LightGray;
            txtTime.ForeColor = Color.WhiteSmoke;

            txtDate.SelectAll();
            txtDate.SelectionAlignment = HorizontalAlignment.Center;

            txtTime.SelectAll();
            txtTime.SelectionAlignment = HorizontalAlignment.Center;

            txtTime.Select(0, 4);
            txtTime.SelectionColor = CDTP;

            txtTime.Select(4, txtTime.TextLength-4);
            txtTime.SelectionColor = Color.LightGray;

          
            txtTime.Select(0, 0);
            txtDate.Select(0, 0);


        } //timer_clock_tick

        private void Tune()
		{
			switch((ATUTuneMode)comboTuneMode.SelectedIndex)
			{
				case ATUTuneMode.MEMORY:
					PWR = 15;
					atu_tuning = true;
					if(!Hdw.PA_ATUTune(ATUTuneMode.MEMORY))
						goto atu_error;
					atu_tuning = false;
					tuned_band = tx_band;
					break;
				case ATUTuneMode.FULL:
					PWR = 15;
					atu_tuning = true;
					if(!Hdw.PA_ATUTune(ATUTuneMode.FULL))
						goto atu_error;
					atu_tuning = false;
					tuned_band = tx_band;
					break;
			}

			chkTUN.Checked = false;
			chkTUN.Enabled = true;
			comboTuneMode.Enabled = true;
			chkTUN.BackColor = button_selected_color;
			return;
            
		atu_error:
			chkTUN.Checked = false;
			chkTUN.Enabled = true;
			comboTuneMode.Enabled = true;
			MessageBox.Show("Error communicating with the ATU",
				"ATU Error",
				MessageBoxButtons.OK,
				MessageBoxIcon.Error);
		}

		private void DelayedDisplayReset()
		{
			Thread.Sleep((int)((double)block_size1/(double)sample_rate1*1000.0));
			Display.ResetRX1DisplayAverage();
			Display.ResetRX1DisplayPeak();
		}

        private bool tx_cal = false;
        public bool TXCal
        {
            get { return tx_cal; }
            set { tx_cal = value; }
        }

        private int last_3k_fan_on = 0;
        private int last_3k_fan_off = 25;
        private void F3KReadTemp()
        {
            while (chkPower.Checked)
            {
                //if(!mox)
                {
                    int val;
                    FWC.ReadPAADC(3, out val);
                    float volts = (float)val / 4096 * 2.5f;
                    double temp_c = 301 - volts * 1000 / 2.2;

                    if (temp_c < 150.0 && temp_c > -30.0) // filter unreasonable temps
                    {
                        int MAX = 15;
                        int fan_on = MAX;
                        int fan_off = MAX;
                        double speed;

                        if (mox || tx_cal)
                        {
                            speed = (temp_c - 40.0) / (70.0 - 40.0);
                            if (speed > 1.0) speed = 1.0;
                            if (speed < 0.0) speed = 0.0;

                            if (speed < 0.5)
                            {
                                fan_on = (int)(MAX * speed * 2);
                                fan_off = MAX;
                            }
                            else
                            {
                                fan_on = MAX;
                                fan_off = (int)(MAX * (1.0 - speed) * 2);
                            }
                        }
                        else
                        {
                            speed = ((float)temp_c - f3k_temp_thresh) / (100.0 - f3k_temp_thresh);
                            if (speed > 1.0) speed = 1.0;
                            if (speed < 0.0) speed = 0.0;
                            if (speed < 0.5)
                            {
                                fan_on = (int)(MAX * speed * 2);
                                fan_off = MAX;
                            }
                            else
                            {
                                fan_on = MAX;
                                fan_off = (int)(MAX * (1.0 - speed) * 2);
                            }
                        }

                        if (fan_on != last_3k_fan_on || fan_off != last_3k_fan_off)
                        {
                            FWC.SetFanPWM(fan_on, fan_off);
                            Debug.WriteLine("Fan Speed: " + speed.ToString("ff2") + "  on: " + fan_on + "  off: " + fan_off);
                            last_3k_fan_on = fan_on;
                            last_3k_fan_off = fan_off;
                        }
                    }

                    /*if(temp_c >= f3k_temp_thresh && !f3k_fan)
                        F3KFan = true;
                    else if(temp_c < f3k_temp_thresh && f3k_fan)
                        F3KFan = false;*/

                }
                Thread.Sleep(2500);
            }
        }

        private void F3KMicFunctions()
        {
            double running_thresh_ms = 600;
            while (chkPower.Checked)
            {
                mic_down_timer.Stop();
                mic_up_timer.Stop();
                mic_fast_timer.Stop();

                if (mic_up)
                {
                    if (!mic_up_running)
                    {
                        if (mic_up_timer.DurationMsec > running_thresh_ms)
                        {
                            mic_down_running = false;
                            mic_up_running = true;
                        }
                    }
                }
                else if (mic_down)
                {
                    if (!mic_down_running)
                    {
                        if (mic_down_timer.DurationMsec > running_thresh_ms)
                        {
                            mic_up_running = false;
                            mic_down_running = true;
                        }
                    }
                }

                if (mic_up_running)
                {
                    double increment = 0.000100;
                    if (mic_fast) increment = 0.000500;
                    VFOAFreq += increment;
                }
                else if (mic_down_running)
                {
                    double decrement = 0.000100;
                    if (mic_fast) decrement = 0.000500;
                    VFOAFreq -= decrement;
                }

                Thread.Sleep(50);
            }
        }

        private enum WBIR_State
        {
            FastAdapt,
            SlowAdapt,
            NoAdapt,
        }

        /*private bool wbir_tuned = true;
        private bool wbir_tx_band_changed = false;
        private void WBIR()
        {
            WBIR_State state = WBIR_State.FastAdapt;
            int fast_count = 0;
            int countdown = 10000;

            while (chkPower.Checked)
            {
                switch (state)
                {
                    case WBIR_State.FastAdapt:
                        if (mox || wbir_tx_band_changed)
                        {
                            DttSP.SetCorrectIQMu(0, 0, 0.0);
                            DttSP.SetCorrectIQMu(0, 1, 0.0);
                            state = WBIR_State.NoAdapt;
                        }
                        else
                        {
                            if (wbir_tuned)
                            {
                                wbir_tuned = false;
                                fast_count = 0;
                            }
                            DttSP.SetCorrectIQMu(0, 0, 0.05 - (fast_count * 0.005));
                            DttSP.SetCorrectIQMu(0, 1, 0.05 - (fast_count * 0.005));
                            //Debug.WriteLine(" WBIR Fast, Mu: " + (0.05 - (fast_count * 0.005)).ToString("f6"));
                            fast_count++;
                            if (fast_count == 10)
                            {
                                fast_count = 0;
                                countdown = 10000;
                                state = WBIR_State.SlowAdapt;
                            }
                        }
                        break;
                    case WBIR_State.SlowAdapt:
                        if (mox || wbir_tx_band_changed)
                        {
                            DttSP.SetCorrectIQMu(0, 0, 0.0);
                            DttSP.SetCorrectIQMu(0, 1, 0.0);
                            state = WBIR_State.NoAdapt;
                        }
                        else
                        {
                            countdown -= 100;
                            //Debug.WriteLine("WBIR Slow, countdown: "+countdown);
                            if (!calibrating && (countdown <= 0 || wbir_tuned))
                            {
                                wbir_tuned = false;
                                state = WBIR_State.FastAdapt;
                            }
                        }
                        break;
                    case WBIR_State.NoAdapt:
                        //Debug.WriteLine("WBIR Off");
                        if (!mox && !wbir_tx_band_changed)
                        {
                            DttSP.SetCorrectIQMu(0, 0, 0.005);
                            DttSP.SetCorrectIQMu(0, 1, 0.005);
                            countdown = 10000;
                            state = WBIR_State.SlowAdapt;
                        }
                        break;
                }

                Thread.Sleep(100);
            }
        }

        private bool wbir_rx2_tuned = true;
        private void WBIR_RX2()
        {
            WBIR_State state = WBIR_State.FastAdapt;
            int fast_count = 0;
            int countdown = 10000;

            while (chkPower.Checked)
            {
                switch (state)
                {
                    case WBIR_State.FastAdapt:
                        if (mox || wbir_tx_band_changed)
                        {
                            DttSP.SetCorrectIQMu(2, 0, 0.0);
                            state = WBIR_State.NoAdapt;
                        }
                        else
                        {
                            if (wbir_rx2_tuned)
                            {
                                wbir_rx2_tuned = false;
                                fast_count = 0;
                            }
                            DttSP.SetCorrectIQMu(2, 0, 0.05 - (fast_count * 0.005));
                            //Debug.WriteLine("WBIR2 Fast, Mu: " + (0.05 - (fast_count * 0.005)).ToString("f6"));
                            fast_count++;
                            if (fast_count == 10)
                            {
                                fast_count = 0;
                                state = WBIR_State.SlowAdapt;
                            }
                        }
                        break;
                    case WBIR_State.SlowAdapt:
                        if (mox || wbir_tx_band_changed)
                        {
                            DttSP.SetCorrectIQMu(2, 0, 0.0);
                            state = WBIR_State.NoAdapt;
                        }
                        else
                        {
                            countdown -= 100;
                            //Debug.WriteLine("WBIR2 Slow, wbcountdown2: "+countdown);
                            if (!calibrating && (countdown <= 0 || wbir_rx2_tuned))
                            {
                                wbir_rx2_tuned = false;
                                countdown = 10000;
                                state = WBIR_State.FastAdapt;
                            }
                        }
                        break;
                    case WBIR_State.NoAdapt:
                        //Debug.WriteLine("WBIR2 Off");
                        if (!mox && !wbir_tx_band_changed)
                        {
                            DttSP.SetCorrectIQMu(2, 0, 0.005);
                            countdown = 10000;
                            state = WBIR_State.SlowAdapt;
                        }
                        break;
                }

                Thread.Sleep(100);

                if(!calibrating && (wbir_rx2_tuned || (wbcountdown2 <= 0)))
                {
                    wbir_rx2_tuned = false;
                    //Debug.WriteLine("WBIR RX2 Fast");
                    double setit=0.1;
                    for(int i=0;i<9 && !wbir_rx2_tuned;i++)
                    {
                        DttSP.SetCorrectIQMu(2, 0, setit);
                        setit -= 0.01;
                        Thread.Sleep(100);
                        //Debug.WriteLine("WBIR RX2 Slower");
                    }
                    //Debug.WriteLine("WBIR RX2 Slow");
                    wbcountdown2 = 10000;
                } 
                else 				
                {
                    Thread.Sleep(100);
                    wbcountdown2 -= 100;
                }
            }
        }*/

        private void AudioWatchdog()
        {
            int limit = sample_rate1 / Audio.BlockSize;
            int count = 0;
            HiPerfTimer t = new HiPerfTimer();
            t.Start();

            while (chkPower.Checked)
            {
                if (Audio.EmptyBuffers > limit) // 1 second dropout
                {
                    count++;

                    Audio.StopAudio();
                    Debug.WriteLine("NOT GOOD2============");

                    if (vac_enabled)
                    {
                        Debug.WriteLine("NOT GOOD============");

                        Audio.StopAudioVAC();
                    }

                    Thread.Sleep(500);
                    this.Invoke(new MethodInvoker(AudioStart));
                }
                Thread.Sleep(3000);
            }
        } // audiowatchdog

        private void AudioStart()
        {
            Audio.Start();   // ke9ns starts the proper callback routine (callback1500 for the Flex1500, or Callback2 for the 3000 and 5000)
        }        

        private void MicPTT1500(bool b)
        {
            hid_mic_ptt = b;
        }

        private void PTTIn1500(bool b)
        {
            hid_ptt_in = b;
        }

#endregion

#region Event Handlers
		// ======================================================
		// Event Handlers
		// ======================================================
       
        // Console Events

		private void Console_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
		{

         //   Debug.WriteLine("console_keypress");


            if (callsignfocus == 1) return; // ke9ns add to focus on waterfall ID text
                 
            if (e.KeyChar == (char)Keys.Enter)
				btnHidden.Focus();
		}


        //===============================================================================================================
        //===============================================================================================================
        private void Console_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
		{

            regBand = 0;  // ke9ns add
        
            if (callsignfocus == 1) return; // ke9ns add to focus on waterfall ID text

            if (e.Shift == false && shift_down)
				shift_down = false;
   
        }

        private static byte regBand = 0; // ke9ns add (used for an extra right click + CTRL function: add bandstacking and hyperlinking) 1=CTRL key pressed
        public static bool ALTM = false; // ke9ns add ALT + M key used to add memory
        public static bool HELPMAP = false; // ke9ns add true = mouse over map menuitem button trackmenuitem1

        //===============================================================================================================
        //===============================================================================================================
        //===============================================================================================================
        private void Console_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e )
		{
            if (e.KeyCode == Keys.F1) // ke9ns add for help messages (F1 help screen)
            {
            
                if (MouseIsOverControl(txtTimer) == true)
                {
                    if (helpboxForm == null || helpboxForm.IsDisposed) helpboxForm = new helpbox(this);

                    helpboxForm.Show();
                    helpboxForm.Focus();
                    helpboxForm.WindowState = FormWindowState.Normal; // ke9ns add

                    helpboxForm.helpbox_message.Text = helpboxForm.txttimer_message.Text;
                }
                else  if((MouseIsOverControl(txtNOAA) == true) || (MouseIsOverControl(txtNOAA2) == true))
                {
                    if (helpboxForm == null || helpboxForm.IsDisposed) helpboxForm = new helpbox(this);

                    helpboxForm.Show();
                    helpboxForm.Focus();
                    helpboxForm.WindowState = FormWindowState.Normal; // ke9ns add
                  
                    helpboxForm.helpbox_message.Text = helpboxForm.solar_message.Text;

                }
                else if (HELPMAP == true) 
                {
                    if (helpboxForm == null || helpboxForm.IsDisposed) helpboxForm = new helpbox(this);

                    helpboxForm.Show();
                    helpboxForm.Focus();
                    helpboxForm.WindowState = FormWindowState.Normal; // ke9ns add

                    helpboxForm.helpbox_message.Text = helpboxForm.TRACKMap.Text;

                }



            } // if (e.KeyCode == Keys.F1)

            if ((e.Shift == true) && (callsignfocus == 0) )// ke9ns add (check for CTRL key but not while callsign text box is in focus)
            {
                if (DXR == 0) DXR = 1; // show Spotters on panadapter (and now also display the world map with lat/long coords)
                else DXR = 0; // clear
            }
            else
            {
           //    DXR = 0; // show DX on panadapter
            }

            Debug.WriteLine("keypressedCODE " + e.KeyCode);

            if (e.Alt == true) // ke9ns add
            {
                switch (e.KeyCode)
                {
                    case Keys.M: // add to memory list

                        // Debug.WriteLine("ALT + M key ");

                        ALTM = true;
                        if (memoryForm == null || memoryForm.IsDisposed) memoryForm = new MemoryForm(this);
                      //  memoryForm.Show();
                      //  memoryForm.Focus();

                        memoryForm.MemoryRecordAdd_Click(memoryForm.MemoryRecordAdd, EventArgs.Empty); // 

                        break;

                }



            } // alt key + M

            ALTM = false;

           
            // CTRL key press DOWN
            if (e.Control == true) // ke9ns add (check for CTRL key press to do a QRZ lookup OR Focus on Red DOT on world MAP) 
            {

                 regBand = 1; // ke9ns add (used for an extra right click + CTRL function: add bandstacking and hyperlinking)


                int x = DX_X; // get cursor position at time of CTRL key hit
                int y = DX_Y;

                //---------------------------------------------------------------
                // ke9ns since the picDisplay area can be scaled, but not resized, you must rescale your values to find things within the picDisplay area

                int xx = picDisplay.Width;  // size of picdisplay as user scales it to their screen
                int yy = picDisplay.Height;

                int xxx = 1000; // actual unscaled size of map in picdisplay
                int yyy = 507;

                Debug.WriteLine(" width " + xx);
                Debug.WriteLine(" Height " + yy);

                Point p = picDisplay.PointToClient(Cursor.Position); // mouse cursor when you hit the ctrl key

                int XX = 0;
                int YY = 0;

                float scalex = ((float)xxx / (float)xx);
                XX = (int)((float)p.X * scalex);

                float scaley = ((float)yyy / (float)yy);
                YY = (int)((float)p.Y * scaley);

                Debug.WriteLine(" unscalledX " + XX);
                Debug.WriteLine(" unscalledY " + YY);

                Debug.WriteLine(" cursor " + p);
                //----------------------------------------------------------------------------------------
                // ke9ns add Beam heading for the MOON
                if ((SpotControl.SP5_Active == 1) && (SpotForm.chkMoon.Checked == true))
                {
                    Debug.WriteLine("MOON X " + x + " , " + SpotControl.Moon_X);
                    Debug.WriteLine("MOON Y " + y + " , " + SpotControl.Moon_Y);

                    if ( (XX >= SpotControl.Moon_X - 20) && (XX <= SpotControl.Moon_X + 43) && (YY >= SpotControl.Moon_Y - 13) && (YY <= SpotControl.Moon_Y + 27) ) // check for rotor Beam heading 
                    {
                        Debug.WriteLine("BEAM HEADING TRANSMIT FROM Display for the MOON " + SpotControl.Moon_AZ.ToString().PadLeft(3, '0'));

                        spotDDUtil_Rotor = "AP1" + SpotControl.Moon_AZ.ToString().PadLeft(3, '0') + ";"; // transmit Az
                        spotDDUtil_Rotor = "AM1;";
                    }
                } // MOON Rotor move
                //----------------------------------------------------------------------------------------
                // ke9ns add Beam heading for the ISS
                if ((SpotControl.SP5_Active == 1) && (SpotForm.chkISS.Checked == true))
                {
                    Debug.WriteLine("ISS X " + x + " , " + SpotControl.ISS_X);
                    Debug.WriteLine("ISS Y " + y + " , " + SpotControl.ISS_Y);

                    if ( (XX >= SpotControl.ISS_X - 20) && (XX <= SpotControl.ISS_X + 53) && (YY >= SpotControl.ISS_Y - 13) && (YY <= SpotControl.ISS_Y + 27)) // check for rotor Beam heading 
                    {
                        Debug.WriteLine("BEAM HEADING TRANSMIT FROM Display for the ISS " + SpotControl.ISS_AZ.ToString().PadLeft(3, '0'));

                        spotDDUtil_Rotor = "AP1" + SpotControl.ISS_AZ.ToString().PadLeft(3, '0') + ";"; // transmit Az
                        spotDDUtil_Rotor = "AM1;";
                    }
                } // ISS Rotor move

                if ((SpotControl.SP4_Active == 0) && (SpotControl.SP_Active > 2) && (SpotControl.DX_Index > 0) )  // Do below if not in the middle of processing a DX spot, but DX spotting is Active
                {

                  //  int x = DX_X; // cursor position
                  //  int y = DX_Y;

                    //======================================================================================================    

                  

                    int iii = 500;

                        for (int ii = 0; ii < SpotControl.DX_Index; ii++) // check all red dots on Panadapter
                        {

                            if ((SpotControl.DX_X[ii] > 5) && (SpotControl.DX_Y[ii] > 5) &&  (XX <= (SpotControl.DX_X[ii] +5)) && (XX >= (SpotControl.DX_X[ii] -5))
                                && (YY <= (SpotControl.DX_Y[ii] + 5)) && (YY >= (SpotControl.DX_Y[ii] - 5)) )
                            {
                                 Debug.WriteLine("Good trace ii " + ii);

                                  SpotForm.DX_SELECTED = ii;    // ke9ns add to keep the dx spotter window always highlighted
                                  SpotForm.DX_TEXT = SpotForm.textBox1.Text.Substring((SpotForm.DX_SELECTED * SpotForm.LineLength) + 16, 40);  // ke9ns add
                                  SpotControl.Map_Last = 2;
                                  SpotForm.processTCPMessage();
                                  iii = ii;
                                  break;
                            }
                            else
                            {
                                 Debug.WriteLine("trace X " + SpotControl.DX_X[ii] + " Y " + SpotControl.DX_Y[ii]);
                            }

                        }

                        if (iii != 500) // only go to the DX spot freq if you found it directly up above in the for loop
                        { 
                    
                            int freq1 = SpotControl.DX_Freq[iii];

                             Debug.WriteLine("freq ii " + freq1);

                                if ((freq1 < 5000000) || ((freq1 > 6000000) && (freq1 < 8000000))) // check for bands using LSB
                                {
                                    if (SpotForm.chkDXMode.Checked == true)
                                    {
                                        if (SpotControl.DX_Mode[iii] == 0) RX1DSPMode = DSPMode.LSB;
                                        else if (SpotControl.DX_Mode[iii] == 1) RX1DSPMode = DSPMode.CWL;
                                        else if (SpotControl.DX_Mode[iii] == 2) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 3) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 4) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 5) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 6) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 7) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 8) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 9) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 10) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 11) RX1DSPMode = DSPMode.FM;
                                        else if (SpotControl.DX_Mode[iii] == 12) RX1DSPMode = DSPMode.LSB;
                                        else if (SpotControl.DX_Mode[iii] == 13) RX1DSPMode = DSPMode.DIGL;
                                        else if (SpotControl.DX_Mode[iii] == 14) RX1DSPMode = DSPMode.SAM;
                                        else RX1DSPMode = DSPMode.LSB;

                                    }
                                    else
                                    {
                                        RX1DSPMode = DSPMode.LSB;
                                    }

                                } // LSB
                                else
                                {
                                    if (SpotForm.chkDXMode.Checked == true)
                                    {

                                        if (SpotControl.DX_Mode[iii] == 0) RX1DSPMode = DSPMode.USB;
                                        else if (SpotControl.DX_Mode[iii] == 1) RX1DSPMode = DSPMode.CWU;
                                        else if (SpotControl.DX_Mode[iii] == 2) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 3) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 4) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 5) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 6) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 7) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 8) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 9) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 10) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 11) RX1DSPMode = DSPMode.FM;
                                        else if (SpotControl.DX_Mode[iii] == 12) RX1DSPMode = DSPMode.USB;
                                        else if (SpotControl.DX_Mode[iii] == 13) RX1DSPMode = DSPMode.DIGU;
                                        else if (SpotControl.DX_Mode[iii] == 14) RX1DSPMode = DSPMode.SAM;
                                        else RX1DSPMode = DSPMode.USB;

                                    }
                                    else
                                    {
                                        RX1DSPMode = DSPMode.USB;
                                    }

                                } // USB
                                VFOAFreq = (double)freq1 / 1000000; // convert to MHZ

                            //   Debug.WriteLine("freq " + VFOAFreq);

                                if (SpotForm.chkDXMode.Checked == true)
                                {

                                    if (SpotControl.DX_Mode2[iii] != 0)
                                    {

                                        VFOBFreq = (double)(freq1 + SpotControl.DX_Mode2[iii]) / 1000000; // convert to MHZ
                                        chkVFOSplit.Checked = true; // turn on  split

                                        Debug.WriteLine("split here" + (freq1 + SpotControl.DX_Mode2[iii]));

                                    }
                                    else
                                    {
                                        chkVFOSplit.Checked = false; // turn off split

                                    }


                                } // chkdxmode checked

/*   decided not to do it here, since you dont always want to be moving your antenna on everything you click on.
                        if (setupForm.ROTOREnabled == true)   // ke9ns add send hygain rotor command to DDUtil via the CAT port setup in PowerSDR
                        {
                            Debug.WriteLine("Red DOT BEAM HEADING TRANSMIT");

                            spotDDUtil_Rotor = "AP1" + SpotControl.DX_Beam[iii].ToString().PadLeft(3, '0') + ";";
                           // spotDDUtil_Rotor = ";";
                            spotDDUtil_Rotor = "AM1;";

                        } //  
*/

                        SpotControl.Map_Last = 2; // UPDATE SPOTS ON MAP


                        return;

                        } // if you found a red dot matching your dx spot list



                        //======================================================================================================
                        // this is a CTRL key press
                        for (byte ii = 0; ii < DXK; ii++) // check all spot on Panadapter (not red dots)
                        {
                     
                            if ((x >= DXX[ii]) && (x <= (DXX[ii] + (DXW[ii])*3/4)) && (y >= DXY[ii]) && (y <= (DXY[ii] + DXH[ii])))
                            {
                              
                                var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                                DXtemp.Append(DXS[ii]);

                                try
                                {
                                
                                 //   System.Diagnostics.Process.Start(DXtemp.ToString()); // change so now only a Right click on the panadapter callsign will open QRZ page
                               
                                  //  Debug.WriteLine("DX SELECTED " + ii + " , " + Display.holder[ii] + " , " + DXS[ii]);

                                   // a simple Right click on a DX SPot will do a QRZ lookup (mousedown routine)

                                    SpotForm.DX_SELECTED = Display.holder[ii]; //ke9ns add
                                    SpotForm.textBox1.SelectionStart = SpotForm.DX_SELECTED * SpotForm.LineLength;      // start of each dx spot line
                                    SpotForm.textBox1.SelectionLength = SpotForm.LineLength;                    // length of each dx spot  line
                                    SpotForm.textBox1_MouseUp(this, new MouseEventArgs(MouseButtons.Left, 0, 0, 0,0)); // process as though you clicked on the dx spot in the spotter window
                            
                                }
                                catch
                                {
                                    Debug.WriteLine("bad station");
                                }

                                return;

                            } // index
                            else if ((x >= DXX[ii] + (DXW[ii]*3/4)) && (x <= (DXX[ii] + DXW[ii])) && (y >= DXY[ii]) && (y <= (DXY[ii] + DXH[ii]))) // check for rotor Beam heading 
                            {
                                Debug.WriteLine("BEAM HEADING TRANSMIT FROM Display");

                                spotDDUtil_Rotor = "AP1" + SpotControl.DX_Beam[ii].ToString().PadLeft(3, '0') + ";";
                                spotDDUtil_Rotor = "AM1;";

                          //  Debug.WriteLine(">>>>>>> DX SELECTED " + ii);

                            SpotForm.DX_SELECTED = Display.holder[ii]; //ke9ns add
                            SpotForm.textBox1.SelectionStart = SpotForm.DX_SELECTED * SpotForm.LineLength;      // start of each dx spot line
                            SpotForm.textBox1.SelectionLength = SpotForm.LineLength;                    // length of each dx spot  line
                            SpotForm.textBox1_MouseUp(this, new MouseEventArgs(MouseButtons.Left, 0, 0, 0, 0));


                        } // check if you clicked on the last half of the call sign



                    } // for loop

                    if (chkRX2.Checked == true)  // check RX2 click
                        {
                            for (byte ii = 0; ii < DXK2; ii++)
                            {
                              
                                if ((x >= DXX[ii + 50]) && (x <= (DXX[ii + 50] + DXW[ii + 50] * 3 / 4)) && (y >= DXY[ii + 50]) && (y <= (DXY[ii + 50] + DXH[ii + 50])))
                                {
                                    var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                                    DXtemp.Append(DXS[ii + 50]);

                                    try
                                    {
                                 //      System.Diagnostics.Process.Start(DXtemp.ToString());

                                    SpotForm.DX_SELECTED = Display.holder[ii]; //ke9ns add
                                    SpotForm.textBox1.SelectionStart = SpotForm.DX_SELECTED * SpotForm.LineLength;      // start of each dx spot line
                                    SpotForm.textBox1.SelectionLength = SpotForm.LineLength;                    // length of each dx spot  line
                                    SpotForm.textBox1_MouseUp(this, new MouseEventArgs(MouseButtons.Left, 0, 0, 0, 0));


                                }
                                    catch
                                    {
                                        Debug.WriteLine("bad station");
                                    }

                                    break;

                                } // index
                                else if ( (x <= (DXX[ii + 50] + DXW[ii + 50] * 3 / 4)) && (y >= DXY[ii + 50]) && (y <= (DXY[ii + 50] + DXH[ii + 50])))
                               {
                                     Debug.WriteLine("BEAM HEADING TRANSMIT FROM Display RX2");

                                    spotDDUtil_Rotor = "AP1" + SpotControl.DX_Beam[ii].ToString().PadLeft(3, '0') + ";";
                                    spotDDUtil_Rotor = ";";
                                    spotDDUtil_Rotor = "AM1;";

                                    SpotForm.DX_SELECTED = Display.holder[ii]; //ke9ns add
                                    SpotForm.textBox1.SelectionStart = SpotForm.DX_SELECTED * SpotForm.LineLength;      // start of each dx spot line
                                    SpotForm.textBox1.SelectionLength = SpotForm.LineLength;                    // length of each dx spot  line
                                    SpotForm.textBox1_MouseUp(this, new MouseEventArgs(MouseButtons.Left, 0, 0, 0, 0));


                            } // check if you clicked on the last half of the call sign


                        } // for loop

                    } // rx2 checked on 


                } //   if ((SpotControl.SP4_Active == 0) && (SpotControl.SP_Active > 2))



                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //ke9ns memory in Pan  you are here from a CTRL key press
                if ((SpotControl.SP6_Active == 1))
                {
                   // int x = DX_X;
                  //  int y = DX_Y;


                    for (int ii = 0; ii < MMK3; ii++) // check all spot on Panadapter
                    {

                        if ((x >= MMX[ii]) && (x <= (MMX[ii] + MMW[ii])) && (y >= MMY[ii]) && (y <= (MMY[ii] + MMH[ii])))
                        {

                             //  Debug.WriteLine("NAME === " + MMS[ii] + " index "+MMM[ii]);

                            try
                            {
                              
                                changeComboFMMemory(MMM[ii]);
                            }
                            catch
                            {
                                Debug.WriteLine("bad station");
                            }

                            return;

                        } // index

                    } // for loop

                    //-------------------------------------------------------


                    if (chkRX2.Checked == true)  // check RX2 click
                    {
                        for (int ii = 0; ii < MMK4; ii++)
                        {

                            if ((x >= MMX[ii + 50]) && (x <= (MMX[ii + 50] + DXW[ii + 50])) && (y >= MMY[ii + 50]) && (y <= (MMY[ii + 50] + MMH[ii + 50])))
                            {
                              
                               
                                try
                                {
                                    //  System.Diagnostics.Process.Start(DXtemp.ToString());
                                    changeComboFMMemory(MMM[ii]);
                                }
                                catch
                                {
                                    Debug.WriteLine("bad station");
                                }

                                break;

                            } // index


                        } // for loop

                    } // rx2 checked on 


                } // memory ON pAN ACTIVE

                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //---------------------------------------------------------------------------------
                //ke9ns SWL lookup on google
                if ((SpotControl.SP1_Active == 1))
                {

                   // Debug.WriteLine("test====");

                  //  int x = DX_X;
                  //  int y = DX_Y;

                    for (byte ii = 0; ii < SXK; ii++)
                    {

                        if ((x >= SXX[ii]) && (x <= (SXX[ii] + SXW[ii])) && (y >= SXY[ii]) && (y <= (SXY[ii] + SXH[ii])))
                        {

                            try
                            {
                             
                                Debug.WriteLine("freq " + SXF[ii]);
                                Debug.WriteLine("Mode " + SXM[ii]);

                                VFOAFreq = ((double)SXF[ii]) / 1000000.0; // convert to MHZ

                                //   Display.VFOA = ((long)SpotControl.SWL_Freq[swl_index[xxx]]) ; // keep as hz

                                if (SXM[ii] == "AM") RX1DSPMode = DSPMode.SAM;
                                else if (SXM[ii] == "SAM") RX1DSPMode = DSPMode.SAM;
                                else if (SXM[ii] == "USB") RX1DSPMode = DSPMode.USB;
                                else if (SXM[ii] == "DIGU") RX1DSPMode = DSPMode.DIGU;


                            }
                            catch
                            {
                                Debug.WriteLine("Bad location");

                            }


                            return;

                        } // index

                    } // for loop

                    if (chkRX2.Checked == true)  // check RX2 click
                    {
                        for (byte ii = 0; ii < SXK2; ii++)
                        {

                            if ((x >= SXX[ii + 100]) && (x <= (SXX[ii + 100] + SXW[ii + 100])) && (y >= SXY[ii + 100]) && (y <= (SXY[ii + 100] + SXH[ii + 100])))
                            {
                                try
                                {

                                    Debug.WriteLine("freq " + SXF[ii + 100]);
                                    Debug.WriteLine("Mode " + SXM[ii + 100]);

                                    VFOBFreq = ((double)SXF[ii + 100]) / 1000000.0; // convert to MHZ

                                    //   Display.VFOA = ((long)SpotControl.SWL_Freq[swl_index[xxx]]) ; // keep as hz

                                    if (SXM[ii + 100] == "AM") RX2DSPMode = DSPMode.SAM;
                                    else if (SXM[ii + 100] == "SAM") RX2DSPMode = DSPMode.SAM;
                                    else if (SXM[ii + 100] == "USB") RX2DSPMode = DSPMode.USB;
                                    else if (SXM[ii + 100] == "DIGU") RX2DSPMode = DSPMode.DIGU;


                                }
                                catch
                                {
                                    Debug.WriteLine("Bad location");

                                }
                                return;

                            } // index

                        } // for loop




                    } // RX2







                    } //  if ((SpotControl.SP3_Active == 1) && (SpotControl.SP1_Active ==1))



            } // e.control key
            else
            {

               regBand = 0;
            }

            SpotControl.Map_Last = 2; // force map update


            if (callsignfocus == 1) return; // ke9ns add to focus on waterfall ID text

            if (e.Shift == true && !shift_down)	shift_down = true;

         
            //==================================================================
            if (e.Control == true && e.Shift == true)  // CTRL and SHIFT together
			{
				switch(e.KeyCode)
				{
                    case Keys.A:
                        if (fwc_init && (current_model == Model.FLEX3000))
                        {
                            if (flex3000ATUForm == null || flex3000ATUForm.IsDisposed)
                                flex3000ATUForm = new FLEX3000ATUForm(this);
                            flex3000ATUForm.Show();
                            flex3000ATUForm.Focus();
                            flex3000ATUForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
                        break;
					case Keys.C:
						if((fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                            (hid_init && current_model == Model.FLEX1500))
						{
							fwcCalForm = new FWCCalForm(this);
							fwcCalForm.Show();
							fwcCalForm.Focus();
                            fwcCalForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
						break;
					case Keys.D:
						if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
						{
							if(flex5000DebugForm == null || flex5000DebugForm.IsDisposed)
								flex5000DebugForm = new FLEX5000DebugForm(this);
							flex5000DebugForm.Show();
							flex5000DebugForm.Focus();
                            flex5000DebugForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
                        else if (hid_init && current_model == Model.FLEX1500)
                        {
                            if (flex1500DebugForm == null || flex1500DebugForm.IsDisposed)
                                flex1500DebugForm = new FLEX1500DebugForm();
                            flex1500DebugForm.Show();
                            flex1500DebugForm.Focus();
                            flex1500DebugForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
						break;
					case Keys.F:
						if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
						{
							flex5000FinalTestForm = new FLEX5000FinalTestForm(this);
							flex5000FinalTestForm.Show();
							flex5000FinalTestForm.Focus();
                            flex5000FinalTestForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
						break;
					case Keys.I:
						if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
						{
							if(fwcTestForm == null || fwcTestForm.IsDisposed)
								fwcTestForm = new FWCTestForm(this);
							fwcTestForm.Show();
							fwcTestForm.Focus();
                            fwcTestForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
						break;
					case Keys.O:
                        relaysToolStripMenuItem.Visible = true;
						break;
					case Keys.P:
                        switch (current_model)
                        {
                            case Model.FLEX5000:
                            case Model.FLEX3000:
                                if (fwc_init)
                                {
                                    flex5000ProdTestForm = new FLEX5000ProdTestForm(this);
                                    flex5000ProdTestForm.Show();
                                    flex5000ProdTestForm.Focus();
                                    flex5000ProdTestForm.WindowState = FormWindowState.Normal; // ke9ns add
                                }
                                break;
                            case Model.FLEX1500:
                                if (hid_init)
                                {
                                    flex5000ProdTestForm = new FLEX5000ProdTestForm(this);
                                    flex5000ProdTestForm.Show();
                                    flex5000ProdTestForm.Focus();
                                    flex5000ProdTestForm.WindowState = FormWindowState.Normal; // ke9ns add
                                }
                                break;
                         /*   case Model.SDR1000:
                                if (ProdTestForm == null || ProdTestForm.IsDisposed)
                                    ProdTestForm = new ProductionTest(this);
                                ProdTestForm.Show();
                                ProdTestForm.Focus();
                                ProdTestForm.WindowState = FormWindowState.Normal; // ke9ns add
                                break; */
                        }
                        break;
					case Keys.R:
						if(fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
						{
							if(flex5000RX2CalForm == null || flex5000RX2CalForm.IsDisposed)
								flex5000RX2CalForm = new FLEX5000RX2CalForm(this);
							flex5000RX2CalForm.Show();
							flex5000RX2CalForm.Focus();
                            flex5000RX2CalForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
						break;
                    case Keys.S:
                        if ((fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                            (hid_init && current_model == Model.FLEX1500))
                        {
                            if(preSelForm == null || preSelForm.IsDisposed)
                                preSelForm = new PreSelForm(this);
                            preSelForm.Show();
                            preSelForm.Focus();
                            preSelForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
                        break;
					case Keys.T:
					/*	if(pa_present && current_model == Model.SDR1000)
						{
							if(PAQualForm == null || PAQualForm.IsDisposed)
								PAQualForm = new PAQualify(this);
							PAQualForm.Show();
							PAQualForm.Focus();
                            PAQualForm.WindowState = FormWindowState.Normal; // ke9ns add
                        } */
						break;
                    case Keys.V:
                        if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
                        {
                            if (flex5000VUCalForm == null || flex5000VUCalForm.IsDisposed)
                                flex5000VUCalForm = new FLEX5000VUCalForm(this);
                            flex5000VUCalForm.Show();
                            flex5000VUCalForm.Focus();
                            flex5000VUCalForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
                        break;
				}
				shift_down = false;

			} // if (e.Control == true && e.Shift == true)  // CTRL and SHIFT together

            else if(e.Control == true && e.Alt == true)     // ALT + CTRL keys are pressed
			{
				switch(e.KeyCode)
				{
					case Keys.D4:
						if(fwc_init && current_model == Model.FLEX5000)
						{
							if(flex5000LPFForm == null || flex5000LPFForm.IsDisposed)
								flex5000LPFForm = new FLEX5000LPFForm();
							flex5000LPFForm.Show();
							flex5000LPFForm.Focus();
                            flex5000LPFForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
						break;                    
                    case Keys.D:
                        if (dspTestForm == null || dspTestForm.IsDisposed)
                            dspTestForm = new DSPTestForm(this);
                        dspTestForm.Show();
                        dspTestForm.Focus();
                        dspTestForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
                    case Keys.G:
                        if (hid_init && current_model == Model.FLEX1500)
                            CallCal1500TXImageComb();
                        break;
                    case Keys.R:
                        if (FWCEEPROM.RX2OK)
                        {
                           // DiversityForm diversityForm = new DiversityForm(this);  BT/2/24/11
                            if(diversityForm == null || diversityForm.IsDisposed)
                                diversityForm = new DiversityForm(this);
                            diversityForm.Focus();
                            diversityForm.Show();
                            diversityForm.WindowState = FormWindowState.Normal; // ke9ns add
                        }
                        break;
                    case Keys.U:
						mnuUCB_Click(this, EventArgs.Empty);
						break;
					case Keys.F:
                        if (!chkFullDuplex.Visible) chkFullDuplex.Visible = true;
                        else chkFullDuplex.Visible = false;
						break;
                    case Keys.A:
                        if (aboutForm == null || aboutForm.IsDisposed)
                            aboutForm = new AboutForm();
                        aboutForm.ShowDialog();
                        aboutForm.Focus();
                        break;
				}
            } //if(e.Control == true && e.Alt == true)     // ALT + CTRL keys are pressed

            else if(!enable_kb_shortcuts)
			{
				return; // dont go any further if shortcuts are not enabled in setup general
			}
			else if(e.Control && !e.Alt)		// CTRL key is pressed ALONE
			{

                switch (e.KeyCode)
				{
					case Keys.Add:
                        if (ptbRF.Value != ptbRF.Maximum)
                        {
                            ptbRF.Value++;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
						break;
					case Keys.Subtract:
                        if (ptbRF.Value != ptbRF.Minimum)
                        {
                            ptbRF.Value--;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
						break;
					case Keys.Left:
						ChangeTuneStepUp();
						e.Handled = true;
						break;
					case Keys.Right:
						ChangeTuneStepDown();
						e.Handled = true;
						break;
					case Keys.Up:
						Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, 120));
						e.Handled = true;
						break;
					case Keys.Down:
						Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, -120));
						e.Handled = true;
						break;
					case Keys.A:
						if(RX1AGCMode == AGCMode.FAST)
							RX1AGCMode = AGCMode.FIXD;
						else RX1AGCMode++;
						break;
					case Keys.B:
						chkNR.Checked = !chkNR.Checked;
						break;
					case Keys.C:
						btnMemoryQuickSave_Click(this, EventArgs.Empty);
						break;
					case Keys.D:
					        switch(Display.CurrentDisplayMode)
					        {
						        case DisplayMode.PANADAPTER:
							        comboDisplayMode.Text = "Spectrum";
							        break;
						        case DisplayMode.SPECTRUM:
							        comboDisplayMode.Text = "Panadapter";
							        break;
						        default:
							        comboDisplayMode.Text = "Panadapter";
							        break;
					        }
						break;
					case Keys.E:
                        if (ptbRF.Value != ptbRF.Minimum)
                        {
                            ptbRF.Value--;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
						break;
					case Keys.F:
						int low = (int)udFilterLow.Value;
						int high = (int)udFilterHigh.Value;
						if(high - low > 10)
						{
							switch(rx1_dsp_mode)
							{
								case DSPMode.AM:
								case DSPMode.SAM:
								case DSPMode.DSB:
								case DSPMode.FM:
								case DSPMode.CWU:
								case DSPMode.CWL:
									UpdateRX1Filters(low+5, high-5);
									break;
								case DSPMode.USB:
								case DSPMode.DIGU:							
									UpdateRX1Filters(low, high-10);
									break;
								case DSPMode.LSB:
								case DSPMode.DIGL:							
									UpdateRX1Filters(low+10, high);
									break;
							}
						}
						break;
					case Keys.L:
						if(chkVFOLock.Enabled)
							chkVFOLock.Checked = !chkVFOLock.Checked;
						break;
					case Keys.M:
						if(chkMOX.Enabled) chkMOX.Checked = !mox;
						break;
					case Keys.N:
						chkANF.Checked = !chkANF.Checked;
						break;
					case Keys.P:
						RX1PreampMode = (PreampMode)(((int)rx1_preamp_mode+1)%(int)PreampMode.LAST);
						break;
					case Keys.R:
                        if (ptbRF.Value != ptbRF.Maximum)
                        {
                            ptbRF.Value++;
                            ptbRF_Scroll(this, EventArgs.Empty);
                        }
						break;
					case Keys.S:
						if(chkVFOSplit.Enabled)
							chkVFOSplit.Checked = !chkVFOSplit.Checked;
						break;
					case Keys.V:
						btnMemoryQuickRestore_Click(this, EventArgs.Empty);
						break;					
					case Keys.W:
                        if (ptbCWSpeed.Value != ptbCWSpeed.Minimum)
                        {
                            ptbCWSpeed.Value--;
                            ptbCWSpeed_Scroll(this, EventArgs.Empty);
                        }
						break;
				}
            } // if(e.Control && !e.Alt)		// CTRL key is pressed

            else if(e.Alt && !e.Control)    // Alt key is pressed
			{
				switch(e.KeyCode)
				{
                    case Keys.Up:
                        if (ptbMic.Value != ptbMic.Maximum)
                        {
                            ptbMic.Value++;
                            ptbMic_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Down:
                        if (ptbMic.Value != ptbMic.Minimum)
                        {
                            ptbMic.Value--;
                            ptbMic_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Right:
                        if (ptbVOX.Value != ptbVOX.Maximum)
                        {
                            ptbVOX.Value++;
                            ptbVOX_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Left:
                        if (ptbVOX.Value != ptbVOX.Minimum)
                        {
                            ptbVOX.Value--;
                            ptbVOX_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.Add:
                        if (ptbPWR.Value != ptbPWR.Maximum)
                        {
                            ptbPWR.Value++;
                            ptbPWR_Scroll(this, EventArgs.Empty); 
                        }
                        break;
                    case Keys.Subtract:
                        if (ptbPWR.Value != ptbPWR.Minimum)
                        {
                            ptbPWR.Value--;
                            ptbPWR_Scroll(this, EventArgs.Empty);
                        }
                        break;
                    case Keys.B:
						chkNB.Checked = !chkNB.Checked;
						break;
					case Keys.D:
						chkEnableMultiRX.Checked = !chkEnableMultiRX.Checked;
						break;
					case Keys.F:
						int low = (int)udFilterLow.Value;
						int high = (int)udFilterHigh.Value;
						switch(rx1_dsp_mode)
						{
							case DSPMode.AM:
							case DSPMode.SAM:
							case DSPMode.DSB:
							case DSPMode.FM:
							case DSPMode.CWU:
							case DSPMode.CWL:
								UpdateRX1Filters(low-5, high+5);
								break;
							case DSPMode.USB:
							case DSPMode.DIGU:						
								UpdateRX1Filters(low, high+10);
								break;
							case DSPMode.LSB:
							case DSPMode.DIGL:						
								UpdateRX1Filters(low-10, high);
								break;
						}
						break;
					case Keys.G:
						btnVFOAtoB_Click(this, EventArgs.Empty);
						break;
					case Keys.H:
						btnVFOBtoA_Click(this, EventArgs.Empty);
						break;
					case Keys.I:
						btnFilterShiftReset_Click(this, EventArgs.Empty);
						break;
					case Keys.N:
						chkDSPNB2.Checked = !chkDSPNB2.Checked;
						break;
					case Keys.Q:
                        if (ptbCWSpeed.Value != ptbCWSpeed.Maximum)
                        {
                            ptbCWSpeed.Value++;
                            ptbCWSpeed_Scroll(this, EventArgs.Empty);
                        }
						break;
					case Keys.R:
						btnRITReset_Click(this, EventArgs.Empty);
						break;
					case Keys.T:
						chkTUN.Checked = !chkTUN.Checked;
						break;
					case Keys.V:
						btnVFOSwap_Click(this, EventArgs.Empty);
						break;
					case Keys.Y:
						btnXITReset_Click(this, EventArgs.Empty);
						break;
					case Keys.Z:
						if(btnZeroBeat.Enabled)
							btnZeroBeat_Click(this, EventArgs.Empty);
						break;
				}
            } // if(!e.Control && e.Alt)		//  ALT key is pressed
            else if(!e.Alt && !e.Control)
			{
               
             
                if (this.ActiveControl is TextBoxTS) return;
				if(this.ActiveControl is NumericUpDownTS) return;

                Debug.WriteLine("1keypressedCODE " + e.KeyCode);

                switch (e.KeyCode)
				{
					case Keys.Multiply:
						chkMUT.Checked = !chkMUT.Checked;
						break;
					case Keys.Add:
                        if (ptbAF.Value != ptbAF.Maximum)
                        {
                            ptbAF.Value++;
                            ptbAF_Scroll(this, EventArgs.Empty);
                        }
						break;
					case Keys.Subtract:
                        if (ptbAF.Value != ptbAF.Minimum)
                        {
                            ptbAF.Value--;
                            ptbAF_Scroll(this, EventArgs.Empty);
                        }
						break;
					case Keys.K:
						int low = (int)udFilterLow.Value;
						int high = (int)udFilterHigh.Value;
						int increment = 0;

					        switch(rx1_dsp_mode)
					        {
						        case DSPMode.CWL:
						        case DSPMode.CWU:
						        case DSPMode.DIGL:
						        case DSPMode.DIGU:
							        increment = 10;
							        break;
						        default:
							        increment = 50;
							        break;
					        }
						UpdateRX1Filters(low-increment, high-increment);
						/*if(tbFilterShift.Value != tbFilterShift.Minimum)
								tbFilterShift.Value--;
							tbFilterShift_Scroll(this, EventArgs.Empty);*/
						break;
					case Keys.L:
						low = (int)udFilterLow.Value;
						high = (int)udFilterHigh.Value;
						increment = 0;
					        switch(rx1_dsp_mode)
					        {
						        case DSPMode.CWL:
						        case DSPMode.CWU:
						        case DSPMode.DIGL:
						        case DSPMode.DIGU:
							        increment = 10;
							        break;
						        default:
							        increment = 50;
							        break;
					        }
						UpdateRX1Filters(low+increment, high+increment);
						/*if(tbFilterShift.Value != tbFilterShift.Maximum)
								tbFilterShift.Value++;
							tbFilterShift_Scroll(this, EventArgs.Empty);*/
						break;
				}
				
				if(e.KeyCode == key_tune_up_1)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq += 1.0;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_down_1)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq -= 1.0;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_up_2)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq += 0.1;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_down_2)
				{
                    
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq -= 0.1;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_up_3)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq += 0.01;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_down_3)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq -= 0.01;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_up_4)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq += 0.001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_down_4)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq -= 0.001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_up_5)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq += 0.0001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_down_5)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq -= 0.0001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_up_6)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq += 0.00001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_down_6)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq -= 0.00001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_up_7)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq += 0.000001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_tune_down_7)
				{
					double freq = Double.Parse(txtVFOAFreq.Text);
					freq -= 0.000001;
					VFOAFreq = freq;
				}
				else if(e.KeyCode == key_rit_up)
				{
					udRIT.Value += udRIT.Increment;
				}
				else if(e.KeyCode == key_rit_down)
				{
					udRIT.Value -= udRIT.Increment;
				}
				else if(e.KeyCode == key_xit_up)
				{
					udXIT.Value += udXIT.Increment;
				}
				else if(e.KeyCode == key_xit_down)
				{
					udXIT.Value -= udXIT.Increment;
				}
				else if(e.KeyCode == key_filter_up)
				{
					if(rx1_filter == Filter.NONE)
						return;
					if(rx1_filter == Filter.VAR2)
						RX1Filter = Filter.F1;
					else
						RX1Filter++;
				}
				else if(e.KeyCode == key_filter_down)
				{
					if(rx1_filter == Filter.NONE)
						return;
					if(rx1_filter == Filter.F1)
						RX1Filter = Filter.VAR2;
					else
						RX1Filter--;
				}
				else if(e.KeyCode == key_mode_up)
				{
					switch(rx1_dsp_mode)
					{
						case DSPMode.LSB:
							RX1DSPMode = DSPMode.USB;
							break;
						case DSPMode.USB:
							RX1DSPMode = DSPMode.DSB;
							break;
						case DSPMode.DSB:
							RX1DSPMode = DSPMode.CWL;
							break;
						case DSPMode.CWL:
							RX1DSPMode = DSPMode.CWU;
							break;
						case DSPMode.CWU:
							RX1DSPMode = DSPMode.FM;
							break;
						case DSPMode.FM:
							RX1DSPMode = DSPMode.AM;
							break;
						case DSPMode.AM:
							RX1DSPMode = DSPMode.SAM;
							break;
						case DSPMode.SAM:
							RX1DSPMode = DSPMode.DIGL;
							break;
						case DSPMode.DIGL:
							RX1DSPMode = DSPMode.DIGU;
							break;
						case DSPMode.DIGU:
							RX1DSPMode = DSPMode.SPEC;
							break;
						case DSPMode.SPEC:
							RX1DSPMode = DSPMode.DRM;
							break;
						case DSPMode.DRM:
							RX1DSPMode = DSPMode.LSB;
							break;
					}
				} // if (e.keycode == keymode up

				else if(e.KeyCode == key_mode_down)
				{
					switch(rx1_dsp_mode)
					{
						case DSPMode.LSB:
							RX1DSPMode = DSPMode.DRM;
							break;
						case DSPMode.USB:
							RX1DSPMode = DSPMode.LSB;
							break;
						case DSPMode.DSB:
							RX1DSPMode = DSPMode.USB;
							break;
						case DSPMode.CWL:
							RX1DSPMode = DSPMode.DSB;
							break;
						case DSPMode.CWU:
							RX1DSPMode = DSPMode.CWL;
							break;
						case DSPMode.FM:
							RX1DSPMode = DSPMode.CWU;
							break;
						case DSPMode.AM:
							RX1DSPMode = DSPMode.FM;
							break;
						case DSPMode.SAM:
							RX1DSPMode = DSPMode.AM;
							break;
						case DSPMode.DIGL:
							RX1DSPMode = DSPMode.SAM;
							break;
						case DSPMode.DIGU:
							RX1DSPMode = DSPMode.DIGL;
							break;
						case DSPMode.SPEC:
							RX1DSPMode = DSPMode.DIGU;
							break;
						case DSPMode.DRM:
							RX1DSPMode = DSPMode.SPEC;
							break;
					}
                } //  if(e.KeyCode == keymode down

                else if(e.KeyCode == key_band_up && !vfo_lock) // M key
				{
					switch(rx1_band)
					{
						case Band.B160M:
							if(band_160m_index == (band_160m_register-1)) // was 2
							{
								band_80m_index = 0;
								radBand80_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand160_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B80M:
							if(band_80m_index == band_80m_register-1) // was 2
							{
								band_60m_index = 0;
                                radBand60_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand80_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B60M:                            
                            switch (current_region)
                            {
                                case FRSRegion.US:
                                    if (band_60m_index == 4) 	// 5 60m channels
                                    {
                                        band_40m_index = 0;
                                        radBand40_Click(this, EventArgs.Empty);
                                    }
                                    else
                                    {
                                        radBand60_Click(this, EventArgs.Empty);
                                    }
                                    break;

                                case FRSRegion.UK_Plus:
                                    if (band_60m_index == 10) // 11 60m channels
                                    {
                                        band_40m_index = 0;
                                        radBand40_Click(this, EventArgs.Empty);
                                    }
                                    else
                                    {
                                        radBand60_Click(this, EventArgs.Empty);
                                    }
                                    break;

                                // w4tme FRSRegions that do not use a channelized 60m band will all have 5 band stack registers for 60m to align with IARU Regions 1 & 2
                                case FRSRegion.UK:
                                case FRSRegion.Europe:
                                case FRSRegion.Italy:
                                case FRSRegion.Norway:
                                case FRSRegion.Denmark:
                                case FRSRegion.Latvia:
                                case FRSRegion.Slovakia:
                                case FRSRegion.Bulgaria:
                                case FRSRegion.Greece:
                                case FRSRegion.Hungary:
                                case FRSRegion.Belgium:
                                case FRSRegion.France:
                                case FRSRegion.Russia:
                                case FRSRegion.Sweden:
                                case FRSRegion.Region_3:
                                case FRSRegion.Japan:
                                case FRSRegion.Italy_Plus:
                                case FRSRegion.ES_CH_FIN:
                                case FRSRegion.Netherlands:
                                case FRSRegion.EU_Travel:
                                case FRSRegion.Luxembourg:
                                case FRSRegion.Region_2:
                                    if (band_60m_index == 4)  // 5 60m channels for all entities
                                    {
                                        band_40m_index = 0;
                                        radBand40_Click(this, EventArgs.Empty);
                                    }
                                    else
                                    {
                                        radBand60_Click(this, EventArgs.Empty);
                                    }
                                    break;

                                default:
                                    if (band_60m_index == band_60m_register - 1) // was 2
                                    {
                                        band_40m_index = 0;
                                        radBand40_Click(this, EventArgs.Empty);
                                    }
                                    else
                                    {
                                        radBand60_Click(this, EventArgs.Empty);
                                    }
                                    break;
                            }
							break;
						case Band.B40M:
							if(band_40m_index == band_40m_register - 1) // was 2
							{
								band_30m_index = 0;
                                radBand30_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand40_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B30M:
							if(band_30m_index == band_30m_register - 1)  // was 2
							{
								band_20m_index = 0;
                                radBand20_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand30_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B20M:
							if(band_20m_index == band_20m_register - 1) // was 2
							{
								band_17m_index = 0;
                                radBand17_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand20_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B17M:
							if(band_17m_index == band_17m_register - 1)
							{
								band_15m_index = 0;
                                radBand15_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand17_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B15M:
							if(band_15m_index == band_15m_register - 1)
							{
								band_12m_index = 0;
                                radBand12_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand15_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B12M:
							if(band_12m_index == band_12m_register - 1)
							{
								band_10m_index = 0;
                                radBand10_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand12_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B10M:
							if(band_10m_index == band_10m_register - 1)
							{
								band_6m_index = 0;
                                radBand6_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand10_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B6M:
							if(band_6m_index == band_6m_register - 1)
							{
                                band_LMF_index = 0;  // ke9ns add
                                radBandGEN0_Click(this, EventArgs.Empty);  // ke9ns add

                                //	if(XVTRPresent)
                                //	{
                                //		band_2m_index = 0;
                                //       radBand2_Click(this, EventArgs.Empty);
                                //	}
                                //	else
                                //	{
                                //		band_wwv_index = 0;
                                //       radBandWWV_Click(this, EventArgs.Empty);
                                //	}
                            }
							else
							{
                                radBand6_Click(this, EventArgs.Empty);
							}
							break;
                            //-------------------------------------------------------
                            // ke9ns add
                        case Band.BLMF:
                            if (band_LMF_index == band_LMF_register - 1)
                            {
                                band_120m_index = 0;
                                radBandGEN1_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                               radBandGEN0_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B120M:
                            if (band_120m_index == band_120m_register - 1)
                            {
                                band_90m_index = 0;
                                radBandGEN2_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN1_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B90M:
                            if (band_90m_index == band_90m_register - 1)
                            {
                                band_61m_index = 0;
                                radBandGEN3_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN2_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B61M:
                            if (band_61m_index == band_61m_register - 1)
                            {
                                band_49m_index = 0;
                                radBandGEN4_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN3_Click(this, EventArgs.Empty);
                            }
                            break;

                        case Band.B49M:
                            if (band_49m_index == band_49m_register - 1)
                            {
                                band_41m_index = 0;
                                radBandGEN5_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN4_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B41M:
                            if (band_41m_index == band_41m_register - 1)
                            {
                                band_31m_index = 0;
                                radBandGEN6_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN5_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B31M:
                            if (band_31m_index == band_31m_register - 1)
                            {
                                band_25m_index = 0;
                                radBandGEN7_CheckedChanged(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN6_Click(this, EventArgs.Empty);
                            }
                            break;

                        case Band.B25M:
                            if (band_25m_index == band_25m_register - 1)
                            {
                                band_22m_index = 0;
                                radBandGEN8_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN7_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B22M:
                            if (band_22m_index == band_22m_register - 1)
                            {
                                band_19m_index = 0;
                                radBandGEN9_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN8_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B19M:
                            if (band_19m_index == band_19m_register - 1)
                            {
                                band_16m_index = 0;
                                radBandGEN10_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN9_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B16M:
                            if (band_16m_index == band_16m_register - 1)
                            {
                                band_14m_index = 0;
                                radBandGEN11_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN10_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B14M:
                            if (band_14m_index == band_14m_register - 1)
                            {
                                band_13m_index = 0;
                                radBandGEN12_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN11_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B13M:
                            if (band_13m_index == band_13m_register - 1)
                            {
                                band_11m_index = 0;
                                radBandGEN13_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                radBandGEN12_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B11M:
                            if (band_11m_index == band_11m_register - 1)
                            {
                                if (XVTRPresent)
                                {
                                    band_2m_index = 0;
                                    radBand2_Click(this, EventArgs.Empty);
                                }
                                else
                                {
                                    band_wwv_index = 0;
                                    radBandWWV_Click(this, EventArgs.Empty);
                                }
                            }
                            else
                            {
                                radBandGEN12_Click(this, EventArgs.Empty);
                            }
                            break;

                        //-----------------------------------------------------
                        case Band.B2M:
							if(band_2m_index == band_2m_register - 1)
							{
								band_wwv_index = 0;
                                radBandWWV_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBand2_Click(this, EventArgs.Empty);
							}
							break;
						case Band.WWV:
							if(band_wwv_index == band_wwv_register - 1) // ke9ns mod  was 7
							{
								band_gen_index = 0;
                                radBandGEN_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBandWWV_Click(this, EventArgs.Empty);
							}
							break;
					/*	case Band.GEN:                            // ke9ns not going to mess with original function of GEN from keyboard or cat
							if(band_gen_index == 4)
							{
								band_160m_index = 0;
                                radBand160_Click(this, EventArgs.Empty);
							}
							else
							{
                                radBandGEN_Click(this, EventArgs.Empty);
							}
							break;
                            */
					}
                } //  if(e.KeyCode == key_band_up && !vfo_lock) // keys.M key

                else if(e.KeyCode == key_band_down && !vfo_lock) // keys.N key
				{
					switch(rx1_band)
					{
						case Band.B160M:
							if(band_160m_index == 0)
							{
								band_gen_index = 4;
                                radBandGEN_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "160M";
								band_160m_index = (band_160m_index+1)% band_160m_register;
                                radBand160_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B80M:
							if(band_80m_index == 0)
							{
								band_160m_index = 2;
                                radBand160_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "80M";
								band_80m_index = (band_80m_index+1)% band_80m_register;
                                radBand80_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B60M:
							if(band_60m_index == 0)
							{
								band_80m_index = 2;
                                radBand80_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "60M";
								band_60m_index = (band_60m_index+3)% band_60m_register;
                                radBand60_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B40M:
							if(band_40m_index == 0)
							{
								band_60m_index = 4;
                                radBand60_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "40M";
								band_40m_index = (band_40m_index+1)% band_40m_register;
                                radBand40_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B30M:
							if(band_30m_index == 0)
							{
								band_40m_index = 2;
                                radBand40_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "30M";
								band_30m_index = (band_30m_index+1)% band_30m_register;
                                radBand30_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B20M:
							if(band_20m_index == 0)
							{
								band_30m_index = 2;
                                radBand30_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "20M";
								band_20m_index = (band_20m_index+1)% band_20m_register;
                                radBand20_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B17M:
							if(band_17m_index == 0)
							{
								band_20m_index = 2;
                                radBand20_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "17M";
								band_17m_index = (band_17m_index+1)% band_17m_register;
                                radBand17_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B15M:
							if(band_15m_index == 0)
							{
								band_17m_index = 2;
                                radBand17_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "15M";
								band_15m_index = (band_15m_index+1)% band_15m_register;
                                radBand15_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B12M:
							if(band_12m_index == 0)
							{
								band_15m_index = 2;
                                radBand15_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "12M";
								band_12m_index = (band_12m_index+1)% band_12m_register;
                                radBand12_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B10M:
							if(band_10m_index == 0)
							{
								band_12m_index = 2;
                                radBand12_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "10M";
								band_10m_index = (band_10m_index+1)% band_10m_register;
                                radBand10_Click(this, EventArgs.Empty);
							}
							break;
						case Band.B6M:
							if(band_6m_index == 0)
							{
								band_10m_index = 2;
                                radBand10_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "6M";
								band_6m_index = (band_6m_index+1)% band_6m_register;
                                radBand6_Click(this, EventArgs.Empty);
							}
							break;

                        //-------------------------------------------------------
                        // ke9ns add
                        case Band.BLMF:
                            if (band_LMF_index == 2)
                            {
                                band_6m_index = 0;
                                radBand6_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "LMF";
                                band_LMF_index = (band_LMF_index + 1) % band_LMF_register;
                                radBandGEN0_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B120M:
                            if (band_120m_index == 2)
                            {
                                band_LMF_index = 0;
                                radBandGEN0_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "120M";
                                band_120m_index = (band_120m_index + 1) % band_120m_register;
                                radBandGEN1_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B90M:
                            if (band_90m_index == 2)
                            {
                                band_120m_index = 0;
                                radBandGEN1_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "90M";
                                band_90m_index = (band_90m_index + 1) % band_90m_register;
                                radBandGEN2_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B61M:
                            if (band_61m_index == 2)
                            {
                                band_90m_index = 0;
                                radBandGEN2_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "61M";
                                band_61m_index = (band_61m_index + 1) % band_61m_register;
                                radBandGEN3_Click(this, EventArgs.Empty);
                            }
                            break;

                        case Band.B49M:
                            if (band_49m_index == 2)
                            {
                                band_61m_index = 0;
                                radBandGEN3_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "49M";
                                band_49m_index = (band_49m_index + 1) % band_49m_register;
                                radBandGEN4_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B41M:
                            if (band_41m_index == 2)
                            {
                                band_49m_index = 0;
                                radBandGEN4_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "41M";
                                band_41m_index = (band_41m_index + 1) % band_41m_register;
                                radBandGEN5_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B31M:
                            if (band_31m_index == 2)
                            {
                                band_41m_index = 0;
                                radBandGEN5_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "31M";
                                band_31m_index = (band_31m_index + 1) % band_31m_register;
                                radBandGEN6_Click(this, EventArgs.Empty);
                            }
                            break;

                        case Band.B25M:
                            if (band_25m_index == 2)
                            {
                                band_31m_index = 0;
                                radBandGEN6_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "25M";
                                band_25m_index = (band_25m_index + 1) % band_25m_register;
                                radBandGEN7_CheckedChanged(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B22M:
                            if (band_22m_index == 2)
                            {
                                band_25m_index = 0;
                                radBandGEN7_CheckedChanged(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "22M";
                                band_22m_index = (band_22m_index + 1) % band_22m_register;
                                radBandGEN8_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B19M:
                            if (band_19m_index == 2)
                            {
                                band_22m_index = 0;
                                radBandGEN8_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "19M";
                                band_19m_index = (band_19m_index + 1) % band_19m_register;
                                radBandGEN9_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B16M:
                            if (band_16m_index == 2)
                            {
                                band_19m_index = 0;
                                radBandGEN9_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "16M";
                                band_16m_index = (band_16m_index + 1) % band_16m_register;
                                radBandGEN10_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B14M:
                            if (band_14m_index == 2)
                            {
                                band_16m_index = 0;
                                radBandGEN10_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "14M";
                                band_14m_index = (band_14m_index + 1) % band_14m_register;
                                radBandGEN11_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B13M:
                            if (band_13m_index == 2)
                            {
                                band_14m_index = 0;
                                radBandGEN11_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "13M";
                                band_13m_index = (band_13m_index + 1) % band_13m_register;
                                radBandGEN12_Click(this, EventArgs.Empty);
                            }
                            break;
                        case Band.B11M:
                            if (band_11m_index == 2)
                            {
                                band_13m_index = 0;
                                radBandGEN11_Click(this, EventArgs.Empty);
                            }
                            else
                            {
                                last_band = "11M";
                                band_11m_index = (band_11m_index + 1) % band_11m_register;
                                radBandGEN12_Click(this, EventArgs.Empty);
                            }
                            break;

                        //-----------------------------------------------------

                        case Band.B2M:
							if(band_2m_index == 0)
							{
                                //band_6m_index = 2;
                                //  radBand6_Click(this, EventArgs.Empty);
                                band_11m_index = 0;
                                radBandGEN12_Click(this, EventArgs.Empty);

                            }
							else
							{
								last_band = "2M";
								band_2m_index = (band_2m_index+1)% band_2m_register;
                                radBand6_Click(this, EventArgs.Empty);
							}
							break;
						case Band.WWV:
							if(band_wwv_index == 0)
							{
								if(xvtr_present)
								{
									band_2m_index = 2;
                                    radBand2_Click(this, EventArgs.Empty);
								}
								else
								{
									band_6m_index = 2;
                                    radBand6_Click(this, EventArgs.Empty);
								}
							}
							else
							{
								last_band = "WWV";
								band_wwv_index = (band_wwv_index+7) % band_wwv_register; //ke9ns mod was 6
                                radBandWWV_Click(this, EventArgs.Empty);
							}
							break;
					/*	case Band.GEN:
                          	if(band_gen_index == 0)
							{
								band_wwv_index = 7;
                                radBandWWV_Click(this, EventArgs.Empty);
							}
							else
							{
								last_band = "GEN";
								band_gen_index = (band_gen_index+3)%5;
                                radBandGEN_Click(this, EventArgs.Empty);
							}
                            break;
*/
                            // ke9ns could add GEN SWL Bands here later
                           
                         
                    } // switch rx1 band

                } // if(e.KeyCode == key_band_down && !vfo_lock)

                else if(e.KeyCode == key_cw_dot)
				{
					
				}
				else if(e.KeyCode == key_cw_dash)
				{
					
				}
				else if(vfo_lock || !quick_qsy)
				{
					return;
				}
				else if((int)e.KeyCode >= 48 && (int)e.KeyCode <= 57) // check for numbers 0 to 9
				{
					if(small_lsd)
					{
						txtVFOAMSD.Visible = false;
						txtVFOALSD.Visible = false;
					}
					txtVFOAFreq.Focus();
					txtVFOAFreq.Text = ((int)(e.KeyCode - 48)).ToString();
					txtVFOAFreq.Select(1,0);
				}
				else if((int)e.KeyCode >= 96 && (int)e.KeyCode <= 105) // codes ' thru i 
				{
					if(small_lsd)
					{
						txtVFOAMSD.Visible = false;
						txtVFOALSD.Visible = false;
					}
					txtVFOAFreq.Focus();
					txtVFOAFreq.Text = ((int)e.KeyCode-96).ToString();
					txtVFOAFreq.Select(1,0);
				}
				else if(e.KeyCode.Equals(Keys.Decimal) ||
					(separator == "." && e.KeyCode.Equals(Keys.OemPeriod)) ||
					(separator == "," && e.KeyCode.Equals(Keys.Oemcomma)))
				{
					if(small_lsd)
					{
						txtVFOAMSD.Visible = false;
						txtVFOALSD.Visible = false;
					}
					txtVFOAFreq.Focus();
					txtVFOAFreq.Text = separator;
					txtVFOAFreq.Select(1,0);
				}


                Debug.WriteLine("5KEYPRESS================= " + e.KeyCode);
                    

			} // NO ALT and NO CTRL key pressed

		} // CONSOLE_KEYDOWN()


        //=======================================================================================================
		// chkPower
        private bool one_time = true;
        private void chkPower_CheckedChanged(object sender, System.EventArgs e)
        {

            if (chkPower.Checked)
            {
              
                //  Display.Power = 1;

                //chkPower.Text = "Stop";
                chkPower.BackColor = button_selected_color;
                txtVFOAFreq.ForeColor = vfo_text_light_color;
                txtVFOAMSD.ForeColor = vfo_text_light_color;
                txtVFOALSD.ForeColor = small_vfo_color;
                if (chkVOX.Checked) chkVOX.Checked = false;

                UpdateVFOASub();

                if (rx2_enabled) chkRX2_CheckedChanged(this, EventArgs.Empty);
                if (chkEnableMultiRX.Checked) chEnableMultiRX_CheckedChanged(this, EventArgs.Empty);
                if (chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);

                switch (current_model)
                {
                   /* case Model.SDR1000:
                        Hdw.PowerOn();
                        Hdw.DDSTuningWord = 0;
                        break;
*/
                    case Model.FLEX5000:
                        if (fwc_init) FWC.SetStandby(false);
                        fwc_dds_freq = 0.0f;
                        last_tw = 0;
                        rx2_dds_freq = 0.0f;
                        rx2_last_tw = 0;
                        RX1Ant = rx1_ant;
                        break;

                    case Model.FLEX3000:
                        if (fwc_init) FWC.SetStandby(false);
                        fwc_dds_freq = 0.0f;
                        last_tw = 0;
                        break;
                  
                    case Model.FLEX1500:
                        fwc_dds_freq = 0.0f;
                        last_tw = 0;
                        break;
                }

                if (fwc_init && (current_model == Model.FLEX3000 || current_model == Model.FLEX5000))
                {
                    try
                    {
                        Pal.SetBufferSize((uint)block_size1);
                    }
                    catch (Exception)
                    {
                        // ignore exceptions in case version of PAL dll doesn't support this function
                    }
                }

                txtVFOAFreq_LostFocus(this, EventArgs.Empty);

                // wjt added 
                if (PTTBitBangEnabled && serialPTT == null) // we are enabled but don't have port object 
                {
                    //Debug.WriteLine("Forcing property set on PTTBitBangEnabled"); 
                    PTTBitBangEnabled = true; // force creation of serial ptt 
                }
                // wjt added ends 
                setupForm.AudioReceiveMux1 = setupForm.AudioReceiveMux1;		// set receive mux

              
                Audio.callback_return = 0;

                if (vac_enabled)
                {
                    Audio.VACRBReset = true;
                    Audio.VACEnabled = true;
                }

                if (vac2_enabled)
                {
                    Audio.VAC2RBReset = true;
                    Audio.VAC2Enabled = true;
                }

                Thread.Sleep(100); // wait for hardware to settle before starting audio (possible sample rate change)
                
                switch (current_model)
                {
                    case Model.FLEX5000:
                    case Model.FLEX3000:
                  //  case Model.SDR1000:
                    case Model.DEMO:
                  //  case Model.SOFTROCK40:
                        if (!Audio.Start())
                        {
                            chkPower.Checked = false;
                            return;
                        }
                        break;
                    case Model.FLEX1500:
                        if (!Audio.Start()) // to start VAC
                        {
                            chkPower.Checked = false;
                            return;
                        }
                        Flex1500.StartAudio();
                        break;
                }

                if (draw_display_thread == null || !draw_display_thread.IsAlive)
                {
                    draw_display_thread = new Thread(new ThreadStart(RunDisplay));
                    draw_display_thread.Name = "Draw Display Thread";
                    draw_display_thread.Priority = ThreadPriority.BelowNormal;
                    draw_display_thread.IsBackground = true;
                    draw_display_thread.Start();
                }

                if (multimeter_thread == null || !multimeter_thread.IsAlive)
                {
                    multimeter_thread = new Thread(new ThreadStart(UpdateMultimeter));
                    multimeter_thread.Name = "Multimeter Thread";
                    multimeter_thread.Priority = ThreadPriority.Lowest;
                    multimeter_thread.IsBackground = true;
                    multimeter_thread.Start();
                }

                if (fwc_init && current_model == Model.FLEX5000 && rx2_enabled)
                {
                  

                    if (rx2_meter_thread == null || !rx2_meter_thread.IsAlive)
                    {
                       
                        rx2_meter_thread = new Thread(new ThreadStart(UpdateRX2MeterData));
                        rx2_meter_thread.Name = "RX2 Meter Thread";
                        rx2_meter_thread.Priority = ThreadPriority.Lowest;
                        rx2_meter_thread.IsBackground = true;
                        rx2_meter_thread.Start();
                    }

                    if (rx2_sql_update_thread == null || !rx2_sql_update_thread.IsAlive)
                    {
                        rx2_sql_update_thread = new Thread(new ThreadStart(UpdateRX2SQL));
                        rx2_sql_update_thread.Name = "Update RX2 SQL";
                        rx2_sql_update_thread.Priority = ThreadPriority.Normal;
                        rx2_sql_update_thread.IsBackground = true;
                        rx2_sql_update_thread.Start();
                    }
                }

                if (sql_update_thread == null || !sql_update_thread.IsAlive)
                {
                    sql_update_thread = new Thread(new ThreadStart(UpdateSQL));
                    sql_update_thread.Name = "Update SQL";
                    sql_update_thread.Priority = ThreadPriority.Normal;
                    sql_update_thread.IsBackground = true;
                    sql_update_thread.Start();
                }

                if (noise_gate_update_thread == null || !noise_gate_update_thread.IsAlive)
                {
                    noise_gate_update_thread = new Thread(new ThreadStart(UpdateNoiseGate));
                    noise_gate_update_thread.Name = "Update NoiseGate";
                    noise_gate_update_thread.Priority = ThreadPriority.Normal;
                    noise_gate_update_thread.IsBackground = true;
                    noise_gate_update_thread.Start();
                }

                if (vox_update_thread == null || !vox_update_thread.IsAlive)
                {
                    vox_update_thread = new Thread(new ThreadStart(UpdateVOX));
                    vox_update_thread.Name = "Update VOX";
                    vox_update_thread.Priority = ThreadPriority.Normal;
                    vox_update_thread.IsBackground = true;
                    vox_update_thread.Start();
                }

                if (poll_ptt_thread == null || !poll_ptt_thread.IsAlive)
                {
                    poll_ptt_thread = new Thread(new ThreadStart(PollPTT));
                    poll_ptt_thread.Name = "Poll PTT Thread";
                    poll_ptt_thread.Priority = ThreadPriority.Normal;
                    poll_ptt_thread.IsBackground = true;
                    poll_ptt_thread.Start();
                }

                if (fwc_init && current_model == Model.FLEX3000)
                {
                    if (FWCEEPROM.PAOK)
                    {
                        if (f3k_temp_thread == null || !f3k_temp_thread.IsAlive)
                        {
                            f3k_temp_thread = new Thread(new ThreadStart(F3KReadTemp));
                            f3k_temp_thread.Name = "F3K Temp Thread";
                            f3k_temp_thread.Priority = ThreadPriority.Lowest;
                            f3k_temp_thread.IsBackground = true;
                            f3k_temp_thread.Start();
                        }
                    }

                    if (f3k_mic_function_thread == null || !f3k_mic_function_thread.IsAlive)
                    {
                        f3k_mic_function_thread = new Thread(new ThreadStart(F3KMicFunctions));
                        f3k_mic_function_thread.Name = "F3K Mic Feature Thread";
                        f3k_mic_function_thread.Priority = ThreadPriority.Normal;
                        f3k_mic_function_thread.IsBackground = true;
                        f3k_mic_function_thread.Start();
                    }
                }

                switch (current_model)
                {
                    case Model.FLEX5000:
                    case Model.FLEX3000:
                        if (poll_pa_pwr_thread == null || !poll_pa_pwr_thread.IsAlive)
                        {
                            poll_pa_pwr_thread = new Thread(new ThreadStart(PollFWCPAPWR));
                            poll_pa_pwr_thread.Name = "Poll FWC PA PWR Thread";
                            poll_pa_pwr_thread.Priority = ThreadPriority.BelowNormal;
                            poll_pa_pwr_thread.IsBackground = true;
                            poll_pa_pwr_thread.Start();
                        }
                        break;
                    case Model.FLEX1500:
                        // do nothing ... no bridge to read
                        break;
                    default:
                        if (pa_present)
                        {
                            if (poll_pa_pwr_thread == null || !poll_pa_pwr_thread.IsAlive)
                            {
                                poll_pa_pwr_thread = new Thread(new ThreadStart(PollPAPWR));
                                poll_pa_pwr_thread.Name = "Poll PA PWR Thread";
                                poll_pa_pwr_thread.Priority = ThreadPriority.BelowNormal;
                                poll_pa_pwr_thread.IsBackground = true;
                                poll_pa_pwr_thread.Start();
                            }
                        }
                        break;
                } // current model

                /*wbir_thread = new Thread(new ThreadStart(WBIR));
                wbir_thread.Name = "WBIR Thread";
                wbir_thread.Priority = ThreadPriority.Normal;
                wbir_thread.IsBackground = true;
                wbir_thread.Start();

                if (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                {
                    wbir_rx2_thread = new Thread(new ThreadStart(WBIR_RX2));
                    wbir_rx2_thread.Name = "WBIR RX2 Thread";
                    wbir_rx2_thread.Priority = ThreadPriority.Normal;
                    wbir_rx2_thread.IsBackground = true;
                    wbir_rx2_thread.Start();
                }*/

                update_rx1_dds_thread = new Thread(new ThreadStart(UpdateRX1DDSFreq));
                update_rx1_dds_thread.Name = "RX1 DDS Thread";
                update_rx1_dds_thread.Priority = ThreadPriority.Normal;
                update_rx1_dds_thread.IsBackground = true;
                update_rx1_dds_thread.Start();

                update_tx_dds_thread = new Thread(new ThreadStart(UpdateTXDDSFreq));
                update_tx_dds_thread.Name = "TX DDS Thread";
                update_tx_dds_thread.Priority = ThreadPriority.Normal;
                update_tx_dds_thread.IsBackground = true;
                update_tx_dds_thread.Start();

                if (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                {
                    update_rx2_dds_thread = new Thread(new ThreadStart(UpdateRX2DDSFreq));
                    update_rx2_dds_thread.Name = "RX2 DDS Thread";
                    update_rx2_dds_thread.Priority = ThreadPriority.Normal;
                    update_rx2_dds_thread.IsBackground = true;
                    update_rx2_dds_thread.Start();
                }

                if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                {
                    audio_watchdog_thread = new Thread(new ThreadStart(AudioWatchdog));
                    audio_watchdog_thread.Name = "Audio Watchdog Thread";
                    audio_watchdog_thread.Priority = ThreadPriority.Lowest; 
                    audio_watchdog_thread.IsBackground = true;                    
                    audio_watchdog_thread.Start();
                }

                if (!rx_only)
                {
                    chkMOX.Enabled = true;
                    chkTUN.Enabled = true;
                }
                chkVFOLock.Enabled = true;

                timer_peak_text.Enabled = true;

              /*  if (current_model == Model.SDR1000 && atu_present)
                {
                    int counter = 0;
                    while (((Hdw.StatusPort() & (byte)StatusPin.PA_DATA)) == 0)
                    {
                        Thread.Sleep(50);
                        if (counter++ > 100)		// 5 second time out
                        {
                            MessageBox.Show("ATU Initialization Timeout.\n" +
                                "Please check power to radio",
                                "ATU Init Error",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Hand);
                            chkPower.Checked = false;
                            return;
                        }
                    }
                    Hdw.PA_ATUTune(ATUTuneMode.BYPASS);
                }
*/
                CWKeyer.Reset();
                CWPTT.Start();

                // check rx image version and force recal if necessary for 5K / 3K
                if (one_time && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000) && !production)
                {
                    one_time = false;
                    Application.DoEvents();
                    if (FWCEEPROM.RX1ImageVer < 5) // check version
                    {
                        // force calibration
                        if (flex5000ProdTestForm == null || flex5000ProdTestForm.IsDisposed)
                            flex5000ProdTestForm = new FLEX5000ProdTestForm(this);
                        flex5000ProdTestForm.Show();
                        flex5000ProdTestForm.Hide();
                       
                        Thread.Sleep(100);
                        Application.DoEvents();

                        MessageBox.Show("For optimal performance, PowerSDR needs to update your Receiver Image calibration.  This may take several minutes.",
                            "Update RX Image Calibration",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Information);

                        Thread t = flex5000ProdTestForm.CallCalFWCRXImage();
                        while (t.IsAlive)
                        {
                            Thread.Sleep(50);
                            Application.DoEvents();
                        }

                        if (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                        {
                            if (FWCEEPROM.RX2ImageVer < 5)
                            {
                                if (flex5000RX2CalForm == null || flex5000RX2CalForm.IsDisposed)
                                    flex5000RX2CalForm = new FLEX5000RX2CalForm(this);
                                flex5000RX2CalForm.Show();
                                flex5000RX2CalForm.Hide();
                                Thread.Sleep(100);
                                Application.DoEvents();

                                Thread t2 = flex5000RX2CalForm.CallCalRX2Image();
                                while (t2.IsAlive)
                                {
                                    Thread.Sleep(50);
                                    Application.DoEvents();
                                }
                            }
                        }

                        MessageBox.Show("Calibration complete.",
                            "Calibration Complete",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
                    }
                }
            } // checked power
            else // power off
            {
                //chkPower.Text = "Start";
                //prevent previous CAT command from triggering PTT immediately upon restarting
                cat_ptt = false;

              //  Display.Power = 0;

                chkVOX.Checked = false; // prevent unintentional TX if VOX was left on when power turned off
                chkMOX.Checked = false;
                chkMOX.Enabled = false;

                if (tuning && (current_model == Model.FLEX3000))
                {
                    flex3000ATUForm.AbortTune();
                }

                chkTUN.Checked = false;
                chkTUN.Enabled = false;

                // wjt added 
                if (serialPTT != null)  // let go of serial port
                {
                    serialPTT.Destroy();
                    serialPTT = null;
                }
                // wjt added ends 

                chkVFOLock.Enabled = false;

                if (!(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)))
                {
                  //  if(current_model == Model.SDR1000)     Hdw.StandBy();
                }
                else
                {
                    FWC.SetStandby(true);
                }
                chkPower.BackColor = SystemColors.Control;
                txtVFOAFreq.ForeColor = vfo_text_dark_color;
                txtVFOAMSD.ForeColor = vfo_text_dark_color;
                txtVFOALSD.ForeColor = vfo_text_dark_color;
                UpdateVFOASub();

                txtVFOBFreq.ForeColor = vfo_text_dark_color;
                txtVFOBMSD.ForeColor = vfo_text_dark_color;
                txtVFOBLSD.ForeColor = vfo_text_dark_color;
                txtVFOBBand.ForeColor = band_text_dark_color;

                timer_peak_text.Enabled = false;

                Display.ResetRX1DisplayAverage();
                Display.ResetRX1DisplayPeak();
                Display.ResetRX2DisplayAverage();
                Display.ResetRX2DisplayPeak();

                CWPTT.Stop();

                switch (current_model)
                {
                  //  case Model.SDR1000:
                    case Model.FLEX5000:
                    case Model.FLEX3000:
                  //  case Model.SOFTROCK40:
                    case Model.DEMO:
                        Audio.callback_return = 2;
                        Audio.StopAudio();
                        break;
                    case Model.FLEX1500:
                        //Audio.StopAudio(); // take this out when using new driver
                        Flex1500.StopAudio();
                        break;
                }

                if (vac_enabled)
                {
                    Debug.WriteLine("test8===============");

                    Audio.StopAudioVAC();
                }

                if (vac2_enabled)
                {
                    Audio.StopAudioVAC2();
                }

                if (draw_display_thread != null)
                {
                    if (!draw_display_thread.Join(500))
                        draw_display_thread.Abort();
                }
                if (multimeter_thread != null)
                {
                    if (!multimeter_thread.Join(500))
                        multimeter_thread.Abort();
                }
                if (sql_update_thread != null)
                {
                    if (!sql_update_thread.Join(500))
                        sql_update_thread.Abort();
                }
                if (noise_gate_update_thread != null)
                {
                    if (!noise_gate_update_thread.Join(500))
                        noise_gate_update_thread.Abort();
                }
                if (vox_update_thread != null)
                {
                    if (!vox_update_thread.Join(500))
                        vox_update_thread.Abort();
                }
                if (poll_ptt_thread != null)
                {
                    if (!poll_ptt_thread.Join(500))
                        poll_ptt_thread.Abort();
                }
            }

            if (fwc_init && current_model == Model.FLEX5000)
            {
                bool tx1, tx2, tx3;
                if (flex5000RelayForm != null)
                    flex5000RelayForm.UpdateRelayState(out tx1, out tx2, out tx3);
            }

            panelVFOAHover.Invalidate(); 
            panelVFOBHover.Invalidate();

            setupForm.AudioStreamRunning = chkPower.Checked;
        }


        //===============================================================================
        //===============================================================================
        // ke9ns   This is where you select the RX1 display. Panafall can now stay on with RX2
        //===============================================================================
        //===============================================================================
        public void comboDisplayMode_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			DisplayMode old_mode = Display.CurrentDisplayMode;
			
			switch(comboDisplayMode.Text)  // ke9ns  list of display modes is populated for a list at the top of the code Displaymodes
			{
				case "Spectrum":
					Display.CurrentDisplayMode = DisplayMode.SPECTRUM;
					UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
                    CTUN1 = false;

					break; 
				case "Panadapter":
					Display.CurrentDisplayMode = DisplayMode.PANADAPTER;
                  	CalcDisplayFreq();
					break;
				case "Scope":
					Display.CurrentDisplayMode = DisplayMode.SCOPE;
                    CTUN1 = false;
                    break;
				case "Phase":
					Display.CurrentDisplayMode = DisplayMode.PHASE;
                    CTUN1 = false;
                    break;
				case "Phase2":
					Display.CurrentDisplayMode = DisplayMode.PHASE2;
                    CTUN1 = false;
                    break;
				case "Waterfall":
					Display.CurrentDisplayMode = DisplayMode.WATERFALL;
					CalcDisplayFreq();
					break;
				case "Histogram":
					Display.CurrentDisplayMode = DisplayMode.HISTOGRAM;
                    CTUN1 = false;
                    break;
				case "Panafall":
					Display.CurrentDisplayMode = DisplayMode.PANAFALL;
                    CalcDisplayFreq();
					break;
                case "Panascope":
					Display.CurrentDisplayMode = DisplayMode.PANASCOPE;
					CalcDisplayFreq();
					break;
                case "Continuum":
                    Display.CurrentDisplayMode = DisplayMode.CONTINUUM;
                    CTUN1 = false;
                    CalcDisplayFreq();
                    break;
                case "Off":
					Display.CurrentDisplayMode = DisplayMode.OFF;
                    CTUN1 = false;
                    break;
			}

#if (!NO_TNF)
            switch(Display.CurrentDisplayMode)
            {
                case DisplayMode.PANADAPTER:
                case DisplayMode.WATERFALL:
                case DisplayMode.PANAFALL:
                case DisplayMode.PANASCOPE:
                    btnTNFAdd.Enabled = true; break;
                default:
                    btnTNFAdd.Enabled = false; break;
            }

#endif

            if (old_mode == DisplayMode.OFF && (draw_display_thread == null || !draw_display_thread.IsAlive))
            {
                draw_display_thread = new Thread(new ThreadStart(RunDisplay));
                draw_display_thread.Name = "Draw Display Thread";
                draw_display_thread.Priority = ThreadPriority.BelowNormal;
                draw_display_thread.IsBackground = true;
                draw_display_thread.Start();
            }

			switch(old_mode)
			{
				case DisplayMode.PANADAPTER:
				case DisplayMode.WATERFALL:
				case DisplayMode.PANAFALL:
				case DisplayMode.PANASCOPE:
					switch(Display.CurrentDisplayMode)
					{
						case DisplayMode.PANADAPTER:
						case DisplayMode.WATERFALL:
						case DisplayMode.PANAFALL:
						case DisplayMode.PANASCOPE:
							break;
						default:
							RX1Filter = rx1_filter; // reset filter display limits
							TXFilterLow = TXFilterLow;
							break;
					}
					break;
			}

			switch(Display.CurrentDisplayMode)
			{
				case DisplayMode.PHASE:
				case DisplayMode.PHASE2:
				case DisplayMode.SCOPE:
				case DisplayMode.OFF:
                    chkDisplayAVG.Text = "Avg"; // ke9ns 
                    chkDisplayAVG.Enabled = false;
					if(chkDisplayAVG.Checked)
						chkDisplayAVG.BackColor = SystemColors.Control;
					//chkDisplayAVG.Checked = false;
					chkDisplayPeak.Enabled = false;
					if(chkDisplayPeak.Checked)
						chkDisplayPeak.BackColor = SystemColors.Control;
					//chkDisplayPeak.Checked = false;
					break;
				case DisplayMode.WATERFALL:
                    chkDisplayAVG.Text = "Avg"; // ke9ns 
                    chkDisplayAVG.Enabled = true;
                    if (setupForm.WeakSignalWaterfallEnabled == true)
                        chkDisplayAVG.Checked = true;
					if(chkDisplayAVG.Checked)
						chkDisplayAVG.BackColor = button_selected_color;
					chkDisplayPeak.Enabled = true;
					if(chkDisplayPeak.Checked)
						chkDisplayPeak.BackColor = button_selected_color;
					btnZeroBeat.Enabled = true;
					dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
					dsp.GetDSPRX(1, 0).SpectrumPreFilter = true;
					break;
				case DisplayMode.PANADAPTER:
                    chkDisplayAVG.Text = "Avg"; // ke9ns 
                    chkDisplayAVG.Enabled = true;
					if(chkDisplayAVG.Checked)
						chkDisplayAVG.BackColor = button_selected_color;
					chkDisplayPeak.Enabled = true;
					if(chkDisplayPeak.Checked)
						chkDisplayPeak.BackColor = button_selected_color;
					btnZeroBeat.Enabled = chkDisplayAVG.Checked;
					dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
					dsp.GetDSPRX(1, 0).SpectrumPreFilter = true;
					break;
				case DisplayMode.HISTOGRAM:
                    chkDisplayAVG.Text = "Avg"; // ke9ns 
                    chkDisplayAVG.Enabled = true;
					if(chkDisplayAVG.Checked)
						chkDisplayAVG.BackColor = button_selected_color;
					chkDisplayPeak.Enabled = true;
					if(chkDisplayPeak.Checked)
						chkDisplayPeak.BackColor = button_selected_color;
					btnZeroBeat.Enabled = chkDisplayAVG.Checked;
					if(rx1_dsp_mode != DSPMode.SPEC)
					{
						dsp.GetDSPRX(0, 0).SpectrumPreFilter = false;
						dsp.GetDSPRX(1, 0).SpectrumPreFilter = false;
					}
					else
					{
						dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
						dsp.GetDSPRX(1, 0).SpectrumPreFilter = true;
					}
					RX1Filter = rx1_filter;
					break;

                case DisplayMode.PANAFALL:                // ke9ns pan
					chkDisplayAVG.Enabled = true;

                    if ((Display.PW_AVG == 0))
                    {
                        if (chkDisplayAVG.Checked == true)   chkDisplayAVG.Text = "AvgB"; // ke9ns add 
                        else chkDisplayAVG.Text = "Avg"; // ke9ns add 
                    }

                    chkDisplayAVG.BackColor = button_selected_color;
                   

                    chkDisplayPeak.Enabled = true;
					if(chkDisplayPeak.Checked)
						chkDisplayPeak.BackColor = button_selected_color;
					btnZeroBeat.Enabled = chkDisplayAVG.Checked;

					dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
					dsp.GetDSPRX(1, 0).SpectrumPreFilter = true;

					break;
				case DisplayMode.PANASCOPE:
                    chkDisplayAVG.Text = "Avg"; // ke9ns 
                    chkDisplayAVG.Enabled = true;
					if(chkDisplayAVG.Checked)
						chkDisplayAVG.BackColor = button_selected_color;
					chkDisplayPeak.Enabled = true;
					if(chkDisplayPeak.Checked)
						chkDisplayPeak.BackColor = button_selected_color;
					btnZeroBeat.Enabled = chkDisplayAVG.Checked;
					dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
					dsp.GetDSPRX(1, 0).SpectrumPreFilter = true;
					break;
				default:
					chkDisplayAVG.Enabled = true;
					if(chkDisplayAVG.Checked)
						chkDisplayAVG.BackColor = button_selected_color;
					chkDisplayPeak.Enabled = true;
					if(chkDisplayPeak.Checked)
						chkDisplayPeak.BackColor = button_selected_color;
					btnZeroBeat.Enabled = chkDisplayAVG.Checked;
					if(rx1_dsp_mode != DSPMode.SPEC)
					{
						dsp.GetDSPRX(0, 0).SpectrumPreFilter = false;
						dsp.GetDSPRX(1, 0).SpectrumPreFilter = false;
					}
					else
					{
						dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
						dsp.GetDSPRX(1, 0).SpectrumPreFilter = true;
					}
					break;
			}

			if(chkDisplayAVG.Checked)
			{
				switch(Display.CurrentDisplayMode)
				{
					case DisplayMode.PANADAPTER:
					case DisplayMode.HISTOGRAM:
					case DisplayMode.SPECTRUM:
					case DisplayMode.WATERFALL:
					case DisplayMode.PANAFALL:
					case DisplayMode.PANASCOPE:
						btnZeroBeat.Enabled = true;
						break;
					default:
						btnZeroBeat.Enabled = false;
						break;
				}

                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.HISTOGRAM:
                    case DisplayMode.SPECTRUM:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANASCOPE:
                        chkDisplayAVG.Text = "Avg"; // ke9ns 
                        break;
                    
                }

            }

			was_panadapter = false;
			was_waterfall = false;

			if(comboDisplayMode.Focused)
				btnHidden.Focus();

		} // comboDisplaymode index changed



		private void chkBIN_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkBIN.Checked) chkBIN.BackColor = button_selected_color;
			else chkBIN.BackColor = SystemColors.Control;
			dsp.GetDSPRX(0, 0).BinOn = chkBIN.Checked;
			dsp.GetDSPRX(0, 1).BinOn = chkBIN.Checked;			
		}

		private void comboAGC_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if(comboAGC.SelectedIndex < 0) return;
			dsp.GetDSPRX(0, 0).RXAGCMode = (AGCMode)comboAGC.SelectedIndex;
			dsp.GetDSPRX(0, 1).RXAGCMode = (AGCMode)comboAGC.SelectedIndex;
			
			// set whether custom controls are active
			switch((AGCMode)comboAGC.SelectedIndex) 
			{
				case AGCMode.LONG:
					setupForm.CustomRXAGCEnabled = false;
					/*SetupForm.RXAGCAttack = 2;
					SetupForm.RXAGCHang = 750;
					SetupForm.RXAGCDecay = 2000;*/
					//comboAGC.BackColor = SystemColors.Window;
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Long (Attack 2ms, Hang 750ms, Decay 200ms)");
					break;
				case AGCMode.SLOW:
					setupForm.CustomRXAGCEnabled = false;
					/*SetupForm.RXAGCAttack = 2;
					SetupForm.RXAGCHang = 500;
					SetupForm.RXAGCDecay = 500;*/
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Slow (Attack 2ms, Hang 500ms, Decay 500ms)");
					//comboAGC.BackColor = SystemColors.Window;
					break;
				case AGCMode.MED:
					setupForm.CustomRXAGCEnabled = false;
					/*SetupForm.RXAGCAttack = 2;
					SetupForm.RXAGCHang = 250;
					SetupForm.RXAGCDecay = 250;*/
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Medium (Attack 2ms, Hang 250ms, Decay 250ms)");
					//comboAGC.BackColor = SystemColors.Window;
					break;
				case AGCMode.FAST:
					setupForm.CustomRXAGCEnabled = false;
					/*SetupForm.RXAGCAttack = 2;
					SetupForm.RXAGCHang = 100;
					SetupForm.RXAGCDecay = 100;*/
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Fast (Attack 2ms, Hang 100ms, Decay 100ms)");
					//comboAGC.BackColor = SystemColors.Window;
					break;
				case AGCMode.CUSTOM:
					setupForm.CustomRXAGCEnabled = true;
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Custom - Set specifics in Setup Form -> DSP -> AGC/ALC");
					//comboAGC.BackColor = SystemColors.Window;
					break;
				case AGCMode.FIXD:
					setupForm.CustomRXAGCEnabled = false;
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Fixed - Set gain with AGC-T control above");
					//comboAGC.BackColor = Color.Orange;
					break;
			}

			// set RF control to Max or Fixed gain depending on mode
			switch((AGCMode)comboAGC.SelectedIndex)
			{
				case AGCMode.FIXD:
					RF = setupForm.AGCFixedGain;
                    ptbRF_Scroll(this, EventArgs.Empty);
					break;
				default:
					RF = setupForm.AGCMaxGain;
                    ptbRF_Scroll(this, EventArgs.Empty);
					break;
			}

			if(comboAGC.Focused)
				btnHidden.Focus();

		} // comboAGC settings



        //==========================================================================================================
		private void Console_Closing(object sender, System.ComponentModel.CancelEventArgs e)
		{



            Audio.callback_return = 2;


         //   if (WindowState == FormWindowState.Maximized)
          //  {
            //    Properties.Settings.Default.Location = RestoreBounds.Location;
            //    Properties.Settings.Default.Size = RestoreBounds.Size;
             //   Properties.Settings.Default.Maximised = true;
              //  Properties.Settings.Default.Minimised = false;
          //  }


            if (cwxForm != null) cwxForm.stopPoll = false; // ke9ns add
           

            if (timerID != 0) // ke9ns add
            {
                timeKillEvent(timerID);     // kill the mmtimer
            }

            if (timerID1 != 0)  // ke9ns add
            {
                timeKillEvent(timerID1);
            }


            if (SpotForm != null)
            {
                SpotForm.VOARUN = true;                 // ke9ns add
                SpotForm.checkBoxMUF.Checked = false;   // ke9ns add
            }

          
            CATEnabled = false;
            ROTOREnabled = false; // ke9ns add


            if (setupForm != null) setupForm.Hide();
            if (cwxForm != null) cwxForm.Hide();
			if (eqForm != null) eqForm.Hide();
			if (ucbForm != null) ucbForm.Hide();
			if (xvtrForm != null) xvtrForm.Hide();
			if (ProdTestForm != null) ProdTestForm.Hide();
			if (fwcMixForm != null) fwcMixForm.Hide();
			if (flex3000MixerForm != null) flex3000MixerForm.Hide();
            if (flex1500MixerForm != null) flex1500MixerForm.Hide();
			if (flex5000LLHWForm != null) flex5000LLHWForm.Hide();
			if (flex5000DebugForm != null) flex5000DebugForm.Hide();
			if (fwcAntForm != null) fwcAntForm.Hide();
            if (hidAntForm != null) hidAntForm.Hide();
            if (fwcAtuForm != null) fwcAtuForm.Hide();
            if (flexControlBasicForm != null) flexControlBasicForm.Hide();
            if (flexControlAdvancedForm != null) flexControlAdvancedForm.Hide();
            if (memoryForm != null) memoryForm.Hide();
            if (preSelForm != null) preSelForm.Hide();

            if (SpotForm != null) SpotForm.Hide(); // ke9ns add

            if (fwcAtuForm != null)
            {
                fwcAtuForm.Hide();
                fwcAtuForm.DoBypass();
            }

            MemoryList.Save();

            DXMemList.Save1(); // ke9ns add

            

            chkPower.Checked = false;
			Thread.Sleep(100);
			this.Hide();

			SaveState();                // put current settings back into database

            try
            {
                switch (current_model)
                {
                    case Model.FLEX5000:
                        if (fwc_init)
                        {
                            FWC.SetPABias(false);
                            if (FWCMidi.Init) FWCMidi.Close();
                        }
                        break;
                    case Model.FLEX3000:
                        if(fwc_init) 
                        {
                            FWC.SetPABias(false);
                            FWC.SetFanSpeed(0.0f);
                            if (FWCMidi.Init) FWCMidi.Close();
                        }
                        break;
                    case Model.FLEX1500:
                        if (hid_init)
                        {
                            USBHID.SetMOX(false);
                            HIDPAFilter = 0;
                        }
                        break;
                }
            }
            catch (Exception)
            {

            }
            
			if (cwxForm != null) cwxForm.Close();
			if (setupForm != null) setupForm.SaveOptions();
			if (eqForm != null) eqForm.Close();
			if (ucbForm != null) ucbForm.Close();
			if (xvtrForm != null) xvtrForm.Close();
			if (ProdTestForm != null) ProdTestForm.Close();
			if (fwcMixForm != null) fwcMixForm.Close();
			if (flex3000MixerForm != null) flex3000MixerForm.Close();
            if (flex1500MixerForm != null) flex1500MixerForm.Close();
			if (flex5000LLHWForm != null) flex5000LLHWForm.Close();
			if (flex5000DebugForm != null) flex5000DebugForm.Close();
			if (fwcAntForm != null) fwcAntForm.Close();
            if (hidAntForm != null) hidAntForm.Close();
			if (fwcAtuForm != null) fwcAtuForm.Close();
            if (flexControlBasicForm != null) flexControlBasicForm.Close();
            if (flexControlAdvancedForm != null) flexControlAdvancedForm.Close();
            if (memoryForm != null) memoryForm.Close();
            if (preSelForm != null) preSelForm.Close();


         //   Common.SaveForm(this, "console");


        } // console_closing

        private void comboPreamp_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            //if (initializing) return;
            PreampMode mode = PreampMode.FIRST;
            bool exit = false;
            switch (current_model)
            {
              /*  case Model.SDR1000:
                    switch (comboPreamp.Text)
                    {
                        case "Off":
                            mode = PreampMode.OFF;
                            break;
                        case "Low":
                            mode = PreampMode.LOW;
                            break;
                        case "Med":
                            mode = PreampMode.MED;
                            break;
                        case "High":
                        case "On":
                            mode = PreampMode.HIGH;
                            break;
                        default:
                            exit = true;
                            break;
                    }
                    break;
              */  case Model.FLEX1500:
                    switch (comboPreamp.Text)
                    {
                        case "-10":
                            mode = (PreampMode)FLEX1500PreampMode.MINUS_10;
                            break;
                        case "  0":
                            mode = (PreampMode)FLEX1500PreampMode.ZERO;
                            break;
                        case "+10":
                            mode = (PreampMode)FLEX1500PreampMode.PLUS_10;
                            break;
                        case "+20":
                            mode = (PreampMode)FLEX1500PreampMode.PLUS_20;
                            break;
                        case "+30":
                            mode = (PreampMode)FLEX1500PreampMode.PLUS_30;
                            break;
                        default:
                            mode = (PreampMode)FLEX1500PreampMode.ZERO;
                            break;
                    }
                    break;
                case Model.FLEX3000:
                    switch (comboPreamp.Text)
                    {
                        case "Attn":
                            mode = PreampMode.OFF;
                            break;
                        case "Off":
                            mode = PreampMode.LOW;
                            break;
                        case "Pre1":
                            mode = PreampMode.MED;
                            break;
                        case "Pre2":
                            mode = PreampMode.HIGH;
                            break;
                        default:
                            exit = true;
                            break;
                    }
                    break;
                case Model.FLEX5000:
                    exit = true;
                    break;
                default:
                    exit = true;
                    break;
            }

            if (comboPreamp.Focused)
                btnHidden.Focus();

            if (exit) return;

            RX1PreampMode = mode;


        } // comboPreamp_SelectedIndexChanged


      
         //=========================================================================================
        // ke9ns   MUTE button (original 2.7.2 not muting VAC on 1500 and 3000, but works on 5000)
        //=========================================================================================
        private void chkMUT_CheckedChanged(object sender, System.EventArgs e)
		{

         
            if (chkBoxMuteSpk.Checked == true) //  ke9ns add s indicates muting just spk and not headphones
            {
                chkMUT.Text = "MUTs";
            }
            else
            {
                chkMUT.Text = "MUT";
            }


            if (chkMUT.Checked)
            {
                chkMUT.BackColor = button_selected_color;
            }
            else
            {
               chkMUT.BackColor = SystemColors.Control;
            }

            //	if(num_channels == 2)
            //		{
            //if(current_model == Model.SDR1000)  Hdw.MuteRelay = chkMUT.Checked;
            //	}

       

               if (fwc_init || hid_init)  //  ke9ns add
               {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            if (fwcMixForm == null || fwcMixForm.IsDisposed) fwcMixForm = new FWCMixForm(this);

                     
                            if ((chkMUT.Checked))
                            {
                                if (chkBoxMuteSpk.Checked == false) // standard MUTE
                                {
                                    Audio.MonitorVolume = 0.0;
                                }
                                else
                                {

                                Debug.WriteLine("MUTE S======");

                                    fwcMixForm.chkExtSpkrSel.Checked = false;
                                      //   fwcMixForm.chkLineOutRCASel.Checked = false;

                                }

                            } // if (chkMUT.Checked)
                            else
                            {
                                if (chkBoxMuteSpk.Checked == false) // standard MUTE
                                {

                                    ptbAF_Scroll(this, EventArgs.Empty);
                                  Debug.WriteLine("NO MUTE S======");

                                }
                                else
                                {
                                    fwcMixForm.chkExtSpkrSel.Checked = true;
                              
                                //  fwcMixForm.chkLineOutRCASel.Checked = true;
                                }

                            } // chkMUT.Checked == false

                            break;
                        case Model.FLEX3000:
                            if (flex3000MixerForm == null || flex3000MixerForm.IsDisposed) flex3000MixerForm = new FLEX3000MixerForm(this);

                            if (chkMUT.Checked)
                            {
                                if (chkBoxMuteSpk.Checked == false) // standard MUTE
                                {
                                    Audio.MonitorVolume = 0.0;
                                }
                                else
                                {
                                    flex3000MixerForm.chkExtSpkrSel.Checked = false;
                                  //  flex3000MixerForm.chkLineOutDB9Sel.Checked = false;

                                }

                            }
                            else
                            {
                                if (chkBoxMuteSpk.Checked == false) // standard MUTE
                                {
                                    ptbAF_Scroll(this, EventArgs.Empty);
                                }
                                else
                                {
                                    flex3000MixerForm.chkExtSpkrSel.Checked = true;
                                    // flex3000MixerForm.chkLineOutDB9Sel.Checked = true;
                                }

                            }

                        break;
                        case Model.FLEX1500:
                            if (flex1500MixerForm == null || flex1500MixerForm.IsDisposed) flex1500MixerForm = new FLEX1500MixerForm(this);

                            if (chkMUT.Checked)
                            {
                                if (chkBoxMuteSpk.Checked == false) // standard MUTE
                                {
                                    Audio.MonitorVolume = 0.0;
                                }
                                else
                                {
                                    flex1500MixerForm.chkFlexWireOutSel.Checked = false;

                                }

                            }
                            else
                            {
                                if (chkBoxMuteSpk.Checked == false) // standard MUTE
                                {
                                    ptbAF_Scroll(this, EventArgs.Empty);
                                }
                                else
                                {
                                    flex1500MixerForm.chkFlexWireOutSel.Checked = true;

                                }

                            }


                        break;
                    }
                }

            if (chkMUT.Checked) // ke9ns add
            {
                chkMUT.BackColor = button_selected_color;
            }
            else
            {
                chkMUT.BackColor = SystemColors.Control;
            }


        } //chkMUT_CheckedChanged

        //===============================================================
        // ke9ns add to allow a right click on the MUT button to toggle between full MUTE and mute just spker
        private void chkMUT_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed) setupForm = new Setup(this);

                //  setupForm.Show();
                // setupForm.Focus();
                //  setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                //  setupForm.tcSetup.SelectedIndex = 1; // select audio tab;
                //  setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
                //  setupForm.chkAudioIQtoVAC.Focus();

                if (chkMUT.Checked == false)   // only toggle the special mute if MUT is OFF
                {
                    if (chkBoxMuteSpk.Checked == false) chkBoxMuteSpk.Checked = true;
                    else chkBoxMuteSpk.Checked = false;
                }

            } // right click

            if (chkBoxMuteSpk.Checked == true) //  ke9ns add s indicates muting just spk and not headphones
            {
                chkMUT.Text = "MUTs";
            }
            else
            {
                chkMUT.Text = "MUT";
            }

            if (chkMUT.Checked) // ke9ns add
            {
                chkMUT.BackColor = button_selected_color;
            }
            else
            {
                chkMUT.BackColor = SystemColors.Control;
            }

        } // chkMUT_MouseDown


        //===============================================================
        // ke9ns add to allow a right click on the MUT button to toggle between full MUTE and mute just spker
        private void chkBoxMuteSpk_CheckedChanged(object sender, EventArgs e)
        {
            if (chkBoxMuteSpk.Checked == true) //  ke9ns add s indicates muting just spk and not headphones
            {
                chkMUT.Text = "MUTs";
            }
            else
            {
                chkMUT.Text = "MUT";
            }

            if (chkMUT.Checked)
            {
                chkMUT.BackColor = button_selected_color;
            }
            else
            {
                chkMUT.BackColor = SystemColors.Control;
            }

        } // chkBoxMuteSpk_CheckedChanged


        private bool chkBoxMON = false; // ke9ns add true = select MON slider instead of AF

        //=======================================================================================================
        // ke9ns add left click will cause the slider to change to AF
        private void lblAF_MouseUp(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            lblMON.Text = "MON: " + ptbMON.Value.ToString(); // ke9ns add
            lblAF.Text = "AF: " + ptbAF.Value.ToString();

            if ((me.Button == System.Windows.Forms.MouseButtons.Left))
            {
                chkBoxMON = false;


                lblMON.ForeColor = Color.White;
                lblAF.ForeColor = Color.Yellow; // AF is now selected

                lblAF.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblMON.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

                ptbMON.Visible = false;
                ptbAF.Visible = true;


            } // LEFT

        } // lblAF_MouseUp

        //=======================================================================================================
        // ke9ns add left click will cause the slider to change to MN or MON value
        private void lblMON_MouseUp(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            lblMON.Text = "MON: " + ptbMON.Value.ToString(); // ke9ns add
            lblAF.Text = "AF: " + ptbAF.Value.ToString();

            if ((me.Button == System.Windows.Forms.MouseButtons.Left))
            {
                chkBoxMON = true;

                lblAF.ForeColor = Color.White;
                lblMON.ForeColor = Color.Yellow; // Tune is now selected

                lblMON.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblAF.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

                ptbAF.Visible = false;
                ptbMON.Visible = true;


            } // LEFT


        } // lblMON_MouseUp

        //============================================================================
        // ke9ns add left  click on the TUNE: power level will cause the slider to change over to TUNE power level slider
        private void lblTUNE_MouseUp(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            lblPWR.Text = "Drive: " + ptbPWR.Value.ToString();
            lblTUNE.Text = "Tune: " + ptbTune.Value.ToString();

            if ((me.Button == System.Windows.Forms.MouseButtons.Left))
            {
                
                chkBoxTune = true;                 // ke9ns add show TUNE slider

                  
                lblPWR.ForeColor = Color.White;
                lblTUNE.ForeColor = Color.Yellow; // Tune is now selected

                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

                ptbPWR.Visible = false;
                ptbTune.Visible = true;


               

            } // left
            else if ((me.Button == System.Windows.Forms.MouseButtons.Right)) // LOCK DRIVE and TUNE levels
            {

                if (chkBoxDrive.Checked == false)
                {
                    chkBoxDrive.Checked = true;     // ke9ns show DRIVE slider and LOCK it
                }
                else
                {
                    chkBoxDrive.Checked = false;    // ke9ns show DRIVE slider
                }


            } //RIGHT


        } //  lblTUNE_MouseUp

        public bool chkBoxTune = false; // ke9ns add true = slide shows tune power ptbTune.value

        //============================================================================
        // ke9ns add
        private void lblPWR_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            lblPWR.Text = "Drive: " + ptbPWR.Value.ToString();
            lblTUNE.Text = "Tune: " + ptbTune.Value.ToString();


            if ((me.Button == System.Windows.Forms.MouseButtons.Left)) // ke9ns select DRIVE slider
            {

                chkBoxTune = false;                 // ke9ns add show DRIVER slider
               
                lblPWR.ForeColor = Color.Yellow;
                lblTUNE.ForeColor = Color.White; // Tune is now selected


                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

                ptbPWR.Visible = true;
                ptbTune.Visible = false;


            }
            else if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {
            
           
                if (chkBoxDrive.Checked == false)
                {
                    chkBoxDrive.Checked = true;     // ke9ns show DRIVE slider and LOCK it
                }
                else
                {
                    chkBoxDrive.Checked = false;    // ke9ns show DRIVE slider
                }

               

            } // right click

        } // lblPWR_MouseDown


        
        //=========================================================================
        // ke9ns add
        private void chkBoxDrive_CheckedChanged(object sender, EventArgs e)
        {

            lblPWR.Text = "Drive: " + ptbPWR.Value.ToString();
            lblTUNE.Text = "Tune: " + ptbTune.Value.ToString();

            if (chkBoxTune == false)
            {
                lblPWR.ForeColor = Color.Yellow; // DRIVE is now selected
                lblTUNE.ForeColor = Color.White;

                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }
            else
            {
                lblPWR.ForeColor = Color.White;    
                lblTUNE.ForeColor = Color.Yellow;  //  Tune is now selected

                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }


            if (chkBoxDrive.Checked == true)
            {
              
                ptbPWR.Enabled = false;
                ptbTune.Enabled = false;

                if (setupForm != null)
                {
                    setupForm.udTXTunePower.Enabled = false; // disable the TUNE value selector in setup 
                    setupForm.lblTransmitTunePower.ForeColor = Color.Red;
                }

            }
            else
            {
               
                ptbPWR.Enabled = true;
                ptbTune.Enabled = true;

                if (setupForm != null)
                {
                    setupForm.udTXTunePower.Enabled = true; // dont disable the TUNE value selector in setup 
                    setupForm.lblTransmitTunePower.ForeColor = SystemColors.ControlText;
                }

            }




        } // chkBoxDrive_CheckedChanged



        //===================================================================
        // ke9ns add to show TUNE slider value on console
        private void ptbTune_Scroll(object sender, EventArgs e)
        {
            TunePower = ptbTune.Value; // ke9ns this is the TUNE power value and NOT the Driver ptbPWR value

          
            lblTUNE.Text = "Tune: " + ptbTune.Value.ToString(); // ke9ns add


            if (chkBoxTune == false)
            {
                lblPWR.ForeColor = Color.Yellow; // DRIVE is now selected
                lblTUNE.ForeColor = Color.White;

                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }
            else
            {
                lblPWR.ForeColor = Color.White;
                lblTUNE.ForeColor = Color.Yellow;  //  Tune is now selected

                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }

        } // ptbTune_Scroll

        //===================================================================

        static Font T1;

        const float MAX_VU_POWER = 60.0f;
        static float[] vhf_power_map = { 0, 0.2f, 2.9f, 10.8f, 22.8f, 36.6f, 48.2f, 52.5f, 58.3f, 60.8f, 62.4f, 64.2f };
        //static float[] uhf_power_map = { 0, 1.3f, 31.2f, 42.2f, 49.7f, 53.7f, 55.8f, 57.6f, 59.3f, 60.3f, 61.6f, 62.4f };
        static float[] uhf_power_map = { 0, 1.5f, 5.5f, 18.1f, 33.5f, 44.3f, 51.2f, 55.7f, 59.0f, 61.6f, 63.5f, 65.0f };

        private void ptbPWR_Scroll(object sender, System.EventArgs e)
        {
           
            lblPWR.Text = "Drive: " + ptbPWR.Value.ToString();

            if (chkBoxTune == false)
            {
                lblPWR.ForeColor = Color.Yellow; // DRIVE is now selected
                lblTUNE.ForeColor = Color.White;

                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }
            else
            {
                lblPWR.ForeColor = Color.White;
                lblTUNE.ForeColor = Color.Yellow;  //  Tune is now selected

                lblTUNE.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblPWR.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);
      

            }

            if (chkTUN.Checked == true)
            {
                ptbTune.Value = ptbPWR.Value;
                lblTUNE.Text = "Tune: " + ptbTune.Value.ToString();
            }

            if (setupForm == null)
                return;

            if (ptbPWR.Value == 0)
            {
                Audio.RadioVolume = 0.0;
                return;
            }

            float val = (float)ptbPWR.Value;
            double new_volume = 0;

            Band b = tx_band;

            int new_pwr = ptbPWR.Value;
            power_by_band[(int)tx_band] = new_pwr;

            if ((!tuning || xvtr_tune_power) && (tx_xvtr_index >= 0))
            {
                int power = ptbPWR.Value;

                if (ptbPWR.Focused)   xvtrForm.SetPower(tx_xvtr_index, power);

                b = BandByFreq(xvtrForm.TranslateFreq(TXFreq), tx_xvtr_index, true, current_region);
            }

            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK && (tx_xvtr_index == 0 || tx_xvtr_index == 1))
            {
                double tx_freq = TXFreq;

                // ******************************************
                // ** Remap VU for more linear slider action
                // ******************************************
                float desired_power = val * MAX_VU_POWER / 100.0f;
                float new_pwr_val = 0;

                if (tx_xvtr_index == 0)
                {
                    // loop through linear table looking for proper slope point on VHF
                    for (int i = 1; i < 10; i++)
                    {
                        if (desired_power < vhf_power_map[i])
                        {
                            float slope = vhf_power_map[i] - vhf_power_map[i - 1];
                            float percent = (desired_power - vhf_power_map[i - 1]) / slope;
                            new_pwr_val = (i - 2 + percent) * 10;
                            break;
                        }
                    }
                }
                else if (tx_xvtr_index == 1)
                {
                    // loop through linear table looking for proper slope point on UHF
                    for (int i = 1; i < 10; i++)
                    {
                        if (desired_power < uhf_power_map[i])
                        {
                            float slope = uhf_power_map[i] - uhf_power_map[i - 1];
                            float percent = (desired_power - uhf_power_map[i - 1]) / slope;
                            new_pwr_val = (i - 2 + percent) * 10;
                            break;
                        }
                    }
                }

                double interpolatedVolume = 0;

                // ******************************************
                // ** Interpolate VU over freq
                // ******************************************
                if (tx_xvtr_index == 0)
                {
                    if (xvtrForm.VPA && enable_vu_power_curve)
                    {
                        for (int i = 0; i < freqs_2m.Length; i++)
                        {
                            if (freqs_2m[i] == tx_freq)
                            {
                                interpolatedVolume = vhf_power_table[i];
                                new_volume = (new_pwr_val / 100.0) * interpolatedVolume;
                                break;
                            }
                            else if (freqs_2m[i] > tx_freq)
                            {
                                double percent = (tx_freq - freqs_2m[i - 1]) / (freqs_2m[i] - freqs_2m[i - 1]);
                                interpolatedVolume = vhf_power_table[i - 1] + percent * (vhf_power_table[i] - vhf_power_table[i - 1]);
                                new_volume = (new_pwr_val / 100.0) * interpolatedVolume;
                                break;
                            }
                        }
                    }
                    else //Full scale for low power
                    {
                        for (int i = 0; i < freqs_2m.Length; i++)
                        {
                            if (freqs_2m[i] == tx_freq)
                            {
                                interpolatedVolume = vhf_power_table[i];
                                new_volume = Math.Sqrt(val / 100.0) * interpolatedVolume;
                                break;
                            }
                            else if (freqs_2m[i] > tx_freq)
                            {
                                double percent = (tx_freq - freqs_2m[i - 1]) / (freqs_2m[i] - freqs_2m[i - 1]);
                                interpolatedVolume = vhf_power_table[i - 1] + percent * (vhf_power_table[i] - vhf_power_table[i - 1]);
                                new_volume = Math.Sqrt(val / 100.0) * interpolatedVolume;
                                break;
                            }
                        }
                    }
                }
                else if (tx_xvtr_index == 1)
                {
                    if (xvtrForm.UPA && enable_vu_power_curve)
                    {
                        for (int i = 0; i < freqs_70cm.Length; i++)
                        {
                            if (freqs_70cm[i] == tx_freq)
                            {
                                interpolatedVolume = uhf_power_table[i];
                                new_volume = (new_pwr_val / 100.0) * interpolatedVolume;
                                break;
                            }

                            else if (freqs_70cm[i] > tx_freq)
                            {
                                double percent = (tx_freq - freqs_70cm[i - 1]) / (freqs_70cm[i] - freqs_70cm[i - 1]);
                                interpolatedVolume = uhf_power_table[i - 1] + percent * (uhf_power_table[i] - uhf_power_table[i - 1]);
                                new_volume = (new_pwr_val / 100.0) * interpolatedVolume;
                                break;
                            }
                        }
                    }
                    else  //Full scale for low power
                    {
                        for (int i = 0; i < freqs_70cm.Length; i++)
                        {
                            if (freqs_70cm[i] == tx_freq)
                            {
                                interpolatedVolume = uhf_power_table[i];
                                new_volume = Math.Sqrt(val / 100.0) * interpolatedVolume;
                                break;
                            }

                            else if (freqs_70cm[i] > tx_freq)
                            {
                                double percent = (tx_freq - freqs_70cm[i - 1]) / (freqs_70cm[i] - freqs_70cm[i - 1]);
                                interpolatedVolume = uhf_power_table[i - 1] + percent * (uhf_power_table[i] - uhf_power_table[i - 1]);
                                new_volume = Math.Sqrt(val / 100.0) * interpolatedVolume;
                                break;
                            }
                        }
                    }
                }
                Audio.RadioVolume = new_volume;
            }
            else if (pa_present && VFOAFreq < 29.7f || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)))
            {
                int[] powers = { 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 };

                if (new_power_cal)
                {
                    //double new_volume;
                    // interpolate between values
                    int pwr = (int)val;
                    int index1 = 12;
                    while (powers[index1] > pwr) index1--;
                    int index2 = 0;
                    while (powers[index2] < pwr) index2++;

                  /*  if (current_model == Model.SDR1000 && pwr < 10)
                    {
                        new_volume = Math.Sqrt(pwr / 10.0 * Math.Pow(power_table[(int)b][3], 2.0)) / audio_volts1;
                    }
                  */  if (index1 == index2)
                    {
                        new_volume = power_table[(int)b][index1] / audio_volts1;
                    }
                    else
                    {
                        double percent = ((double)pwr - powers[index1]) / ((double)powers[index2] - powers[index1]);
                        double val1;
                        if (index1 < 0) val1 = 0;
                        else val1 = Math.Pow(power_table[(int)b][index1], 2.0);
                        double val2 = Math.Pow(power_table[(int)b][index2], 2.0);
                        new_volume = Math.Sqrt(val1 + percent * (val2 - val1)) / audio_volts1;
                    }
                    
                    if (!tuning && (rx1_dsp_mode == DSPMode.AM || rx1_dsp_mode == DSPMode.SAM))
                        new_volume = Math.Sqrt(Math.Pow((new_volume * audio_volts1), 2.0) * 2.0) / audio_volts1;
                    Audio.RadioVolume = new_volume;
                }
                else
                {
                    double target_dbm = 10 * (double)Math.Log10((double)val * 1000);
                    target_dbm -= GainByBand(TXBand);

                    double target_volts = Math.Sqrt(Math.Pow(10, target_dbm * 0.1) * 0.05);		// E = Sqrt(P * R) 
                    Audio.RadioVolume = target_volts / audio_volts1;
                }
            }
            else if (hid_init && current_model == Model.FLEX1500)
            {
                if (tx_ant_1500 == HIDAnt.PA)
                {
                    Band band = b;
                    if(tx_xvtr_index >= 0) // get the HF band
                        band = BandByFreq(xvtrForm.TranslateFreq(TXFreq), -1, true, current_region);

                    float cal = power_table[(int)band][0];
                    Audio.RadioVolume = cal * val / 100.0;
                }
                else Audio.RadioVolume = Math.Sqrt((double)ptbPWR.Value / 100.0);
                //Debug.WriteLine("RadioVolume: " + Audio.RadioVolume.ToString("f4"));
            }
            else
            {
                const double TARGET = 0.8;		// audio in volts needed to hit 1W 
                Audio.RadioVolume = (double)Math.Sqrt((double)ptbPWR.Value / 100.0) / audio_volts1 * TARGET;
            }

            if (ptbPWR.Focused) btnHidden.Focus();

        } // ptbPWR_Scroll


        //===========================================================================================
        // ke9ns add
        private void ptbMON_Scroll(object sender, EventArgs e)
        {
           
            TXAF = ptbMON.Value;  // ke9ns update MON volume


            if ((mox) && ((chkMON.Checked == true) || (ckQuickPlay.Checked == true))) // && ((setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == true && setupForm.chkRX2AutoMuteRX1OnVFOBTX.Checked == true)) )  // ke9ns add    (dont go into MON if in full duplex mode, leave as AF)
            {
                lblMON.Text = "MON: " + ptbMON.Value.ToString(); // ke9ns add
                ptbAF.Value = ptbMON.Value;

                lblAF.Text = "AF: " + ptbAF.Value.ToString();

                ptbAF_Scroll(this, EventArgs.Empty);

            }
            else lblMON.Text = "MON: " + ptbMON.Value.ToString(); // ke9ns add

          
            if (chkBoxMON == false)
            {
                lblAF.ForeColor = Color.Yellow; // DRIVE is now selected
                lblMON.ForeColor = Color.White;

                lblAF.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblMON.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }
            else
            {
                lblAF.ForeColor = Color.White;
                lblMON.ForeColor = Color.Yellow;  //  Tune is now selected

                lblMON.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblAF.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }

        } //ptbMON_Scroll


        //===========================================================================================
        private void ptbAF_Scroll(object sender, System.EventArgs e)
		{
            //udAF.Value = ptbAF.Value;

          //  Debug.WriteLine("SCROLL here "+ mox + " , "+ ckQuickPlay.Checked);
            if ((mox) && ((chkMON.Checked == true)||(ckQuickPlay.Checked == true)) ) // && ((setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == true && setupForm.chkRX2AutoMuteRX1OnVFOBTX.Checked == true)) )  // ke9ns add    (dont go into MON if in full duplex mode, leave as AF)
            {
                lblMON.Text = "MON: " + ptbMON.Value.ToString(); // ke9ns add
                lblAF.Text = "AF: " + ptbAF.Value.ToString();
            }
            else
            {
                lblAF.Text = "AF: " + ptbAF.Value.ToString();
            }

          
            if (chkBoxMON == false)
            {
                lblAF.ForeColor = Color.Yellow; // DRIVE is now selected
                lblMON.ForeColor = Color.White;

                lblAF.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblMON.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }
            else
            {
                lblAF.ForeColor = Color.White;
                lblMON.ForeColor = Color.Yellow;  //  Tune is now selected

                lblMON.Font = new Font(SystemFonts.DefaultFont, FontStyle.Bold | FontStyle.Italic);            // new Font(defaultFont.FontFamily, defaultFont.Size, FontStyle.Bold);
                lblAF.Font = new Font(SystemFonts.DefaultFont, FontStyle.Italic);

            }


            if ((hid_init) && (current_model == Model.FLEX1500) && (mox) && (chkMON.Checked) )
            {
                double percent = (double)(ptbAF.Value - ptbAF.Minimum) / (double)ptbAF.Maximum;

                byte reg_val = (byte)(0xFF - 0x7F * percent);

                USBHID.SetMonGain(reg_val);
            }
            else 
            {
                if (chkMUT.Checked) // check if in MUTE mode
                {
                    if (chkBoxMuteSpk.Checked == false) // ke9ns add chkMUT routine now check sor chkBoxMuteSpk option
                    {
                        Audio.MonitorVolume = 0.0;
                    }
                    else
                    {
                        switch (current_model) // ke9ns add (to allow slider to adjust output of headphones
                        {
                            case Model.FLEX1500:
                                Audio.MonitorVolume = ptbAF.Value / 100.0 * 0.8; // cap at 80% of Full Scale to prevent popping
                                break;
                            default:
                                // if ((mox) && (chkVFOBTX.Checked == false || chkRX2.Checked == false))
                                Audio.MonitorVolume = ptbAF.Value / 100.0;
                                break;
                        }

                    }
                }
                else if ((num_channels > 2) && (mox) && (!chkMON.Checked))  // if TX and no MON enabled
                {
                    if (chkBoxMuteSpk.Checked == false) // ke9ns add chkMUT routine now check sor chkBoxMuteSpk option
                    {
                        Audio.MonitorVolume = 0.0;
                    }
                    else
                    {

                    }
                }
                else
                {
                   
                    switch (current_model)
                    {
                        case Model.FLEX1500:
                            Audio.MonitorVolume = ptbAF.Value / 100.0 * 0.8; // cap at 80% of Full Scale to prevent popping
                            break;
                        default:
                           // if ((mox) && (chkVFOBTX.Checked == false || chkRX2.Checked == false))
                                Audio.MonitorVolume = ptbAF.Value / 100.0;
                            break;
                    }
                }
               
            }

            if ((mox) && ((chkMON.Checked == true) || (ckQuickPlay.Checked == true)) )// && ((setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == true && setupForm.chkRX2AutoMuteRX1OnVFOBTX.Checked == true) ) )  // ke9ns MOD to prevent MON function when in full duplex (RX2 ON the VFOB TX)
            {
                
                TXAF = ptbAF.Value;   // if transmit
                Debug.WriteLine("TXAF WRITE " + TXAF);

            }
            else
            {
                RXAF = ptbAF.Value; // ke9ns if Receive  was !MOX
                Debug.WriteLine("RXAF: "+ RXAF + " , " + TXAF);
            }

            

			if(ptbAF.Focused) btnHidden.Focus();

		} // ptbAF_Scroll


        //======================================================================================================

		private void ptbRF_Scroll(object sender, System.EventArgs e)
		{
			lblRF.Text = "AGC-T:  "+ptbRF.Value.ToString();

            switch (RX1AGCMode)
            {
                case AGCMode.FIXD:
                    if (setupForm != null) setupForm.AGCFixedGain = ptbRF.Value;
                    break;
                default:
                    if (setupForm != null) setupForm.AGCMaxGain = ptbRF.Value;
                    break;
            }

            rx1_agct_by_band[(int)rx1_band] = ptbRF.Value;

			if(ptbRF.Focused) btnHidden.Focus();
		}


        //=============================================================================
		private void ptbMic_Scroll(object sender, System.EventArgs e)
		{
			lblMicVal.Text = ptbMic.Value.ToString();
            if (dsp.GetDSPTX(0).CurrentDSPMode != DSPMode.FM)
            {
                double gain_db = (double)ptbMic.Value;
                if (mic_boost) gain_db += 20.0;

                Audio.MicPreamp = Math.Pow(10.0, gain_db / 20.0); // convert to scalar
            }
			if(ptbMic.Focused) btnHidden.Focus();
		}


        // ke9ns mod (link up with CWX panel)
		private void ptbCWSpeed_Scroll(object sender, System.EventArgs e)
		{
            lblCWSpeed.Text = "Speed:  "+ptbCWSpeed.Value.ToString()+" WPM";

            if (cwxForm != null ) // if cwx panel open, then use it,otherwise change CWKeyer directly
            {
                   cwxForm.udWPM.Value = ptbCWSpeed.Value; // cwxForm.WPM = ptbCWSpeed.Value; // ke9ns add

            }
            else
            {
                CWKeyer.WPM = ptbCWSpeed.Value;
            }

            if (ptbCWSpeed.Focused) btnHidden.Focus();

        } // ptbCWSpeed_Scroll

        private void chkVOX_CheckedChanged(object sender, System.EventArgs e)
		{
            if ((vac_enabled || vac2_enabled) == false)
            {
                if (setupForm != null) setupForm.VOXEnable = chkVOX.Checked;

                if (chkVOX.Checked) chkVOX.BackColor = button_selected_color;
                else
                {
                    Audio.VOXActive = false;
                    chkVOX.BackColor = SystemColors.Control;
                }
            }
            else chkVOX.Checked = false;
        }

        private void ptbSquelch_Scroll(object sender, System.EventArgs e)
        {
            chkSquelch.Text = "SQL:  " + ptbSquelch.Value.ToString();

            if (rx1_dsp_mode == DSPMode.FM) //FM Squelch
            {
                dsp.GetDSPRX(0, 0).FMSquelchThreshold = (float)Math.Pow(10.0, - 2 * ptbSquelch.Value / 100.0);
                dsp.GetDSPRX(0, 1).FMSquelchThreshold = (float)Math.Pow(10.0, - 2 * ptbSquelch.Value / 100.0);
            }
            else //non-FM Squelch
            {
                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                {
                    dsp.GetDSPRX(0, 0).RXSquelchThreshold = (float)ptbSquelch.Value -
                        rx1_meter_cal_offset -
                        rx1_preamp_offset[(int)rx1_preamp_mode] -
                        rx1_filter_size_cal_offset -
                        rx1_path_offset;

                    dsp.GetDSPRX(0, 1).RXSquelchThreshold = (float)ptbSquelch.Value -
                        rx1_meter_cal_offset -
                        rx1_preamp_offset[(int)rx1_preamp_mode] -
                        rx1_filter_size_cal_offset -
                        rx1_path_offset;
                }
                else
                {
                    dsp.GetDSPRX(0,0).RXSquelchThreshold = (float)ptbSquelch.Value -
                        rx1_preamp_offset[(int)rx1_preamp_mode] -
                        rx1_meter_cal_offset -
                        rx1_filter_size_cal_offset;

                    dsp.GetDSPRX(0,1).RXSquelchThreshold = (float)ptbSquelch.Value -
                        rx1_preamp_offset[(int)rx1_preamp_mode] -
                        rx1_meter_cal_offset -
                        rx1_filter_size_cal_offset;
                }
            }

            if (ptbSquelch.Focused) btnHidden.Focus();

        } //ptbSquelch_Scroll

        private void picSquelch_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            int signal_x = (int)((sql_data + 160.0) * (picSquelch.Width - 1) / 160.0);
            int sql_x = (int)(((float)ptbSquelch.Value + 160.0) * (picSquelch.Width - 1) / 160.0);

            if (mox) signal_x = sql_x = 0;

            e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, signal_x, picSquelch.Height);

            if (sql_x < signal_x)
            {
                e.Graphics.FillRectangle(new SolidBrush(Color.Red), sql_x + 1, 0, signal_x - sql_x - 1, picSquelch.Height);
                ScanControl.ScanStop = 1; // ke9ns add
                
            }
            ScanControl.SQL = (int)ptbSquelch.Value;
            ScanControl.SIG = (int)sql_data;

        } // picSquelch_Paint

        private void chkNoiseGate_CheckedChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.NoiseGateEnabled = chkNoiseGate.Checked;

			if(chkNoiseGate.Checked) chkNoiseGate.BackColor = button_selected_color;
			else chkNoiseGate.BackColor = SystemColors.Control;
		}

		private void ptbVACRXGain_Scroll(object sender, System.EventArgs e)
		{
            lblRXGain.Text = "RX Gain:  " + ptbVACRXGain.Value.ToString();
            if (setupForm != null)
            {
                if (!(chkRX2.Checked && chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    lblVACRXIndicator.Text = "VAC1";
                    lblVACTXIndicator.Text = "VAC1";
                    setupForm.VACRXGain = ptbVACRXGain.Value;
                    vac_rx_gain = ptbVACRXGain.Value;
                }
                else
                {
                    lblVACRXIndicator.Text = "VAC2";
                    lblVACTXIndicator.Text = "VAC2";
                    setupForm.VAC2RXGain = ptbVACRXGain.Value;
                    vac2_rx_gain = ptbVACRXGain.Value;
                }
            }
			if(ptbVACRXGain.Focused) btnHidden.Focus();
		}

		private void ptbVACTXGain_Scroll(object sender, System.EventArgs e)
		{
            lblTXGain.Text = "TX Gain:  " + ptbVACTXGain.Value.ToString();
            if (setupForm != null)
            {
                if (!(chkRX2.Checked && chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    lblVACRXIndicator.Text = "VAC1";
                    lblVACTXIndicator.Text = "VAC1";
                    setupForm.VACTXGain = ptbVACTXGain.Value;
                    vac_tx_gain = ptbVACTXGain.Value;
                }
                else
                {
                    lblVACRXIndicator.Text = "VAC2";
                    lblVACTXIndicator.Text = "VAC2";
                    setupForm.VAC2TXGain = ptbVACTXGain.Value;
                    vac2_tx_gain = ptbVACTXGain.Value;
                }
            }
			if(ptbVACTXGain.Focused) btnHidden.Focus();
		}

		private void ptbVOX_Scroll(object sender, System.EventArgs e)
		{
			lblVOXVal.Text = ptbVOX.Value.ToString();
            if (setupForm != null) setupForm.VOXSens = ptbVOX.Value;
			if(ptbVOX.Focused) btnHidden.Focus();
		}

		private void picVOX_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			int peak_x = (int)(Audio.Peak * 20 * picVOX.Width); // W4TME
			int vox_x = (int)(ptbVOX.Value * (picVOX.Width-1) / 500.0);  //W4TME

			if(!chkVOX.Checked || peak_x < 0) peak_x = vox_x = 0;
			e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, peak_x, picVOX.Height);
			if(vox_x < peak_x)
				e.Graphics.FillRectangle(new SolidBrush(Color.Red), vox_x+1, 0, peak_x-vox_x-1, picVOX.Height);
		}

		private void ptbNoiseGate_Scroll(object sender, System.EventArgs e)
		{
			lblNoiseGateVal.Text = ptbNoiseGate.Value.ToString();
            if (setupForm != null) setupForm.NoiseGate = ptbNoiseGate.Value;
			if(ptbNoiseGate.Focused) btnHidden.Focus();
		}

		private void picNoiseGate_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			int signal_x = (int)((noise_gate_data + 160.0) * (picNoiseGate.Width-1) / 160.0);
			int noise_x = (int)(((float)ptbNoiseGate.Value + 160.0) * (picNoiseGate.Width-1) / 160.0);

			if(!mox) signal_x = noise_x = 0;
			e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, signal_x, picNoiseGate.Height);
			if(noise_x < signal_x)
				e.Graphics.FillRectangle(new SolidBrush(Color.Red), noise_x+1, 0, signal_x-noise_x-1, picNoiseGate.Height);
		}

		private void WheelTune_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if(e.Button == MouseButtons.Left)	ChangeTuneStepUp();
		}


        //============================================================================================
        // ke9ns mod  normally MON works only on post-processed audio, so no AM or FM since AM has an envelope and FM is FM
        //            add ability to switch between Pre and Post-processed audio
        //============================================================================================
        private void chkMON_CheckedChanged(object sender, System.EventArgs e)
		{
            //CWKeyer.SensorQueuePrint();
            //CWKeyer.ToneQueuePrint();

        
            chkMON.CheckedChanged -= chkMON_CheckedChanged; // ke9ns mod turn eventoff

            if (moninit == 1) // ke9ns mod comes here first time
            {
                if (chkMON.Checked == true)
                {
                    if (Audio.MON_PRE == 1)
                    {
                        Audio.MON_PRE = 0;
                        chkMON.Checked = false;
                    }
                    else
                    {
                        Audio.MON_PRE = 0;
                        chkMON.Checked = true;
                    }

                }
                else
                {
                    Audio.MON_PRE = 1;// comes here to turn off MON from quickplay
                    chkMON.Checked = false;
                }
                moninit = 0; // only do 1 time

            } //  if (moninit == 1)


            if (Audio.MON_PRE == 0)  // ke9ns mod MON_PRE was 0 
            {
                if (chkMON.Checked == false)
                {
                    Audio.MON_PRE = 1;           // turn on MON_PRE
                    chkMON.Text = "MONpr";
                    chkMON.Checked = true;
                  //  Debug.WriteLine("pre=1 and checked = true  PR");
                }
                else
                {
                    Audio.MON_PRE = 0;            // turn off MON_PRE
                    chkMON.Text = "MONps";
                    chkMON.Checked = true;
                  //  Debug.WriteLine("pre=0 and checked = true  PS");
                }

            }
            else // MON_PRE was 1 so turn off here
            {
                if (chkMON.Checked == false)
                {
                    Audio.MON_PRE = 0;
                    chkMON.Text = "MON";
                    chkMON.Checked = false;
                  //  Debug.WriteLine("pre=0 and checked = false OFF");

                }
                else
                {
                    Audio.MON_PRE = 0;
                    chkMON.Text = "MON";
                    chkMON.Checked = true;
                   // Debug.WriteLine("pre=0 and checked = true BAD");
                }


            }

            chkMON.CheckedChanged += chkMON_CheckedChanged; //ke9ns mod turn eventoff

            Audio.MON = chkMON.Checked; // ke9ns tell audio routine MON is on or OFF


            //--------------------------------------------------------------------------

               if (chkMON.Checked)
                {
                    chkMON.BackColor = button_selected_color;
                }
                else
                {
                    chkMON.BackColor = SystemColors.Control;
                }

              //  Debug.WriteLine("num_channels " + num_channels);

			    if((num_channels == 4) || (num_channels == 6)) // normally 2 channels
			    {
                    if (!((chkMON.Checked == false) && (mox)))
                    {
                        ptbAF_Scroll(this, EventArgs.Empty);
                   //   Debug.WriteLine("ptbAF_Scroll " + num_channels);


                }
                else
                    {
                        Audio.MonitorVolume = 0.0;
                    }
			    }
			    else
			    {
                 //   if (chkPower.Checked && mox && current_model == Model.SDR1000)
                  //  {
                  //      Hdw.MuteRelay = !chkMON.Checked;
                  //  }
			    }



            if ((hid_init) && (current_model == Model.FLEX1500))
            {
                USBHID.SetMon(chkMON.Checked);

                if (chkMON.Checked && mox)   ptbAF_Scroll(this, EventArgs.Empty);
            }




        } // chkMON_CheckedChanged



//============================================================================================
// ke9ns 
        private void AudioMOXChanged(bool tx)
		{
          
            if ((tx)) 
            {
                Audio.MOX = tx;

                if ((chkMON.Checked == true) || (ckQuickPlay.Checked == true)) ptbAF.Value = txaf;  // ke9ns mod     // && (setupForm.chkRX2AutoMuteRX2OnVFOATX.Checked == true && setupForm.chkRX2AutoMuteRX1OnVFOBTX.Checked == true))    // k9ens mod was just if (tx)  no MON if the full duplex
                else ptbAF.Value = rxaf;

            }
			else // rx
			{
               
                //Audio.MOX = tx; // now taken care of near the ramp logic
              ptbAF.Value = rxaf;
			}

			//udPWR_ValueChanged(this, EventArgs.Empty);
			ptbAF_Scroll(this, EventArgs.Empty);

        } // private void AudioMOXChanged(bool tx)



        private void HdwMOXChanged(bool tx, double freq)
		{
		//	if(current_model == Model.SDR1000)		Hdw.UpdateHardware = false;

			if(tx)
			{
				switch(rx1_dsp_mode)
				{
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						freq -= 0.011025;
						break;
					/*case DSPMode.DRM:
						freq -= 0.012;
						break;*/
				}

                spur_reduction = false;
                if_shift = false;

				if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
				{
                    // make sure TX freq has been set
                    if (tx_dds_freq_updated)
                    {
                        FWC.SetTXFreqTW(tx_dds_freq_tw, tx_dds_freq_mhz);
                        tx_dds_freq_updated = false;
                    }

					FWC.SetMOX(true);
					fwc_pa_bias = true;
                    if (current_model == Model.FLEX3000)
                    {
                        //f3k_fan = true;
                        mic_down = false;
                        mic_down_running = false;
                        mic_up = false;
                        mic_up_running = false;
                    }

                    if (preSelForm != null)
                        preSelForm.MOX = tx;
				}
                else if (hid_init && current_model == Model.FLEX1500)
                {
                    if (chkVFOSplit.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else
                        txtVFOAFreq_LostFocus(this, EventArgs.Empty);

                    rx1_dds_freq_updated = false;
                    last_tw = 0; // to reset spur reduction on next transition to RX
                    USBHID.SetFreqTW(rx1_dds_freq_tw);
                    Set1500Filters(TW2Freq(rx1_dds_freq_tw));

                    USBHID.SetMOX(true);
                }
                else
				{
					if(num_channels == 2) Hdw.MuteRelay = !chkMON.Checked;

					if(ext_ctrl_enabled)
					{
						Hdw.UpdateHardware = true;
						UpdateExtCtrl();
						Hdw.UpdateHardware = false;
					}

					if(x2_enabled)
					{
						Hdw.UpdateHardware = true;
						Hdw.X2 = (byte)(Hdw.X2 | 0x40);						
						Hdw.UpdateHardware = false;
						Thread.Sleep(x2_delay);
					}

					Hdw.GainRelay = true;		// 0dB
					Hdw.Attn = false;
					
					if((xvtr_present) && (freq >= 144.0)) // ke9ns test was 144.0
					{
						Hdw.XVTR_RF = true;
						if(current_xvtr_tr_mode == XVTRTRMode.POSITIVE)	Hdw.XVTR_TR = true;
						else if(current_xvtr_tr_mode == XVTRTRMode.NEGATIVE) Hdw.XVTR_TR = false;
					}
					else
					{
						if(tx_xvtr_index < 0 || !xvtrForm.GetXVTRRF(tx_xvtr_index))
						{
							Hdw.RFE_TR = true;
							if(pa_present && freq <= 30.0)
							{
								Hdw.PA_TR_Relay = true;
								Hdw.PABias = true;
							}
							if(rfe_pa_tr_enable && freq <= 30.0) Hdw.PA_TR_Relay = true;
						}
						else
						{
							Hdw.XVTR_RF = true;
						}
					}					
				
					Hdw.TransmitRelay = true;			
				}				
			}
			else // rx
			{
				if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
				{
					FWC.SetMOX(false);
                    //FWC.SetPABias(false); // now done in firmware
					fwc_pa_bias = false;

                    if (preSelForm != null)
                        preSelForm.MOX = tx;

                    spur_reduction = setupForm.chkGeneralSpurRed.Checked;

                    if (rx1_dsp_mode != DSPMode.DRM && rx1_dsp_mode != DSPMode.SPEC) if_shift = true;
				}
                else if (hid_init && current_model == Model.FLEX1500)
                {
                    USBHID.SetMOX(false);

                    spur_reduction = chkSR.Checked;

                    if (rx1_dsp_mode != DSPMode.DRM && rx1_dsp_mode != DSPMode.SPEC)  if_shift = true;

                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
               /* else if(current_model == Model.SDR1000)
				{
					if(xvtr_present && Hdw.XVTR_RF)
					{
						Hdw.XVTR_RF = false;
						if(current_xvtr_tr_mode == XVTRTRMode.POSITIVE)
							Hdw.XVTR_TR = false;
						else if(current_xvtr_tr_mode == XVTRTRMode.NEGATIVE)
							Hdw.XVTR_TR = true;
					}
					else
					{	
						if(tx_xvtr_index < 0 || !xvtrForm.GetXVTRRF(tx_xvtr_index))
						{
							Hdw.RFE_TR = false;
							if(pa_present)
							{
								Hdw.PABias = false;
								Hdw.PA_TR_Relay = false;
							}
							if(rfe_pa_tr_enable)
							{
								Hdw.PA_TR_Relay = false;
							}
						}
						else
						{
							Hdw.XVTR_RF = false;
						}
					}
					Hdw.TransmitRelay = false;

					if(x2_enabled)
					{
						Hdw.UpdateHardware = true;
						Hdw.X2 = (byte)(Hdw.X2 & 0xBF);
						Hdw.UpdateHardware = false;
						Thread.Sleep(x2_delay);
					}

					if(!chkMUT.Checked && num_channels == 2)
						Hdw.MuteRelay = false;

					RX1PreampMode = rx1_preamp_mode;

                    spur_reduction = setupForm.chkGeneralSpurRed.Checked;

                    if (rx1_dsp_mode != DSPMode.DRM &&
                    rx1_dsp_mode != DSPMode.SPEC)
                        if_shift = true;
				}
                */				
			}   

            if (!fwc_init && !hid_init && current_model != Model.FLEX5000 && current_model != Model.FLEX3000 && current_model != Model.FLEX1500)
            {
                Hdw.UpdateHardware = true;

                if (tx && !tuning)
                {
                    DDSFreq = freq;
                }
                else if (tx && chkVFOSplit.Checked)
                {
                    txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
            }
		}

		private void UIMOXChangedTrue()
		{
			Display.MOX = true;
			meter_peak_count = multimeter_peak_hold_samples;		// reset multimeter peak

			switch(Display.CurrentDisplayMode)
			{
				case DisplayMode.PANADAPTER:
				case DisplayMode.SPECTRUM:
				case DisplayMode.HISTOGRAM:
				case DisplayMode.WATERFALL:
				case DisplayMode.PANAFALL:
				case DisplayMode.PANASCOPE:
					//Display.DrawBackground();
					break;
			}

			comboMeterRXMode.ForeColor = Color.Gray;
			comboMeterTXMode.ForeColor = Color.White;
			comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);

            comboMeterTX1Mode.ForeColor = Color.White; // ke9ns add
            comboMeterTX1Mode_SelectedIndexChanged(this, EventArgs.Empty); // ke9ns add


            if (!disable_ui_mox_changes)
            {
                setupForm.SpurRedEnabled = false;
                DisableAllBands();
                DisableAllModes();
                chkVFOSplit.Enabled = false;
                btnVFOAtoB.Enabled = false;
                btnVFOBtoA.Enabled = false;
                btnVFOSwap.Enabled = false;
                chkPower.BackColor = Color.Red;
            }

		//	if(current_model == Model.SDR1000)				comboPreamp.Enabled = !chkMOX.Checked;
			setupForm.MOX = chkMOX.Checked;
			ResetMultiMeterPeak();
			//chkMOX.BackColor = button_selected_color;

			picSquelch.Invalidate();

			/*Thread t = new Thread(new ThreadStart(DelayedDisplayReset));
			t.Name = "Display Reset";
			t.Priority = ThreadPriority.BelowNormal;
			t.IsBackground = true;
			t.Start();*/
		}

		private void UIMOXChangedFalse()
		{
			Display.MOX = false;
			switch(Display.CurrentDisplayMode)
			{
				case DisplayMode.PANADAPTER:
				case DisplayMode.SPECTRUM:
				case DisplayMode.HISTOGRAM:
				case DisplayMode.WATERFALL:
				case DisplayMode.PANAFALL:
				case DisplayMode.PANASCOPE:
					//Display.DrawBackground();
					break;
			}

            if (!disable_ui_mox_changes)
            {
                setupForm.SpurRedEnabled = true;
                EnableAllBands();
                EnableAllModes();
                chkVFOSplit.Enabled = true;
                btnVFOAtoB.Enabled = true;
                btnVFOBtoA.Enabled = true;
                btnVFOSwap.Enabled = true;
            }
			if(chkPower.Checked) chkPower.BackColor = button_selected_color;
			comboMeterTXMode.ForeColor = Color.Gray;
            comboMeterTX1Mode.ForeColor = Color.Gray; // ke9ns add

            comboMeterRXMode.ForeColor = Color.White;
			comboMeterRXMode_SelectedIndexChanged(this, EventArgs.Empty);

			pa_fwd_power = 0;
			pa_rev_power = 0;

			Audio.HighSWRScale = 1.0;
			HighSWR = false;

			for(int i=0; i<meter_text_history.Length; i++)
				meter_text_history[i] = 0.0f;

			if(!fwc_init) // || current_model == Model.SDR1000)
                comboPreamp.Enabled = !chkMOX.Checked;
			setupForm.MOX = chkMOX.Checked;
			ResetMultiMeterPeak();
			chkMOX.BackColor = SystemColors.Control;

			picNoiseGate.Invalidate();

			/*Thread t = new Thread(new ThreadStart(DelayedDisplayReset));
			t.Name = "Display Reset";
			t.Priority = ThreadPriority.BelowNormal;
			t.IsBackground = true;
			t.Start();*/
		}


        //================================================================================================= KEY TRANSMITTER
		private HiPerfTimer t1 = new HiPerfTimer();
		//private double timer1 = 0.0;

		private bool mox = false;
        private void chkMOX_CheckedChanged2(object sender, System.EventArgs e)
        {
            if (ckQuickPlay.Checked) // if you let go transmit button, shut off playback
            {
                WaveForm.QuickPlay = false;
                ckQuickPlay.BackColor = SystemColors.Control;
                ckQuickRec.Enabled = !ckQuickPlay.Checked;
            }

           
            // ke9ns add this prevents the PTT from overriding the txWaterID just while its transmitting
            if (TXIDMenuItem.Checked == true) // ke9ns add
            {
                chkMOX.Checked = true; // dont allow to unkey while txwater ID is going
                manual_mox = true;
            }
            else
            {
                if (chkMOX.Checked == false) manual_mox = false;
            }



            grpVFOA.Invalidate(); // ke9ns add to check for ring color during MOX
            grpVFOB.Invalidate();


            //Debug.WriteLine("MOX: "+chkMOX.Checked);	

            t1.Start();  // hiperformance timer start

            if (rx_only && chkMOX.Checked)
            {
                chkMOX.Checked = false;
                return;
            }

            // only allow softrock style xmit  for cw and ssb for now
         //   if (rx1_dsp_mode != DSPMode.CWL && rx1_dsp_mode != DSPMode.CWU &&
         //       rx1_dsp_mode != DSPMode.USB && rx1_dsp_mode != DSPMode.LSB &&
          //      ( /* current_model == Model.SDR1000_DDSLOCKED || */ current_model == Model.SOFTROCK40)
          //      )
          //  {
           //    chkMOX.Checked = false;
           //     return;
          //  }

            bool tx = chkMOX.Checked;

            if (!tx)   WBIRRX1Holdoff();  // do this is TX turned OFF

            if (tx) mox = tx;

            double freq = 0.0;

            if (tx)
            {
                /*t1.Stop();
                timer1 += t1.DurationMsec;
                count1++;*/
                //-------------------------------------------------------------
                //FM Offsets
                if (dsp.GetDSPTX(0).CurrentDSPMode == DSPMode.FM && current_fm_tx_mode != FMTXMode.Simplex
                    && !chkVFOSplit.Checked)
                {
                    switch (current_fm_tx_mode)
                    {
                        case FMTXMode.Low:
                            if (!chkFMTXRev.Checked)
                                TXFreq -= fm_tx_offset_mhz; // usual case
                            else
                                TXFreq += fm_tx_offset_mhz;
                            break;
                        case FMTXMode.High:
                            if (!chkFMTXRev.Checked)
                                TXFreq += fm_tx_offset_mhz; // usual case
                            else
                                TXFreq -= fm_tx_offset_mhz;
                            break;
                    }
                } // FM offsets

                //-------------------------------------------------------------

                if (chkVFOBTX.Checked || (!chkRX2.Checked && chkVFOSplit.Checked))     freq = double.Parse(txtVFOBFreq.Text);
                else if (chkRX2.Checked && chkVFOSplit.Checked)       freq = double.Parse(txtVFOABand.Text);
                else     freq = double.Parse(txtVFOAFreq.Text);
                //-------------------------------------------------------------


                if (tx_xvtr_index >= 0)    freq = xvtrForm.TranslateFreq(freq);

                if (chkXIT.Checked)     freq = freq + (int)udXIT.Value * 0.000001;

                /*t1.Stop();
                timer2 += t1.DurationMsec;
                count2++;*/

                // DO THIS IF NOT CALIBRATING
                if (!calibrating)
                {
                    if ((tx_band == Band.B60M) && (current_region == FRSRegion.US) && (!extended))
                    {
                        switch (dsp.GetDSPTX(0).CurrentDSPMode)
                        {
                            case DSPMode.USB:
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                            case DSPMode.DIGU:
                                break;
                            default:
                                MessageBox.Show(rx1_dsp_mode.ToString() + " mode is not allowed on 60M band.",
                                    "Transmit Error: Mode/Band",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                chkMOX.Checked = false;
                                return;
                                // break;
                        } // switch
                    } // tx band


                    //-------------------------------------------------------------------------------------------
                    // dont check 60m valid PowerSDR will still work, but Flex will not transmit

                      if (!CheckValidTXFreq(current_region, freq, dsp.GetDSPTX(0).CurrentDSPMode))	// out of band
                      {
                          if (tx_band == Band.B60M && (current_region == FRSRegion.US) && CheckValidTXFreq_Private(current_region, freq) && !extended)
                          {
                              if (dsp.GetDSPTX(0).TXFilterHigh - dsp.GetDSPTX(0).TXFilterLow > 2800)
                                  MessageBox.Show("The transmit filter you have selected exceeds the bandwidth\n" +
                                      "constraints (2.8kHz) for the US 60m band.",
                                      "60m Bandwidth",
                                      MessageBoxButtons.OK,
                                      MessageBoxIcon.Error);
                              else
                                  MessageBox.Show("The US 60m region requires transmission center of energy to be around\n" +
                                      "the defined channels.  Click the 60m Band button to jump to the nearest channel.",
                                      "US 60m Off Channel",
                                      MessageBoxButtons.OK,
                                      MessageBoxIcon.Error);
                          } // tx band
                          else
                          {

                              switch (dsp.GetDSPTX(0).CurrentDSPMode)
                              {
                                  case DSPMode.CWL:
                                  case DSPMode.CWU:
                                      MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz is not within the\n" +
                                          "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                          "Transmit Error: Out Of Band",
                                          MessageBoxButtons.OK,
                                          MessageBoxIcon.Error);
                                      break;
                                  default:
                                      MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz in combination with your TX filter\n" +
                                          "settings [" + Display.TXFilterLow.ToString() + ", " + Display.TXFilterHigh.ToString() + "] are not within the " +
                                          "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                          "Transmit Error: Out Of Band",
                                          MessageBoxButtons.OK,
                                          MessageBoxIcon.Error);
                                      break;
                              }
                          }

                          chkMOX.Checked = false;
                          return;
                      } // if valid




                } // calibrating


                /*t1.Stop();
                timer3 += t1.DurationMsec;
                count3++;*/

                switch (rx1_dsp_mode)
                {
                    case DSPMode.CWL:
                        freq += (double)cw_pitch * 0.0000010;
                        break;
                    case DSPMode.CWU:
                        freq -= (double)cw_pitch * 0.0000010;
                        break;
                }
            } // TX
            else // no TX
            {
                current_ptt_mode = PTTMode.NONE;
                /*if(pa_present)
                {
                    if(poll_pa_pwr_thread !=null && poll_pa_pwr_thread.IsAlive)
                        poll_pa_pwr_thread.Abort();
                }*/

                //Undo FM Offsets
                if (dsp.GetDSPTX(0).CurrentDSPMode == DSPMode.FM && current_fm_tx_mode != FMTXMode.Simplex
                    && !chkVFOSplit.Checked)
                {
                    switch (current_fm_tx_mode)
                    {
                        case FMTXMode.Low:
                            if (!chkFMTXRev.Checked)
                                TXFreq += fm_tx_offset_mhz; // usual case
                            else
                                TXFreq -= fm_tx_offset_mhz;
                            break;
                        case FMTXMode.High:
                            if (!chkFMTXRev.Checked)
                                TXFreq -= fm_tx_offset_mhz; // usual case
                            else
                                TXFreq += fm_tx_offset_mhz;
                            break;
                    }
                }
            } // NO TX

            //-----------------------------------------------------------------------

            if (!full_duplex)
            {
                if (tx)
                {
                    DttSP.SetCorrectIQMu(0, 0, 0.000);
                    DttSP.SetCorrectIQMu(0, 1, 0.000);

                    if (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                        DttSP.SetCorrectIQMu(2, 0, 0.000);

                    if (chkVFOATX.Checked || mute_rx1_on_vfob_tx)
                        DttSP.SetThreadProcessingMode(0, 0);

                    if (current_model == Model.FLEX1500)
                    {
#if FLEX1500_BUFFER_MUTE
                        if (hid_init && current_model == Model.FLEX1500)
                        {
                        switch (dsp.GetDSPTX(0).CurrentDSPMode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                                break;
                            default:
                                USBHID.WriteI2C2Value(0x30, 0x25, 0x00);
                                break;
                        }
                        }
#endif

                        AudioMOXChanged(tx);

                        DttSP.FlushAllBufs(0, false);

                        HdwMOXChanged(true, 0.0f);
                        // set interval based on the buffer size and mode
#if FLEX1500_BUFFER_MUTE
                        if (hid_init && current_model == Model.FLEX1500)
                        {
                            switch (dsp.GetDSPTX(0).CurrentDSPMode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                                break;
                            default:
                                CWKeyer.MuteEnqueue(new CWMuteItem(tx, CWSensorItem.GetCurrentTime() + phone_blank_time));
                                break;
                        }
                        }
#endif
                    } // if 1500

                    //else if(current_model == Model.FLEX3000)
                    else DttSP.FlushAllBufs(0, false);

                    DttSP.FlushAllBufs(1, true);
                    DttSP.SetThreadProcessingMode(1, 2);
                } // TX
            } // not full duplex mode

            /*if (tx)
            {
                t1.Stop();
                timer4 += t1.DurationMsec;
                count4++;
            }*/

            if (tx)
            {
                AudioMOXChanged(tx);
                if (current_model != Model.FLEX1500)  HdwMOXChanged(tx, freq);
            }
            else
            {
                // temporarily disable audio blanking for FLEX-1500
#if FLEX1500_BUFFER_MUTE
                if (hid_init && current_model == Model.FLEX1500)
                {
                    switch (dsp.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        break;
                    default:
                        USBHID.WriteI2C2Value(0x30, 0x25, 0x00);
                        break;
                    }
                }
#endif
                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        Audio.MOX = tx; // switch manually since ramping is already done
                        break;
                    default:
                        if (limit_slew)
                        {
                            Audio.Ramp = true;
                            int audio_buffer = (int)(block_size1 / (double)sample_rate1 * 1e3); // in ms
                            int dsp_buffer = (int)(dsp.GetDSPTX(0).BufferSize / (double)sample_rate1 * 1e3); // in ms
                            Thread.Sleep(2 * (audio_buffer + dsp_buffer));
                        }
                        else
                        {
                            Audio.MOX = tx; // switch manually since ramping is already done
                        }
                        break;
                }                

                mox = tx;
                HdwMOXChanged(tx, freq);

                AudioMOXChanged(tx);

                DttSP.SetThreadProcessingMode(1, 0);
                DttSP.FlushAllBufs(1, true);
                if (current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
                    DttSP.FlushAllBufs(2, false);
                DttSP.FlushAllBufs(0, false); 
                DttSP.SetThreadProcessingMode(0, 2);

#if FLEX1500_BUFFER_MUTE
                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.CWU:
                        break;
                    default:
                        CWKeyer.MuteEnqueue(new CWMuteItem(tx, CWSensorItem.GetCurrentTime() + phone_blank_time));
                        break;
                }
#endif
            } // NO TX


            /*if (tx)
            {
                t1.Stop();
                timer6 += t1.DurationMsec;
                count6++;

                switch (current_model)
                {
                    case Model.FLEX5000:
                    case Model.FLEX3000:
                        if (poll_pa_pwr_thread == null || !poll_pa_pwr_thread.IsAlive)
                        {
                            poll_pa_pwr_thread = new Thread(new ThreadStart(PollFWCPAPWR));
                            poll_pa_pwr_thread.Name = "Poll FWC PA PWR Thread";
                            poll_pa_pwr_thread.Priority = ThreadPriority.BelowNormal;
                            poll_pa_pwr_thread.IsBackground = true;
                            poll_pa_pwr_thread.Start();
                        }
                        break;
                    default:
                        if (pa_present)
                        {
                            if (poll_pa_pwr_thread == null || !poll_pa_pwr_thread.IsAlive)
                            {
                                poll_pa_pwr_thread = new Thread(new ThreadStart(PollPAPWR));
                                poll_pa_pwr_thread.Name = "Poll PA PWR Thread";
                                poll_pa_pwr_thread.Priority = ThreadPriority.BelowNormal;
                                poll_pa_pwr_thread.IsBackground = true;
                                poll_pa_pwr_thread.Start();
                            }
                        }
                        break;
                }
            }*/

            if (!tx) // in RX zero out PA
            {
                pa_fwd_power = 0;
                pa_rev_power = 0;
                HighSWR = false;
            }

            if (tx) UIMOXChangedTrue(); // update User Interface (i.e. meters)
            else UIMOXChangedFalse();

            /*Debug.WriteLine("1:"+(timer1/count1).ToString("f3")+
                " 2:"+(timer2/count2).ToString("f3")+
                " 3:"+(timer3/count3).ToString("f3")+
                " 4:"+(timer4/count4).ToString("f3")+
                " 5:"+(timer5/count5).ToString("f3")+
                " 6:"+(timer6/count6).ToString("f3")+
                " 7:"+(timer7/count7).ToString("f3")+
                " 8:"+(timer8/count8).ToString("f3")+
                " 9:"+(timer9/count9).ToString("f3")+
                " 10:"+(timer10/count10).ToString("f3")+
                " 11:"+(timer11/count11).ToString("f3")+
                " 12:"+(timer12/count12).ToString("f3"));*/

            /*if (!tx)
                Debug.WriteLine("1: " + timer1.ToString("f1").PadLeft(4, '0') +
                    " 2: " + timer2.ToString("f1").PadLeft(4, '0') +
                    " 3: " + timer3.ToString("f1").PadLeft(4, '0') +
                    " 4: " + timer4.ToString("f1").PadLeft(4, '0') +
                    " 5: " + timer5.ToString("f1").PadLeft(4, '0') +
                    " 6: " + timer6.ToString("f1").PadLeft(4, '0') +
                    " 7: " + timer7.ToString("f1").PadLeft(4, '0') +
                    " 8: " + timer8.ToString("f1").PadLeft(4, '0'));*/

        } // chkMOX_CHeckchanged2

		//private Thread mox_update_thread;
	//============================================================================	
		private void chkMOX_Click(object sender, System.EventArgs e)
		{
            if (chkMOX.Checked)          // because the CheckedChanged event fires first
            {
                manual_mox = true;
            }
            else
            {
                if (cat_ptt) cat_ptt = false;

                manual_mox = false;

                if (chkTUN.Checked) chkTUN.Checked = false;
            }

		} // chkMox Clicked
//====================================================================
		private void comboMeterRXMode_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if(comboMeterRXMode.Items.Count == 0 || comboMeterRXMode.SelectedIndex < 0)
			{
				current_meter_rx_mode = MeterRXMode.FIRST;
			}
			else
			{
				MeterRXMode mode = MeterRXMode.FIRST;
				switch(comboMeterRXMode.Text)
				{
					case "Signal":
						mode = MeterRXMode.SIGNAL_STRENGTH;
						break;
					case "Sig Avg":
						multimeter_avg = Display.CLEAR_FLAG;
						mode = MeterRXMode.SIGNAL_AVERAGE;
						break;
                    case "Sig Pk":      // ke9ns ADD
                        multimeter_peak = Display.CLEAR_FLAG;
                        mode = MeterRXMode.SIGNAL_PEAK;
                        break;
					case "ADC L":
						mode = MeterRXMode.ADC_L;
						break;
					case "ADC R":
						mode = MeterRXMode.ADC_R;
						break;
					case "ADC2 L":
						mode = MeterRXMode.ADC2_L;
						break;
					case "ADC2 R":
						mode= MeterRXMode.ADC2_R;
						break;
					case "Off":
						mode = MeterRXMode.OFF;
						break;
				}
				current_meter_rx_mode = mode;

				if(!mox)
				{
					switch(mode)
					{
						case MeterRXMode.SIGNAL_STRENGTH:
                        case MeterRXMode.SIGNAL_PEAK:  // ke9ns
						case MeterRXMode.SIGNAL_AVERAGE:
							lblMultiSMeter.Text = "  1   3   5   7   9  +20 +40 +60";
							break;

						case MeterRXMode.ADC_L:
						case MeterRXMode.ADC_R:
							lblMultiSMeter.Text = "-100  -80   -60   -40   -20    0";
							break;
						case MeterRXMode.OFF:
							lblMultiSMeter.Text = "";
							break;
					}
					ResetMultiMeterPeak();
				}
			}

			picMultiMeterDigital.Invalidate();

			if(comboMeterRXMode.Focused)
				btnHidden.Focus();
		}


        //======================================================================================================
		private void comboMeterTXMode_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			MeterTXMode mode = MeterTXMode.FIRST;
			if(comboMeterTXMode.Items.Count == 0 ||
				comboMeterTXMode.SelectedIndex < 0)
			{
				//current_meter_tx_mode = MeterTXMode.FIRST;
			}
			else
			{
				switch(comboMeterTXMode.Text)
				{
					case "Fwd Pwr":
						mode = MeterTXMode.FORWARD_POWER;// Foward Watts Output
						break;
					case "Ref Pwr":
						mode = MeterTXMode.REVERSE_POWER; // Reflected Watts Output
						break;
					case "Mic":
						mode = MeterTXMode.MIC;   // Microphone input dBm level adjusted from the MIXER screen
						break;
					case "EQ":
						mode = MeterTXMode.EQ;    //
						break;
					case "Leveler":
						mode = MeterTXMode.LEVELER;
						break;
					case "Lev Gain":
						mode = MeterTXMode.LVL_G;
						break;
					case "CPDR":
						mode = MeterTXMode.CPDR;
						break;
					case "ALC":
						mode = MeterTXMode.ALC;
						break;
					case "ALC Comp":
						mode = MeterTXMode.ALC_G;
						break;
					case "SWR":
						mode = MeterTXMode.SWR;
						break;
					case "Off":
						mode = MeterTXMode.OFF;
						break;
				}

				if(chkTUN.Checked)
				{
					tune_meter_tx_mode = mode;
					if(setupForm != null) setupForm.TuneMeterTXMode = mode;
				}
				current_meter_tx_mode = mode;
			}

			if(mox)
			{
				switch(mode)
				{
					case MeterTXMode.FIRST:
						lblMultiSMeter.Text = "";
						break;
					case MeterTXMode.MIC:
					case MeterTXMode.EQ:
					case MeterTXMode.LEVELER:
					case MeterTXMode.CPDR:
					case MeterTXMode.ALC:
						lblMultiSMeter.Text = "-20    -10     -5      0   1   2   3";
						break;
					case MeterTXMode.FORWARD_POWER:
					case MeterTXMode.REVERSE_POWER:
						if(pa_present ||
                            (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) || 
                            (hid_init && current_model == Model.FLEX1500))
							lblMultiSMeter.Text = "1      5     10    50   100  120+";
						else
							lblMultiSMeter.Text = "0      0.1     0.2     0.5        1.0";
						break;
					case MeterTXMode.SWR:
						lblMultiSMeter.Text = "1      1.5   2     3     5    10";
						lblMultiSMeter.Text = "0             10              20";
						break;
					case MeterTXMode.OFF:
						lblMultiSMeter.Text = "";
						break;
					case MeterTXMode.LVL_G:
					case MeterTXMode.ALC_G:
						lblMultiSMeter.Text = "0       5       10      15      20";
						break;
				}
				ResetMultiMeterPeak();
			}

			picMultiMeterDigital.Invalidate();

			if(comboMeterTXMode.Focused)
				btnHidden.Focus();

		} // combometertxmode



        //================================================================================ 
        //================================================================================ 
        // ke9ns mod to allow split of avg, avgB, avgP 
        //================================================================================ 
        //================================================================================ 
        private void chkDisplayAVG_CheckedChanged(object sender, System.EventArgs e)
		{

            if (Display.CurrentDisplayMode == DisplayMode.PANAFALL) // ke9ns pan
            {

                chkDisplayAVG.CheckedChanged -= chkDisplayAVG_CheckedChanged; // turn eventoff

                // PW_AVG 0 = water AVG follows Panadapter AVG ON/OFF
                //        1 = water AVG OFF no matter

                if ((Display.PW_AVG & 1) == 0) // 0=  avg ON waterfall if its ON panadater
                {
                 
                    if (chkDisplayAVG.Checked == false)   // if AVG on both panadapter and waterfall and you click the avg button then do below
                    {
                        // AVG ONLY ON PANADAPTER
                        Display.PW_AVG = 1;             // waterfall avg OFF 
                        chkDisplayAVG.Checked = true;   // Panadapter avg ON (keeping the button ON)
                        chkDisplayAVG.Text = "AvgP"; // ke9ns 

                    }
                    else // true
                    {
                        // AVG ON FULL PANAFALL
                      //  Debug.WriteLine("dhdkd===");
                        Display.PW_AVG = 0;             // waterfall avg ON    
                        chkDisplayAVG.Checked = true;   // Panadapter avg ON  (simply flipping the button ON)
                        chkDisplayAVG.Text = "AvgB"; // ke9ns 
                    }

                }
                else //  1=panafall mode, and waterfall AVG OFF 
                {
              
                    if (chkDisplayAVG.Checked == false)   // if AVG on both panadapter and waterfall and you click the avg button then do below
                    {
                        // TURN OFF ALL AVG 
                        Display.PW_AVG = 0;             // waterfall avg OFF 
                        chkDisplayAVG.Checked = false;   // Panadapter avg OFF (keeping the button ON)
                        chkDisplayAVG.Text = "Avg"; // ke9ns 

                    }
                    else // true  (pw_avg=1 and panafall mode and button was OFF, now ON) impossibility
                    {

                        Display.PW_AVG = 0;             // waterfall avg ON    
                        chkDisplayAVG.Checked = true;   // Panadapter avg ON  (simply flipping the button ON)
                        chkDisplayAVG.Text = "Avg"; // ke9ns 
                    }

                } //

                chkDisplayAVG.CheckedChanged += chkDisplayAVG_CheckedChanged; // turn event back on


            } // in panafallmode ?


            Display.AverageOn = chkDisplayAVG.Checked; // Tell display avg is turned on or off

			if(chkDisplayAVG.Checked)
			{
                chkDisplayAVG.BackColor = button_selected_color;
			}
			else
			{
     			chkDisplayAVG.BackColor = SystemColors.Control;
            }
			
			if(chkDisplayAVG.Checked)
			{
				switch(Display.CurrentDisplayMode)
				{
					case DisplayMode.PANADAPTER:
					case DisplayMode.HISTOGRAM:
					case DisplayMode.SPECTRUM:
					case DisplayMode.WATERFALL:
					case DisplayMode.PANAFALL:
					case DisplayMode.PANASCOPE:
						btnZeroBeat.Enabled = true; // only allow zerobeat when avg is on 
						break;
					default:
						btnZeroBeat.Enabled = false;
						break;
				}
			}
			else btnZeroBeat.Enabled = false;

        } // chkDisplayAVG_CheckedChanged


          //==========================================================================
        private void chkDisplayPeak_CheckedChanged(object sender, System.EventArgs e)
		{
			Display.PeakOn = chkDisplayPeak.Checked;
			if(chkDisplayPeak.Checked)
			{
				chkDisplayPeak.BackColor = button_selected_color;
			}
			else
			{
				chkDisplayPeak.BackColor = SystemColors.Control;
			}			
		}

		private void chkSquelch_CheckedChanged(object sender, System.EventArgs e)
		{
            if (rx1_dsp_mode == DSPMode.FM && !chkSquelch.Checked)  chkSquelch.Checked = true; 

			dsp.GetDSPRX(0, 0).RXSquelchOn = chkSquelch.Checked;
			dsp.GetDSPRX(0, 1).RXSquelchOn = chkSquelch.Checked;
		}


        //======================================================================================================
        // ke9ns mod   tune function too loud in MON (turn down when in tune) BUT 6/12/16 observe MUT button when on

        private MeterTXMode old_tune_meter_tx_mode;
     //   private DSPMode old_Mode;  // ke9ns add

		private void chkTUN_CheckedChanged(object sender, System.EventArgs e)
		{

            if (chkTUN.Checked)
			{
				if(!chkPower.Checked)
				{
					MessageBox.Show("Power must be on to turn on the Tune function.",
						"Power is off",
						MessageBoxButtons.OK,
						MessageBoxIcon.Hand);
					chkTUN.Checked = false;
					return;
				}

                if (chkNoiseGate.Checked)  dsp.GetDSPTX(0).TXSquelchOn = false;

                
                 tuning = true;

                 setupForm.chkBoxPulser.Enabled = false;               // ke9ns add dont allow changing pulser while in tune mode

               

                chkTUN.BackColor = button_selected_color;

				if(current_meter_tx_mode != tune_meter_tx_mode) // ke9ns switch meters if needed when keyed up
				{
					old_tune_meter_tx_mode = current_meter_tx_mode;
					CurrentMeterTXMode = tune_meter_tx_mode;
					comboMeterTXMode_SelectedIndexChanged(this, EventArgs.Empty);
				}

                    switch (Audio.TXDSPMode)
                    {
                        case DSPMode.USB:
                        case DSPMode.CWU:
                        case DSPMode.DIGU:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                        case DSPMode.LSB:
                        case DSPMode.CWL:
                        case DSPMode.DIGL:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, -cw_pitch - 100, -cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                        case DSPMode.DSB:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                        case DSPMode.AM:
                        case DSPMode.SAM:
                        case DSPMode.FM:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                    }

                    DttSP.SetMode(1, 0, DSPMode.DIGU);

                    // ensure radio believes we are in CW for tx freq limits
                    if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                    {
                        switch (Audio.TXDSPMode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.LSB:
                            case DSPMode.DIGL:
                                FWC.SetTXDSPMode(DSPMode.CWL);

                                break;
                            default:
                                FWC.SetTXDSPMode(DSPMode.CWU);
                                break;
                        }
                    }
               


                PreviousPWR = ptbPWR.Value;


                if (!xvtr_tune_power || tx_xvtr_index < 0)  PWR = tune_power;

				if(!chkVFOSplit.Checked && !chkVFOBTX.Checked)
				{
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				}
				else
				{
					if(chkVFOBTX.Checked)	txtVFOBFreq_LostFocus(this, EventArgs.Empty);
					else // split is on
					{
						if(!chkRX2.Checked)
							txtVFOBFreq_LostFocus(this, EventArgs.Empty);
						else
							txtVFOABand_LostFocus(this, EventArgs.Empty);
					}
				}

            
                    chkMOX.Checked = true;

                    if (!mox)
                    {
                        chkTUN.Checked = false;
                        return;
                    }
                    current_ptt_mode = PTTMode.MANUAL;

                    switch (Audio.TXDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.CWU:
                            Audio.TXDSPMode = DSPMode.DIGU;
                            break;
                    }
           

		
				if((atu_present) && (tx_band != Band.B2M) && ((ATUTuneMode)comboTuneMode.SelectedIndex != ATUTuneMode.BYPASS))
				{
                    Debug.WriteLine("TUNNING in TUN mode");

                    chkTUN.Enabled = false;
					comboTuneMode.Enabled = false;

					Thread t = new Thread(new ThreadStart(Tune));
					t.IsBackground = true;
                    t.Priority = ThreadPriority.Normal;
					t.Name = "TUN Thread";
					t.Start();
				}

                if (chkMUT.Checked == false) // ke9ns add prevent MUT from malfunctioning
                {
                    Audio.MonitorVolume = (ptbAF.Value / 100.0) / 10;  // ke9ns add cut volume during a tune
                  
                }
                else
                {
                    if (chkBoxMuteSpk.Checked == false) // ke9ns add
                    {
                        Audio.MonitorVolume = 0.0; // if muted
                      
                    }
                    else
                    {
                      //  Debug.WriteLine("check...");

                    }
                }

                //---------------------------------
                // ke9ns add pulser code

                if ((setupForm != null) && (setupForm.chkBoxPulser.Checked == true) && (PulseON == false))
                {

                    PulseON = true;   // set 1 time
                
                    Last_PR = 0.0;
                 
                    PR = (1000.0 / (double)setupForm.tbPulseRate1.Value);  // valuse from 25 to 50 mSec
                    DC = ((double)setupForm.tbDutyCycle.Value / 100.0);   // value from .1 to .9
                    DCOFF = (PR * DC); // so if PR = 25msec, then at 20%  DCOFF = 30msec , so on every 25msec and stay on for 5msec more each time

                
                

                } // turn pulser ON


                //---------------------------------

                return;

			} // chkTUN = true
			else
			{
                setupForm.chkBoxPulser.Enabled = true; // ke9ns add 

            

                if (timerID != 0)  // ke9ns add
                {
                   
                    timeKillEvent(timerID);     // turn pulser OFF
                }

                if (timerID1 != 0)  // ke9ns add
                {
                    timeKillEvent(timerID1);
                }

                PulseON = false; // ke9ns add

                Audio.TXInputSignal = Audio.SignalSource.RADIO;
                //Audio.RampDown = true;
                Thread.Sleep(50);

				chkMOX.Checked = false;
				chkTUN.BackColor = SystemColors.Control;
				tuning = false;

                if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                else
                {
                    if (chkVFOBTX.Checked)
                        txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                    else // split is on
                    {
                        if (!chkRX2.Checked)
                            txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        else
                            txtVFOABand_LostFocus(this, EventArgs.Empty);
                    }
                }

				if(!(atu_present && tx_band != Band.B2M && (ATUTuneMode)comboTuneMode.SelectedIndex != ATUTuneMode.BYPASS))
				{
					if(tx_xvtr_index < 0 || xvtr_tune_power) TunePower = ptbPWR.Value;
				}


                PWR = PreviousPWR;


                DSPMode mode = dsp.GetDSPTX(0).CurrentDSPMode;

                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                FWC.SetTXDSPMode(mode);

				DttSP.SetMode(1, 0, mode);
				switch(mode)
				{
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						Audio.SineFreq1 = cw_pitch;
						break;
					case DSPMode.CWL:
					case DSPMode.CWU:
						Audio.TXDSPMode = mode;
						break;
				}

				DttSP.SetTXFilter(1, dsp.GetDSPTX(0).TXFilterLow, dsp.GetDSPTX(0).TXFilterHigh);

				if(tune_meter_tx_mode != old_tune_meter_tx_mode)					
					CurrentMeterTXMode = old_tune_meter_tx_mode;

                if (chkNoiseGate.Checked)
                    dsp.GetDSPTX(0).TXSquelchOn = true;

                if (chkMUT.Checked == false) // ke9ns add prevent MUT from malfunctioning
                {
                    Audio.MonitorVolume = ptbAF.Value / 100.0; // ke9ns add to bring volume back up when done
                }


            } // chkTUN not


        } // chkTUN_checkchanged

      

        //==================================================================================================================
        // ke9ns Tone Pulser routine for timing (setup tbDutyCycle 10 to 90% , and tbPulseRate = 20 to 40 pulses/second )
        //

        public bool PulseON = false; // Tone ON = true, Tone OFF = false
           
        double PR = 0.0;
        double DC = 0.0;
        double DCOFF = 0.0;

        double Last_PR = 0.0;

        private bool setkey_memory = false;
        private bool setptt_memory = false;

        //==========================================================================================
        // ke9ns add  PTT radio on/off
        private void setptt(bool state)
        {
            if (setptt_memory != state)
            {
                CWPTTItem item = new CWPTTItem(state, CWSensorItem.GetCurrentTime());
                CWKeyer.PTTEnqueue(item);

                 setptt_memory = state;
            }
            //			if (newptt) Thread.Sleep(200);
        } //  setptt

        //==========================================================================================
        // ke9ns add  key radio on/off
        private void setkey(bool state)                 // ke9ns   This is the CW key signal back to the flex radio itself
        {
           if (setkey_memory != state)                                          // only allow this to happen 1 time if state stays the same (once to turn ON, once to turn OFF)
            {
                CWSensorItem item = new CWSensorItem(CWSensorItem.InputType.StraightKey, state);
                CWKeyer.SensorEnqueue(item);
 
                setkey_memory = state;
            }
        }  // setkey


        //==========================================================================================
        // ke9ns add  precision msec multimedia timers
        // Pulser timer
        private void TimerPeriodicEventCallback(int id, int msg, int user, int param1, int param2)
        {
    
            setup_timer1((int)DCOFF); // set duty cycle timer now

             Audio.SourceScale = 1.0;  // turn on audio during this portion
         
          //  setkey(true);
     

        } // TimerPeriodicEventCallback

        //==========================================================================================
        // ke9ns add precision msec multimedia timers  (ONE SHOT)
        // DUTY timers
        private void TimerPeriodicEventCallback1(int id, int msg, int user, int param1, int param2)
        {
              Audio.SourceScale = 0.0; // turn off audio during this portion
      
         //   setkey(false);

         
            // look for changes in the sliders for Pulses/second and duty
            PR = (1000.0 / (double)setupForm.tbPulseRate1.Value);  // value from 25 to 50 mSec
            DC = ((double)setupForm.tbDutyCycle.Value / 100.0);   // value from .1 to .9
            DCOFF = (PR * DC); // so if PR = 25msec, then at 20%  DCOFF = 30msec , so on every 25msec and stay on for 5msec more each time

            if (Last_PR != PR)
            {
                setup_timer((int)PR);
                Last_PR = PR;
            }

           
        } // TimerPeriodicEventCallback1

     

        //==================================================================================================================
        private void comboTuneMode_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if(atu_present)
			{
				if(comboTuneMode.SelectedIndex == (int)ATUTuneMode.BYPASS)
				{
                  //  if(current_model == Model.SDR1000)    					Hdw.PA_ATUTune(ATUTuneMode.BYPASS);	
					tuned_band = Band.FIRST;
					if(chkTUN.BackColor == button_selected_color)
						chkTUN.BackColor = SystemColors.Control;
				}
			}

			if(comboTuneMode.Focused)
				btnHidden.Focus();
		}

		private void HideFocus(object sender, EventArgs e)
		{
			btnHidden.Focus();
		}

		private void chkVFOLock_CheckedChanged(object sender, System.EventArgs e)
		{
			VFOLock = chkVFOLock.Checked;

			if(chkVFOLock.Checked)
				chkVFOLock.BackColor = button_selected_color;
			else
				chkVFOLock.BackColor = SystemColors.Control;

            /*for (int i = 0; i < 20; i++)
            {
                FWC.SetRX1FreqTW((uint)i, (float)i);
            }*/
		}

        public bool meterPause = false; // ke9ns add true=pause image pointer rotate when updating image of buttons

        private void btnBandVHF_Click(object sender, System.EventArgs e)  // ke9ns hf screen click on VHF button
        {
            meterPause = true;

            panelBandVHF.Visible = true;

            panelBandHF.Visible = false;
            panelBandGN.Visible = false; // ke9ns add

           // panelBandGN.Invalidate(); // ke9ns add
           // panelBandHF.Invalidate(); // ke9ns add
            panelBandVHF.Invalidate(); // ke9ns add forces a paint

            meterPause = false;

        }

		private void btnBandHF_Click(object sender, System.EventArgs e) // ke9ns vhf screen click on HF button  (or GEN screen click on btnBandHF1  HF button)
		{

            meterPause = true; // ke9ns add to pause rotateimage

            panelBandHF.Visible = true;

            panelBandGN.Visible = false; // ke9ns add
            panelBandVHF.Visible = false;

          //  panelBandVHF.Invalidate(); // ke9ns add
         //   panelBandGN.Invalidate(); // ke9ns add
            panelBandHF.Invalidate(); // ke9ns add

            meterPause = false; // ke9ns add to pause rotateimage

        }

        private void btnBandGEN_Click(object sender, EventArgs e) // ke9ns add hf screen click on GEN button
        {

            meterPause = true; // ke9ns add to pause rotateimage


            panelBandGN.Visible = true; // ke9ns add
            panelBandVHF.Visible = false;
            panelBandHF.Visible = false;

          //  panelBandVHF.Invalidate(); // ke9ns add
          //  panelBandHF.Invalidate(); // ke9ns add
            panelBandGN.Invalidate(); // ke9ns add

            meterPause = false; // ke9ns add to pause rotateimage

        }

        private void udFilterLow_LostFocus(object sender, EventArgs e)
		{
			udFilterLow_ValueChanged(sender, e);
		}

		private void udFilterHigh_LostFocus(object sender, EventArgs e)
		{
			udFilterHigh_ValueChanged(sender, e);
		}

		private void udRIT_LostFocus(object sender, EventArgs e)
		{
			udRIT_ValueChanged(sender, e);
		}

		private void udXIT_LostFocus(object sender, EventArgs e)
		{
			udXIT_ValueChanged(sender, e);
		}

		private void DateTime_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if(current_datetime_mode + 1 == DateTimeMode.LAST) CurrentDateTimeMode = DateTimeMode.OFF;
			else CurrentDateTimeMode = current_datetime_mode + 1;

            btnHidden.Focus();
        }

		private void chkSR_CheckedChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.SpurReduction = chkSR.Checked;
			if(chkEnableMultiRX.Checked) txtVFOBFreq_LostFocus(this, EventArgs.Empty);
			if(chkSR.Checked) chkSR.BackColor = button_selected_color;
			else chkSR.BackColor = SystemColors.Control;

            tempVFOAFreq = VFOAFreq; // ke9ns add
            CTUN1_HZ = 0; // ke9ns add when changing SR, reset CTUN

            CalcDisplayFreq();
		}

		private void btnChangeTuneStepSmaller_Click(object sender, System.EventArgs e)
		{
			ChangeTuneStepDown();
		}

		private void btnChangeTuneStepLarger_Click(object sender, System.EventArgs e)
		{
			ChangeTuneStepUp();
		}

		private void comboTXProfile_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if(setupForm == null || initializing) return;

            setupForm.TXProfile = comboTXProfile.Text;
			
            if(comboDigTXProfile.Text != comboTXProfile.Text)
				comboDigTXProfile.Text = comboTXProfile.Text;

            if(comboFMTXProfile.Text != comboTXProfile.Text)
                comboFMTXProfile.Text = comboTXProfile.Text;

            if (comboCWTXProfile.Text != comboTXProfile.Text)
                comboCWTXProfile.Text = comboTXProfile.Text;

            UpdateDisplay();

			if(comboTXProfile.Focused) btnHidden.Focus();
		}

		private void comboDigTXProfile_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if(setupForm == null || initializing) return;
			setupForm.TXProfile = comboDigTXProfile.Text;

			if(comboTXProfile.Text != comboDigTXProfile.Text)
				comboTXProfile.Text = comboDigTXProfile.Text;

            if(comboFMTXProfile.Text != comboTXProfile.Text)
                comboFMTXProfile.Text = comboTXProfile.Text;

            if (comboCWTXProfile.Text != comboTXProfile.Text)
                comboCWTXProfile.Text = comboTXProfile.Text;
            UpdateDisplay();

			if(comboDigTXProfile.Focused) btnHidden.Focus();
		}

        // ke9ns add
        private void comboCWTXProfile_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (setupForm == null || initializing) return;
            setupForm.TXProfile = comboCWTXProfile.Text;

            if (comboTXProfile.Text != comboDigTXProfile.Text)
                comboTXProfile.Text = comboDigTXProfile.Text;

            if (comboFMTXProfile.Text != comboTXProfile.Text)
                comboFMTXProfile.Text = comboTXProfile.Text;

           if (comboCWTXProfile.Text != comboTXProfile.Text)
                comboCWTXProfile.Text = comboTXProfile.Text;

            UpdateDisplay();

            if (comboCWTXProfile.Focused) btnHidden.Focus();
        } // comboCWTXProfile_SelectedIndexChanged


        private void comboFMTXProfile_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (setupForm == null || initializing) return;
            setupForm.TXProfile = comboFMTXProfile.Text;

            if (comboTXProfile.Text != comboDigTXProfile.Text)
                comboTXProfile.Text = comboDigTXProfile.Text;

            if (comboDigTXProfile.Text != comboTXProfile.Text)
                comboDigTXProfile.Text = comboTXProfile.Text;

            if (comboCWTXProfile.Text != comboTXProfile.Text)
                comboCWTXProfile.Text = comboTXProfile.Text;
            UpdateDisplay();

            if (comboFMTXProfile.Focused) btnHidden.Focus();
        }

		private void chkShowTXFilter_CheckedChanged(object sender, System.EventArgs e)
		{
            if (chkShowTXFilter.Checked)
            {
                chkShowDigTXFilter.Checked = true;
            }
            else chkShowDigTXFilter.Checked = false;
            Display.DrawTXFilter = chkShowTXFilter.Checked;
		}

        private void chkShowDigTXFilter_CheckedChanged(object sender, System.EventArgs e)
        {
            if (chkShowDigTXFilter.Checked)
            {
                chkShowTXFilter.Checked = true;
            }
            else chkShowTXFilter.Checked = false;
        }

		private void mnuFilterReset_Click(object sender, System.EventArgs e)
		{
			DialogResult dr = MessageBox.Show(
				"Are you sure you want to reset all RX1 custom filter settings to the default?",
				"Reset Filters?",
				MessageBoxButtons.YesNo,
				MessageBoxIcon.Question);

			if(dr == DialogResult.No) return;

			InitFilterPresets(rx1_filters);

			radFilter1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F1);
			radFilter2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F2);
			radFilter3.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F3);
			radFilter4.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F4);
			radFilter5.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F5);
			radFilter6.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F6);
			radFilter7.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F7);
			radFilter8.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F8);
			radFilter9.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F9);
			radFilter10.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F10);
			radFilterVar1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR1);
			radFilterVar2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR2);
			RX1Filter = rx1_filter;

			if(filterRX1Form != null && !filterRX1Form.IsDisposed)
			{
				filterRX1Form.DSPMode = rx1_dsp_mode;
			}
		}

		private void menuItemRX2FilterReset_Click(object sender, System.EventArgs e)
		{
			DialogResult dr = MessageBox.Show(
				"Are you sure you want to reset all RX2 custom filter settings to the default?",
				"Reset Filters?",
				MessageBoxButtons.YesNo,
				MessageBoxIcon.Question);

			if(dr == DialogResult.No) return;

			InitFilterPresets(rx2_filters);

			radRX2Filter1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F1);
			radRX2Filter2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F2);
			radRX2Filter3.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F3);
			radRX2Filter4.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F4);
			radRX2Filter5.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F5);
			radRX2Filter6.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F6);
			radRX2Filter7.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F7);
			radRX2FilterVar1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR1);
			radRX2FilterVar2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR2);
			RX2Filter = rx2_filter;

			if(filterRX2Form != null && !filterRX2Form.IsDisposed)
			{
				filterRX2Form.DSPMode = rx2_dsp_mode;
			}
		}

        private void mnuFlexControl_Click(object sender, EventArgs e)
        {
            switch (current_flexcontrol_mode)
            {
                case FlexControlMode.Basic:
                    if (flexControlBasicForm == null || flexControlBasicForm.IsDisposed)
                        flexControlBasicForm = new FlexControlBasicForm(this);
                    flexControlBasicForm.Show();
                    flexControlBasicForm.Focus();
                 //   flexControlBasicForm.WindowState = FormWindowState.Normal; // ke9ns add to allow clicking the menu item name to bring the screen back up from the windows tray
                    break;
                case FlexControlMode.Advanced:
                    if (flexControlAdvancedForm == null || flexControlAdvancedForm.IsDisposed)
                        flexControlAdvancedForm = new FlexControlAdvancedForm(this);
                    flexControlAdvancedForm.Show();
                    flexControlAdvancedForm.Focus();
                //    flexControlAdvancedForm.WindowState = FormWindowState.Normal; // ke9ns add
                    break;
            }
        }

		private void chkVACStereo_CheckedChanged(object sender, System.EventArgs e)
		{
            if (setupForm != null)
            {
                if (!(chkRX2.Checked && chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    setupForm.VACStereo = chkVACStereo.Checked;
                    vac_stereo = chkVACStereo.Checked;
                }
                else
                {
                    setupForm.VAC2Stereo = chkVACStereo.Checked;
                    vac2_stereo = chkVACStereo.Checked;
                }
            }
		}

		private void chkCWIambic_CheckedChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.CWIambic = chkCWIambic.Checked;
		}

		private void chkCWSidetone_CheckedChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.CWDisableMonitor = chkCWSidetone.Checked;
		}

        //===============================================================
		public void udCWPitch_ValueChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.CWPitch = (int)udCWPitch.Value;
			if(udCWPitch.Focused) btnHidden.Focus();
		}

		private void comboVACSampleRate_SelectedIndexChanged(object sender, System.EventArgs e)
		{
            if (setupForm != null)
            {
                if (!(chkRX2.Checked && chkVAC2.Checked && chkVFOBTX.Checked))
                {
                    setupForm.VACSampleRate = comboVACSampleRate.Text;
                    vac_sample_rate = comboVACSampleRate.Text;
                }
                else
                {
                    setupForm.VAC2SampleRate = comboVACSampleRate.Text;
                    vac2_sample_rate = comboVACSampleRate.Text;
                }

            }
			if(comboVACSampleRate.Focused) btnHidden.Focus();
		}

		private void chkX2TR_CheckedChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.X2TR = chkX2TR.Checked;

			if(chkX2TR.Checked) chkX2TR.BackColor = button_selected_color;
			else chkX2TR.BackColor = SystemColors.Control;
		}

		private void chkShowTXCWFreq_CheckedChanged(object sender, System.EventArgs e)
		{
			Display.DrawTXCWFreq = chkShowTXCWFreq.Checked;
		}

		private void chkCWBreakInEnabled_CheckedChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.BreakInEnabled = chkCWBreakInEnabled.Checked;
			if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
				FWC.SetBreakIn(chkCWBreakInEnabled.Checked);
		}

		private void udCWBreakInDelay_ValueChanged(object sender, System.EventArgs e)
		{
			if(setupForm != null) setupForm.BreakInDelay = (int)udCWBreakInDelay.Value;
            if (udCWBreakInDelay.Focused)
                btnHidden.Focus();
		}

		private void udCWBreakInDelay_LostFocus(object sender, System.EventArgs e)
		{
			udCWBreakInDelay_ValueChanged(sender, e);
		}

        public void DisableDAX()
        {
            // disable VAC on console. dax_audio_enum = false by default
            chkVAC1.Checked = false;
            chkVAC1.Enabled = false;
            chkVAC2.Checked = false;
            chkVAC2.Enabled = false;
        }

        public void EnableDAX()
        {
            // enable VAC on console
            chkVAC1.Enabled = true;
            chkVAC2.Enabled = true;  // was false set to true later if RX2 installed 
            dax_audio_enum = true;  
        }

      //=====================================================================================  
        private void chkVAC1_CheckedChanged(object sender, System.EventArgs e)
		{		
			if(setupForm != null) setupForm.VACEnable = chkVAC1.Checked;

            if (chkVAC1.Checked)
            {
                chkVAC1.BackColor = button_selected_color;
                
                if (chkVOX.Checked)
                {
                    chkVOX.Checked = false;
                    if (setupForm != null) setupForm.VOXEnable = chkVOX.Checked;
                    Audio.VOXActive = false;
                    chkVOX.BackColor = SystemColors.Control;
                    
                }
            }
            else chkVAC1.BackColor = SystemColors.Control;

		} // VAC1 clicked


        //================================================================================================
        //  ke9ns mute works on this but not on vac1 
        //================================================================================================
        private void chkVAC2_CheckedChanged(object sender, EventArgs e)
        {
            if (setupForm != null) setupForm.VAC2Enable = chkVAC2.Checked;  // ke9ns if you check vac2 from setup form then update here as well

            //  if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK || !chkRX2.Checked)

           if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK || !chkRX2.Checked)
            {
               if (chkVOX.Checked)
               {
                    chkVOX.Checked = false;
                  if (setupForm != null) setupForm.VOXEnable = chkVOX.Checked;
                    Audio.VOXActive = false;
                   chkVOX.BackColor = SystemColors.Control;
               }

               return;
            }


            if (chkVFOBTX.Checked)
            {
                if (chkVAC2.Checked)
                {
                    ptbVACRXGain.Value = vac2_rx_gain;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);

                    ptbVACTXGain.Value = vac2_tx_gain;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);

                    comboVACSampleRate.Text = vac2_sample_rate;

                    chkVACStereo.Checked = vac2_stereo;
                }
                else
                {
                    ptbVACRXGain.Value = vac_rx_gain;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);

                    ptbVACTXGain.Value = vac_tx_gain;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);

                    comboVACSampleRate.Text = vac_sample_rate;

                    chkVACStereo.Checked = vac_stereo;
                }
            }

            if (chkVAC2.Checked)
            {
                chkVAC2.BackColor = button_selected_color;

                if (chkVOX.Checked)
                {
                    chkVOX.Checked = false;
                    if (setupForm != null) setupForm.VOXEnable = chkVOX.Checked;
                    Audio.VOXActive = false;
                    chkVOX.BackColor = SystemColors.Control;
                }
                
            }
            else chkVAC2.BackColor = SystemColors.Control;

        } // chkVAC2



        private void chkRXEQ_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkRXEQ.Checked) chkRXEQ.BackColor = button_selected_color;
			else chkRXEQ.BackColor = SystemColors.Control;
			if(eqForm != null) eqForm.RXEQEnabled = chkRXEQ.Checked;
		}

		private void chkTXEQ_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkTXEQ.Checked) chkTXEQ.BackColor = button_selected_color;
			else chkTXEQ.BackColor = SystemColors.Control;
			if(eqForm != null) eqForm.TXEQEnabled = chkTXEQ.Checked;
		}

		private void chkBCI_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkBCI.Checked)
				chkBCI.BackColor = button_selected_color;
			else
				chkBCI.BackColor = SystemColors.Control;
			
          //  if(current_model == Model.SDR1000)                SetHWFilters(dds_freq);
		}

        public bool CheckForTXCW()
        {
            if (!cw_semi_break_in_enabled) return false;
            DSPMode tx_mode = rx1_dsp_mode;
            if (chkVFOBTX.Checked && chkRX2.Checked) tx_mode = rx2_dsp_mode;

            bool ret_val = false;

            switch (tx_mode)
            {
                case DSPMode.CWL:
                case DSPMode.CWU:
                    ret_val = true;
                    break;
                default:
                    ret_val = false;
                    break;
            }

            return ret_val;
        }

#endregion

#region VFO Events

		private enum TuneLocation
		{
			VFOA = 0,
			VFOB,
			VFOASub,
			DisplayBottom,
			Other,
		}


        //==================================================================================================
        // ke9ns mod
        private TuneLocation TuneHitTest(int x, int y)
		{
            //---------------------------------------------------------------------------
            //---------------------------------------------------------------------------
            // ke9ns add  to allow proper click to tune operation between Rx1 and rx2

       /*   
            if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled))
            {

                if ((Display.K9 == 5) && (Display.K10 != 5))  // to help RX2 pan display in 1/3 instead of 1/2
                {
                     H7 = picDisplay.Height * 2 / 3;
                }
                else if ((Display.K9 == 5) && (Display.K10 == 5)) // to help RX2 pan display in 1/4 instead of 1/2
                {
                     H7 = picDisplay.Height / 2;
                }
                else if (Display.K9 == 7) // special panafall mode for grayline tracking
                {
                    H7 = picDisplay.Height * 5 / 6;
                }
                else
                {
                     H7 = picDisplay.Height / 2; // ke9ns this was standard
                }

            }
            else
            {
                H7 = picDisplay.Height / 2; // ke9ns this was standard
            }
            //--------------------------------------------------------------------------------
*/

            int left, right, top, bottom;

            left = grpVFOA.Left + txtVFOAFreq.Left;
			right = left + txtVFOAFreq.Width;
			top = grpVFOA.Top + txtVFOAFreq.Top;
			bottom = top + txtVFOAFreq.Height;

            if (x > left && x < right && y > top && y < bottom)	return TuneLocation.VFOA;

			left = grpVFOB.Left+txtVFOBFreq.Left;
			right = left + txtVFOBFreq.Width;
			top = grpVFOB.Top+txtVFOBFreq.Top;
			bottom = top + txtVFOBFreq.Height;

            if (x > left && x < right && (y > top) && (y < bottom)&&(Display.CurrentDisplayModeBottom != DisplayMode.OFF))	return TuneLocation.VFOB; // ke9ns mod

			left = grpVFOA.Left + txtVFOABand.Left;
			right = left + txtVFOABand.Width;
			top = grpVFOA.Top + txtVFOABand.Top;
			bottom = top + txtVFOABand.Height;
			if(x > left && x < right &&	y > top && y < bottom)	return TuneLocation.VFOASub;

			left = panelDisplay.Left + picDisplay.Left;
			right = left + picDisplay.Width;
            top = panelDisplay.Top + picDisplay.Top + H7; // ke9ns mod
			bottom = top + H7; // ke9ns mod
			if((x > left) &&( x < right) &&( y > top) &&( y < bottom) && (Display.CurrentDisplayModeBottom != DisplayMode.OFF))	return TuneLocation.DisplayBottom; // ke9ns mod

			return TuneLocation.Other;

        } // TuneLocation TuneHitTest

        private void Console_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)
		{
            //			if(this.ActiveControl is TextBoxTS && this.ActiveControl != txtVFOAFreq
            //				&& this.ActiveControl != txtVFOBFreq) return;
            //			if(this.ActiveControl is NumericUpDownTS) return;


            if (CTUN == true)
            {
                if (e.Delta == 0) return;
                int mousewheel = (e.Delta > 0 ? 1 : -1); // 1 per click

                if ((Display.CurrentDisplayMode == DisplayMode.PANADAPTER) || (Display.CurrentDisplayMode == DisplayMode.PANAFALL) || (Display.CurrentDisplayMode == DisplayMode.PANASCOPE) || (Display.CurrentDisplayMode == DisplayMode.WATERFALL))
                {
                   UPDATEOFF = 2; // ke9ns let system know not to update screen for a little while pan
                }
                
              
                if (mousewheel < 0)
                {
                    CTUN1_HZ = CTUN1_HZ - CurrentTuneStepHz;// ke9ns add allow bandpass window to scroll across display instead of display freq scroll under bandpass.
                    tempVFOAFreq = VFOAFreq - (double)CurrentTuneStepHz / 1e6; // vfoafreq in mhz
                    CalcDisplayFreq(); // ke9ns keep display from moving

                }
                else // value >= 0
                {

                    CTUN1_HZ = CTUN1_HZ + CurrentTuneStepHz;// ke9ns add allow bandpass window to scroll across display instead of display freq scroll under bandpass.
                    tempVFOAFreq = VFOAFreq + (double)CurrentTuneStepHz / 1e6;
                    CalcDisplayFreq(); // ke9ns keep display from moving

                }
             //   Debug.WriteLine("CTUN=" + CTUN1_HZ);

                return;

               

            } // ctun mode

            if (this.ActiveControl is TextBoxTS ||
				this.ActiveControl is NumericUpDownTS ||
				this.ActiveControl is TrackBarTS)
			{
				Console_KeyPress(this, new KeyPressEventArgs((char)Keys.Enter));
				return;
			}


            if(e.Delta == 0) return;

            int num_steps = (e.Delta > 0 ? 1 : -1);	// 1 per click
			
			if(vfo_char_width == 0)	GetVFOCharWidth();
			
			if (num_steps == 0) return;

            int step = CurrentTuneStepHz;
            if (shift_down && step >= 10) step /= 10;

			switch(TuneHitTest(e.X, e.Y))
			{
				case TuneLocation.VFOA:
					double freq = double.Parse(txtVFOAFreq.Text);
					double mult = 1000.0;
					int right = grpVFOA.Left + txtVFOAFreq.Left + txtVFOAFreq.Width;
					if(vfoa_hover_digit < 0)
					{
						int x = right + 2 - (vfo_pixel_offset - 5); //ke9ns was    right + 2 - (vfo_pixel_offset - 5);

                        while (x < e.X && mult > 0.0000011)
						{
							mult /= 10.0;
							x += vfo_char_width;
							if(mult == 1.0)
								x += vfo_decimal_space;
							else x += vfo_char_space;
						}
					}
					else
					{
						mult = Math.Pow(10, -vfoa_hover_digit) * 1000.0;
					}

					if(mult <= 1.0)
					{
						freq += mult*num_steps;
						//Debug.WriteLine("freq: "+freq.ToString("f6"));
						VFOAFreq = freq;
					}
					break;

				case TuneLocation.VFOB:
					freq = double.Parse(txtVFOBFreq.Text);
					mult = 1000.0;
					right = grpVFOB.Left + txtVFOBFreq.Left + txtVFOBFreq.Width;
					if(vfob_hover_digit < 0)
					{
						int x = right + 2 - (vfo_pixel_offset - 5);
						while(x < e.X && mult > 0.0000011)
						{
							mult /= 10;
							x += vfo_char_width;
							if(mult == 1.0)
								x += vfo_decimal_space;
							else x += vfo_char_space;
						}
					}
					else
					{
						mult = Math.Pow(10, -vfob_hover_digit)*1000.0;
					}

					if(mult <= 1.0)
					{
						freq += mult*num_steps;
						VFOBFreq = freq;
					}
					break;
			
				case TuneLocation.VFOASub:
					if(rx2_enabled && (chkEnableMultiRX.Checked || chkVFOSplit.Checked))
					{
						freq = VFOASubFreq;
						mult = 1000.0;
						right = grpVFOA.Left + txtVFOABand.Left + txtVFOABand.Width;
						if(vfoa_sub_hover_digit < 0)
						{
							int x = right + 2 - (vfo_sub_pixel_offset - 5);
							while(x < e.X && mult > 0.0000011)
							{
								mult /= 10;
								x += vfo_sub_char_width;
								if(mult == 1.0)
									x += vfo_sub_decimal_space;
								else x += vfo_sub_char_space;
							}
						}
						else
						{
							mult = Math.Pow(10, -vfoa_sub_hover_digit)*1000.0;
						}

						if(mult <= 1.0)
						{
							freq += mult*num_steps;
							VFOASubFreq = freq;
						}
					}
					else
					{
                        VFOAFreq = SnapTune(VFOAFreq, step, num_steps);
					}
					break;

				case TuneLocation.DisplayBottom:
                    if (rx2_enabled && chkVFOSplit.Checked && current_click_tune_mode == ClickTuneMode.VFOB && wheel_tunes_vfob)
                        VFOASubFreq = SnapTune(VFOASubFreq, step, num_steps);
                    else if (rx2_enabled || (current_click_tune_mode == ClickTuneMode.VFOB && wheel_tunes_vfob))
                        VFOBFreq = SnapTune(VFOBFreq, step, num_steps);
                    else
                        VFOAFreq = SnapTune(VFOAFreq, step, num_steps);
					break;

				case TuneLocation.Other:
                    if (current_click_tune_mode == ClickTuneMode.VFOB && wheel_tunes_vfob)
                    {
                        if (rx2_enabled && chkVFOSplit.Checked)
                            VFOASubFreq = SnapTune(VFOASubFreq, step, num_steps);
                        else 
                            VFOBFreq = SnapTune(VFOBFreq, step, num_steps);
                    }
                    else VFOAFreq = SnapTune(VFOAFreq, step, num_steps);					
					break;

            } //switch(TuneHitTest(e.X, e.Y))

        } // console_mousewheel

        /// <summary>
        /// Calculates a "Snapped" frequency that lies on an integer multiple of the Tune Step.
        /// </summary>
        /// <param name="freq_mhz">The starting frequency in MHz</param>
        /// <param name="step_size_hz">The selected step size in Hz</param>
        /// <param name="num_steps">Indicates both the number and direction of steps.  Negative
        /// numbers indicate steps down while positive numbers indicate steps up.</param>
        /// <returns>The adjusted frequency in MHz</returns>
        public double SnapTune(double freq_mhz, int step_size_hz, int num_steps)
        {
            long freq_hz = (long)Math.Round(freq_mhz * 1e6); // convert frequency to Hz -- use long to support >4GHz
            long temp = freq_hz / step_size_hz; // do integer division to end up on a step size boundary

            // handle when starting frequency was already on a step size boundary and tuning down
            if (num_steps < 0 && freq_hz % step_size_hz != 0) 
                num_steps++; // off boundary -- add one as the divide takes care of one step

            temp += num_steps; // increment by the number of steps (positive or negative)

            freq_hz = temp * step_size_hz; // multiply back up to get hz
            return Math.Round(freq_hz * 1e-6, 6); // return freq in MHz

        } //SnapTune


        //================================================================================ 
        //================================================================================ 
        //================================================================================ 
        // ke9ns mod to VFOA allow khz freq(when in HF band) entry as well as standard mhz entry 
        //================================================================================ 
        //================================================================================ 
        //================================================================================   
        private void txtVFOAFreq_LostFocus(object sender, System.EventArgs e)
		{

          //  Debug.WriteLine("START LostFocus " + txtVFOAFreq.Text + " , " + saved_vfoa_freq + " , " + VFOAFreq); // 144,00000, 7,0001, 144


            if (txtVFOAFreq.Text == "." || txtVFOAFreq.Text == "") 
			{
				VFOAFreq = saved_vfoa_freq;
				return;
			}

            double freq;

            try  // ke9ns add  the try to prevent a crash
            {
                freq = double.Parse(txtVFOAFreq.Text);  // ke9ns original
            }
            catch(Exception)
            {
              //  Debug.WriteLine("BAD txtVFOAFreq_LostFocus " + txtVFOAFreq.Text);

                VFOAFreq = saved_vfoa_freq;
                return;
            }


            //  freq = double.Parse(txtVFOAFreq.Text.Replace(",",".")); // ke9ns mod

          //  Debug.WriteLine("txtVFOAFreq_LostFocus freq " + freq); // 144     freq in europe 7.00mhz  is 7 here  or 7,00005 if 7.00005mhz


            // ke9ns MOD khz freq entry here
            if ((freq > 65.0) && ((panelBandHF.Visible == true || panelBandGN.Visible == true)) && (txtVFOAFreq.Text.Contains(".")==false) && (txtVFOAFreq.Text.Contains(",") == false)) // check for khz entry instead of mhz
            {
                if (freq <= 999) // 3 digit must be khz 700 = 700 khz
                {
                    freq = freq / 1000;     // 721 = .721 mhz

                } // 3digite
                else if (freq <= 9999) // 4 digits  7123 = 7.123 mhz
                {
                    freq = freq / 1000;
                }
                else if (freq <= 99999) // 5 digits  12345 = 12.345 mhz
                {
                    if (freq < 65000) freq = freq / 1000; // 30123 = 30.123 mhz
                    else freq = freq / 10000;  //65123 = 6.5123 mhz

                }
                else if (freq <= 999999) // 6 digits  123456  = .123456
                {
                   freq = freq / 100000; // 123456  = .123456 
                }
                else if (freq <= 9999999) // 7 digits
                {
                    freq = freq / 1000000; // 1212345 = 1.212345
                }
                else // 8 digits
                {
                    freq = freq / 1000000; // 14123456 = 14.123456
                }

              
                txtVFOAFreq.Text = freq.ToString("0.######");
                

            } // assume anything over 65 is actually khz not mhz

            //========================================================================


			//txtVFOAFreq.Text = freq.ToString("f6");

			UpdateVFOAFreq(freq.ToString("f6"));

            FREQA = freq; // ke9ns used in S9 determining routine (in meters)

            Display.VFOA = (long)(freq * 1e6); // ke9ns in hz


         //   Debug.WriteLine("MIDDLE LostFocus " + txtVFOAFreq.Text + " , " + saved_vfoa_freq + " , " + VFOAFreq + " , " + Display.VFOA + " , " + freq.ToString("f6") + " , " + FREQA);

            if (chkTUN.Checked && chkVFOATX.Checked && !chkVFOSplit.Checked)
            {
                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.LSB:
                    case DSPMode.DIGL:
                        Display.VFOA += cw_pitch;
                        break;
                    case DSPMode.CWU:
                    case DSPMode.USB:
                    case DSPMode.DIGU:
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                    case DSPMode.DSB:
                        if (RX1IsOn60mChannel())
                            Display.VFOA -= (long)((ModeFreqOffset(rx1_dsp_mode)*1e6) + cw_pitch);
                        else
                            Display.VFOA -= cw_pitch;
                        break;
                 }
            }

			/*if(fwc_init && current_model == Model.FLEX5000)
			{
				if(freq < 2.0)
				{
					if(comboPreamp.Enabled) comboPreamp.Enabled = false;
					if(comboPreamp.Text != "Off") comboPreamp.Text = "Off";
				}
				else if(freq >= 28.0 && current_xvtr_index < 0)
				{
					if(comboPreamp.Enabled) comboPreamp.Enabled = false;
					if(comboPreamp.Text != "On") comboPreamp.Text = "On";
				}
				else if(!comboPreamp.Enabled) comboPreamp.Enabled = true;
			}*/

            //int old_rx1_xvtr_index = rx1_xvtr_index;
            //int old_tx_xvtr_index = tx_xvtr_index;

			
			rx1_xvtr_index = xvtrForm.XVTRFreq(freq);
            //if(old_rx1_xvtr_index != rx1_xvtr_index)
            //    last_rx1_xvtr_index = old_rx1_xvtr_index;

            if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
                tx_xvtr_index = rx1_xvtr_index;

            //if (old_tx_xvtr_index != tx_xvtr_index)
            //    last_tx_xvtr_index = old_tx_xvtr_index;

            if (rx1_xvtr_index < 0)  //in HF
            {
                int old_xvtr_index = xvtrForm.XVTRFreq(saved_vfoa_freq);
                if (old_xvtr_index >= 0 && freq >= max_freq)
                {
                    VFOAFreq = saved_vfoa_freq;
                    return;
                }
            }

            //VU and RX2
            if ((current_model == Model.FLEX5000 && FWCEEPROM.VUOK) &&    //VU
                (rx1_xvtr_index != last_rx1_xvtr_index ||      //rx1 xvtr band change
                tx_xvtr_index != last_tx_xvtr_index))           //tx xvtr band change
            {
                if (rx1_xvtr_index == 0 && rx2_xvtr_index == 0 && rx2_enabled && !swapping)
                {                    
                    MessageBox.Show("Error: Cannot use VHF on both RX1 and RX2",
                                    "VU Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                    rx1_band = Band.VHF0;
                    VFOAFreq = saved_vfoa_freq;
                    //Give an error message, set to the last set frequency
                    return;
                }
                else if (rx1_xvtr_index == 1 && rx2_xvtr_index == 1 && rx2_enabled && !swapping)
                {                    
                    MessageBox.Show("Error: Cannot use UHF on both RX1 and RX2",
                                    "VU Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                    //Give an error message, set to the last set frequency
                    rx1_band = Band.VHF1;
                    VFOAFreq = saved_vfoa_freq;
                    return;
                }
                else if ((rx1_xvtr_index == 0 || rx1_xvtr_index == 1) &&    //VFOA is V or U
                        tx_xvtr_index >= 2 && !swapping)  //VFOB is XVTR using Split (can't use XVTR with RX2)
                {
                    MessageBox.Show("Error: Cannot use Split with XVTR on VFOB.  Try swapping VFOs",
                                    "VU Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                    //Give an error message, set to the last set frequency
                    //chkVFOATX.Focus();
                    //Application.DoEvents();
                    chkVFOBTX.Checked = false;
                    chkVFOATX.Checked = true;
                    //chkVFOSplit.Checked = false;
                    return;
                } 
                else
                {
                    if (rx1_xvtr_index == 0 || rx1_xvtr_index == 1 || last_rx1_xvtr_index == 0 || last_rx1_xvtr_index == 1)
                    {
                        switch (rx1_xvtr_index)
                        {
                            case 0:
                                if (xvtrForm.VIFGain)
                                    RX1XVTRGainOffset = vhf_level_table[1];
                                else
                                    RX1XVTRGainOffset = vhf_level_table[0];
                                break;
                            case 1:
                                if (xvtrForm.UIFGain)
                                    RX1XVTRGainOffset = uhf_level_table[1];
                                else
                                    RX1XVTRGainOffset = uhf_level_table[0];
                                break;
                        }
                    }

                    if (rx1_xvtr_index == 0 || rx1_xvtr_index == 1 || last_rx1_xvtr_index == 0 || last_rx1_xvtr_index == 1)
                    {
                        SetVURXPath();
                    }                    
                }
            }

            //handle XVTRs
            if (last_rx1_xvtr_index != rx1_xvtr_index)
            {
                //rx
                if (rx1_xvtr_index >= 2)
                {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            FWC.SetXVTRRXOn(true);
                            FWC.SetXVTRSplit(xvtrForm.GetXVTRRF(rx1_xvtr_index));
                            break;
                      //  case Model.SDR1000:
                        //    if (chkPower.Checked)
                        //        Hdw.X2 = (byte)((Hdw.X2 & 0xF0) | xvtrForm.GetXVTRAddr(rx1_xvtr_index));
                        //    break;
                        default:
                            break;
                    }
                   
                    RX1XVTRGainOffset = xvtrForm.GetRXGain(rx1_xvtr_index);

                    // EW: don't need to handle RX Only on RX Side
                    /*if (last_rx1_xvtr_index == -1)
                        saved_rx_only = rx_only;

                    RXOnly = xvtrForm.GetRXOnly(rx1_xvtr_index);*/
                }
                else if(rx1_xvtr_index < 0) //exclude VU case
                {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            FWC.SetXVTRRXOn(false);
                            break;
                      //  case Model.SDR1000:
                       //     if (chkPower.Checked)
                       //         Hdw.X2 = (byte)((Hdw.X2 & 0xF0) | xvtrForm.GetXVTRAddr(rx1_xvtr_index));
                        //    break;
                        default:
                            break;
                    }   
                    RX1XVTRGainOffset = 0.0f;
                    comboPreamp_SelectedIndexChanged(this, EventArgs.Empty);
                }
            }
            //tx
            if (last_tx_xvtr_index != tx_xvtr_index)
            {
                if (tx_xvtr_index >= 2)
                {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            FWC.SetXVTRTXOn(true);
                            break;
                      //  case Model.SDR1000:
                        //    break;
                        default:
                            break;
                    }

                    if (last_tx_xvtr_index == -1)
                        saved_rx_only = rx_only;

                    RXOnly = xvtrForm.GetRXOnly(tx_xvtr_index);
                }
                else if (tx_xvtr_index < 0)    //exclude VU case
                {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            FWC.SetXVTRTXOn(false);
                            break;
                      //  case Model.SDR1000:
                      //      break;
                        default:
                            break;
                    }

                    if (last_tx_xvtr_index >= 0)
                        RXOnly = saved_rx_only;
                }
                  
            }

            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK &&
                    (tx_xvtr_index == 0 || tx_xvtr_index == 1) &&
                     chkVFOATX.Checked)
                ptbPWR_Scroll(this, EventArgs.Empty);

			// update BandText Info
			string bandInfo;
            double db_freq = freq;
            if (RX1IsOn60mChannel()) db_freq -= ModeFreqOffset(rx1_dsp_mode);
			bool transmit_allowed = DB.BandText(db_freq, out bandInfo);

            if (!transmit_allowed)
			{
				txtVFOABand.BackColor = out_of_band_color;
				//if(!chkVFOSplit.Checked && mox && !extended)
				//	chkMOX.Checked = false;
			}
			else txtVFOABand.BackColor = band_background_color;

			if(!(rx2_enabled && (chkEnableMultiRX.Checked || chkVFOSplit.Checked)))
				txtVFOABand.Text = bandInfo;

            Band b = BandByFreq(freq, rx1_xvtr_index, false, current_region);

            if (b != rx1_band)
            {
                SetRX1Band(b);

               
            }

            // Set preamp options based on frequency - used to be in SetRX1Band()
            if (fwc_init)
            {
                switch (current_model)
                {
                    case Model.FLEX5000:
                        if (freq < 2.0)
                        {
                            if (chkRX1Preamp.Enabled) chkRX1Preamp.Enabled = false;
                            if (chkRX1Preamp.Checked) chkRX1Preamp.Checked = false;
                        }
                        else if (freq >= 28.0 && rx1_xvtr_index < 0 && !enable_6m_preamp)
                        {
                            if (chkRX1Preamp.Enabled) chkRX1Preamp.Enabled = false;
                            if (!chkRX1Preamp.Checked) chkRX1Preamp.Checked = true;
                        }
                        else if (!chkRX1Preamp.Enabled) chkRX1Preamp.Enabled = true;
                        break;
                    case Model.FLEX3000:
                        if (FWCEEPROM.TRXRev >> 8 < 6) // before rev G
                        {
                            if (freq < 2.0)
                            {
                                if (!comboPreamp.Items.Contains("Attn"))
                                    comboPreamp.Items.Insert(0, "Attn");
                                if (!comboPreamp.Items.Contains("Off"))
                                    comboPreamp.Items.Insert(1, "Off");
                                if (comboPreamp.Items.Contains("Pre1"))
                                    comboPreamp.Items.Remove("Pre1");
                                if (comboPreamp.Items.Contains("Pre2"))
                                    comboPreamp.Items.Remove("Pre2");

                                if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                    comboPreamp.SelectedIndex = 1; // Off
                            }
                            else
                            {
                                if (!comboPreamp.Items.Contains("Attn"))
                                    comboPreamp.Items.Insert(0, "Attn");
                                if (!comboPreamp.Items.Contains("Off"))
                                    comboPreamp.Items.Insert(1, "Off");
                                if (!comboPreamp.Items.Contains("Pre1"))
                                    comboPreamp.Items.Insert(2, "Pre1");
                                if (!comboPreamp.Items.Contains("Pre2"))
                                    comboPreamp.Items.Insert(3, "Pre2");

                                if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                    comboPreamp.SelectedIndex = 3; // Pre2
                            }
                        }
                        else // revs G+
                        {
                            if (freq < 7.0)
                            {
                                if (!comboPreamp.Items.Contains("Attn"))
                                    comboPreamp.Items.Insert(0, "Attn");
                                if (!comboPreamp.Items.Contains("Off"))
                                    comboPreamp.Items.Insert(1, "Off");
                                if (comboPreamp.Items.Contains("Pre1"))
                                    comboPreamp.Items.Remove("Pre1");
                                if (comboPreamp.Items.Contains("Pre2"))
                                    comboPreamp.Items.Remove("Pre2");

                                if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                    comboPreamp.SelectedIndex = 1; // Off
                            }
                            else if (freq < 13.0)
                            {
                                if (!comboPreamp.Items.Contains("Attn"))
                                    comboPreamp.Items.Insert(0, "Attn");
                                if (!comboPreamp.Items.Contains("Off"))
                                    comboPreamp.Items.Insert(1, "Off");
                                if (!comboPreamp.Items.Contains("Pre1"))
                                    comboPreamp.Items.Insert(2, "Pre1");
                                if (comboPreamp.Items.Contains("Pre2"))
                                    comboPreamp.Items.Remove("Pre2");

                                if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                    comboPreamp.SelectedIndex = 1; // Off
                            }
                            else
                            {
                                if (!comboPreamp.Items.Contains("Attn"))
                                    comboPreamp.Items.Insert(0, "Attn");
                                if (!comboPreamp.Items.Contains("Off"))
                                    comboPreamp.Items.Insert(1, "Off");
                                if (!comboPreamp.Items.Contains("Pre1"))
                                    comboPreamp.Items.Insert(2, "Pre1");
                                if (!comboPreamp.Items.Contains("Pre2"))
                                    comboPreamp.Items.Insert(3, "Pre2");

                                if (comboPreamp.SelectedIndex < 0 || comboPreamp.SelectedIndex > comboPreamp.Items.Count - 1)
                                    comboPreamp.SelectedIndex = 1; // Off
                            }
                        }
                        break;
                }
            }

            Band old_tx_band = tx_band;

            if (!chkVFOSplit.Checked && !chkVFOBTX.Checked)
			{
                b = BandByFreq(freq, tx_xvtr_index, true, current_region);

                Band b1 = b; // ke9ns add

                if ((extended)|| (current_region == FRSRegion.Russia)) // ke9ns add if you have extended capabilities then SWL bands are really ham bands
                {
                    if (Band.BLMF == b) b1 = Band.B160M;
                    else if (Band.B120M == b) b1 = Band.B160M;
                    else if (Band.B90M == b) b1 = Band.B80M;
                    else if (Band.B61M == b) b1 = Band.B80M;
                    else if (Band.B49M == b) b1 = Band.B60M;
                    else if (Band.B41M == b) b1 = Band.B40M;
                    else if (Band.B31M == b) b1 = Band.B30M;
                    else if (Band.B25M == b) b1 = Band.B20M;
                    else if (Band.B22M == b) b1 = Band.B20M;
                    else if (Band.B19M == b) b1 = Band.B17M;
                    else if (Band.B16M == b) b1 = Band.B17M;
                    else if (Band.B14M == b) b1 = Band.B15M;
                    else if (Band.B13M == b) b1 = Band.B12M;
                    else if (Band.B11M == b) b1 = Band.B10M;
                }

                if (b1 != tx_band)
                {
                    SetTXBand(b1); // ke9ns mod b1

                  

                }
            }            

			if(chkPower.Checked && ext_ctrl_enabled)
				UpdateExtCtrl();

            if (tx_band != old_tx_band)
            {
                if (tx_band == Band.B60M && RX1IsOn60mChannel())
                {
                    chkXIT.Enabled = false;
                    chkXIT.Checked = false;
                }
                else
                    chkXIT.Enabled = true;
            }

			saved_vfoa_freq = freq;
            
			if(rx1_xvtr_index >= 0)
				freq = xvtrForm.TranslateFreq(freq);
			else
			{
				if(freq < min_freq)
				{
					freq = min_freq;
					UpdateVFOAFreq(freq.ToString("f6"));
				}
				else if(freq > max_freq)
				{
					freq = max_freq;
					UpdateVFOAFreq(freq.ToString("f6"));
				}
			}

			if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000) ||
                hid_init && current_model == Model.FLEX1500)
			{
				double rx_freq = freq;
				double tx_freq = freq;

				if(chkRIT.Checked)
					rx_freq += (int)udRIT.Value * 0.000001;

				if(rx_freq < min_freq) rx_freq = min_freq;
				else if(rx_freq > max_freq) rx_freq = max_freq;

				if(chkXIT.Checked)
					tx_freq += (int)udXIT.Value * 0.000001;

				if(tx_freq < min_freq) tx_freq = min_freq;
				else if(tx_freq > max_freq) tx_freq = max_freq;

				if(mox && !chkVFOSplit.Checked && !full_duplex && !chkVFOBTX.Checked && !calibrating)
				{
                    if (!CheckValidTXFreq(current_region, tx_freq, dsp.GetDSPTX(0).CurrentDSPMode))
                    {
                        switch (dsp.GetDSPTX(0).CurrentDSPMode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                                MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz is not within the\n" +
                                    "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                    "Transmit Error: Out Of Band",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                break;
                            default:
                                MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz in combination with your TX filter\n" +
                                    "settings [" + Display.TXFilterLow.ToString() + ", " + Display.TXFilterHigh.ToString() + "] are not within the " +
                                    "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                    "Transmit Error: Out Of Band",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                break;
                        }
                        if (chkTUN.Checked)
                            chkTUN.Checked = false;

                        chkMOX.Checked = false;
                        return;
                    }					
				}	

				if(rx1_dsp_mode == DSPMode.CWL)
				{
					rx_freq += (double)cw_pitch * 0.0000010;
					tx_freq += (double)cw_pitch * 0.0000010;
				}
				else if(rx1_dsp_mode == DSPMode.CWU)
				{
					rx_freq -= (double)cw_pitch * 0.0000010;
					tx_freq -= (double)cw_pitch * 0.0000010;
				}

				switch(RX1DSPMode)
				{
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						tx_freq -= 0.011025;
                        if (chkTUN.Checked) tx_freq -= cw_pitch * 1e-6;
						break;
					case DSPMode.USB:
					case DSPMode.DIGU:
                    case DSPMode.DSB:
                        if (chkTUN.Checked)
                        {
                            if (RX1IsOn60mChannel())
                                tx_freq -= (ModeFreqOffset(rx1_dsp_mode) + cw_pitch*1e-6);
                            else
                                tx_freq -= cw_pitch * 1e-6;
                        }
						break;
					case DSPMode.LSB:
					case DSPMode.DIGL:
                        if (chkTUN.Checked) tx_freq += cw_pitch * 1e-6;
						break;
				}

				if(rx_freq < min_freq) rx_freq = min_freq;
				else if(rx_freq > max_freq) rx_freq = max_freq;
				if(tx_freq < min_freq) tx_freq = min_freq;
				else if(tx_freq > max_freq) tx_freq = max_freq;


               
				if(chkPower.Checked)
				{

                    //----------------------------------------------------------------------------------
                    // ke9ns    play audio file
                    //----------------------------------------------------------------------------------
                    if (Audio.wave_playback) // this is true if playing back audio file
					{
						double f = (wave_freq - (VFOAFreq*1e6) % sample_rate1);
 
                      //  Debug.WriteLine("f "+f);  // ke9ns test

                        if (f > sample_rate1/2) f -= sample_rate1;

                        if (f < -sample_rate1/2) f += sample_rate1;

                        dsp.GetDSPRX(0, 0).RXOsc = f;
					}
					else
					{
                        switch (current_model) // set rx freq
                        {
                            case Model.FLEX5000:
                            case Model.FLEX3000:
                                FWCDDSFreq = rx_freq;
                                break;
                            case Model.FLEX1500:
                                if (!mox)
                                    FWCDDSFreq = rx_freq;
                                break;
                        }

						if(!chkVFOSplit.Checked && !chkFullDuplex.Checked && !rx1_spectrum_drag && !chkVFOBTX.Checked)
						{
							switch(current_model)
							{
								case Model.FLEX3000:
								case Model.FLEX5000:
                                    uint tw = (uint)Freq2TW(tx_freq);
                                    //FWC.SetTXFreqTW(tw, (float)tx_freq);
                                    tx_dds_freq_tw = tw;
                                    tx_dds_freq_mhz = (float)tx_freq;
                                    tx_dds_freq_updated = true;
                                    break;
                                case Model.FLEX1500:
                                    if (mox)
                                    {
                                        tw = (uint)Freq2TW(tx_freq);
                                        rx1_dds_freq_tw = tw;
                                        rx1_dds_freq_mhz = (float)tx_freq;
                                        rx1_dds_freq_updated = true;
                                    }
                                    break;
							}
						}

						if(chkEnableMultiRX.Checked)
						{
							int diff;
							if(rx2_enabled) diff = (int)((VFOASubFreq - VFOAFreq)*1e6);
							else diff = (int)((VFOBFreq - VFOAFreq)*1e6);

							if(chkRIT.Checked && !mox) diff -= (int)udRIT.Value;

							int rx2_osc = (int)(dsp.GetDSPRX(0, 0).RXOsc - diff);

							if(rx2_osc > -sample_rate1/2 && rx2_osc < sample_rate1/2)
							{
								dsp.GetDSPRX(0, 1).RXOsc = rx2_osc;
							}
							else if(chkEnableMultiRX.Checked)
								chkEnableMultiRX.Checked = false;
						}

					}
				}
			}
            else
			{
				if(chkRIT.Checked && !mox)
					freq += (int)udRIT.Value * 0.000001;
				else if(chkXIT.Checked && mox && !chkVFOSplit.Checked && !chkVFOBTX.Checked)
					freq += (int)udXIT.Value * 0.000001;

				if(freq < min_freq) freq = min_freq;
				else if(freq > max_freq) freq = max_freq;

				if(mox && !chkVFOSplit.Checked && !chkVFOBTX.Checked)
				{
                    if (!CheckValidTXFreq(current_region, freq, dsp.GetDSPTX(0).CurrentDSPMode))
                    {
                        switch (dsp.GetDSPTX(0).CurrentDSPMode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.CWU:
                                MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz is not within the\n" +
                                    "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                    "Transmit Error: Out Of Band",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                break;
                            default:
                                MessageBox.Show("The frequency " + freq.ToString("f6") + "MHz in combination with your TX filter\n" +
                                    "settings [" + Display.TXFilterLow.ToString() + ", " + Display.TXFilterHigh.ToString() + "] are not within the " +
                                    "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                    "Transmit Error: Out Of Band",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                                break;
                        }
                        chkMOX.Checked = false;
                        return;
                    }						
				}	

				if(rx1_dsp_mode == DSPMode.CWL)
					freq += (double)cw_pitch * 0.0000010;
				else if(rx1_dsp_mode == DSPMode.CWU)
					freq -= (double)cw_pitch * 0.0000010;

				switch(RX1DSPMode)
				{
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						if(mox) freq -= 0.011025;
						break;
					case DSPMode.USB:
					case DSPMode.DIGU:
						if(chkTUN.Checked) freq -= cw_pitch*1e-6;
						break;
					case DSPMode.LSB:
					case DSPMode.DIGL:
						if(chkTUN.Checked) freq += cw_pitch*1e-6;
						break;
				}

				if(freq < min_freq) freq = min_freq;
				else if(freq > max_freq) freq = max_freq;

				if(chkPower.Checked)
				{
					switch(current_model)
					{
					//	case Model.SDR1000:
						case Model.DEMO:
							if(Audio.wave_playback)
							{
								double f = (wave_freq-(VFOAFreq*1e6)%sample_rate1);
								if(f > sample_rate1/2) f -= sample_rate1;
								if(f < -sample_rate1/2) f += sample_rate1;
								dsp.GetDSPRX(0, 0).RXOsc = f;
							}
							else
							{
								if(!mox || (mox && !chkVFOSplit.Checked && !chkVFOBTX.Checked))
								{
									DDSFreq = freq;

									if(chkEnableMultiRX.Checked)
									{
										int diff = (int)((VFOBFreq - VFOAFreq)*1e6);
										if(chkRIT.Checked && !mox) diff -= (int)udRIT.Value;
										int rx2_osc = (int)(dsp.GetDSPRX(0, 0).RXOsc - diff);
										if(rx2_osc > -sample_rate1/2 && rx2_osc < sample_rate1/2)
										{
											dsp.GetDSPRX(0, 1).RXOsc = rx2_osc;
										}
										else chkEnableMultiRX.Checked = false;
									}
								}
							}
							break;
					/*	case Model.SOFTROCK40:
							//!!!!drm patch
							double osc_freq = soft_rock_center_freq*1e6 - freq*1e6;
							if ( rx1_dsp_mode  == DSPMode.DRM ) // if we're in DRM mode we need to be offset 12khz
							{
								osc_freq = osc_freq + 12000; 
								// System.Console.WriteLine("setting osc_freq: " + osc_freq); 
							}
							tuned_freq = freq;
							//Debug.WriteLine("osc_freq: "+osc_freq.ToString("f6"));
							dsp.GetDSPRX(0, 0).RXOsc = osc_freq;
							break; */
					}
				}
			}			

			if(chkVFOSync.Checked && txtVFOBFreq.Text != txtVFOAFreq.Text)
			{
				txtVFOBFreq.Text = txtVFOAFreq.Text;
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
			}

			if(small_lsd)
			{
				txtVFOAMSD.Visible = true;
				txtVFOALSD.Visible = true;
			}

			if(Display.PeakOn) Display.ResetRX1DisplayPeak();

            last_rx1_xvtr_index = rx1_xvtr_index;
            last_tx_xvtr_index = tx_xvtr_index;

            UpdateRX1Notches();

          // voacap
        } // RX1 lost focus

        //================================================================



        private static double tuned_freq;
		private void txtVFOAFreq_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
		{

         
            string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;

            int KeyCode = (int)e.KeyChar; 
             
			if((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
				(KeyCode != 8) &&								// backspace
				(!e.KeyChar.ToString().Equals(separator)) &&	// decimal
				(KeyCode != 27))								// escape
			{
				e.Handled=true;  // you come here because your not valid
			}
			else // valid keys
			{
				if(e.KeyChar.ToString().Equals(separator))
				{
					e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
				}
				else if(KeyCode == 27) // esc key
				{
					VFOAFreq = saved_vfoa_freq;
					btnHidden.Focus();
				}
			}
			if(e.KeyChar == (char)Keys.Enter)  // enter key
			{
               
                txtVFOAFreq_LostFocus(txtVFOAFreq, new System.EventArgs()); // udpate freq 

				btnHidden.Focus(); // just need to move focus off of freq onto something hidden
			}

        } // txtVFOAFreq_KeyPress


        
//=============================================================================================================
        private void txtVFOAFreq_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if(this.ContainsFocus)
			{
				int old_digit = vfoa_hover_digit;

				int digit_index = 0;

				if(vfo_char_width == 0)	GetVFOCharWidth();

				int x = txtVFOAFreq.Width - (vfo_pixel_offset - 10); // ke9ns mod was -5 (this is the area which the mouse selects the digit
                                            // txtVFOAHover_Paint draws the under line

                while (x < e.X)
				{
					digit_index++;
					
					if(small_lsd && txtVFOALSD.Visible)
					{
                        if (digit_index < 6) x += (vfo_char_width + vfo_char_space);
                        else
                        {
                            x += (vfo_small_char_width + vfo_small_char_space );
                          
                        }

						if(digit_index == 3) x += (vfo_decimal_space - vfo_char_space);

                        if (digit_index == 6)
                        {
                           
                            x += vfo_small_char_width;
                        }
					}
					else
					{
						x += vfo_char_width;

						if(digit_index == 3) x += vfo_decimal_space;
						else x += vfo_char_space;
					}

				} // while

				if(digit_index < 3) digit_index = -1;  // -1

				if(digit_index > 9) digit_index = 9;   // 9

				vfoa_hover_digit = digit_index;

				if(vfoa_hover_digit != old_digit)	panelVFOAHover.Invalidate();

            } // if(this.ContainsFocus)

        } // txtVFOAFreq_MouseMove

        private void txtVFOAFreq_MouseLeave(object sender, System.EventArgs e)
		{
			vfoa_hover_digit = -1;
			panelVFOAHover.Invalidate();
		}

		private void txtVFOABand_LostFocus(object sender, System.EventArgs e)
		{

          
            if (!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return;
			if(txtVFOABand.Text == "." || txtVFOABand.Text == "") 
			{
				VFOASubFreq = VFOAFreq;
				return;
			}

			double freq = VFOASubFreq;
			double vfoa = VFOAFreq;

			txtVFOABand.Text = freq.ToString("f6"); 
			Display.VFOASub = (long)(freq*1e6); // ke9ns convert 14.123456 mhz to 14123456 hz
            if (chkTUN.Checked && chkVFOATX.Checked && chkVFOSplit.Checked)
            {
                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                {
                    case DSPMode.CWL:
                    case DSPMode.LSB:
                    case DSPMode.DIGL:
                        Display.VFOASub += cw_pitch;
                        break;
                    case DSPMode.CWU:
                    case DSPMode.USB:
                    case DSPMode.DIGU:
                    case DSPMode.AM:
                    case DSPMode.SAM:
                    case DSPMode.FM:
                    case DSPMode.DSB:
                        Display.VFOASub -= cw_pitch;
                        break;
                }
            }
			saved_vfoa_sub_freq = freq;

			string bandInfo;
			bool transmit_allowed = DB.BandText(freq, out bandInfo);
            if (!CheckValidTXFreq(current_region, freq, dsp.GetDSPTX(0).CurrentDSPMode))
			{
				if(chkVFOSplit.Checked && mox && !extended)
					chkMOX.Checked = false;
			}
			
			if(chkEnableMultiRX.Checked)
			{
				int diff = (int)((freq - vfoa)*1e6);
				double sub_osc = dsp.GetDSPRX(0, 0).RXOsc - diff;

				if(sub_osc < -sample_rate1/2)
				{
					VFOASubFreq = vfoa + (sample_rate1/2+dsp.GetDSPRX(0, 0).RXOsc-1)*1e-6;
					return;
				}
				else if(sub_osc > sample_rate1/2)
				{
					VFOASubFreq = vfoa + (-sample_rate1/2+dsp.GetDSPRX(0, 0).RXOsc+1)*1e-6;
					return;
				}

				if(sub_osc > -sample_rate1/2 && sub_osc < sample_rate1/2)
				{
					dsp.GetDSPRX(0, 1).RXOsc = sub_osc;
				}

                UpdateRX1SubNotches();
			}

			if(chkVFOSplit.Checked)
			{
				tx_xvtr_index = xvtrForm.XVTRFreq(freq);

                Band old_tx_band = tx_band;
                Band b = BandByFreq(freq, tx_xvtr_index, true, current_region);

                Band b1 = b; // ke9ns add
                if ((extended)|| (current_region == FRSRegion.Russia)) // ke9ns add if you have extended capabilities then SWL bands are really ham bands
                {
                    if (Band.BLMF == b) b1 = Band.B160M;
                    else if (Band.B120M == b) b1 = Band.B160M;
                    else if (Band.B90M == b) b1 = Band.B80M;
                    else if (Band.B61M == b) b1 = Band.B80M;
                    else if (Band.B49M == b) b1 = Band.B60M;
                    else if (Band.B41M == b) b1 = Band.B40M;
                    else if (Band.B31M == b) b1 = Band.B30M;
                    else if (Band.B25M == b) b1 = Band.B20M;
                    else if (Band.B22M == b) b1 = Band.B20M;
                    else if (Band.B19M == b) b1 = Band.B17M;
                    else if (Band.B16M == b) b1 = Band.B17M;
                    else if (Band.B14M == b) b1 = Band.B15M;
                    else if (Band.B13M == b) b1 = Band.B12M;
                    else if (Band.B11M == b) b1 = Band.B10M;
                }

                if (chkVFOSplit.Checked && old_tx_band != b1)
                {
                    SetTXBand(b1); // ke9ns mod b1

                

                }

                if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK &&
                (tx_xvtr_index == 0 || tx_xvtr_index == 1))
                    ptbPWR_Scroll(this, EventArgs.Empty);

                //tx
                if (last_tx_xvtr_index != tx_xvtr_index)
                {
                    if (tx_xvtr_index >= 2)
                    {
                        switch (current_model)
                        {
                            case Model.FLEX5000:
                                FWC.SetXVTRTXOn(true);
                                break;
                         //   case Model.SDR1000:
                         //       break;
                            default:
                                break;
                        }
                        setupForm.RXOnly = xvtrForm.GetRXOnly(tx_xvtr_index);
                    }
                    else if (tx_xvtr_index < 0)    //exclude VU case
                    {
                        switch (current_model)
                        {
                            case Model.FLEX5000:
                                FWC.SetXVTRTXOn(false);
                                break;
                          //  case Model.SDR1000:
                            //    break;
                            default:
                                break;
                        }
                    }

                }

				if(tx_xvtr_index >= 0)
					freq = xvtrForm.TranslateFreq(freq);

                if (old_tx_band != tx_band)
                {
                    if (tx_band == Band.B60M && RX1IsOn60mChannel())
				    {
					    chkXIT.Enabled = false;
					    chkXIT.Checked = false;
				    }
				    else
					    chkXIT.Enabled = true;
                }
                
				if(chkXIT.Checked)
					freq += (int)udXIT.Value * 0.000001;

				if(freq < min_freq) freq = min_freq;
				else if(freq > max_freq) freq = max_freq;

				switch(dsp.GetDSPTX(0).CurrentDSPMode)
				{
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						freq -= 0.011025;
                        if (chkTUN.Checked) freq -= (double)cw_pitch * 1e-6;
						break;
					case DSPMode.USB:
					case DSPMode.DIGU:
                    case DSPMode.DSB:
						if(chkTUN.Checked) freq -= (double)cw_pitch*1e-6;
						break;
					case DSPMode.LSB:
					case DSPMode.DIGL:
						if(chkTUN.Checked) freq += (double)cw_pitch*1e-6;
						break;
					case DSPMode.CWL:
						freq += (double)cw_pitch * 0.0000010;
						break;
					case DSPMode.CWU:
						freq -= (double)cw_pitch * 0.0000010;
						break;
				}

				//Debug.WriteLine("freq: "+freq.ToString("f6"));
                if (!rx1_sub_drag)
                {
                    uint tw = (uint)Freq2TW(freq);
                    //FWC.SetTXFreqTW(tw, (float)freq);
                    tx_dds_freq_tw = tw;
                    tx_dds_freq_mhz = (float)freq;
                    tx_dds_freq_updated = true;
                }
                last_tx_xvtr_index = tx_xvtr_index;
			}
		} // txtvfoaband_lostfocus



//=======================================================================================================
		private void txtVFOABand_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
		{
			if(!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) 
			{
				e.Handled = true;
				return;              // return if you dont need the subVFOa 
			}

			string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;

            int KeyCode = (int)e.KeyChar; 
             
			if((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
				KeyCode != 8 &&								// backspace
				!e.KeyChar.ToString().Equals(separator) &&	// decimal
				KeyCode != 27)								// escape
			{
				e.Handled = true;
			}
			else
			{
				if(e.KeyChar.ToString().Equals(separator))
				{
					e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
				}
				else if(KeyCode == 27) // esc key
				{
					VFOASubFreq = saved_vfoa_sub_freq; // used previously saved value
					btnHidden.Focus();
				}
			}


			if(e.KeyChar == (char)Keys.Enter) // check for enter key
			{
				txtVFOABand_LostFocus(txtVFOABand, new System.EventArgs());
				btnHidden.Focus();
			}


        } // txtVFOABand_KeyPress

        //================================================================================ 
        //================================================================================ 
        //================================================================================ 
        // ke9ns mod VFOB to allow khz freq(when in HF band) entry as well as standard mhz entry 
        //================================================================================ 
        //================================================================================ 
        //================================================================================   
        private void txtVFOBFreq_LostFocus(object sender, System.EventArgs e)
		{

           

            //  double freq = double.Parse(txtVFOAFreq.Text.Replace(",",".")); // ke9ns mod



            if (txtVFOBFreq.Text == "" || txtVFOBFreq.Text == ".")
			{
				VFOBFreq = saved_vfob_freq;
				return;
			}

           
			//double freq = double.Parse(txtVFOBFreq.Text); // original

            double freq;

            try  // ke9ns add  the try to prevent a crash
            {
                freq = double.Parse(txtVFOBFreq.Text);  // ke9ns original
            }
            catch (Exception)
            {
                VFOBFreq = saved_vfob_freq;
                return;
            }



            // ke9ns mod khz
            if ((freq > 65.0) && (comboRX2Band.Text.StartsWith("V") == false) && (txtVFOBFreq.Text.Contains(".") == false) && (txtVFOAFreq.Text.Contains(",") == false)) // check for khz entry instead of mhz
            // check for khz entry instead of mhz
            {
                if (freq <= 999) // 3 digit must be khz 700 = 700 khz
                {
                    freq = freq / 1000;     // 721 = .721 mhz

                } // 3digite
                else if (freq <= 9999) // 4 digits  7123 = 7.123 mhz
                {
                    freq = freq / 1000;
                }
                else if (freq <= 99999) // 5 digits  12345 = 12.345 mhz
                {
                    if (freq < 65000) freq = freq / 1000; // 30123 = 30.123 mhz
                    else freq = freq / 10000;  //65123 = 6.5123 mhz

                }
                else if (freq <= 999999) // 6 digits  123456  = .123456
                {

                    freq = freq / 100000; // 123456  = .123456 

                }
                else if (freq <= 9999999) // 7 digits
                {
                    freq = freq / 1000000; // 1212345 = 1.212345
                }
                else // 8 digits
                {
                    freq = freq / 1000000; // 14123456 = 14.123456
                }

                txtVFOBFreq.Text = freq.ToString("0.######");



            } // ke9ns


            //===============================

            if (chkEnableMultiRX.Checked && !rx2_enabled)  // check if multiRX1 or RX2 turned on here
			{
				int diff = (int)((VFOBFreq - VFOAFreq)*1e6);
				double rx2_osc = dsp.GetDSPRX(0, 0).RXOsc - diff;

				if(rx2_osc < -sample_rate1/2)
				{
					VFOBFreq = VFOAFreq + ( sample_rate1/2 + dsp.GetDSPRX(0, 0).RXOsc-1)*1e-6;
					return;
				}
				else if(rx2_osc > sample_rate1/2)
				{
					VFOBFreq = VFOAFreq + (-sample_rate1/2+dsp.GetDSPRX(0, 0).RXOsc+1)*1e-6;
					return;
				}

				if(rx2_osc > -sample_rate1/2 && rx2_osc < sample_rate1/2)
				{
					dsp.GetDSPRX(0, 1).RXOsc = rx2_osc;
				}

                UpdateRX1SubNotches();

            } // chkEnableMultiRX.Checked && !rx2_enabled

            //=================================================================
            //txtVFOBFreq.Text = freq.ToString("f6"); 
            UpdateVFOBFreq(freq.ToString("f6"));

            FREQB = freq; // ke9ns used in S9 determining routine (in meters)

            if (rx2_enabled)
            {
                Display.VFOB = (long)(freq * 1e6);
                if (chkTUN.Checked && chkVFOBTX.Checked)
                {
                    switch (dsp.GetDSPTX(0).CurrentDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.LSB:
                        case DSPMode.DIGL:
                            Display.VFOB += cw_pitch;
                            break;
                        case DSPMode.CWU:
                        case DSPMode.USB:
                        case DSPMode.DIGU:
                        case DSPMode.AM:
                        case DSPMode.SAM:
                        case DSPMode.FM:
                        case DSPMode.DSB:
                            Display.VFOB -= cw_pitch;
                            break;
                    }
                }
            } //rx2_enabled
            else
            {
                Display.VFOASub = (long)(freq * 1e6);
                if (chkTUN.Checked && chkVFOBTX.Checked)
                {
                    switch (dsp.GetDSPTX(0).CurrentDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.LSB:
                        case DSPMode.DIGL:
                            Display.VFOASub += cw_pitch;
                            break;
                        case DSPMode.CWU:
                        case DSPMode.USB:
                        case DSPMode.DIGU:
                        case DSPMode.AM:
                        case DSPMode.SAM:
                        case DSPMode.FM:
                        case DSPMode.DSB:
                            Display.VFOASub -= cw_pitch;
                            break;
                    }
                }
            } //rx2_enabled NOT

            int xvtr_index = xvtrForm.XVTRFreq(freq);

			if(xvtr_index < 0) // ke9ns if no freq was found
			{
				int old_xvtr_index = xvtrForm.XVTRFreq(saved_vfob_freq);
				if(old_xvtr_index >= 0 && freq >= max_freq)
				{
					VFOBFreq = saved_vfob_freq;
					return;
				}
			}

			// update Band Info
			string bandInfo;
            double db_freq = freq;
            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK && RX1IsOn60mChannel())
                db_freq -= ModeFreqOffset(rx2_dsp_mode);
            else if (RX1IsOn60mChannel())
                db_freq -= ModeFreqOffset(rx1_dsp_mode);

            bool transmit = DB.BandText(db_freq, out bandInfo);

            if (transmit == false)
            {
                txtVFOBBand.BackColor = Color.DimGray;
                //if(chkVFOSplit.Checked && mox)
                //	chkMOX.Checked = false;
            }
            else txtVFOBBand.BackColor = band_background_color;

			txtVFOBBand.Text = bandInfo;

			saved_vfob_freq = freq;
			
			if((fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                (hid_init && current_model == Model.FLEX1500))
			{
				if(chkVFOBTX.Checked) goto set_tx_freq;
				if(FWCEEPROM.RX2OK && rx2_enabled) goto set_rx2_freq;
				else if(chkVFOSplit.Checked || full_duplex)
					goto set_tx_freq;
				else goto end;
			}
			else if(mox && chkVFOSplit.Checked)
				goto set_tx_freq;
			else goto end;

        set_tx_freq:
            //int old_tx_xvtr_index = tx_xvtr_index;
            tx_xvtr_index = xvtr_index;

            //if (old_tx_xvtr_index != tx_xvtr_index)
            //    last_tx_xvtr_index = old_tx_xvtr_index;

            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK &&
                tx_xvtr_index != last_tx_xvtr_index &&
                (tx_xvtr_index == 0 || tx_xvtr_index == 1))
                ptbPWR_Scroll(this, EventArgs.Empty);
            
			double tx_freq = freq;
            Band old_tx_band = tx_band;
            Band b = BandByFreq(tx_freq, tx_xvtr_index, true, current_region);

            Band b1 = b; // ke9ns add
            if (extended) // ke9ns add if you have extended capabilities then SWL bands are really ham bands
            {
                if (Band.BLMF == b) b1 = Band.B160M;
                else if (Band.B120M == b) b1 = Band.B160M;
                else if (Band.B90M == b) b1 = Band.B80M;
                else if (Band.B61M == b) b1 = Band.B80M;
                else if (Band.B49M == b) b1 = Band.B60M;
                else if (Band.B41M == b) b1 = Band.B40M;
                else if (Band.B31M == b) b1 = Band.B30M;
                else if (Band.B25M == b) b1 = Band.B20M;
                else if (Band.B22M == b) b1 = Band.B20M;
                else if (Band.B19M == b) b1 = Band.B17M;
                else if (Band.B16M == b) b1 = Band.B17M;
                else if (Band.B14M == b) b1 = Band.B15M;
                else if (Band.B13M == b) b1 = Band.B12M;
                else if (Band.B11M == b) b1 = Band.B10M;
            }
            if (old_tx_band != b1)
            {
                SetTXBand(b1); // ke9ns mod b1
              

            }

            if (tx_xvtr_index >= 0)
				tx_freq = xvtrForm.TranslateFreq(tx_freq);

			if(ext_ctrl_enabled)
				UpdateExtCtrl();

            //tx
            if (last_tx_xvtr_index != tx_xvtr_index)
            {
                if (tx_xvtr_index >= 2)
                {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            FWC.SetXVTRTXOn(true);
                            break;
                    }

                    if (last_tx_xvtr_index == -1)
                        saved_rx_only = rx_only;
                    RXOnly = xvtrForm.GetRXOnly(tx_xvtr_index);
                }
                else if (tx_xvtr_index < 0) //exclude VU case
                {
                    switch (current_model)
                    {
                        case Model.FLEX5000:
                            FWC.SetXVTRTXOn(false);
                            break;
                    }

                    if (last_tx_xvtr_index >= 0)
                        RXOnly = saved_rx_only;
                }
            }

            if (tx_xvtr_index >= 0 && tx_xvtr_index != last_tx_xvtr_index)
            {
                if ((current_model == Model.FLEX5000 && FWCEEPROM.VUOK) &&    //VU
                        tx_xvtr_index != last_tx_xvtr_index)           //tx xvtr band change
                {
                    if ((rx1_xvtr_index == 0 || rx1_xvtr_index == 1) &&    //VFOA is V or U
                            tx_xvtr_index >= 2 && !swapping)  //VFOB is XVTR using Split (can't use XVTR with RX2)
                    {
                        MessageBox.Show("Error: Cannot use Split with XVTR on VFOB.  Try swapping VFOs",
                                        "VU Error",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                        //Give an error message, set to the last set frequency
                        chkVFOBTX.Checked = false;
                        chkVFOATX.Checked = true;                      
                        return;
                    }
                }

            }
            else if (tx_xvtr_index < 0) //tx on HF
            {
                int old_xvtr_index = xvtrForm.XVTRFreq(saved_vfob_freq);
                if (old_xvtr_index >= 0 && freq >= max_freq)
                {
                    VFOBFreq = saved_vfob_freq;
                    return;
                }
            }

            if (old_tx_band != tx_band)
            {
                if (tx_band == Band.B60M && RX1IsOn60mChannel())
                {
                    chkXIT.Enabled = false;
                    chkXIT.Checked = false;
                }
                else
                    chkXIT.Enabled = true;
            }
                
			if(chkXIT.Checked)
				tx_freq += (int)udXIT.Value * 0.000001;

			if(tx_freq < min_freq) tx_freq = min_freq;
			else if(tx_freq > max_freq) tx_freq = max_freq;
			
			/*if(!IsHamBand(current_band_plan, freq))	// out of band
				{
					MessageBox.Show("The frequency "+freq.ToString("f6")+"MHz is not within the "+
						"IARU Band specifications.",
						"Transmit Error: Out Of Band",
						MessageBoxButtons.OK,
						MessageBoxIcon.Error);
					chkMOX.Checked = false;
					return;
				}*/

            DSPMode tx_mode = dsp.GetDSPTX(0).CurrentDSPMode;

            if (mox)
            {
                if (!CheckValidTXFreq(current_region, tx_freq, tx_mode))
                {
                    switch (dsp.GetDSPTX(0).CurrentDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.CWU:
                            MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz is not within the\n" +
                                "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                "Transmit Error: Out Of Band",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                            break;
                        default:
                            MessageBox.Show("The frequency " + tx_freq.ToString("f6") + "MHz in combination with your TX filter\n" +
                                "settings [" + Display.TXFilterLow.ToString() + ", " + Display.TXFilterHigh.ToString() + "] are not within the " +
                                "Band specifications for your country (" + ((int)current_region).ToString() + ").",
                                "Transmit Error: Out Of Band",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
                            break;
                    }
                    chkMOX.Checked = false;
                    return;
                }
            }

			if(mox || (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                (hid_init && current_model == Model.FLEX1500))
			{
				switch(tx_mode)
				{
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						tx_freq -= 0.011025;
                        if (chkTUN.Checked) tx_freq -= (double)cw_pitch * 1e-6;
						break;
					case DSPMode.USB:
					case DSPMode.DIGU:
                    case DSPMode.DSB:
						if(chkTUN.Checked) tx_freq -= (double)cw_pitch*1e-6;
						break;
					case DSPMode.LSB:
					case DSPMode.DIGL:
						if(chkTUN.Checked) tx_freq += (double)cw_pitch*1e-6;
						break;
				}
			}

			if(tx_mode == DSPMode.CWL)
				tx_freq += (double)cw_pitch * 0.0000010;
			else if(tx_mode == DSPMode.CWU)
				tx_freq -= (double)cw_pitch * 0.0000010;

			//Debug.WriteLine("freq: "+freq.ToString("f6"));
			if(!rx1_sub_drag)
			{
				if(!((fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                    (hid_init && current_model == Model.FLEX1500)))
				{
					DDSFreq = tx_freq;					
				}
				else
				{
					switch(current_model)
					{
						case Model.FLEX3000:
						case Model.FLEX5000:
                            uint tw = (uint)Freq2TW(tx_freq);
                            //FWC.SetTXFreqTW(tw, (float)tx_freq);
                            tx_dds_freq_tw = tw;
                            tx_dds_freq_mhz = (float)tx_freq;
                            tx_dds_freq_updated = true;
                            break;
                        case Model.FLEX1500:
                            if (mox)
                            {
                                tw = (uint)Freq2TW(tx_freq);
                                rx1_dds_freq_tw = tw;
                                rx1_dds_freq_mhz = (float)tx_freq;
                            }
                            break;
					}
					if(rx2_enabled) goto set_rx2_freq;
				}
			}
			goto end;

        set_rx2_freq:

            //int old_rx2_xvtr_index = rx2_xvtr_index;
            rx2_xvtr_index = xvtr_index;
            
            //if (old_rx2_xvtr_index != rx2_xvtr_index)
                //last_rx2_xvtr_index = old_rx2_xvtr_index;

            SetRX2Band(BandByFreq(freq, rx2_xvtr_index, false, current_region));

            if(rx2_xvtr_index >= 0) freq = xvtrForm.TranslateFreq(freq);

            if (rx2_xvtr_index != last_rx2_xvtr_index)       //restrict to band changes
            {
                //don't want to disable this because it works on RX2 IN
                //if (rx2_xvtr_index >= 2)
                //{
                //    MessageBox.Show("Error: Cannot recieve through XVTR interface on RX2",
                //                        "RX2 XVTR Error",
                //                        MessageBoxButtons.OK,
                //                        MessageBoxIcon.Error);
                //    VFOBFreq = saved_vfob_freq;
                //    //Give an error message, set to the last set frequency
                //    return;
                //}
                if (FWCEEPROM.VUOK)
                {
                    if (rx1_xvtr_index == 0 && rx2_xvtr_index == 0 && !swapping)
                    {
                        MessageBox.Show("Error: Cannot use VHF on both RX1 and RX2",
                                        "VU Error",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);

                        if (saved_vfob_freq >= 144.0 && saved_vfob_freq <= 148.0)  chkRX2.Checked = false;  // ke9ns test was 144.0 and 148.0
                        else
                            VFOBFreq = saved_vfob_freq;
                        //Give an error message, set to the last set frequency
                        return;
                    }
                    else if (rx1_xvtr_index == 1 && rx2_xvtr_index == 1 && !swapping)
                    {
                        MessageBox.Show("Error: Cannot use UHF on both RX1 and RX2",
                                        "VU Error",
                                        MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                        if (saved_vfob_freq >= 430.0 && saved_vfob_freq <= 450.0)
                            chkRX2.Checked = false;
                        else
                            VFOBFreq = saved_vfob_freq;
                        //Give an error message, set to the last set frequency
                        return;
                    }


                    if (rx2_xvtr_index == 0 || rx2_xvtr_index == 1 ||           //going to VU band
                        last_rx2_xvtr_index == 0 || last_rx2_xvtr_index == 1)   //coming from VU band
                    {
                        SetVURXPath();
                        switch (rx2_xvtr_index)
                        {
                            case 0:
                                if (xvtrForm.VIFGain)
                                    RX2XVTRGainOffset = vhf_level_table[1];
                                else
                                    RX2XVTRGainOffset = vhf_level_table[0];
                                break;
                            case 1:
                                if (xvtrForm.UIFGain)
                                    RX2XVTRGainOffset = uhf_level_table[1];
                                else
                                    RX2XVTRGainOffset = uhf_level_table[0];
                                break;
                        }
                    }
                }

                if (rx2_xvtr_index < 0)
                {
                    RX2XVTRGainOffset = 0.0f;
                }
                else if (rx2_xvtr_index > 1)
                {
                    freq = xvtrForm.TranslateFreq(freq);
                    RX2XVTRGainOffset = xvtrForm.GetRXGain(rx2_xvtr_index);
                }
            }

			if(freq < min_freq) freq = min_freq;
			else if(freq > max_freq) freq = max_freq;
			
			if(rx2_dsp_mode == DSPMode.CWL)
				freq += (double)cw_pitch * 0.0000010;
			else if(rx2_dsp_mode == DSPMode.CWU)
				freq -= (double)cw_pitch * 0.0000010;

			RX2DDSFreq = freq;
            UpdateRX2Notches();
			goto end;


#if false
				// wjtFIXME! sr xmit support 
				else if ( current_model == Model.SOFTROCK40 )
				{
					SetSoftRockOscFreqs();
				}
#endif
				
		end:

			if(chkVFOSync.Checked && txtVFOAFreq.Text != txtVFOBFreq.Text)
			{
				txtVFOAFreq.Text = txtVFOBFreq.Text;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}

			if(small_lsd)
			{
				txtVFOBMSD.Visible = true;
				txtVFOBLSD.Visible = true;
			}

            //provides proper operation when using split with either V or U on VFOB
            if ((VFOBFreq >= 144.0 && VFOBFreq <= 148.0) || (VFOBFreq >= 420.0 && VFOBFreq <= 450.0)) // ke9ns test was 144.0 and 148.0
            {
                //if (VFOAFreq >= 144.0 && VFOAFreq <= 148.0)
                //{
                //    FWC.SetXVTRSplit(true);
                //}
                //only do SetVURXPath() when receiving on VU (for VFOB, check if rx2 is being used.  If not, then VU is in TX mode (split) and SetVURXPath() shouldn't be called)
                if (last_rx2_xvtr_index != rx2_xvtr_index)
                {
                    if (rx2_xvtr_index == 0 || rx2_xvtr_index == 1)
                        SetVURXPath();
                }
            }
            last_tx_xvtr_index = tx_xvtr_index;
            last_rx2_xvtr_index = rx2_xvtr_index;

		} // RX2 lost focus

        //====================================================================

		private void txtVFOBFreq_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
		{
			string separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;
            
            int KeyCode = (int)e.KeyChar;
			if((KeyCode < 48 || KeyCode > 57) &&			// numeric keys
				KeyCode != 8 &&								// backspace
				!e.KeyChar.ToString().Equals(separator) &&	// decimal
				KeyCode != 27)								// escape
			{
				e.Handled=true;
			}
			else
			{
				if(e.KeyChar.ToString().Equals(separator)) // separator = , or . depending on windows setup
				{
					e.Handled = (((TextBoxTS)sender).Text.IndexOf(separator) >= 0);
				}
				else if(KeyCode == 27)
				{
					VFOBFreq = saved_vfob_freq;
					btnHidden.Focus();
				}
			}
			if(e.KeyChar == (char)Keys.Enter)
			{
				txtVFOBFreq_LostFocus(txtVFOBFreq, new System.EventArgs());
				btnHidden.Focus();
			}
        } //txtVFOBFreq_KeyPress


        private void txtVFOBFreq_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if(this.ContainsFocus)
			{
				int old_digit = vfob_hover_digit;
				int digit_index = 0;
				if(vfo_char_width == 0)	GetVFOCharWidth();

				int x = txtVFOBFreq.Width - (vfo_pixel_offset - 10); // ke9ns mod was -5 was -10

				while(x < e.X)
				{
					digit_index++;

					if(small_lsd && txtVFOBLSD.Visible)
					{
						if(digit_index < 6)
							x += (vfo_char_width+vfo_char_space);
						else 
							x += (vfo_small_char_width+vfo_small_char_space);

						if(digit_index == 3) x += (vfo_decimal_space-vfo_char_space);
						if(digit_index == 6) x += vfo_small_char_width;
					}
					else
					{
						x += vfo_char_width;
						if(digit_index == 3) x += vfo_decimal_space;
						else x += vfo_char_space;
					}
				}

				if(digit_index < 3) digit_index = -1;
				if(digit_index > 9) digit_index = 9;

				vfob_hover_digit = digit_index;
				if(vfob_hover_digit != old_digit) panelVFOBHover.Invalidate();
			}

        } //  txtVFOBFreq_MouseMove

        private void txtVFOBFreq_MouseLeave(object sender, System.EventArgs e)
		{
			vfob_hover_digit = -1;
			panelVFOBHover.Invalidate();
		}


        //==============================================================================================
		private void panelVFOAHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			Control c1 = (Control)sender;
			Control c2 = txtVFOAFreq;

			int client_width = (c1.Size.Width - c1.ClientSize.Width) + (c2.Size.Width - c2.ClientSize.Width);
			int client_height = (c1.Size.Height - c1.ClientSize.Height) + (c2.Size.Height - c2.ClientSize.Height);

            int x_offset = c1.Left - c2.Left - client_width / 2;
			int y_offset = c1.Top - c2.Top - client_height / 2;

			txtVFOAFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X + x_offset, e.Y + y_offset, e.Delta));
			
			/*txtVFOAFreq_MouseMove(sender, new MouseEventArgs(MouseButtons.None, 0,
				e.X+panelVFOAHover.Left-10, e.Y+panelVFOAHover.Top, 0));*/
		}

		private void panelVFOBHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			Control c1 = (Control)sender;
			Control c2 = txtVFOBFreq;
			int client_width = (c1.Size.Width - c1.ClientSize.Width)+(c2.Size.Width-c2.ClientSize.Width);
			int client_height = (c1.Size.Height - c1.ClientSize.Height)+(c2.Size.Height-c2.ClientSize.Height);
			int x_offset = c1.Left - c2.Left - client_width / 2;
			int y_offset = c1.Top - c2.Top - client_height / 2;
			txtVFOBFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X+x_offset, e.Y+y_offset, e.Delta));

			/*txtVFOBFreq_MouseMove(sender, new MouseEventArgs(MouseButtons.None, 0,
				e.X+panelVFOBHover.Left-10, e.Y+panelVFOBHover.Top, 0));*/
		}

		private void txtVFOALSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			txtVFOAMSD.Visible = false;
			txtVFOALSD.Visible = false;
			txtVFOAFreq.Focus();
			txtVFOAFreq.SelectAll();
		}

		private void txtVFOALSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			Control c1 = (Control)sender;
			Control c2 = txtVFOAFreq;

			int client_width = (c1.Size.Width - c1.ClientSize.Width)+(c2.Size.Width-c2.ClientSize.Width);
			int client_height = (c1.Size.Height - c1.ClientSize.Height)+(c2.Size.Height-c2.ClientSize.Height);
			int x_offset = c1.Left-c2.Left - client_width/2;
			int y_offset = c1.Top-c2.Top - client_height/2;

            txtVFOAFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X+x_offset, e.Y+y_offset, e.Delta));
			
			/*txtVFOAFreq_MouseMove(txtVFOALSD,
				new MouseEventArgs(e.Button, e.Clicks, e.X+165, e.Y+25, e.Delta));*/
		}


        //=====================================================================================
		private void txtVFOAMSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			txtVFOAMSD.Visible = false;
			txtVFOALSD.Visible = false;
			txtVFOAFreq.Focus();
			txtVFOAFreq.SelectAll();
		}

		private void txtVFOAMSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
          //  Debug.WriteLine("VFOAmousemove");
            txtVFOAFreq_MouseMove(txtVFOAMSD,	new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
		}


		private void txtVFOAMSD_MouseLeave(object sender, System.EventArgs e)
		{
           // Debug.WriteLine("VFOAmouseleave");

            txtVFOAFreq_MouseLeave(txtVFOAMSD, e);
		}

		private void txtVFOBMSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
          //  Debug.WriteLine("VFOAmousedown");

            txtVFOBMSD.Visible = false;
			txtVFOBLSD.Visible = false;
			txtVFOBFreq.Focus();
			txtVFOBFreq.SelectAll();
		}

		private void txtVFOBMSD_MouseLeave(object sender, System.EventArgs e)
		{
			txtVFOBFreq_MouseLeave(txtVFOBMSD, e);
		}

		private void txtVFOBMSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			txtVFOBFreq_MouseMove(txtVFOBMSD,new MouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta));
		}

		private void txtVFOBLSD_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			txtVFOBMSD.Visible = false;
			txtVFOBLSD.Visible = false;
			txtVFOBFreq.Focus();
			txtVFOBFreq.SelectAll();
		}

		private void txtVFOBLSD_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			Control c1 = (Control)sender;
			Control c2 = txtVFOBFreq;
			int client_width = (c1.Size.Width - c1.ClientSize.Width)+(c2.Size.Width-c2.ClientSize.Width);
			int client_height = (c1.Size.Height - c1.ClientSize.Height)+(c2.Size.Height-c2.ClientSize.Height);
			int x_offset = c1.Left-c2.Left - client_width/2;
			int y_offset = c1.Top-c2.Top - client_height/2;

            txtVFOBFreq_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X+x_offset, e.Y+y_offset, e.Delta));

			/*txtVFOBFreq_MouseMove(txtVFOBLSD,
				new MouseEventArgs(e.Button, e.Clicks, e.X+165, e.Y+25, e.Delta));*/
		}

#endregion

#region Display Events

		private bool rx1_low_filter_drag = false;
		private bool rx1_high_filter_drag = false;
		private bool rx1_whole_filter_drag = false;
		private bool rx1_sub_drag = false;
		private bool rx1_spectrum_drag = false;

		private bool rx2_low_filter_drag = false;
		private bool rx2_high_filter_drag = false;
		private bool rx2_whole_filter_drag = false;
		//private bool rx2_sub_drag = false;
		private bool rx2_spectrum_drag = false;

		private bool tx_low_filter_drag = false;
		private bool tx_high_filter_drag = false;
		private bool tx_whole_filter_drag = false;

		private int whole_filter_start_x = 0;
		private int whole_filter_start_low = 0;
		private int whole_filter_start_high = 0;
		private int sub_drag_last_x = 0;
		private int spectrum_drag_last_x = 0;
		private double sub_drag_start_freq = 0.0;


        private bool notch_drag = false;
        private Point notch_drag_start_point = new Point(0, 0);
#if (!NO_TNF)
        private int notch_drag_max_delta_x = 0;
        private int notch_drag_max_delta_y = 0;
        private bool notch_zoom = false;
        private Notch notch_drag_start; // starting settings for notch
        private Notch notch_drag_active; // notch to use for modifying
#endif

        public static int H7 = 0; // ke9ns add  H7 size of RX1 total area
        public static int H8 = 0; // ke9ns add  H8 size of RX1 pan area 
        public static float H9 = 0; // ke9ns add  H9 divide factor for determining db 
      

        private void picDisplay_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{

            DX_X = e.X; //ke9ns add
            DX_Y = e.Y; //ke9ns add

            //---------------------------------------------------------------------------
            //---------------------------------------------------------------------------
            // ke9ns add  to allow proper click to tune operation between Rx1 and rx2
    
            if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled))
            {

                if ((Display.K9 == 5) && (Display.K10 != 5))  //  RX1 panafall,  RX2 Panadapater or waterfall
                {
                    H7 = picDisplay.Height * 2 / 3;   // size of rx1 pan/water area
                    H8 = picDisplay.Height  / 3;      // size of rx1 pan area
                    H9 = 3.0f;
                   
                }
                else if ((Display.K9 == 5) && (Display.K10 == 5)) // RX1 panafall and RX2 panafall
                {
                    H7 = picDisplay.Height / 2;       // size of rx1 pan area
                    H8 = picDisplay.Height / 4;       // size of rx1 waterfall area
                    H9 = 4.0f;
                   
                }
                else
                {
                    H7 = picDisplay.Height / 2; // ke9ns this was standard
                    H8 = picDisplay.Height / 2;
                    H9 = 2.0f;
                   
                }
                
            }
            else if (Display.K9 == 7) // special panafall mode for grayline tracking
            {
                H7 = picDisplay.Height * 5 / 6; // size of panadapter area
                H8 = picDisplay.Height * 5 / 6;
                H9 = 6.0f / 5.0f;
               
            }
            else if (Display.K9 == 5) // 
            {
                H7 = picDisplay.Height / 2;
                H8 = picDisplay.Height / 2;
                H9 = 2.0f;
                
            }
            else
            {
                H7 = picDisplay.Height / 2; // ke9ns this was standard
                H8 = picDisplay.Height / 2;
                H9 = 2.0f;
                
            }
            //--------------------------------------------------------------------------------

            Cursor next_cursor = null;
			try
			{
                // get filter location information
				int filt_low_x = 0;
				int filt_high_x = 0;
                if (rx2_enabled && e.Y > H7) // ke9ns mod if RX2 is enabled and the cursor is in the lower half of the display
                {
                    if (mox && chkVFOBTX.Checked)
                    {
                        filt_low_x = HzToPixel(dsp.GetDSPTX(0).TXFilterLow);
                        filt_high_x = HzToPixel(dsp.GetDSPTX(0).TXFilterHigh);
                    }
                    else
                    {
                        filt_low_x = HzToPixel(dsp.GetDSPRX(1, 0).RXFilterLow);
                        filt_high_x = HzToPixel(dsp.GetDSPRX(1, 0).RXFilterHigh);
                    }
                }
                else
                {
                    if (mox && chkVFOATX.Checked)
                    {
                        filt_low_x = HzToPixel(dsp.GetDSPTX(0).TXFilterLow);
                        filt_high_x = HzToPixel(dsp.GetDSPTX(0).TXFilterHigh);                       
                    }
                    else
                    {
                        filt_low_x = HzToPixel(dsp.GetDSPRX(0, 0).RXFilterLow);
                        filt_high_x = HzToPixel(dsp.GetDSPRX(0, 0).RXFilterHigh);
                    }
                }

                // get VFO A Sub + Filter location information
				int vfoa_sub_x = 0;
				int vfoa_sub_low_x = 0;
				int vfoa_sub_high_x = 0;
				if(chkEnableMultiRX.Checked && !mox)
				{
					if(!rx2_enabled)
					{
						vfoa_sub_x = HzToPixel((float)((VFOBFreq - VFOAFreq)*1e6));
						vfoa_sub_low_x = vfoa_sub_x + (HzToPixel(dsp.GetDSPRX(0, 0).RXFilterLow)-HzToPixel(0.0f));
						vfoa_sub_high_x = vfoa_sub_x + (HzToPixel(dsp.GetDSPRX(0, 0).RXFilterHigh)-HzToPixel(0.0f));
					}
					else
					{
						vfoa_sub_x = HzToPixel((float)((VFOASubFreq - VFOAFreq)*1e6));
						vfoa_sub_low_x = vfoa_sub_x + (HzToPixel(dsp.GetDSPRX(0, 1).RXFilterLow)-HzToPixel(0.0f));
						vfoa_sub_high_x = vfoa_sub_x + (HzToPixel(dsp.GetDSPRX(0, 1).RXFilterHigh)-HzToPixel(0.0f));
					}
				}

                // get VFO B filter location information
				int vfob_x = 0;
				int vfob_low_x = 0;
				int vfob_high_x = 0;
				if(rx2_enabled && rx2_spectrum_drag)
				{
					vfob_x = HzToPixel((float)((VFOBFreq - VFOAFreq)*1e6));
					vfob_low_x = vfob_x + (HzToPixel(dsp.GetDSPRX(1, 0).RXFilterLow)-HzToPixel(0.0f));
					vfob_high_x = vfob_x + (HzToPixel(dsp.GetDSPRX(1, 0).RXFilterHigh)-HzToPixel(0.0f));
				}

				switch(Display.CurrentDisplayMode)
				{
					case DisplayMode.HISTOGRAM:
					case DisplayMode.SPECTRUM:
						DisplayCursorX = e.X;
						DisplayCursorY = e.Y;
						float x = PixelToHz(e.X);
						float y = PixelToDb(e.Y);
						double rf_freq;
						if(rx2_enabled && e.Y > H7)	rf_freq = VFOBFreq + (double)x*0.0000010; // was picDisplay.Height/2
                        else rf_freq = VFOAFreq + (double)x*0.0000010;

						if(rx1_dsp_mode == DSPMode.CWL)
							rf_freq += (double)cw_pitch*0.0000010;
						else if(rx1_dsp_mode == DSPMode.CWU)
							rf_freq -= (double)cw_pitch*0.0000010;

                        txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";

						txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";

						string temp_text = rf_freq.ToString("f6") + " MHz";
						int jper = temp_text.IndexOf(separator)+4;
						txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper," "));
						break;
					case DisplayMode.PANADAPTER:
					case DisplayMode.WATERFALL:
					case DisplayMode.PANAFALL:
					case DisplayMode.PANASCOPE:
						DisplayCursorX = e.X; // update display cursor position
						DisplayCursorY = e.Y;
						x = PixelToHz(e.X);
						switch(Display.CurrentDisplayMode)
						{
							case DisplayMode.PANADAPTER:
								
                                if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && RX2Enabled) // ke9ns mod and add
                                {

                                    if ((Display.K10 == 1)) // rx2 in water only
                                    {
                                        if (e.Y < H7) // RX1 pan area only   
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm1";
                                        }
                                        else // rx2 water
                                        {
                                            y = WaterfallPixelToTime((e.Y) - H7);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec2";
                                        }

                                    }
                                    else if ((Display.K10 == 2)) // rx2 in pan only
                                    {
                                        if (e.Y < H7) // RX1 pan area only   
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm1";
                                        }
                                        else // RX2 pan
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm2";
                                        }

                                    }
                                }
                                else // RX1 water only, no RX2
                                {
                                    y = PixelToDb(e.Y);
                                    txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";

                                }

                                break;

							case DisplayMode.WATERFALL:

                                if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && RX2Enabled) // ke9ns mod and add
                                {

                                    if ((Display.K10 == 1)) // rx2 in water only
                                    {
                                        
                                        if (e.Y < H7)// rx1 water
                                        {
                                            y = WaterfallPixelToTime(e.Y);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec1";
                                        }
                                        else // rx2 water
                                        {
                                            y = WaterfallPixelToTime(e.Y );
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec2";
                                        }

                                    }
                                    else if ((Display.K10 == 2)) // rx2 in pan only
                                    {
                                        
                                        if (e.Y < H7)// rx1 water
                                        {
                                            y = WaterfallPixelToTime(e.Y);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec1";
                                        }
                                        else // RX2 pan
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm2";
                                        }

                                    }
                                     
                                }
                                else
                                {

                                    y = WaterfallPixelToTime(e.Y);
                                    txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec";

                                }

                                break;
						
                            
                            case DisplayMode.PANAFALL: // ke9ns pan

                                if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && RX2Enabled) // ke9ns mod and add
                                {

                                    if ((Display.K10 == 1)) // rx2 in water only
                                    {
                                        if (e.Y < H8) // RX1 pan area only   (was picDisplay.Height/2)
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm1";
                                        }
                                        else if (e.Y < H7)// rx1 water
                                        {
                                            y = WaterfallPixelToTime((e.Y) - H8);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec1";
                                        }
                                        else // rx2 water
                                        {
                                            y = WaterfallPixelToTime((e.Y) - H7);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec2";
                                        }

                                    }
                                    else if ((Display.K10 == 2) ) // rx2 in pan only
                                    {
                                        if (e.Y < H8) // RX1 pan area only   (was picDisplay.Height/2)
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm1";
                                        }
                                        else if (e.Y < H7)// rx1 water
                                        {
                                            y = WaterfallPixelToTime((e.Y) - H8);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec1";
                                        }
                                        else // RX2 pan
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm2";
                                        }

                                    }
                                    else             // if (RX2Enabled)  // rx2 in panafall
                                    {
                                        if (e.Y < H8) // RX1 pan area only   (was picDisplay.Height/2)
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm1";
                                        }
                                        else if (e.Y < H7)// rx1 water area
                                        {
                                            y = WaterfallPixelToTime((e.Y) - H8);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec1";
                                        }
                                        else if (e.Y < (H7 + H8)) // rx2 pan area
                                        {
                                            y = PixelToDb(e.Y);
                                            txtDisplayCursorPower.Text = y.ToString("f1") + "dBm2";
                                        }
                                        else // rx2 water area
                                        {
                                            y = WaterfallPixelToTime((e.Y) - H8);
                                            txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec2";
                                        }

                                    }
                                }
                                else                     //if ((Display.K10 == 0)) // rx2 off
                                {
                                    if (e.Y < H8) // RX1 pan area only   (was picDisplay.Height/2)
                                    {
                                        y = PixelToDb(e.Y);
                                        txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";
                                    }
                                    else // rx1 water
                                    {
                                        y = WaterfallPixelToTime(e.Y);
                                        txtDisplayCursorPower.Text = (y / 1000.0f).ToString("f1") + "sec";
                                    }

                                }


                                break;


							case DisplayMode.PANASCOPE:
								if(e.Y < picDisplay.Height/2) // 
								{
									y = PixelToDb(e.Y);
									txtDisplayCursorPower.Text = y.ToString("f1") + "dBm";
								}
								else
								{
									txtDisplayCursorPower.Text = "";
								}
								break;
						}

						if(rx2_enabled && e.Y > H7) // ke9ns mod if RX2 is enabled and the cursor is in the lower half of the display
						{
							rf_freq = VFOBFreq + (double)x * 0.0000010;

							if(rx2_dsp_mode == DSPMode.CWL)
								rf_freq += (double)cw_pitch*0.0000010;
							else if(rx2_dsp_mode == DSPMode.CWU)
								rf_freq -= (double)cw_pitch*0.0000010;
						}
						else
						{
							rf_freq = VFOAFreq + (double)x * 0.0000010;
							if(rx1_dsp_mode == DSPMode.CWL)
								rf_freq += (double)cw_pitch*0.0000010;
							else if(rx1_dsp_mode == DSPMode.CWU)
								rf_freq -= (double)cw_pitch*0.0000010;
						}
						
						txtDisplayCursorOffset.Text = x.ToString("f1") + "Hz";
												
						temp_text = rf_freq.ToString("f6") + " MHz";
						jper = temp_text.IndexOf(separator)+4;
						txtDisplayCursorFreq.Text = String.Copy(temp_text.Insert(jper," "));
						
                        // if near a notch and not already doing something else, display appropriate cursor
                        if (Cursor != Cursors.Hand && !mox)
                        {
                            if (!rx1_low_filter_drag && !rx1_high_filter_drag && !rx1_whole_filter_drag &&
                                !rx2_low_filter_drag && !rx2_high_filter_drag && !rx2_whole_filter_drag &&
                                !tx_low_filter_drag && !tx_high_filter_drag && !tx_whole_filter_drag &&
                                !rx1_sub_drag && !notch_drag)
                            {
                                rf_freq = VFOAFreq;

                                if (rx2_enabled && e.Y > H7) // ke9ns mod
                                {
                                    rf_freq = VFOBFreq;

                                    switch (rx2_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6; ;
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (rx1_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6; ;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6; ;
                                            break;
                                    }
                                }

                                //Debug.WriteLine("x: " + e.X);
                                int low = (int)PixelToHz(e.X - 3);
                                int high = (int)PixelToHz(e.X + 3);

#if (!NO_TNF)
                                List<Notch> list = NotchList.NotchesInBW(rf_freq, low, high);
                                if (list.Count > 0)
                                {
                                    next_cursor = Cursors.VSplit;
                                }
                                else
                                {
                                    next_cursor = Cursors.Cross;
                                }
#endif
                            }
                        }

#if (!NO_TNF)
                        if (notch_drag)
                        {
                            double hz_per_pixel = PixelToHz(1) - PixelToHz(0);
                            int delta_x = e.X - notch_drag_start_point.X;
                            int delta_y = e.Y - notch_drag_start_point.Y;

                            if (Math.Abs(delta_x) > notch_drag_max_delta_x)
                                notch_drag_max_delta_x = Math.Abs(delta_x);
                            if (Math.Abs(delta_y) > notch_drag_max_delta_y)
                                notch_drag_max_delta_y = Math.Abs(delta_y);

                            // offset the notch frequency based on the current mouse position
                            double delta_freq = delta_x * hz_per_pixel;
                            if (notch_zoom) delta_freq /= 10.0;
                            notch_drag_active.Freq = notch_drag_start.Freq + delta_freq * 1e-6;

                            // change the BW of the notch filter once outside a 20 pixel boundary
                            if (delta_y > 10)
                            {
                                notch_drag_active.BW = notch_drag_start.BW - (delta_y - 10) * 5;
                                // don't go negative or less than 10Hz
                                if (notch_drag_active.BW < 10) notch_drag_active.BW = 10;
                            }
                            else if (delta_y < -10)
                                notch_drag_active.BW = notch_drag_start.BW - (delta_y + 10) * 5;

                            UpdateRX1Notches();
                            UpdateRX1SubNotches();
                            UpdateRX2Notches();
                        }
#endif

						if(((!rx2_enabled && rx1_dsp_mode != DSPMode.DRM) || // exclude DRM for RX1
                            (rx2_enabled && rx1_dsp_mode != DSPMode.DRM && e.Y < H7) ||
							(rx2_enabled && rx2_dsp_mode != DSPMode.DRM && e.Y >= H7)))
						{
                            if (current_click_tune_mode == ClickTuneMode.Off && 
                                picDisplay.Cursor != Cursors.Hand && next_cursor != Cursors.SizeNS && next_cursor != Cursors.VSplit)
							{
								if(Math.Abs(e.X-filt_low_x) < 3 || // RX low filter edge
									Math.Abs(e.X-filt_high_x) < 3 || // RX high filter edge
									rx1_high_filter_drag || rx1_low_filter_drag || // already dragging a filter edge
									(chkEnableMultiRX.Checked && // RX1 Sub
										((rx2_enabled && e.Y < H7) || !rx2_enabled) && (e.X > vfoa_sub_low_x-3 && e.X < vfoa_sub_high_x+3)) ||
									(rx2_enabled && e.Y > H7 && (Math.Abs(e.X-vfob_low_x) < 3)) || // RX2 low filter edge
									(rx2_enabled && e.Y > H7 && (Math.Abs(e.X-vfob_high_x) < 3)) ||
									rx2_high_filter_drag || rx2_low_filter_drag) // already dragging a filter edge
								{
                                    next_cursor = Cursors.SizeWE;
								}
								else if(e.X > filt_low_x && e.X < filt_high_x)
								{
                                    next_cursor = Cursors.NoMoveHoriz;
								}
								else
								{
                                    next_cursor = Cursors.Cross;
								}
							}

                            if (notch_drag)
                            {
                                // do nothing -- already handled above
                                }
							else if(rx1_high_filter_drag)
							{
								SelectRX1VarFilter();
								int new_high = (int)Math.Max(PixelToHz(e.X), dsp.GetDSPRX(0, 0).RXFilterLow+10);
								UpdateRX1Filters(dsp.GetDSPRX(0, 0).RXFilterLow, new_high);
							}
							else if(rx1_low_filter_drag)
							{
								SelectRX1VarFilter();
								int new_low = (int)Math.Min(PixelToHz(e.X), dsp.GetDSPRX(0, 0).RXFilterHigh-10);	
								UpdateRX1Filters(new_low, dsp.GetDSPRX(0, 0).RXFilterHigh);
							}
							else if(rx1_whole_filter_drag)
							{
								SelectRX1VarFilter();
								int diff = (int)(PixelToHz(e.X) - PixelToHz(whole_filter_start_x));
								UpdateRX1Filters(whole_filter_start_low+diff, whole_filter_start_high+diff);
							}
							else if(rx1_sub_drag)
							{
								int diff = (int)(PixelToHz(e.X) - PixelToHz(sub_drag_last_x));
								if(rx2_enabled)
									VFOASubFreq = sub_drag_start_freq + diff*1e-6;
								else VFOBFreq = sub_drag_start_freq + diff*1e-6;
							}
							else if(rx2_high_filter_drag)
							{
								SelectRX2VarFilter();
								int new_high = (int)Math.Max(PixelToHz(e.X), dsp.GetDSPRX(1, 0).RXFilterLow+10);
								UpdateRX2Filters(dsp.GetDSPRX(1, 0).RXFilterLow, new_high);
							}
							else if(rx2_low_filter_drag)
							{
								SelectRX2VarFilter();
								int new_low = (int)Math.Min(PixelToHz(e.X), dsp.GetDSPRX(1, 0).RXFilterHigh-10);	
								UpdateRX2Filters(new_low, dsp.GetDSPRX(1, 0).RXFilterHigh);
							}
							else if(rx2_whole_filter_drag)
							{
								SelectRX2VarFilter();
								int diff = (int)(PixelToHz(e.X) - PixelToHz(whole_filter_start_x));
								UpdateRX2Filters(whole_filter_start_low+diff, whole_filter_start_high+diff);
							}
							else if(tx_high_filter_drag)
							{
								int new_high = (int)Math.Max(Math.Abs(PixelToHz(e.X)), tx_filter_low+10);
								setupForm.TXFilterHigh = new_high;
							}
							else if(tx_low_filter_drag)
							{
								int new_low = (int)(Math.Min(Math.Abs(PixelToHz(e.X)), tx_filter_high-10));
								setupForm.TXFilterLow = new_low;
							}
							else if(tx_whole_filter_drag)
							{
								int diff = (int)(PixelToHz(e.X) - PixelToHz(whole_filter_start_x));
								switch(rx1_dsp_mode)
								{
									case DSPMode.LSB:
									case DSPMode.DIGL:
										setupForm.TXFilterLow = whole_filter_start_low - diff;
										setupForm.TXFilterHigh = whole_filter_start_high - diff;
										break;
									case DSPMode.USB:										
									case DSPMode.DIGU:
										setupForm.TXFilterLow = whole_filter_start_low + diff;
										setupForm.TXFilterHigh = whole_filter_start_high + diff;
										break;
									case DSPMode.AM:
									case DSPMode.SAM:
									case DSPMode.FM:
									case DSPMode.DSB:
										setupForm.TXFilterHigh = whole_filter_start_high + diff;
										break;
								}
							}
						}
						break;
					default:
						txtDisplayCursorOffset.Text = "";
						txtDisplayCursorPower.Text = "";
						txtDisplayCursorFreq.Text = "";
						break;
				}

				if(rx1_spectrum_drag)
				{
					if(!mox || (rx2_enabled && chkVFOBTX.Checked))
					{
						float start_freq = PixelToHz(spectrum_drag_last_x);
						float end_freq = PixelToHz(e.X);
						spectrum_drag_last_x = e.X;
						float delta = end_freq - start_freq;
						VFOAFreq -= delta*0.0000010;
					}
				}
				else if(rx2_spectrum_drag)
				{
					if(rx2_enabled && (!mox || chkVFOATX.Checked))
					{
						float start_freq = PixelToHz(spectrum_drag_last_x);
						float end_freq = PixelToHz(e.X);
						spectrum_drag_last_x = e.X;
						float delta = end_freq - start_freq;
						VFOBFreq -= delta*0.0000010;
					}
				}
			}
			catch(Exception)
			{

			}

            if(next_cursor != null && picDisplay.Cursor != next_cursor)
                picDisplay.Cursor = next_cursor;

         //   UpdateBandButtonColors();  // ke9ns add

        } // picdisplay mousemove

		private void picDisplay_MouseLeave(object sender, System.EventArgs e)
		{
			txtDisplayCursorOffset.Text = "";
			txtDisplayCursorPower.Text = "";
			txtDisplayCursorFreq.Text = "";
			DisplayCursorX = -1;
			DisplayCursorY = -1;
			Cursor = Cursors.Default;
		}

		private void picDisplay_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{


            switch (e.Button)
			{

         
                case MouseButtons.Left:
                    bool near_notch = false;
                    if (!mox)
					{
						switch(Display.CurrentDisplayMode)
						{
                            case DisplayMode.PANADAPTER:
                            case DisplayMode.WATERFALL:
                            case DisplayMode.PANAFALL:
                            case DisplayMode.PANASCOPE:
                                // check first for being near a Notch
                                double rf_freq = VFOAFreq;

                                if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) && (e.Y > H7))  // ke9ns mod (in case when rX2 display is off)
                                {
                                    rf_freq = VFOBFreq;

                                    switch (rx2_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6;
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (rx1_dsp_mode)
                                    {
                                        case (DSPMode.CWL):
                                            rf_freq += cw_pitch * 1e-6;
                                            break;
                                        case (DSPMode.CWU):
                                            rf_freq -= cw_pitch * 1e-6;
                                            break;
                                    }
                                }

                                int low = (int)PixelToHz(e.X - 3);
                                int high = (int)PixelToHz(e.X + 3);

#if (!NO_TNF)
                                List<Notch> list = NotchList.NotchesInBW(rf_freq, low, high);

                                if (list.Count > 0)
                                {
                                    near_notch = true;

                                    int index = 0;
                                    if (list[index].Permanent)
                                    {
                                        list[index].Details = true;
                                        notch_drag_active = list[index];
                                    }
                                    else
                                    {
                                        notch_drag = true;
                                        timerNotchZoom.Enabled = true;
                                        notch_drag_active = list[index];
                                        notch_drag_start = list[index].Copy();
                                        notch_drag_start_point = new Point(e.X, e.Y);
                                        list[index].Details = true;
                                        // mark which receiver the click occurred on so that we can show the callout only there
                                        list[index].RX = 1;
                                        if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) && (e.Y > H7)) list[index].RX = 2; // ke9ns mod (in case when rX2 display is off)

                                    }
                                }
#endif
                                break;
                        }
                    } // !MOX


                    // ke9ns add below
  
                    if ((!near_notch) && (current_click_tune_mode != ClickTuneMode.Off)) // ke9ns if in clicktune mode (selected by doing a right click first to lock in the mode)
					{
                      

                        switch (Display.CurrentDisplayMode)
						{
							case DisplayMode.SPECTRUM:
                            case DisplayMode.HISTOGRAM:
                            case DisplayMode.PANADAPTER:
							case DisplayMode.WATERFALL:
							case DisplayMode.PANAFALL:
							case DisplayMode.PANASCOPE:

								float x = PixelToHz(e.X);
								double freq;

                               
								if((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) && (e.Y > H7))  // ke9ns mod (in case when rX2 display is off)
                                {

                                 
                                    freq = double.Parse(txtVFOBFreq.Text) + (double)x*0.0000010;
									switch(rx2_dsp_mode)
									{
										case DSPMode.CWL:
											freq += (float)cw_pitch*0.0000010;
											break;
										case DSPMode.CWU:
											freq -= (float)cw_pitch*0.0000010;
											break;
										case DSPMode.DIGL:
											freq += (float)digl_click_tune_offset*0.0000010;
											break;
										case DSPMode.DIGU:
											freq -= (float)digu_click_tune_offset*0.0000010;
											break;
									}

									if(snap_to_click_tuning && 
										rx2_dsp_mode != DSPMode.CWL &&
										rx2_dsp_mode != DSPMode.CWU &&
										rx2_dsp_mode != DSPMode.DIGL &&
										rx2_dsp_mode != DSPMode.DIGU &&
										Audio.wave_playback == false)
									{
										// round freq to the nearest tuning step
										long f = (long)(freq*1e6);
                                        int mult = CurrentTuneStepHz;
										if(f%mult > mult/2) f += (mult-f%mult);
										else f -= f%mult;
										freq = (double)f*1e-6;
									}
								}
								else 
								{
									freq = double.Parse(txtVFOAFreq.Text) + (double)x*0.0000010;
									switch(rx1_dsp_mode)
									{
										case DSPMode.CWL:
											freq += (float)cw_pitch*0.0000010;
											break;
										case DSPMode.CWU:
											freq -= (float)cw_pitch*0.0000010;
											break;
										case DSPMode.DIGL:
											freq += (float)digl_click_tune_offset*0.0000010;
											break;
										case DSPMode.DIGU:
											freq -= (float)digu_click_tune_offset*0.0000010;
											break;
									}

									if(snap_to_click_tuning && 
										rx1_dsp_mode != DSPMode.CWL &&
										rx1_dsp_mode != DSPMode.CWU &&
										rx1_dsp_mode != DSPMode.DIGL &&
										rx1_dsp_mode != DSPMode.DIGU &&
										Audio.wave_playback == false)
									{
										// round freq to the nearest tuning step
										long f = (long)(freq*1e6);
                                        int mult = CurrentTuneStepHz;
										if(f%mult > mult/2) f += (mult-f%mult);
										else f -= f%mult;
										freq = (double)f*1e-6;
									}
								}

								if((Display.CurrentDisplayModeBottom == DisplayMode.OFF) || (!rx2_enabled)) // ke9ns mod (in case when rX2 display is off
								{
                                    if (current_click_tune_mode == ClickTuneMode.VFOA)

                                        if (CTUN == true) // if click jump while in CTUN, then use CTUN method
                                        {

                                            if ((Display.CurrentDisplayMode == DisplayMode.PANADAPTER) || (Display.CurrentDisplayMode == DisplayMode.PANAFALL) || (Display.CurrentDisplayMode == DisplayMode.PANASCOPE) || (Display.CurrentDisplayMode == DisplayMode.WATERFALL))
                                            {
                                               UPDATEOFF = 2; // ke9ns let system know not to update screen for a little while pan
                                            }

                                            tempVFOAFreq = Math.Round(freq, 6); // ke9ns going to be new freq
                                            CTUN1_HZ = CTUN1_HZ + (long)((tempVFOAFreq - VFOAFreq)*1e6);
                                            CalcDisplayFreq(); // ke9ns keep display from moving
                                        }
                                        else
                                        {
                                            VFOAFreq = Math.Round(freq, 6);
                                        }
                                    else
                                        VFOBFreq = Math.Round(freq, 6);
								}
								else
								{
									if(current_click_tune_mode == ClickTuneMode.VFOB && // red cross hairs
										(chkVFOSplit.Checked || chkEnableMultiRX.Checked))
									{
										VFOASubFreq = Math.Round(freq, 6);
									}
									else
									{
										if(e.Y <= H7) VFOAFreq = Math.Round(freq, 6);
										else VFOBFreq = Math.Round(freq, 6);
									}
								}

								if(!chkMOX.Checked && chkRIT.Checked && current_click_tune_mode == ClickTuneMode.VFOA)
									udRIT.Value = 0;
								else if(chkMOX.Checked && chkXIT.Checked && current_click_tune_mode == ClickTuneMode.VFOB)
									udXIT.Value = 0;
								break;
							default:
								break;
						}
                    } // if((!near_notch) && (current_click_tune_mode != ClickTuneMode.Off))
                    else if(!near_notch)  // current_click_tune_mode == ClickTuneMode.Off) 
					{
						switch(Display.CurrentDisplayMode)
						{
							case DisplayMode.PANADAPTER:
							case DisplayMode.WATERFALL:
							case DisplayMode.PANAFALL:
							case DisplayMode.PANASCOPE:
                                    int low_x = 0, high_x = 0;
                                    int vfoa_sub_x = 0;
                                    int vfoa_sub_low_x = 0;
                                    int vfoa_sub_high_x = 0;

                                    if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) &&( e.Y > H7)) // ke9ns mod
                                    {
                                        if (mox && chkVFOBTX.Checked)
                                        {
                                            low_x = HzToPixel(dsp.GetDSPTX(0).TXFilterLow);
                                            high_x = HzToPixel(dsp.GetDSPTX(0).TXFilterHigh);
                                        }
                                        else if (rx2_dsp_mode != DSPMode.DRM)
                                        {
                                            low_x = HzToPixel(dsp.GetDSPRX(1, 0).RXFilterLow);
                                            high_x = HzToPixel(dsp.GetDSPRX(1, 0).RXFilterHigh);
                                        }
                                    }
                                    else
                                    {
                                        if (mox && chkVFOATX.Checked)
                                        {
                                            low_x = HzToPixel(dsp.GetDSPTX(0).TXFilterLow);
                                            high_x = HzToPixel(dsp.GetDSPTX(0).TXFilterHigh);
                                        }
                                        else if (rx1_dsp_mode != DSPMode.DRM)
                                        {
                                            low_x = HzToPixel(dsp.GetDSPRX(0, 0).RXFilterLow);
                                            high_x = HzToPixel(dsp.GetDSPRX(0, 0).RXFilterHigh);
                                        }

                                        if (chkEnableMultiRX.Checked && !mox)
                                        {
                                            if (!rx2_enabled)
                                            {
                                                vfoa_sub_x = HzToPixel((float)((VFOBFreq - VFOAFreq) * 1e6));
                                                vfoa_sub_low_x = vfoa_sub_x + (HzToPixel((int)udFilterLow.Value) - HzToPixel(0.0f));
                                                vfoa_sub_high_x = vfoa_sub_x + (HzToPixel((int)udFilterHigh.Value) - HzToPixel(0.0f));
                                            }
                                            else
                                            {
                                                vfoa_sub_x = HzToPixel((float)((VFOASubFreq - VFOAFreq) * 1e6));
                                                vfoa_sub_low_x = vfoa_sub_x + (HzToPixel((int)udFilterLow.Value) - HzToPixel(0.0f));
                                                vfoa_sub_high_x = vfoa_sub_x + (HzToPixel((int)udFilterHigh.Value) - HzToPixel(0.0f));
                                            }
                                        }
                                    }

                                    if (Math.Abs(e.X - low_x) < 3 && e.X < high_x)
                                    {
                                        if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled )&& ( e.Y > H7)) // ke9ns mod
                                        {
                                            if (mox && chkVFOBTX.Checked)
                                            {
                                                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                                                {
                                                    case DSPMode.LSB:
                                                    case DSPMode.CWL:
                                                    case DSPMode.DIGL:
                                                    case DSPMode.AM:
                                                    case DSPMode.SAM:
                                                    case DSPMode.FM:
                                                    case DSPMode.DSB:
                                                        tx_high_filter_drag = true;
                                                        break;
                                                    default:
                                                        tx_low_filter_drag = true;
                                                        break;
                                                }
                                            }
                                            else rx2_low_filter_drag = true;
                                        }
                                        else
                                        {
                                            if (mox && (!chkSplitDisplay.Checked || chkVFOATX.Checked))
                                            {
                                                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                                                {
                                                    case DSPMode.LSB:
                                                    case DSPMode.CWL:
                                                    case DSPMode.DIGL:
                                                    case DSPMode.AM:
                                                    case DSPMode.SAM:
                                                    case DSPMode.FM:
                                                    case DSPMode.DSB:
                                                        tx_high_filter_drag = true;
                                                        break;
                                                    default:
                                                        tx_low_filter_drag = true;
                                                        break;
                                                }
                                            }
                                            else rx1_low_filter_drag = true;
                                        }
                                    }
                                    else if (Math.Abs(e.X - high_x) < 3)
                                    {
                                        if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) && (e.Y > H7)) // ke9ns mod
                                        {
                                            if (mox && chkVFOBTX.Checked)
                                            {
                                                switch (dsp.GetDSPTX(0).CurrentDSPMode)
                                                {
                                                    case DSPMode.LSB:
                                                    case DSPMode.CWL:
                                                    case DSPMode.DIGL:
                                                        tx_low_filter_drag = true;
                                                        break;
                                                    default:
                                                        tx_high_filter_drag = true;
                                                        break;
                                                }
                                            }
                                            else rx2_high_filter_drag = true;
                                        }
                                        else if (mox && (!chkSplitDisplay.Checked || (chkSplitDisplay.Checked && chkVFOATX.Checked)))
                                        {
                                            switch (dsp.GetDSPTX(0).CurrentDSPMode)
                                            {
                                                case DSPMode.LSB:
                                                case DSPMode.CWL:
                                                case DSPMode.DIGL:
                                                    tx_low_filter_drag = true;
                                                    break;
                                                default:
                                                    tx_high_filter_drag = true;
                                                    break;
                                            }
                                            // thank you for calling flexradio systems sales dept.  We are out for the holidays and will get back to you on Monday.  Thanks and have a great weekend.
                                        }
                                        else rx1_high_filter_drag = true;
                                    }
                                    else if (e.X > low_x && e.X < high_x)
                                    {
                                        whole_filter_start_x = e.X;
                                        if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) && (e.Y > H7)) // ke9ns mod
                                        {
                                            if (mox && chkVFOBTX.Checked)
                                            {
                                                tx_whole_filter_drag = true;
                                                whole_filter_start_low = setupForm.TXFilterLow;
                                                whole_filter_start_high = setupForm.TXFilterHigh;
                                            }
                                            else
                                            {
                                                rx2_whole_filter_drag = true;
                                                whole_filter_start_low = dsp.GetDSPRX(1, 0).RXFilterLow;
                                                whole_filter_start_high = dsp.GetDSPRX(1, 0).RXFilterHigh;
                                            }
                                        }
                                        else
                                        {

                                            if (!mox)
                                            {
                                                rx1_whole_filter_drag = true;
                                                whole_filter_start_low = dsp.GetDSPRX(0, 0).RXFilterLow;
                                                whole_filter_start_high = dsp.GetDSPRX(0, 0).RXFilterHigh;
                                            }
                                            else
                                            {
                                                tx_whole_filter_drag = true;
                                                whole_filter_start_low = setupForm.TXFilterLow;
                                                whole_filter_start_high = setupForm.TXFilterHigh;
                                            }
                                        }
                                    }
                                    else if (chkEnableMultiRX.Checked && !mox &&
                                        (e.X > vfoa_sub_low_x - 3 && e.X < vfoa_sub_high_x + 3))
                                    {
                                        sub_drag_last_x = e.X;
                                        if (rx2_enabled) sub_drag_start_freq = VFOASubFreq;
                                        else sub_drag_start_freq = VFOBFreq;
                                        rx1_sub_drag = true;
                                    }
                                    else
                                    {
                                        spectrum_drag_last_x = e.X;
                                        if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) && (e.Y > H7)) rx2_spectrum_drag = true; // ke9ns mod
                                        else rx1_spectrum_drag = true;
                                    }
                                    /*}
                                    else
                                    {
                                        spectrum_drag_last_x = e.X;
                                        if(rx2_enabled && e.Y > picDisplay.Height/2) rx2_spectrum_drag = true;
                                        else rx1_spectrum_drag = true;
                                    }*/
                                 // spaghetti?
                                break;
						}
					}
					break;
				case MouseButtons.Right:
                    double cfreq;


                    if ( (regBand == 0) )  // ke9ns add (ignore a right click on the picdisplay if a CTRL key held first) wait for mouse button to be let go when ctrl held
                    {
                        int x = e.X; // get mouse pos
                        int y = e.Y; // get mouse pos

                        // ke9ns add this section 
                        if ((SpotControl.SP4_Active == 0) && (SpotControl.SP_Active > 2) && (SpotControl.DX_Index > 0))  // Do below if not in the middle of processing a DX spot, but DX spotting is Active
                        {

                          

                            for (byte ii = 0; ii < DXK; ii++)
                            {

                                if ((x >= DXX[ii]) && (x <= (DXX[ii] + DXW[ii])) && (y >= DXY[ii]) && (y <= (DXY[ii] + DXH[ii])))
                                {

                                    var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                                    DXtemp.Append(DXS[ii]);

                                    try
                                    {

                                        System.Diagnostics.Process.Start(DXtemp.ToString());

                                        //  SpotForm.DX_SELECTED = Display.holder[ii]; //ke9ns add
                                        //  SpotForm.textBox1.SelectionStart = SpotForm.DX_SELECTED * SpotForm.LineLength;      // start of each dx spot line
                                        //  SpotForm.textBox1.SelectionLength = SpotForm.LineLength;                    // length of each dx spot  line

                                        //  SpotForm.textBox1_MouseUp(this, new MouseEventArgs(MouseButtons.Left, 0, 0, 0, 0));

                                    }
                                    catch
                                    {
                                        Debug.WriteLine("bad station");
                                        // if not a URL then ignore
                                    }

                                    return; // if a QRZ spot is found, then done, dont process the right click any further

                                } // index



                            } // for loop

                            if (chkRX2.Checked == true)
                            {
                                for (byte ii = 0; ii < DXK2; ii++)
                                {


                                    if ((x >= DXX[ii + 50]) && (x <= (DXX[ii + 50] + DXW[ii + 50])) && (y >= DXY[ii + 50]) && (y <= (DXY[ii + 50] + DXH[ii + 50])))
                                    {

                                        var DXtemp = new StringBuilder("https://www.qrz.com/db/");
                                        DXtemp.Append(DXS[ii + 50]);

                                        try
                                        {
                                            System.Diagnostics.Process.Start(DXtemp.ToString());
                                         
                                        }
                                        catch
                                        {
                                            Debug.WriteLine("bad station");
                                            // if not a URL then ignore
                                        }

                                        return; // break;

                                    } // index



                                } // for loop

                            } // rx2 checked on 


                        } // sp4  QRZ lookup for DX spot RX1 and RX2 above

                        //-------------------------------------------------------------
                        //ke9ns memory in Pan
                        if ((SpotControl.SP6_Active == 1))
                        {
                            // int x = DX_X;
                            //  int y = DX_Y;


                            for (int ii = 0; ii < MMK3; ii++) // check all spot on Panadapter
                            {

                                if ((x >= MMX[ii]) && (x <= (MMX[ii] + MMW[ii])) && (y >= MMY[ii]) && (y <= (MMY[ii] + MMH[ii])))
                                {
                                  //  Debug.WriteLine("MEMORY: " + MMC[ii ]);

                                    if (MMC[ii].Contains("http") == true)
                                    {
                                        //  var SXtemp = new StringBuilder("https://www.google.com/#q=");
                                        // SXtemp.Append(SXS[ii] + " shortwave");

                                        try
                                        {
                                            System.Diagnostics.Process.Start(MMC[ii].ToString());
                                        }
                                        catch
                                        {
                                            Debug.WriteLine("bad station");
                                        }

                                        return;
                                    }

                                } // index

                            } // for loop

                            //-------------------------------------------------------

                            if (chkRX2.Checked == true)  // check RX2 click
                            {
                                for (int ii = 0; ii < MMK4; ii++)
                                {

                                    if ((x >= MMX[ii + 50]) && (x <= (MMX[ii + 50] + DXW[ii + 50])) && (y >= MMY[ii + 50]) && (y <= (MMY[ii + 50] + MMH[ii + 50])))
                                    {
                                      //  Debug.WriteLine("MEMORY: "+ MMC[ii + 50]);

                                        if (MMC[ii + 50].Contains("http") == true)
                                        {
                                          //  var SXtemp = new StringBuilder("https://www.google.com/#q=");
                                           // SXtemp.Append(SXS[ii] + " shortwave");

                                            try
                                            {
                                                System.Diagnostics.Process.Start(MMC[ii+50].ToString());
                                            }
                                            catch
                                            {
                                                Debug.WriteLine("bad station");
                                            }

                                            return;
                                        }
                                    } // index


                                } // for loop

                            } // rx2 checked on 


                        } // memory ON pAN ACTIVE

                        //---------------------------------------------------------------------------------
                        //---------------------------------------------------------------------------------
                        //---------------------------------------------------------------------------------
                        //---------------------------------------------------------------------------------
                        //ke9ns SWL lookup on google
                        if ((SpotControl.SP1_Active == 1))
                        {

                            // Debug.WriteLine("test====");

                            //  int x = DX_X;
                            //  int y = DX_Y;

                            for (byte ii = 0; ii < SXK; ii++)
                            {

                                if ((x >= SXX[ii]) && (x <= (SXX[ii] + SXW[ii])) && (y >= SXY[ii]) && (y <= (SXY[ii] + SXH[ii])))
                                {

                                    var SXtemp = new StringBuilder("https://www.google.com/#q=");
                                    SXtemp.Append(SXS[ii] + " shortwave");

                                    try
                                    {
                                        System.Diagnostics.Process.Start(SXtemp.ToString());
                                    }
                                    catch
                                    {
                                        Debug.WriteLine("bad station");
                                    }

                                    return;

                                } // index

                            } // for loop

                        } //  if ((SpotControl.SP3_Active == 1) && (SpotControl.SP1_Active ==1))



                        //---------------------------------------------------------

                        if ((Display.CurrentDisplayModeBottom != DisplayMode.OFF) && (rx2_enabled) && (e.Y > H7)) // ke9ns mod
                        {
                            cfreq = VFOBFreq;
                            switch (rx2_dsp_mode)
                            {
                                case DSPMode.CWU: cfreq -= cw_pitch * 1e-6; break;
                                case DSPMode.CWL: cfreq += cw_pitch * 1e-6; break;
                            }
                        }
                        else
                        {
                            cfreq = VFOAFreq;
                            switch (rx1_dsp_mode)
                            {
                                case DSPMode.CWU: cfreq -= cw_pitch * 1e-6; break;
                                case DSPMode.CWL: cfreq += cw_pitch * 1e-6; break;
                            }
                        }

                        int clow = (int)PixelToHz(e.X - 3);
                        int chigh = (int)PixelToHz(e.X + 3);

#if (!NO_TNF)
                        List<Notch> lst = NotchList.NotchesInBW(cfreq, clow, chigh);

                       

                        if ((lst.Count > 0) && (!mox))
                        {
                            // make sure we have a check mark on remembered in the context menu if necessary
                            toolStripNotchRemember.Checked = lst[0].Permanent;
                            // display the pop-up
                            contextMenuStripNotch.Show(Cursor.Position);
                            Context_Notch = lst[0];

                            if (toolStripNotchNormal.Checked) lst[0].Depth = 1; // ke9ns add this section
                            else if (toolStripNotchDeep.Checked) lst[0].Depth = 2;
                            else lst[0].Depth = 3;

                            toolStripNotchNormal.Checked = (lst[0].Depth == 1);
                            toolStripNotchDeep.Checked = (lst[0].Depth == 2);
                            toolStripNotchVeryDeep.Checked = (lst[0].Depth == 3);
                        }
                        else
#endif
                        {
                            switch (current_click_tune_mode)
                            {
                                case ClickTuneMode.Off:
                                    CurrentClickTuneMode = ClickTuneMode.VFOA;
                                    break;
                                case ClickTuneMode.VFOA:
                                    if (chkVFOSplit.Checked || chkEnableMultiRX.Checked)
                                        CurrentClickTuneMode = ClickTuneMode.VFOB;
                                    else
                                        CurrentClickTuneMode = ClickTuneMode.Off;
                                    break;
                                case ClickTuneMode.VFOB:
                                    CurrentClickTuneMode = ClickTuneMode.Off;
                                    break;
                            }
                        }
                    } // regband == 0
					break;  // right button
				case MouseButtons.Middle:
					if(mouse_tune_step)
					{
						if(shift_down) ChangeTuneStepDown();
						else ChangeTuneStepUp();
					}
					break;



			} // switch e.button

		} //picdisplay mouse down


        //=================================================================================================
        // ke9ns mod 


        public static int[] SXX = new int[200]; // x ke9ns add used for qrz hyperlinking(these are the SWL locations on the screen)
        public static int[] SXY = new int[400]; // y
        public static int[] SXW = new int[400]; // width
        public static int[] SXH = new int[400]; // height
        public static int[] SXF = new int[400]; // freq
        public static string[] SXM = new string[400]; // mode
        
        public static string[] SXS = new string[400]; // ties it back to the real DX_Index
        public static int SXK = 0;               // number of spots on picdisplay RX1
        public static int SXK2 = 0;               // number of spots on picdisplay RX2
        public static int SXR = 0;               // 1=doing an QRZ hyperlink
        public static int SX_X = 0;               //x cursor pos inside picdisplay
        public static int SX_Y = 0;               //y  cursor pos inside picdisplay


        public static int[] DXX = new int[200]; // ke9ns add used for qrz hyperlinking(these are the dx spot callsign locations on the screen)
        public static int[] DXY = new int[200]; // 
        public static int[] DXW = new int[200]; //
        public static int[] DXH = new int[200]; //  
        public static string[] DXS = new string[200]; // ties it back to the real DX_Index
        public static int DXK = 0;               // number of spots on picdisplay RX1
        public static int DXK2 = 0;               // number of spots on picdisplay RX2
        public static int DXR = 0;               // 1=display SPOTTER call on screen instead of DX spot call, 0=DX Spot only


        public static int[] MMX = new int[200]; // ke9ns add X used for MEMORY hyperlinking(these are the callsign locations on the screen)
        public static int[] MMY = new int[200]; //           Y
        public static int[] MMW = new int[200]; //           W
        public static int[] MMH = new int[200]; //           H
        public static int[] MMM = new int[200]; //           Index postion in Memory.xml file
        public static string[] MMS = new string[200]; // ties it back to the real MEMORY NAME
        public static string[] MMC = new string[200]; // ties it back to the real memory comments hyperlink
        public static int MMK3 = 0;               // number of MEMORY spots on picdisplay RX1
        public static int MMK4 = 0;               // number of spots on picdisplay RX2

       
        public static int DX_X = 0;               //x cursor pos inside picdisplay e.X from a mousemove
        public static int DX_Y = 0;               //y  cursor pos inside picdisplay e.Y 

       // public static int CTM = 0;

        private void picDisplay_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
        {
         
            if (e.Button == MouseButtons.Left)
            {
                switch (Display.CurrentDisplayMode)
                {
                    case DisplayMode.PANADAPTER:
                    case DisplayMode.WATERFALL:
                    case DisplayMode.PANAFALL:
                    case DisplayMode.PANASCOPE:
                        rx1_low_filter_drag = false;
                        rx1_high_filter_drag = false;
                        rx1_whole_filter_drag = false;
                        rx2_low_filter_drag = false;
                        rx2_high_filter_drag = false;
                        rx2_whole_filter_drag = false;
                        tx_low_filter_drag = false;
                        tx_high_filter_drag = false;
                        tx_whole_filter_drag = false;

#if (!NO_TNF)
                        notch_drag = false;
                        notch_drag_max_delta_x = 0;
                        notch_drag_max_delta_y = 0;
                        timerNotchZoom.Enabled = false;
                        notch_zoom = false;

                        if (Display.TNFZoom)
                        {
                            Display.TNFZoom = false; // ke9ns turn off ZOOM feature when you let go of mouse button
                        }

                        // stop showing details for this notch in the panadapter
                        if (notch_drag_active != null)
                        {
                            notch_drag_active.Details = false;
                            notch_drag_active = null;
                        }
#endif
                        //rx2_sub_drag = false;
                        break;
                }

                if (rx1_sub_drag)
                {
                    rx1_sub_drag = false;
                    if (rx2_enabled) txtVFOABand_LostFocus(this, EventArgs.Empty);
                    else txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                }

                if (rx1_spectrum_drag)
                {
                    rx1_spectrum_drag = false;
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
                rx2_spectrum_drag = false;
                //Cursor = Cursors.Default;

                //picDisplay_MouseMove(this, e);
            } // left click

            //--------------------------------------------------------
            // ke9ns add hyperlink of spots to google or qrz

            else if (e.Button == MouseButtons.Right)
            {
              //  Debug.WriteLine("RIGHT CLICK "+regBand);



                if ((regBand == 1) && (e.Button == System.Windows.Forms.MouseButtons.Right)) //   indicates you must hold the CTRL key to set regBand = 1 
                {
                   regBand = 0;


                   // moved to mousedown routine



                } // hit ctrl key and right click



            } // Right click

          

        } //picDisplay mouseup



        private void picDisplay_DoubleClick(object sender, System.EventArgs e)
		{

            if ((chkRX2.Checked && 
                (display_cursor_y < H7 && rx1_dsp_mode == DSPMode.FM) ||
                (display_cursor_y >= H7 && rx2_dsp_mode == DSPMode.FM))
                 || !chkRX2.Checked && rx1_dsp_mode == DSPMode.FM)
                return;

            int new_val = (int)PixelToDb(display_cursor_y);

            if (!mox && chkRX2.Checked && display_cursor_y < H7) // ke9ns mod RX2
            {
                if (rx2_dsp_mode == DSPMode.FM)
                    return;

                if (new_val > ptbRX2Squelch.Maximum) new_val = ptbRX2Squelch.Maximum;
                if (new_val < ptbRX2Squelch.Minimum) new_val = ptbRX2Squelch.Minimum;
                ptbRX2Squelch.Value = new_val;
                ptbRX2Squelch_Scroll(this, EventArgs.Empty);
            }
            else if (!mox) // RX1
            {
                if (rx1_dsp_mode == DSPMode.FM)
                    return;

                if (new_val > ptbSquelch.Maximum) new_val = ptbSquelch.Maximum;
                if (new_val < ptbSquelch.Minimum) new_val = ptbSquelch.Minimum;
                ptbSquelch.Value = new_val;
                ptbSquelch_Scroll(this, EventArgs.Empty);
            }
			else // TX
			{
				new_val += 24;
                if (new_val > ptbNoiseGate.Maximum) new_val = ptbNoiseGate.Maximum;
                if (new_val < ptbNoiseGate.Minimum) new_val = ptbNoiseGate.Minimum;
                ptbNoiseGate.Value = new_val;
                ptbNoiseGate_Scroll(this, EventArgs.Empty);
			}

        } // picDisplay_DoubleClick



        private void picDisplay_Resize(object sender, System.EventArgs e)
		{
          //  Debug.WriteLine("picDisplay RESIZE  here");

			Display.Target = picDisplay;
			Display.Init();
			//Display.DrawBackground();
			UpdateDisplay();
		}

		private void ptbDisplayPan_Scroll(object sender, System.EventArgs e)
		{
          //  CTUN1_HZ = 0; // ke9ns add

            CalcDisplayFreq();
			if(ptbDisplayPan.Focused) btnHidden.Focus();

          

		}

		private void btnDisplayPanCenter_Click(object sender, System.EventArgs e)
		{
			//double edge_alias = 7200.0;
			//double if_freq = 11025.0;

                 CTUN1_HZ = 0; // reset CTUN to center
         
			double spur_tune_width = 200e6 / Math.Pow(2, 16);
			if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
				spur_tune_width = 500e6 / Math.Pow(2, 16);
			int width = Display.RXDisplayHigh - Display.RXDisplayLow;

			int max_pan_width = (int)(sample_rate1-2*spur_tune_width-width);
			if(max_pan_width == 0)
			{
				ptbDisplayPan.Value = (ptbDisplayPan.Maximum - ptbDisplayPan.Minimum)/2;
				ptbDisplayPan_Scroll(btnDisplayPanCenter, EventArgs.Empty);
				return;
			}
			
			int low = -width/2; // target -- if width is centered at 0, low will be half the width below 0
			int abs_low = (int)(-(double)sample_rate1*0.5 - if_freq*1e6 + spur_tune_width);
			int offset = low - abs_low;

			int new_val = (int)((double)offset * (double)ptbDisplayPan.Maximum / (double)max_pan_width);
			ptbDisplayPan.Value = Math.Min(Math.Max(ptbDisplayPan.Minimum, new_val), ptbDisplayPan.Maximum);
			ptbDisplayPan_Scroll(btnDisplayPanCenter, EventArgs.Empty);
		}


		private void ptbDisplayZoom_Scroll(object sender, System.EventArgs e)
		{
			double zoom_factor = 1.0 / ((ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - ptbDisplayZoom.Value) * 0.01); // ke9ns  .4 full left to 10 full right
			
			if(zoom_factor == 0.5) radDisplayZoom05.Checked = true;
			else if(zoom_factor == 1.0)	radDisplayZoom1x.Checked = true;
			else if(zoom_factor == 2.0)	radDisplayZoom2x.Checked = true;
			else if(zoom_factor == 4.0) radDisplayZoom4x.Checked = true;
			else 
            {
                radDisplayZoom05.Checked = false;
                radDisplayZoom1x.Checked = false;
                radDisplayZoom2x.Checked = false;
                radDisplayZoom4x.Checked = false;
            }

			CalcDisplayFreq();

			if(ptbDisplayZoom.Focused) btnHidden.Focus();
		}


		private void radDisplayZoom05_CheckedChanged(object sender, System.EventArgs e)
		{
            if (radDisplayZoom05.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 0.5);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
		}

        private void radDisplayZoom1x_CheckedChanged(object sender, System.EventArgs e)
		{
            if (radDisplayZoom1x.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 1.0);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
		}

        private void radDisplayZoom2x_CheckedChanged(object sender, System.EventArgs e)
		{
            if (radDisplayZoom2x.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 2.0);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
		}

        private void radDisplayZoom4x_CheckedChanged(object sender, System.EventArgs e)
		{
            if (radDisplayZoom4x.Checked)
            {
                ptbDisplayZoom.Value = ptbDisplayZoom.Maximum + ptbDisplayZoom.Minimum - (int)(100.0 / 4.0);
                ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                btnDisplayPanCenter_Click(this, EventArgs.Empty);
            }
		}

#endregion

#region Band Button Events
		// ======================================================
		// Band Button Events
		// ======================================================

        private void radBand160_Click(object sender, EventArgs e)
        {
            SaveBand(); // ke9ns save freq you were on prior to coming here
            if (last_band.Equals("160M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_160m_index = (band_160m_index - 1 + band_160m_register) % band_160m_register;
                else
                    band_160m_index = (band_160m_index + 1) % band_160m_register;
            }
            last_band = "160M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_160m_index, out mode, out filter, out freq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand80_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("80M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_80m_index = (band_80m_index - 1 + band_80m_register) % band_80m_register;
                else
                    band_80m_index = (band_80m_index + 1) % band_80m_register;
            }
            last_band = "80M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_80m_index, out mode, out filter, out freq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand60_Click(object sender, EventArgs e)
        {
           /* if (RX1IsIn60m() && !RX1IsOn60mChannel())
            {
                // jump to nearest 60m band
                double jump_freq = 0;
                double min_delta = double.MaxValue;
                double offset = ModeFreqOffset(rx1_dsp_mode);
                int index = 0;
                int min_index = 0;
                foreach (Channel c in Display.Channels60m)
                {
                    double freq = c.Freq + offset;
                    double delta = Math.Abs(freq-VFOAFreq);
                    if (delta < min_delta)
                    {
                        min_delta = delta;
                        jump_freq = freq;
                        min_index = index;
                    }
                    index++;
                }

                VFOAFreq = jump_freq;
                band_60m_index = min_index; // sets the band stack index
                last_band = "60M";
            }
            else
            { */
                SaveBand();
                if (last_band.Equals("60M"))
                {
                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                        band_60m_index = (band_60m_index - 1 + band_60m_register) % band_60m_register;
                    else
                        band_60m_index = (band_60m_index + 1) % band_60m_register;
                }
                last_band = "60M";

                string filter, mode;
                double freq;
                if (DB.GetBandStack(last_band, band_60m_index, out mode, out filter, out freq))
                {
                    if (filter.Contains("@"))
                    {
                        filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                    }
                    SetBand(mode, filter, freq);
                }
           /*  } */
            UpdateWaterfallLevelValues();
        }

        private void radBand40_Click(object sender, EventArgs e)
        {
            SaveBand();

            if (last_band.Equals("40M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_40m_index = (band_40m_index - 1 + band_40m_register) % band_40m_register;
                else
                    band_40m_index = (band_40m_index + 1) % band_40m_register;
            }
            last_band = "40M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_40m_index, out mode, out filter, out freq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand30_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("30M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_30m_index = (band_30m_index - 1 + band_30m_register) % band_30m_register;
                else
                    band_30m_index = (band_30m_index + 1) % band_30m_register;
            }
            last_band = "30M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_30m_index, out mode, out filter, out freq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }
                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand20_Click(object sender, EventArgs e)
        {
         
            SaveBand();

          
            if (last_band.Equals("20M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_20m_index = (band_20m_index - 1 + band_20m_register) % band_20m_register;
                else
                    band_20m_index = (band_20m_index + 1) % band_20m_register;
            }
            last_band = "20M";

          
            string filter, mode;
            double freq;

            if (DB.GetBandStack(last_band, band_20m_index, out mode, out filter, out freq))
            {
                if (filter.Contains("@"))
                {
                    filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                }

             
                SetBand(mode, filter, freq);

             
            }

            UpdateWaterfallLevelValues();

          
        }

        private void radBand17_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("17M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_17m_index = (band_17m_index - 1 + band_17m_register) % band_17m_register;
                else
                    band_17m_index = (band_17m_index + 1) % band_17m_register;
            }
            last_band = "17M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_17m_index, out mode, out filter, out freq))
            {
                if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout
                
                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
            
        }

        private void radBand15_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("15M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_15m_index = (band_15m_index - 1 + band_15m_register) % band_15m_register;
                else
                    band_15m_index = (band_15m_index + 1) % band_15m_register;
            }
            last_band = "15M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_15m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand12_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("12M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_12m_index = (band_12m_index - 1 + band_12m_register) % band_12m_register;
                else
                    band_12m_index = (band_12m_index + 1) % band_12m_register;
            }
            last_band = "12M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_12m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand10_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("10M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_10m_index = (band_10m_index - 1 + band_10m_register) % band_10m_register;
                else
                    band_10m_index = (band_10m_index + 1) % band_10m_register;
            }
            last_band = "10M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_10m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand6_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("6M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_6m_index = (band_6m_index - 1 + band_6m_register) % band_6m_register;
                else
                    band_6m_index = (band_6m_index + 1) % band_6m_register;
            }
            last_band = "6M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_6m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        private void radBand2_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("2M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_2m_index = (band_2m_index - 1 + band_2m_register) % band_2m_register;
                else
                    band_2m_index = (band_2m_index + 1) % band_2m_register;
            }
            last_band = "2M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_2m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }	

        private void radBandWWV_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("WWV"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_wwv_index = (band_wwv_index - 1 + band_wwv_register) % band_wwv_register;
                else
                    band_wwv_index = (band_wwv_index + 1) % band_wwv_register;
            }
            last_band = "WWV";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_wwv_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }
		

        //=============================================================================================
        private void radBandGEN_Click(object sender, EventArgs e)
        {

            return; // ke9ns add

            SaveBand();

            if (last_band == "GEN")
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_gen_index = (band_gen_index - 1 + band_gen_register) % band_gen_register;
                else
                    band_gen_index = (band_gen_index + 1) % band_gen_register;
            }
            last_band = "GEN";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_gen_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

        /*
        private void radBandGEN_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band == "GEN")
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_gen_index = (band_gen_index - 1 + band_gen_register) % band_gen_register;
                else
                    band_gen_index = (band_gen_index + 1) % band_gen_register;
            }
            last_band = "GEN";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_gen_index, out mode, out filter, out freq))
            {
              if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

*/
        private void radBandVHF_Click(object sender, EventArgs e)
        {
            SaveBand();

            string new_band = ((Control)sender).Name.Substring(7); // ke9ns look at button that sent you here and get the last VHF#
            int index = -1, register = -1;

            switch (new_band)
            {
                case "VHF0": index = band_vhf0_index; register = band_vhf0_register; break;
                case "VHF1": index = band_vhf1_index; register = band_vhf1_register; break;
                case "VHF2": index = band_vhf2_index; register = band_vhf2_register; break;
                case "VHF3": index = band_vhf3_index; register = band_vhf3_register; break;
                case "VHF4": index = band_vhf4_index; register = band_vhf4_register; break;
                case "VHF5": index = band_vhf5_index; register = band_vhf5_register; break;
                case "VHF6": index = band_vhf6_index; register = band_vhf6_register; break;
                case "VHF7": index = band_vhf7_index; register = band_vhf7_register; break;
                case "VHF8": index = band_vhf8_index; register = band_vhf8_register; break;
                case "VHF9": index = band_vhf9_index; register = band_vhf9_register; break;
                case "VHF10": index = band_vhf10_index; register = band_vhf10_register; break;
                case "VHF11": index = band_vhf11_index; register = band_vhf11_register; break;
                case "VHF12": index = band_vhf12_index; register = band_vhf12_register; break;
                case "VHF13": index = band_vhf13_index; register = band_vhf13_register; break;
            }

            int xvtr_index = Int32.Parse(new_band.Substring(3));

            double start_freq = xvtrForm.GetBegin(xvtr_index);
            double end_freq = xvtrForm.GetEnd(xvtr_index);

            if (register < 3) // ke9ns create a bandstack since there is none in the database.cs file
            {
                for (int i = 0; i < 3 - register; i++)
                    DB.AddBandStack(new_band, "USB", "2600", start_freq + i * 0.0010);

                UpdateBandStackRegisters();
                register = 3;
            }
            else
            {
                if (last_band == new_band)
                {
                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                        index = (index - 1 + register) % register;
                    else
                        index = (index + 1) % register;
                }

                switch (new_band)
                {
                    case "VHF0": band_vhf0_index = index; break;
                    case "VHF1": band_vhf1_index = index; break;
                    case "VHF2": band_vhf2_index = index; break;
                    case "VHF3": band_vhf3_index = index; break;
                    case "VHF4": band_vhf4_index = index; break;
                    case "VHF5": band_vhf5_index = index; break;
                    case "VHF6": band_vhf6_index = index; break;
                    case "VHF7": band_vhf7_index = index; break;
                    case "VHF8": band_vhf8_index = index; break;
                    case "VHF9": band_vhf9_index = index; break;
                    case "VHF10": band_vhf10_index = index; break;
                    case "VHF11": band_vhf11_index = index; break;
                    case "VHF12": band_vhf12_index = index; break;
                    case "VHF13": band_vhf13_index = index; break;
                }
            }

            last_band = new_band; // ke9ns let the rest of console know the new band

            string filter, mode;
            double freq;

            for (int i = 0; i < 3; i++)
            {
                DB.GetBandStack(last_band, i, out mode, out filter, out freq);

                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                if (freq < start_freq || freq > end_freq)
                    DB.SaveBandStack(last_band, i, mode, filter, start_freq + i * 0.001);
            }

            if (DB.GetBandStack(last_band, index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        }

#endregion

#region Mode Button Events
		// ======================================================
		// Mode Button Events
		// ======================================================

		private void SetRX1Mode(DSPMode new_mode)
		{

            if (new_mode == DSPMode.FIRST || new_mode == DSPMode.LAST) return;

            DSPMode old_mode = rx1_dsp_mode;

            string current_txprofile = comboTXProfile.Text;

			dsp.GetDSPRX(0, 0).DSPMode = new_mode;				// set new DSP mode
			dsp.GetDSPRX(0, 1).DSPMode = new_mode; // ke9ns  ( 0,1) sets the multiRX receiver to the same DSP mode
            
            if (disable_split_on_modechange & !initializing)
            {
                if (chkVFOSplit.Checked) chkVFOSplit.Checked = false;
            }
            
            if (chkVFOATX.Checked || !rx2_enabled)
			{
				Audio.TXDSPMode = new_mode;
				dsp.GetDSPTX(0).CurrentDSPMode = new_mode;

                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                {
                  
                    FWC.SetTXDSPMode(new_mode);
                }
			}

			Display.RX1DSPMode = new_mode;

            if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
            {
                FWC.SetRX1DSPMode(new_mode);
            }

			double rx1_freq = VFOAFreq;
            int old_txosc = (int)dsp.GetDSPTX(0).TXOsc;

			ptbFilterShift.Value = 0;
			btnFilterShiftReset.BackColor = SystemColors.Control;

            switch (old_mode) // ke9ns put away old TX profile since your changing DSP modes
			{
				case DSPMode.LSB:
					radModeLSB.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)  lsb_txprofile = comboTXProfile.Text;

					break;
				case DSPMode.USB:
					radModeUSB.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)   usb_txprofile = comboTXProfile.Text;

					break;
				case DSPMode.DSB:
					radModeDSB.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)   dsb_txprofile = comboTXProfile.Text;

					break;
				case DSPMode.CWL:
					radModeCWL.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)  cwl_txprofile = comboTXProfile.Text;

                    if ((chkVFOATX.Checked || !rx2_enabled) && new_mode != DSPMode.CWU && new_mode != DSPMode.CWL)
                    {
                        moninit = 1;                 // ke9ns add
                        Audio.MON_PRE = mon2_recall; // ke9ns add  do this when coming out of CW mode and need to put MON back in correct setting
                        chkMON.Checked = mon_recall;
                    }

                    if (!RX1IsOn60mChannel())
                    {                        
                        switch (new_mode)
                        {
                            case DSPMode.USB:
                                rx1_freq -= (cw_pitch * 0.0000010);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx1_freq += (cw_pitch * 0.0000010);
                                break;
                        }
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }
					
					break;
				case DSPMode.CWU:
					radModeCWU.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)  cwu_txprofile = comboTXProfile.Text;

                    if ((chkVFOATX.Checked || !rx2_enabled) && new_mode != DSPMode.CWL && new_mode != DSPMode.CWU)
                    {
                        moninit = 1; // ke9ns add
                        Audio.MON_PRE = mon2_recall; // ke9ns add  do this when coming out of CW mode and need to put MON back in correct setting
                        chkMON.Checked = mon_recall;
                    }

                    if (!RX1IsOn60mChannel())
                    {                        
                        switch (new_mode)
                        {
                            case DSPMode.LSB:
                                rx1_freq += (cw_pitch * 0.0000010);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx1_freq -= (cw_pitch * 0.0000010);
                                break;
                        }
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }
					
					break;
				case DSPMode.FM:
					radModeFMN.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)  fm_txprofile = comboTXProfile.Text;

                    if (chkVFOATX.Checked || chkVFOBTX.Checked || !rx2_enabled)
					{							
						if((new_mode != DSPMode.AM) && (new_mode != DSPMode.SAM) &&	(new_mode != DSPMode.FM))
						{						
							chkMON.Enabled = true;
							chkBIN.Enabled = true;
						}

                        ptbMic_Scroll(this, EventArgs.Empty);
					}

                    if(new_mode != DSPMode.SPEC || new_mode != DSPMode.DRM)
                        EnableAllFilters();

                    if (!initializing)
                        rx1_fm_squelch_threshold_scroll = ptbSquelch.Value;

                    ptbSquelch.Minimum = -160;
                    ptbSquelch.Maximum = 0;

                    picSquelch.Visible = true;

                    ptbSquelch.Value = rx1_squelch_threshold_scroll;
					break;

				case DSPMode.AM:
					radModeAM.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)
                        am_txprofile = comboTXProfile.Text;

                    if (chkVFOATX.Checked || chkVFOBTX.Checked || !rx2_enabled)
					{
						if(new_mode != DSPMode.AM && new_mode != DSPMode.SAM &&	new_mode != DSPMode.FM)
						{
							chkMON.Enabled = true;
							chkBIN.Enabled = true;
						}
					}
					break;
				case DSPMode.SAM:
					radModeSAM.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)
                        sam_txprofile = comboTXProfile.Text;

                    if (chkVFOATX.Checked || chkVFOBTX.Checked || !rx2_enabled)
					{
						if(new_mode != DSPMode.AM && 
							new_mode != DSPMode.SAM &&
							new_mode != DSPMode.FM)
						{
							chkMON.Enabled = true;
							chkBIN.Enabled = true;
						}
					}
					break;
				case DSPMode.SPEC:
					radModeSPEC.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)
                        spec_txprofile = comboTXProfile.Text;

					comboDisplayMode.Items.Insert(1, "Panadapter");
					comboDisplayMode.Items.Insert(5, "Waterfall");
					ptbFilterShift.Enabled = true;
					btnFilterShiftReset.Enabled = true;
                    if (new_mode != DSPMode.DRM || new_mode != DSPMode.FM)
						EnableAllFilters();
					RX1Filter = rx1_filter;
					if_shift = true;
					if(was_panadapter) comboDisplayMode.Text = "Panadapter";
					else if(was_waterfall) comboDisplayMode.Text = "Waterfall";		
					switch(Display.CurrentDisplayMode)
					{
						case DisplayMode.PANADAPTER:
						case DisplayMode.WATERFALL:
						case DisplayMode.PANAFALL:
						case DisplayMode.PANASCOPE:
							dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
							break;
						default:
							dsp.GetDSPRX(0, 0).SpectrumPreFilter = false;
							break;
					}
					break;
				case DSPMode.DIGL:
					radModeDIGL.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)
                        digl_txprofile = comboTXProfile.Text;

					if(vac_auto_enable &&
						new_mode != DSPMode.DIGU &&
						new_mode != DSPMode.DRM &&
                        new_mode != DSPMode.DIGL)
					{
						setupForm.VACEnable = false;
					}
					break;
				case DSPMode.DIGU:
					radModeDIGU.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing)
                        digu_txprofile = comboTXProfile.Text;

					if(vac_auto_enable &&
						new_mode != DSPMode.DIGL &&
						new_mode != DSPMode.DRM &&
                        new_mode != DSPMode.DIGU)
					{
						setupForm.VACEnable = false;
					}
					break;
				case DSPMode.DRM:
					radModeDRM.BackColor = SystemColors.Control;

                    if (TXProfileByMode & !initializing) drm_txprofile = comboTXProfile.Text;

					if_shift = true;
					vfo_offset = 0.0;
                    if (vac_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DIGU &&
                        new_mode != DSPMode.DRM)
                    {
                        setupForm.VACEnable = false;
                    }
					ptbFilterShift.Enabled = true;
					btnFilterShiftReset.Enabled = true;
					if(new_mode != DSPMode.SPEC || new_mode != DSPMode.FM)
						EnableAllFilters();
					if_freq = setupForm.IFFreq;
					CalcDisplayFreq();
                    chkTNF.Enabled = true;
                    btnTNFAdd.Enabled = true;
					break;



			} // SetRX1mode

            switch(new_mode) //ke9ns  load up new TX profile 
			{
				case DSPMode.LSB:
					radModeLSB.BackColor = button_selected_color;

                    if ((current_txprofile != lsb_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = lsb_txprofile;

                    //grpMode.Text = "Mode - LSB";
					if(!rx_only && chkPower.Checked)
						chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					panelModeSpecificPhone.BringToFront();
					break;

				case DSPMode.USB:
					radModeUSB.BackColor = button_selected_color;

                    if ((current_txprofile != usb_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = usb_txprofile;

					//grpMode.Text = "Mode - USB";
					if(!rx_only && chkPower.Checked)
						chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
                    panelModeSpecificPhone.BringToFront();
					break;

				case DSPMode.DSB:
					radModeDSB.BackColor = button_selected_color;

                    if ((current_txprofile != dsb_txprofile) & (TXProfileByMode) & !initializing)  comboTXProfile.Text = dsb_txprofile;

					//grpMode.Text = "Mode - DSB";
					if(!rx_only && chkPower.Checked)
						chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || !rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
                    panelModeSpecificPhone.BringToFront();
					break;

				case DSPMode.CWL:
					radModeCWL.BackColor = button_selected_color;

                    if ((current_txprofile != cwl_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = cwl_txprofile;

					//grpMode.Text = "Mode - CWL";
                    if (chkVFOATX.Checked || !rx2_enabled)
					{
                        CWPitch = cw_pitch;
						dsp.GetDSPTX(0).TXOsc = 0.0;
						//DSP.KeyerFreq = cw_pitch;
						if(!rx_only && chkPower.Checked)
						{
							chkMOX.Enabled = true;
							//DttSP.StopKeyer();
							//DttSP.CWRingRestart();
							//DttSP.StartKeyer();
						}

                        if (old_mode != DSPMode.CWL && old_mode != DSPMode.CWU)
                        {
                            if (!initializing)
                            {
                                mon_recall = chkMON.Checked;
                                mon2_recall = Audio.MON_PRE; // ke9ns add 
                            }
                              chkMON.Checked = cw_sidetone;
                        }
					
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
					}

                    if (!RX1IsOn60mChannel())
                    {                        
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.USB:
                                rx1_freq += (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx1_freq -= (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }
					
                    panelModeSpecificCW.BringToFront();
					break;

				case DSPMode.CWU:
					radModeCWU.BackColor = button_selected_color;

                    if ((current_txprofile != cwu_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = cwu_txprofile;

					//grpMode.Text = "Mode - CWU";
                    if (chkVFOATX.Checked || !rx2_enabled)
					{
                        CWPitch = cw_pitch;
						dsp.GetDSPTX(0).TXOsc = 0.0;
						//DSP.KeyerFreq = -cw_pitch;
						if(!rx_only && chkPower.Checked)
						{
							chkMOX.Enabled = true;
							//DttSP.StopKeyer();
							//DttSP.CWRingRestart();
							//DttSP.StartKeyer();
						}

                        if (rx1_dsp_mode != DSPMode.CWL)
                        {
                            if (!initializing)
                            {
                                mon_recall = chkMON.Checked;
                                mon2_recall = Audio.MON_PRE; // ke9ns add 
                            }
                             chkMON.Checked = cw_sidetone;
                        }

						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
					}

                    if (!RX1IsOn60mChannel())
                    {                            
                        switch (rx1_dsp_mode)
                        {
                            case DSPMode.LSB:
                                rx1_freq -= (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx1_freq += (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOAFreq.Text = rx1_freq.ToString("f6");
                    }
					
                    panelModeSpecificCW.BringToFront();
					break;

				case DSPMode.FM:                    
					radModeFMN.BackColor = button_selected_color;

                    if ((current_txprofile != fm_txprofile) & (TXProfileByMode) & !initializing)  comboTXProfile.Text = fm_txprofile;

                    DisableAllFilters();

                    if(!initializing)     rx1_squelch_threshold_scroll = ptbSquelch.Value;

                    ptbSquelch.Minimum = 0;
                    ptbSquelch.Maximum = 100;

                    ptbSquelch.Value = rx1_fm_squelch_threshold_scroll;

                    picSquelch.Visible = false;

                    rx1_squelch_on = chkSquelch.Checked;    //save state of non-FM squelch
                    chkSquelch.Checked = true;

                    if (chkVFOATX.Checked || chkVFOBTX.Checked || !rx2_enabled)
					{
						if(!rx_only && chkPower.Checked)	chkMOX.Enabled = true;

#if NO_MON // ke9ns off to allow mon function in FM mode
                        chkMON.Checked = false; // ke9ns test
                        chkMON.Enabled = false;
#endif
                        chkBIN.Checked = false;
						chkBIN.Enabled = false;

                       
                        if (!chkVFOBTX.Checked) SetTXFilters(new_mode, tx_filter_low, tx_filter_high); //W0DHB TX
                       // SetTXFilters(new_mode, tx_filter_low, tx_filter_high); // ke9ns original code

						dsp.GetDSPTX(0).TXOsc = 11025.0;

                        ptbFMMic_Scroll(this, EventArgs.Empty);
					}
                    panelModeSpecificFM.BringToFront();


					break;

				case DSPMode.AM:
					radModeAM.BackColor = button_selected_color;

                    if ((current_txprofile != am_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = am_txprofile;

					//grpMode.Text = "Mode - AM";
					if(!rx_only && chkPower.Checked)
						chkMOX.Enabled = true;
                    if (chkVFOATX.Checked || chkVFOBTX.Checked || !rx2_enabled)
					{

#if NO_MON  // ke9ns off to allow mon function in FM mode
                        chkMON.Checked = false; // ke9ns test
					    chkMON.Enabled = false;
#endif
                        chkBIN.Checked = false;
						chkBIN.Enabled = false;

                        if ((!chkVFOBTX.Checked) || (AMMODE != AMMODE_LAST)) SetTXFilters(new_mode, tx_filter_low, tx_filter_high); //W0DHB TX (ke9ns mod)
                        //   SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        AMMODE_LAST = AMMODE; // ke9ns add
                        dsp.GetDSPTX(0).TXOsc = 11025.0;
					}
                    panelModeSpecificPhone.BringToFront();

					break; // AM mode

				case DSPMode.SAM:
					radModeSAM.BackColor = button_selected_color;

                    if ((current_txprofile != sam_txprofile) & (TXProfileByMode) & !initializing)  comboTXProfile.Text = sam_txprofile;

					//grpMode.Text = "Mode - SAM";
					if(!rx_only && chkPower.Checked) chkMOX.Enabled = true;

                    if (chkVFOATX.Checked || chkVFOBTX.Checked || !rx2_enabled)
					{
#if NO_MON  // ke9ns off to allow mon function in SAM mode
                        chkMON.Checked = false; // ke9ns test
                        chkMON.Enabled = false;
#endif
                        chkBIN.Checked = false;
						chkBIN.Enabled = false;

                        if ((!chkVFOBTX.Checked )|| (SAMMODE != SAMMODE_LAST)) SetTXFilters(new_mode, tx_filter_low, tx_filter_high); //W0DHB TX  (ke9ns mod)
                          //  SetTXFilters(new_mode, tx_filter_low, tx_filter_high);

                        SAMMODE_LAST = SAMMODE; // ke9ns add  save 

                        dsp.GetDSPTX(0).TXOsc = 11025.0;
					}
                    panelModeSpecificPhone.BringToFront();

					break; // SAM mode

				case DSPMode.SPEC:
					radModeSPEC.BackColor = button_selected_color;

                    if ((current_txprofile != spec_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = spec_txprofile;

					//grpMode.Text = "Mode - SPEC";
					if_shift = false;
					dsp.GetDSPRX(0, 0).RXOsc = 0.0;
					DisableAllFilters();
					ptbFilterShift.Enabled = false;
					btnFilterShiftReset.Enabled = false;
					bool save_pan = (Display.CurrentDisplayMode == DisplayMode.PANADAPTER);
					bool save_water = (Display.CurrentDisplayMode == DisplayMode.WATERFALL);
					if(save_pan || save_water)
					{
						comboDisplayMode.Text = "Spectrum";
					}
					comboDisplayMode.Items.Remove("Panadapter");
					comboDisplayMode.Items.Remove("Waterfall");
					was_panadapter = save_pan;
					was_waterfall = save_water;
					dsp.GetDSPRX(0, 0).SpectrumPreFilter = true;
					Display.RXDisplayLow = -(int)sample_rate1/2;
					Display.RXDisplayHigh = (int)sample_rate1/2;
					break;

				case DSPMode.DIGL:
					radModeDIGL.BackColor = button_selected_color;

                    if ((current_txprofile != digl_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = digl_txprofile;

					//grpMode.Text = "Mode - DIGL";
                    if (chkVFOATX.Checked || !rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					if(vac_auto_enable)
						setupForm.VACEnable = true;

                    panelModeSpecificDigital.BringToFront();
					break;

				case DSPMode.DIGU:
					radModeDIGU.BackColor = button_selected_color;
                    
                    if ((current_txprofile != digu_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = digu_txprofile;

					//grpMode.Text = "Mode - DIGU";
					if(chkVFOATX.Checked) 
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					if(vac_auto_enable)
						setupForm.VACEnable = true;

                    panelModeSpecificDigital.BringToFront();
					break;

				case DSPMode.DRM:
					if_shift = false;
					vfo_offset = -0.012;
					radModeDRM.BackColor = button_selected_color;

                    if ((current_txprofile != drm_txprofile) & (TXProfileByMode) & !initializing)
                        comboTXProfile.Text = drm_txprofile;

					//grpMode.Text = "Mode - DRM";
					if(vac_auto_enable)
						setupForm.VACEnable = true;
					//chkMOX.Enabled = false;
                    if (chkVFOATX.Checked || !rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					DisableAllFilters();
					ptbFilterShift.Enabled = false;
					btnFilterShiftReset.Enabled = false;
					//grpFilter.Text = "Filter - DRM";
					dsp.GetDSPRX(0, 0).SetRXFilter(7000, 17000);
					/*Display.RXDisplayLow = -8000;
						Display.RXDisplayHigh = 8000;*/
                    panelModeSpecificDigital.BringToFront();
                    btnTNFAdd.Enabled = false;
                    chkTNF.Enabled = false;
                    chkTNF.Checked = false;                    
					break; //DRM mode

			} // Switch (new mode)

            if (RX1IsOn60mChannel())
            {
                // adjust freq offset to ensure center of energy for new mode in 60m
                rx1_freq += (-ModeFreqOffset(old_mode) + ModeFreqOffset(new_mode));
                txtVFOAFreq.Text = rx1_freq.ToString("f6");
            }

            int new_txosc = (int)dsp.GetDSPTX(0).TXOsc;

            if (new_txosc != old_txosc)
            {
                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) FWC.SetTXOffset(new_txosc);
            }

			radFilter1.Text = rx1_filters[(int)new_mode].GetName(Filter.F1);
			radFilter2.Text = rx1_filters[(int)new_mode].GetName(Filter.F2);
			radFilter3.Text = rx1_filters[(int)new_mode].GetName(Filter.F3);
			radFilter4.Text = rx1_filters[(int)new_mode].GetName(Filter.F4);
			radFilter5.Text = rx1_filters[(int)new_mode].GetName(Filter.F5);
			radFilter6.Text = rx1_filters[(int)new_mode].GetName(Filter.F6);
			radFilter7.Text = rx1_filters[(int)new_mode].GetName(Filter.F7);
			radFilter8.Text = rx1_filters[(int)new_mode].GetName(Filter.F8);
			radFilter9.Text = rx1_filters[(int)new_mode].GetName(Filter.F9);
			radFilter10.Text = rx1_filters[(int)new_mode].GetName(Filter.F10);
			radFilterVar1.Text = rx1_filters[(int)new_mode].GetName(Filter.VAR1);
			radFilterVar2.Text = rx1_filters[(int)new_mode].GetName(Filter.VAR2);

			rx1_dsp_mode = new_mode;

            if(old_mode == DSPMode.FM)   chkSquelch.Checked = rx1_squelch_on;  // ke9ns 

            if(old_mode == DSPMode.FM || new_mode == DSPMode.FM)   ptbSquelch_Scroll(this, EventArgs.Empty);

			if(rx1_dsp_mode != DSPMode.SPEC && rx1_dsp_mode != DSPMode.FM && rx1_dsp_mode != DSPMode.DRM)
			{
				RX1Filter = rx1_filters[(int)new_mode].LastFilter;
			}
			else
			{
                if (rx1_dsp_mode == DSPMode.FM)
                {
                    if (dsp.GetDSPTX(0).TXFMDeviation == FMDataDeviation) // ke9ns add
                    {
                        UpdateRX1Filters(-FMDataLowHigh, FMDataLowHigh);
                    }
                    else if (dsp.GetDSPTX(0).TXFMDeviation == 5000)
                    {
                        UpdateRX1Filters(-8000, 8000);
                    }
                    else
                    {
                        UpdateRX1Filters(-4000, 4000);
                    }
                }

				RX1Filter = Filter.NONE;
				//grpFilter.Text = "Filter - "+(sample_rate1/1000).ToString("f0")+"kHz";
			}

			tbFilterWidthScroll_newMode(); // wjt 

			//Display.DrawBackground();

			UpdateDSPBufRX1();
			UpdateDSPBufTX();
			
			txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			ptbPWR_Scroll(this, EventArgs.Empty);

			if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
			{
				if(chkVFOSplit.Checked || full_duplex)
					txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				bool tx1, tx2, tx3;
				if(flex5000RelayForm != null)	flex5000RelayForm.UpdateRelayState(out tx1, out tx2, out tx3);
			}

            // voacap

        } // SetRX1Mode()



		private void radModeLSB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeLSB.Checked)
			{
				SetRX1Mode(DSPMode.LSB);
			}
		}

		private void radModeUSB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeUSB.Checked)
			{
				SetRX1Mode(DSPMode.USB);
			}
		}

		private void radModeDSB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeDSB.Checked)
			{
				SetRX1Mode(DSPMode.DSB);
			}
		}

		private void radModeCWL_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeCWL.Checked)
			{
                chkANF.Checked = false;
                SetRX1Mode(DSPMode.CWL);
			}

		}

		private void radModeCWU_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeCWU.Checked)
			{
                chkANF.Checked = false;
                SetRX1Mode(DSPMode.CWU);
			}
		}

		private void radModeFMN_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeFMN.Checked)
			{
				SetRX1Mode(DSPMode.FM);
			}
            else
            {
                FMRESET = false;
            }

            //dsp.GetDSP(0, 0).SetRXFilter(-50000, 50000);
        }


        public bool FMRESET = false; // ke9ns add true=FM button pushed
        public bool FMData = false; // ke9ns add true=FM data mode
        public double lastdeviation = 0; // ke9ns add false = 2k, true = 5k

        public const int FMDataDeviation = 7000; // ke9ns deviation amount for FM Data mode
        public const int FMDataLowHigh = 10000; // ke9ns +10000 or -10000

        // ke9ns add  (to allow a digital version of FM just like DIGU or DIGL)
        private void radModeFMN_MouseUp(object sender, MouseEventArgs e)
        {
            if ((radModeFMN.Checked) && (FMRESET == true))
            {
                if (FMData == false)
                {
                    FMData = true;
                    radModeFMN.Text = "D-FM"; // digital FM (wider)
                    FMDeviation_Hz = FMDataDeviation;
                    lastdeviation = dsp.GetDSPTX(0).TXFMDeviation; // store deviation used last
                    FMDeviation10khz(); // ke9ns make it 10khz deviation

                    dsp.GetDSPTX(0).TXFMDataMode = true; // set bool value to let TX FM know your in 10khz data mode

                    if (!chkVFOBTX.Checked) SetTXFilters(DSPMode.FM, tx_filter_low, tx_filter_high); //W0DHB TX (will set FM wider)
                }
                else
                {
                    FMData = false;
                    radModeFMN.Text = "FM";
                    dsp.GetDSPTX(0).TXFMDataMode = false;

                    Debug.WriteLine("DEVIATION " + lastdeviation);

                    if (lastdeviation == 2500) // return deviation back to normal FM
                    {
                        FMDeviation_Hz = 2500;
                    }
                    else
                    {
                        FMDeviation_Hz = 5000;
                    }
                }
            }
            else
            {
                FMRESET = true;
            }


        } // radModeFMN_MouseUp




        private void radModeAM_CheckedChanged(object sender, System.EventArgs e)
		{

            if (radModeAM.Checked)
			{
                
                SetRX1Mode(DSPMode.AM);
              //  AMMODE = DSPISB.FIRST;
            }
            else
            {
                AMRESET = false;
            }

        } // radModeAM_CheckedChanged

        // ke9ns add
        private void radModeAM_MouseUp(object sender, MouseEventArgs e)
        {
            if ((radModeAM.Checked) && (AMRESET == true))
            {

                if (AMMODE == DSPISB.FIRST)
                {
                    AMMODE = DSPISB.AML;
                    radModeAM.Text = "AM-L";
                }
                else if (AMMODE == DSPISB.AML)
                {
                    AMMODE = DSPISB.AMU;
                    radModeAM.Text = "AM-U";
                }
                else if (AMMODE == DSPISB.AMU)
                {
                    AMMODE = DSPISB.FIRST;
                    radModeAM.Text = "AM";
                }

                SetRX1Mode(DSPMode.AM);

            } // if(radModeSAM.Checked)
            else
            {
                AMRESET = true;
            }

            Debug.WriteLine("1AM MODE " + AMMODE);
        } // radModeAM_MouseUp

        public DSPISB AMMODE = DSPISB.FIRST; // ke9ns add
        public DSPISB AMMODE_LAST = DSPISB.FIRST; // ke9ns add

        public bool AMRESET = false;

        public DSPISB SAMMODE = DSPISB.FIRST; // ke9ns add
        public DSPISB SAMMODE_LAST = DSPISB.FIRST; // ke9ns add

        public bool SAMRESET = false;

        // ke9ns add (for H3E mode)
        private void radModeSAM_MouseUp(object sender, MouseEventArgs e)
        {
            if ((radModeSAM.Checked) && (SAMRESET == true))
            {
          
                if (SAMMODE == DSPISB.FIRST)
                {
                    SAMMODE = DSPISB.AML;
                    radModeSAM.Text = "SAM-L";
                }
                else if (SAMMODE == DSPISB.AML)
                {
                    SAMMODE = DSPISB.AMU;
                    radModeSAM.Text = "SAM-U";
                }
                else if (SAMMODE == DSPISB.AMU)
                {
                    SAMMODE = DSPISB.FIRST;
                    radModeSAM.Text = "SAM";
                }
               
                SetRX1Mode(DSPMode.SAM);

            } // if(radModeSAM.Checked)
            else
            {
                SAMRESET = true;
            }

            Debug.WriteLine("1SAM MODE " + SAMMODE);

        } // radModeSAM_MouseUp

       
        private void radModeSAM_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeSAM.Checked)
			{
				SetRX1Mode(DSPMode.SAM);
        
            } // if(radModeSAM.Checked)
            else
            {
                SAMRESET = false;
            }

            Debug.WriteLine("SAM MODE " + SAMMODE);


        } //radModeSAM_CheckedChanged

        private void radModeDIGU_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeDIGU.Checked)
			{
                chkANF.Checked = false;
                chkNR.Checked = false;
                chkNB.Checked = false;
                chkDSPNB2.Checked = false;
                SetRX1Mode(DSPMode.DIGU);
			}
		}

		private void radModeSPEC_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeSPEC.Checked)
			{
				SetRX1Mode(DSPMode.SPEC);
			}
		}

		private void radModeDIGL_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeDIGL.Checked)
			{
                chkANF.Checked = false;
                chkNR.Checked = false;
                chkNB.Checked = false;
                chkDSPNB2.Checked = false;
                SetRX1Mode(DSPMode.DIGL);
			}
		}

		private void radModeDRM_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radModeDRM.Checked)
			{
				SetRX1Mode(DSPMode.DRM);
			}
		}

#endregion

#region Filter Button Events
		// ======================================================
		// Filter Button Events
		// ======================================================

		public void SetRX1Filter(Filter new_filter)
		{
			if(rx1_dsp_mode == DSPMode.FIRST || rx1_dsp_mode == DSPMode.LAST) return;

			int low = 0, high = 0;

			switch(rx1_filter)
			{
				case Filter.F1:
					radFilter1.BackColor = SystemColors.Control;
					break;
				case Filter.F2:
					radFilter2.BackColor = SystemColors.Control;
					break;
				case Filter.F3:
					radFilter3.BackColor = SystemColors.Control;
					break;
				case Filter.F4:
					radFilter4.BackColor = SystemColors.Control;
					break;
				case Filter.F5:
					radFilter5.BackColor = SystemColors.Control;
					break;
				case Filter.F6:
					radFilter6.BackColor = SystemColors.Control;
					break;
				case Filter.F7:
					radFilter7.BackColor = SystemColors.Control;
					break;
				case Filter.F8:
					radFilter8.BackColor = SystemColors.Control;
					break;
				case Filter.F9:
					radFilter9.BackColor = SystemColors.Control;
					break;
				case Filter.F10:
					radFilter10.BackColor = SystemColors.Control;
					break;
				case Filter.VAR1:
					radFilterVar1.BackColor = SystemColors.Control;
					//udFilterLow.BackColor = SystemColors.Window;
					//udFilterHigh.BackColor = SystemColors.Window;
					udFilterLow.Enabled = false;
					udFilterHigh.Enabled = false;
					break;
				case Filter.VAR2:
					radFilterVar2.BackColor = SystemColors.Control;
					//udFilterLow.BackColor = SystemColors.Window;
					//udFilterHigh.BackColor = SystemColors.Window;
					udFilterLow.Enabled = false;
					udFilterHigh.Enabled = false;
					break;
			}

			rx1_filter = new_filter;
			
			low = rx1_filters[(int)rx1_dsp_mode].GetLow(new_filter);
			high = rx1_filters[(int)rx1_dsp_mode].GetHigh(new_filter);
			rx1_filters[(int)rx1_dsp_mode].LastFilter = new_filter;

			//grpFilter.Text = "Filter - "+rx1_filters[(int)rx1_dsp_mode].GetName(new_filter);

			switch(new_filter)
			{
				case Filter.F1:
					radFilter1.BackColor = button_selected_color;
					break;
				case Filter.F2:
					radFilter2.BackColor = button_selected_color;
					break;
				case Filter.F3:
					radFilter3.BackColor = button_selected_color;
					break;
				case Filter.F4:
					radFilter4.BackColor = button_selected_color;
					break;
				case Filter.F5:
					radFilter5.BackColor = button_selected_color;
					break;
				case Filter.F6:
					radFilter6.BackColor = button_selected_color;
					break;
				case Filter.F7:
					radFilter7.BackColor = button_selected_color;
					break;
				case Filter.F8:
					radFilter8.BackColor = button_selected_color;
					break;
				case Filter.F9:
					radFilter9.BackColor = button_selected_color;
					break;
				case Filter.F10:
					radFilter10.BackColor = button_selected_color;
					break;
				case Filter.VAR1:
					radFilterVar1.BackColor = button_selected_color;
					//udFilterLow.BackColor = button_selected_color;
					//udFilterHigh.BackColor = button_selected_color;
					udFilterLow.Enabled = true;
					udFilterHigh.Enabled = true;
					break;
				case Filter.VAR2:
					radFilterVar2.BackColor = button_selected_color;
					//udFilterLow.BackColor = button_selected_color;
					//udFilterHigh.BackColor = button_selected_color;
					udFilterLow.Enabled = true;
					udFilterHigh.Enabled = true;
					break;
				case Filter.NONE:
                    foreach (Control c in panelFilter.Controls)
					{
						if(c.GetType() == typeof(RadioButtonTS))
						{
							((RadioButtonTS)c).Checked = false;

							if(c.BackColor != SystemColors.Control)
								((RadioButtonTS)c).BackColor = SystemColors.Control;
						}
					}
					return;
			}

			UpdateRX1Filters(low, high);
		}

		private void radFilter1_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter1.Checked)
			{
				SetRX1Filter(Filter.F1);
			}
		}

		private void radFilter2_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter2.Checked)
				SetRX1Filter(Filter.F2);
		}

		private void radFilter3_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter3.Checked)
				SetRX1Filter(Filter.F3);
		}

		private void radFilter4_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter4.Checked)
				SetRX1Filter(Filter.F4);
		}

		private void radFilter5_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter5.Checked)
				SetRX1Filter(Filter.F5);
		}

		private void radFilter6_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter6.Checked)
				SetRX1Filter(Filter.F6);
		}

		private void radFilter7_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter7.Checked)
				SetRX1Filter(Filter.F7);
		}

		private void radFilter8_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter8.Checked)
				SetRX1Filter(Filter.F8);
		}

		private void radFilter9_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter9.Checked)
				SetRX1Filter(Filter.F9);
		}

		private void radFilter10_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilter10.Checked)
				SetRX1Filter(Filter.F10);
		}

		private void radFilterVar1_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilterVar1.Checked)
				SetRX1Filter(Filter.VAR1);
		}

		private void radFilterVar2_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radFilterVar2.Checked)
				SetRX1Filter(Filter.VAR2);
		}

		private void udFilterLow_ValueChanged(object sender, System.EventArgs e)
		{
			if(udFilterLow.Focused)
			{
				if(udFilterLow.Value >= udFilterHigh.Value-10)
				{
					udFilterLow.Value = udFilterHigh.Value-10;
					return;
				}

				UpdateRX1Filters((int)udFilterLow.Value, (int)udFilterHigh.Value);

				if(!save_filter_changes)
					rx1_filters[(int)rx1_dsp_mode].SetLow(rx1_filter, (int)udFilterLow.Value);
			}

			if(save_filter_changes && rx1_filter >= Filter.F1 && rx1_filter <= Filter.VAR2)
				rx1_filters[(int)rx1_dsp_mode].SetLow(rx1_filter, (int)udFilterLow.Value);

			/*if(udFilterLow.Focused)
				btnHidden.Focus();*/
		}
		

        //=========================================================================================
		private void udFilterHigh_ValueChanged(object sender, System.EventArgs e)
		{
           

            if (udFilterHigh.Focused)
			{
				if(udFilterHigh.Value <= udFilterLow.Value + 10)
				{
					udFilterHigh.Value = udFilterLow.Value + 10;
					return;
				}

              
				UpdateRX1Filters((int)udFilterLow.Value, (int)udFilterHigh.Value);


                if (!save_filter_changes)
					rx1_filters[(int)rx1_dsp_mode].SetHigh(rx1_filter, (int)udFilterHigh.Value);
			}

            if (save_filter_changes && rx1_filter >= Filter.F1 && rx1_filter <= Filter.VAR2)
				rx1_filters[(int)rx1_dsp_mode].SetHigh(rx1_filter, (int)udFilterHigh.Value);

            /*if(udFilterHigh.Focused)
				btnHidden.Focus();*/

          
        } // udFilterHigh_ValueChanged



        //==========================================================================================================
        private void DoFilterShift(int shift, bool redraw)
		{
			// VK6APH: Does the Filter Shift function, alters the filter low and high frequency values 
			// as the Filter Shift slider is moved. We need to keep the last Filter Shift values
			// that the variable filters use since, unlike the other filters, there are 
			// no pre-set bandwidths that they can default to when the Filter Shift is 
			// turned off. These values are stored in the public variables last_var1_shift and
			// last_var2_shift. 
			int IFShift;
			int low;
			int high;
			int bandwidth;
            int max_shift = 9999;		// needed when using variable filters so we can't exceed +/- 10kHz DSP limits

			if(rx1_dsp_mode == DSPMode.SPEC ||
				rx1_dsp_mode == DSPMode.DRM)
				return;

			bandwidth = (int)Math.Abs(udFilterHigh.Value - udFilterLow.Value); // calculate current filter bandwidth 

			// set the maximum IF Shift depending on filter bandwidth in use 
			if (bandwidth > 800)
			{
				ptbFilterShift.Maximum = 1000;  // max IF Shift +/- 1kHz for filters > 800Hz wide
				ptbFilterShift.Minimum = -1000;
			}
			else 
			{
				ptbFilterShift.Maximum = 500;	// max IF Shift +/- 500Hz for filters < 800Hz wide
				ptbFilterShift.Minimum = -500;	
			}
			// calculate how far the IF Shift slider has moved
			// if we are using variable bandwidth filters need to use their last shift value
			if (rx1_filter == Filter.VAR1)
				IFShift = shift - last_var1_shift;
			else if (rx1_filter == Filter.VAR2)
				IFShift = shift - last_var2_shift;
			else
				IFShift = shift - last_filter_shift; 

			high = (int)Math.Min(udFilterHigh.Value + IFShift, max_shift);	// limit high shift to maximum value
			low = (int)Math.Max(udFilterLow.Value + IFShift, -max_shift);	// limit low shift to maximum value
			
			dsp.GetDSPRX(0, 0).SetRXFilter(low, high);			// select new filters
			udFilterLow.Value = low;						// display new low value 
			udFilterHigh.Value = high;						// display new high value
			if(redraw) Display.DrawBackground();			// draw new background for updated filter values
	
			// store the last IF Shift applied for use next time
			if (rx1_filter == Filter.VAR1)
				last_var1_shift = last_var1_shift + IFShift;
			else if (rx1_filter == Filter.VAR2)
				last_var2_shift = last_var2_shift + IFShift;
			else 
				last_filter_shift = last_filter_shift + IFShift;				
			// show the IF Shift is active by setting the zero button colour
			if (shift != 0)
				btnFilterShiftReset.BackColor = button_selected_color;
		} //




		private void ptbFilterShift_Scroll(object sender, System.EventArgs e)
		{
			SelectRX1VarFilter();

			int bw = (int)udFilterHigh.Value - (int)udFilterLow.Value;
			int default_center = 0;

			switch(rx1_dsp_mode)
			{
				case DSPMode.USB:
					default_center = default_low_cut + bw/2;
					break;
				case DSPMode.LSB:
					default_center = -default_low_cut - bw/2;
					break;
				case DSPMode.CWU:
					default_center = cw_pitch;
					break;
				case DSPMode.CWL:
					default_center = -cw_pitch;
					break;
				case DSPMode.DIGU:
					default_center = digu_click_tune_offset;
					break;
				case DSPMode.DIGL:
					default_center = -digl_click_tune_offset;
					break;
			}

			int adjusted_max = max_filter_shift;
			if(default_center > 0)
			{
				if(ptbFilterShift.Value > 0)
				{
					adjusted_max = Math.Min(max_filter_shift, 9999-(Math.Abs(default_center)+bw/2));
				}
			}
			else if(default_center < 0)
			{
				if(ptbFilterShift.Value < 0)
				{
					adjusted_max = Math.Min(max_filter_shift, 9999-(Math.Abs(default_center)+bw/2));
				}
			}
			else //default_center == 0
			{
				adjusted_max = Math.Min(max_filter_shift, 9999-bw/2);
			}
			
			int range = ptbFilterShift.Maximum - ptbFilterShift.Minimum;
			int new_center = default_center + (int)((float)ptbFilterShift.Value/(range/2)*adjusted_max);
			UpdateRX1Filters(new_center-bw/2, new_center+bw/2);

			btnFilterShiftReset.BackColor = button_selected_color;

			if(ptbFilterShift.Focused)
				btnHidden.Focus();
		}

		private void ptbFilterShift_Update(int low, int high)
		{
			int bw = (int)udFilterHigh.Value - (int)udFilterLow.Value;
			int default_center = 0;
			int current_center = (low+high)/2;

			switch(rx1_dsp_mode)
			{
				case DSPMode.USB:
					default_center = default_low_cut + bw/2;
					break;
				case DSPMode.LSB:
					default_center = -default_low_cut - bw/2;
					break;
				case DSPMode.CWU:
					default_center = cw_pitch;
					break;
				case DSPMode.CWL:
					default_center = -cw_pitch;
					break;
				case DSPMode.DIGU:
					default_center = digu_click_tune_offset;
					break;
				case DSPMode.DIGL:
					default_center = -digl_click_tune_offset;
					break;
			}

			int adjusted_max = max_filter_shift;
			if(default_center > 0)
			{
				if(current_center > default_center)
				{
					adjusted_max = Math.Min(max_filter_shift, 9999-(Math.Abs(default_center)+bw/2));
				}
			}
			else if(default_center < 0)
			{
				if(current_center < default_center)
				{
					adjusted_max = Math.Min(max_filter_shift, 9999-(Math.Abs(default_center)+bw/2));
				}
			}
			else //default_center == 0
			{
				adjusted_max = Math.Min(max_filter_shift, 9999-bw/2);
			}
			
			int range = ptbFilterShift.Maximum - ptbFilterShift.Minimum;
			int delta = current_center - default_center;
			int new_val = (int)((float)delta/adjusted_max*(range/2));
			if(new_val > ptbFilterShift.Maximum) new_val = ptbFilterShift.Maximum;
			if(new_val < ptbFilterShift.Minimum) new_val = ptbFilterShift.Minimum;
			ptbFilterShift.Value = new_val;
		}
		/*
				private void tbFilterShift_Scroll(object sender, System.EventArgs e)
				{
					DoFilterShift(tbFilterShift.Value, true);

					if(tbFilterShift.Focused)
						btnHidden.Focus();
				}
		*/
		private void btnFilterShiftReset_Click(object sender, System.EventArgs e)
		{
			int bw = (int)udFilterHigh.Value - (int)udFilterLow.Value;
			int low, high;
			switch(rx1_dsp_mode)
			{
				case DSPMode.AM:
				case DSPMode.SAM:
				case DSPMode.FM:
				case DSPMode.DSB:
					ptbFilterShift.Value = 0;
					ptbFilterShift_Scroll(this, EventArgs.Empty);
					break;
				case DSPMode.USB:					
					low = default_low_cut;
					high = low + bw;
					UpdateRX1Filters(low, high);
					break;
				case DSPMode.CWU:
					low = cw_pitch - bw/2;
					high = cw_pitch + bw/2;
					if(low < 0)
					{
						int delta = -low;
						low += delta;
						high += delta;
					}
					else if(high > 9999)
					{
						int delta = high - 9999;
						high -= delta;
						low -= delta;
					}
					UpdateRX1Filters(low, high);
					break;
				case DSPMode.DIGU:
					low = digu_click_tune_offset - bw/2;
					high = digu_click_tune_offset + bw/2;
					if(low < 0)
					{
						int delta = -low;
						low += delta;
						high += delta;
					}
					else if(high > 9999)
					{
						int delta = high - 9999;
						high -= delta;
						low -= delta;
					}
					UpdateRX1Filters(low, high);
					break;
				case DSPMode.LSB:
					high = -default_low_cut;
					low = high - bw;
					UpdateRX1Filters(low, high);
					break;
				case DSPMode.CWL:
					high = -cw_pitch + bw/2;
					low = -cw_pitch - bw/2;
					if(high > 0)
					{
						int delta = -high;
						low -= delta;
						high -= delta;
					}
					else if(low < -9999)
					{
						int delta = low + 9999;
						high += delta;
						low += delta;
					}
					UpdateRX1Filters(low, high);
					break;
				case DSPMode.DIGL:
					high = -digl_click_tune_offset + bw/2;
					low = -digl_click_tune_offset - bw/2;
					if(high > 0)
					{
						int delta = -high;
						low -= delta;
						high -= delta;
					}
					else if(low < -9999)
					{
						int delta = low + 9999;
						high += delta;
						low += delta;
					}
					UpdateRX1Filters(low, high);
					break;
			}			
			btnFilterShiftReset.BackColor = SystemColors.Control;	// make button grey
		}

		private FilterWidthMode current_filter_width_mode = FilterWidthMode.Linear;
		public FilterWidthMode CurrentFilterWidthMode
		{
			get { return current_filter_width_mode; }
			set
			{
				current_filter_width_mode = value;
				UpdateRX1Filters((int)udFilterLow.Value, (int)udFilterHigh.Value);
			}
		}

		private void ptbFilterWidth_Update(int low, int high)
		{
			int bw = high - low;
			switch(rx1_dsp_mode)
			{
				case DSPMode.AM:
				case DSPMode.SAM:
				case DSPMode.FM:
				case DSPMode.DSB:
					bw /= 2;
					break;
			}
				
			int range = ptbFilterWidth.Maximum - ptbFilterWidth.Minimum;
			int new_val = 0;

			switch(current_filter_width_mode)
			{
				case FilterWidthMode.Linear:
					new_val = ptbFilterWidth.Minimum + (int)((float)bw/max_filter_width*range);
					break;
				case FilterWidthMode.Log:
					double max_log = Math.Log(ptbFilterWidth.Maximum);
					double temp = max_log-(float)bw/max_filter_width*max_log;
					new_val = ptbFilterWidth.Maximum-(int)Math.Pow(Math.E, temp);
					break;
				case FilterWidthMode.Log10:
					max_log = Math.Log10(ptbFilterWidth.Maximum);
					temp = max_log-(float)bw/max_filter_width*max_log;
					new_val = ptbFilterWidth.Maximum-(int)Math.Pow(10, temp);
					break;
			}

			if(new_val > ptbFilterWidth.Maximum) new_val = ptbFilterWidth.Maximum;
			if(new_val < ptbFilterWidth.Minimum) new_val = ptbFilterWidth.Minimum;
			ptbFilterWidth.Value = new_val;

        } // ptbFilterWidth_Update

        //==========================================================================================================
        private void ptbFilterWidth_Scroll(object sender, System.EventArgs e)
		{
			if ( rx1_dsp_mode == DSPMode.DRM || rx1_dsp_mode == DSPMode.SPEC ) 
			{
				return;  // no good in this mode 
			}

			SelectRX1VarFilter();
			
			int range = ptbFilterWidth.Maximum-ptbFilterWidth.Minimum;
			int new_bw = 0;
			
			switch(current_filter_width_mode)
			{
				case FilterWidthMode.Linear:	
					new_bw = (int)((float)(ptbFilterWidth.Value-ptbFilterWidth.Minimum)/range*max_filter_width);
					break;
				case FilterWidthMode.Log:
					double max_log = Math.Log(ptbFilterWidth.Maximum);
					double temp = Math.Log(Math.Max((ptbFilterWidth.Maximum - ptbFilterWidth.Value), 1.0));
					temp = max_log - temp;
					new_bw = (int)((float)(temp/max_log*max_filter_width));
					break;
				case FilterWidthMode.Log10:
					max_log = Math.Log10(ptbFilterWidth.Maximum);
					temp = Math.Log10(Math.Max((ptbFilterWidth.Maximum - ptbFilterWidth.Value), 1.0));
					temp = max_log - temp;
					new_bw = (int)((float)(temp/max_log*max_filter_width));
					break;
			}
			
			new_bw = Math.Max(new_bw, 10);

			int current_center = ((int)udFilterLow.Value + (int)udFilterHigh.Value) / 2;

			int low = 0, high = 0;
			switch(rx1_dsp_mode)
			{
				case DSPMode.AM:
				case DSPMode.SAM:
				case DSPMode.FM:
				case DSPMode.DSB:
					low = current_center - new_bw;
					high = current_center + new_bw;

					if(low < -max_filter_width) 
					{
						low += (-max_filter_width - low);
						high += (-max_filter_width - low);
					}
					else if(high > max_filter_width)
					{
						high -= (high - max_filter_width);
						low -= (high - max_filter_width);
					}
					break;
				case DSPMode.LSB:
					high = -default_low_cut;
					low = high - new_bw;
					break;
				case DSPMode.CWL:
				case DSPMode.DIGL:
					low = current_center - new_bw/2;
					high = current_center + new_bw/2;
					/*if(high > -default_low_cut && (int)udFilterHigh.Value <= -default_low_cut)
					{
						high = -default_low_cut;
						low = high - new_bw;
					}
					else*/ if(low < -9999)
					{
						low = -9999;
						high = low + new_bw;
					}
					break;
				case DSPMode.USB:
					low = default_low_cut;
					high = low + new_bw;
					break;
				case DSPMode.CWU:				
				case DSPMode.DIGU:
					low = current_center - new_bw/2;
					high = current_center + new_bw/2;
					/*if(low < default_low_cut && (int)udFilterLow.Value >= default_low_cut)
					{
						low = default_low_cut;
						high = low + new_bw;
					}
					else*/ if(high > 9999)
					{
						high = 9999;
						low = high - new_bw;
					}
					break;
			}
			UpdateRX1Filters(low, high);

			if(ptbFilterWidth.Focused)
				btnHidden.Focus();
        } // ptbFilterWidth_Scroll



        private void tbFilterWidthScroll_newMode() 
		{
			//centerSave = 0;  // dump any save center with scroller is keeping 
			switch ( rx1_dsp_mode ) 
			{
				case DSPMode.SPEC: 
				case DSPMode.DRM: 
					ptbFilterWidth.Enabled = false; 
					break; 

				default: 
					ptbFilterWidth.Enabled = true; 
					break; 
			}
		}
	
#endregion

#region VFO Button Events
		// ======================================================
		// VFO Button Events
		// ======================================================

		// Added 6/20/05 BT for CAT commands
		public void CATVFOSwap(string pChangec)
		{
			string c = pChangec;
			if(c.Length > 0)
			{
				switch(c)
				{
					case "0":
						btnVFOAtoB_Click(btnVFOAtoB,EventArgs.Empty);
						break;
					case "1":
						btnVFOBtoA_Click(btnVFOBtoA,EventArgs.Empty);
						break;
					case "2":
						btnVFOSwap_Click(btnVFOSwap,EventArgs.Empty);
						break;
					case "3":
						btnIFtoVFO_Click(btnIFtoVFO, EventArgs.Empty);
						break;
				}
			}
		}

        public void CopyVFOAtoB() // ke9ns used by flexcontroller
        {
            btnVFOAtoB_Click(this, EventArgs.Empty);
        }

		private void btnVFOAtoB_Click(object sender, System.EventArgs e)
		{
			if(rx2_enabled) 
			{
				RX2DSPMode = rx1_dsp_mode;
				txtVFOBFreq.Text = txtVFOAFreq.Text;
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				switch(rx1_filter)
				{
					case Filter.F8:
					case Filter.F9:
					case Filter.F10:
						RX2Filter = Filter.F1;
						break;
					case Filter.VAR1:
					case Filter.VAR2:
						RX2Filter = RX1Filter;
						RX2FilterLow = RX1FilterLow;
						RX2FilterHigh = RX2FilterHigh;
						break;
					default:
						RX2Filter = rx1_filter;
						break;
				}
				vfob_dsp_mode = rx1_dsp_mode;
				vfob_filter = rx1_filter;

				chkRX2SR.Checked = chkSR.Checked;
				comboRX2AGC.Text = comboAGC.Text;
			}
			else
			{
				txtVFOBFreq.Text = txtVFOAFreq.Text;
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				vfob_dsp_mode = rx1_dsp_mode;
				vfob_filter = rx1_filter;
			}
		}

        public void CopyVFOBtoA()
        {
            btnVFOBtoA_Click(this, EventArgs.Empty);
        }

		private void btnVFOBtoA_Click(object sender, System.EventArgs e)
		{
			if(!rx2_enabled)
			{
				if(!chkEnableMultiRX.Checked)
				{
					RX1DSPMode = vfob_dsp_mode;
					RX1Filter = vfob_filter;
				}
				txtVFOAFreq.Text = txtVFOBFreq.Text;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
			else
			{
                RX1DSPMode = rx2_dsp_mode;
				txtVFOAFreq.Text = txtVFOBFreq.Text;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				switch(rx2_filter)
				{
                    case Filter.VAR1:
                    case Filter.VAR2:
                        RX1Filter = RX2Filter;
                        RX1FilterLow = RX2FilterLow;
                        RX1FilterHigh = RX2FilterHigh;
                        break;
                    default:
                        RX1Filter = RX2Filter;
                        break;
				}

				chkSR.Checked = chkRX2SR.Checked;
				comboAGC.Text = comboRX2AGC.Text;
			}
		}

        public void VFOSwap() // ke9ns called by flexcontroller button push
        {
            btnVFOSwap_Click(this, EventArgs.Empty);
        }

		private void btnVFOSwap_Click(object sender, System.EventArgs e)
		{
            swapping = true;
			if(!rx2_enabled)
			{
				string temp = txtVFOAFreq.Text;
            
				if(!chkEnableMultiRX.Checked)
				{
					DSPMode mode = rx1_dsp_mode;
					Filter filter = rx1_filter;

					RX1DSPMode = vfob_dsp_mode;
					RX1Filter = vfob_filter;
					vfob_dsp_mode = mode;
					vfob_filter = filter;
				}
			
				txtVFOAFreq.Text = txtVFOBFreq.Text;
				txtVFOBFreq.Text = temp;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
			}
			else
			{
				string a_freq = txtVFOAFreq.Text;
				DSPMode a_mode = rx1_dsp_mode;
				Filter a_filter = rx1_filter;
				int a_filter_low = 0, a_filter_high = 0;
				if(a_filter == Filter.VAR1 || a_filter==Filter.VAR2)
				{
					a_filter_low = RX1FilterLow;
					a_filter_high = RX1FilterHigh;
				}

				RX1DSPMode = rx2_dsp_mode;
				VFOAFreq = VFOBFreq;
				RX1Filter = rx2_filter;

				RX2DSPMode = a_mode;
				txtVFOBFreq.Text = a_freq;
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				switch(a_filter)
				{
					case Filter.F8:
					case Filter.F9:
					case Filter.F10:
						RX2Filter = Filter.F1;
						break;
					case Filter.VAR1:
					case Filter.VAR2:
						RX2Filter = a_filter;
						RX2FilterLow = a_filter_low;
						RX2FilterHigh = a_filter_high;
						break;
					default:
						RX2Filter = a_filter;
						break;
				}

				bool sr = chkSR.Checked;
				chkSR.Checked = chkRX2SR.Checked;
				chkRX2SR.Checked = sr;

				string agc = comboAGC.Text;
				comboAGC.Text = comboRX2AGC.Text;
				comboRX2AGC.Text = agc;
			}

            swapping = false; // to handle VU swapping

            if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.VUOK)
            {
                SetVURXPath();
            }            
		}

		private void UpdateVFOASub()
		{
			if(rx2_enabled)
			{
				if(chkVFOSplit.Checked)
				{
                    txtVFOABand.Font = ff3; // new Font("Swis721 BT", 14.0f,  FontStyle.Italic | FontStyle.Bold); //Microsoft Sans Sarif FontStyle.Regular
                    if (saved_vfoa_sub_freq == Display.CLEAR_FLAG) saved_vfoa_sub_freq = saved_vfoa_freq;
					txtVFOABand.Text = saved_vfoa_sub_freq.ToString("f6");
					tx_xvtr_index = xvtrForm.XVTRFreq(VFOASubFreq);
					TXBand = BandByFreq(VFOASubFreq, tx_xvtr_index, true, current_region);
					if(chkPower.Checked) txtVFOABand.ForeColor = Color.Red;
					else txtVFOABand.ForeColor = Color.DarkRed;
					txtVFOABand.TextAlign = HorizontalAlignment.Right;
					txtVFOABand.ReadOnly = false;
					txtVFOABand_LostFocus(this, EventArgs.Empty);
					panelVFOASubHover.Visible = true;
					return;     
				}
				else if(chkEnableMultiRX.Checked)
				{
                    txtVFOABand.Font = ff3; // new Font("Swis721 BT", 14.0f,  FontStyle.Italic | FontStyle.Bold);
					txtVFOABand.Text = saved_vfoa_sub_freq.ToString("f6");
					if(chkPower.Checked) txtVFOABand.ForeColor = vfo_text_light_color;
					else txtVFOABand.ForeColor = vfo_text_dark_color;
					txtVFOABand.TextAlign = HorizontalAlignment.Right;
					txtVFOABand.ReadOnly = false;
					txtVFOABand_LostFocus(this, EventArgs.Empty);
					panelVFOASubHover.Visible = true;

					return;
				}
			}

			if(chkPower.Checked)
			{
                txtVFOABand.Font = ff4; // new Font("Swis721 BT", 12.0f,  FontStyle.Italic | FontStyle.Bold);
				txtVFOABand.ForeColor = band_text_light_color;						
				txtVFOABand.TextAlign = HorizontalAlignment.Center;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				panelVFOASubHover.Visible = false;
			}
			else
			{
				txtVFOABand.Font = ff4; // new Font("Swis721 BT", 12.0f, FontStyle.Italic | FontStyle.Bold);
                txtVFOABand.ForeColor = band_text_dark_color;						
				txtVFOABand.TextAlign = HorizontalAlignment.Center;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				panelVFOASubHover.Visible = false;
			}
		}

		private void chkVFOSplit_CheckedChanged(object sender, System.EventArgs e)
		{
			Display.SplitEnabled = chkVFOSplit.Checked;

            if (chkVFOSplit.Checked)
            {
                
                chkVFOSplit.BackColor = button_selected_color;
                //FM front panel
                chkFMTXHigh.Enabled = false;
                chkFMTXHigh.Checked = false;
                chkFMTXLow.Enabled = false;
                chkFMTXLow.Checked = false;
                chkFMTXSimplex.Enabled = false;
                chkFMTXSimplex.Checked = false;
                chkFMTXRev.Enabled = false;
                chkFMTXRev.Checked = false;
                udFMOffset.Enabled = false;
                current_fm_tx_mode = FMTXMode.Simplex;
                //fm_tx_offset_mhz = 0;

            }
            else
            {
                chkVFOSplit.BackColor = SystemColors.Control;
                //FM front panel
                chkFMTXHigh.Enabled = true;
                chkFMTXLow.Enabled = true;
                chkFMTXSimplex.Enabled = true;
                chkFMTXSimplex.Checked = true;
                chkFMTXRev.Enabled = true;
                udFMOffset.Enabled = true;
                //fm_tx_offset_mhz = 0;
            }

			if(rx2_enabled)
			{
                UpdateVFOASub();
                if (chkVFOSplit.Checked)
                {
                    if (chkVFOBTX.Checked)
                        chkVFOATX.Checked = true;
                }
                else
                {
                    txtVFOAFreq_LostFocus(this, EventArgs.Empty);
                }
			}
			else
			{
				if(chkVFOSplit.Checked)
				{
					if(chkVFOSync.Checked) chkVFOSync.Checked = false;
					TXBand = BandByFreq(VFOBFreq, tx_xvtr_index, true, current_region);
					grpVFOB.Font = ff5; // new Font("Swis721 BT", 8.25F, FontStyle.Regular | FontStyle.Italic);
                    grpVFOB.ForeColor = Color.Red;
					chkVFOBTX.Checked = true;
					//chkVFOBTX.ForeColor = Color.Black;
					if(chkPower.Checked)
					{
						txtVFOBFreq.ForeColor = Color.Red;
						txtVFOBMSD.ForeColor = Color.Red;
						txtVFOBLSD.ForeColor = small_vfo_color;
						txtVFOBBand.ForeColor = band_text_light_color;

						if(current_model == Model.FLEX5000 && fwc_init)
							txtVFOBFreq_LostFocus(this, EventArgs.Empty);
					}
				}
				else
				{
				
					grpVFOB.Font = ff5; //new Font("Swis721 BT", 8.25F, FontStyle.Italic | FontStyle.Regular);
                    grpVFOB.ForeColor = SystemColors.ControlLightLight;
					chkVFOATX.Checked = true;
					if(chkPower.Checked)
					{
						if(chkEnableMultiRX.Checked)
						{
							txtVFOBFreq.ForeColor = vfo_text_light_color;
							txtVFOBMSD.ForeColor = vfo_text_light_color;
							txtVFOBLSD.ForeColor = small_vfo_color;
							txtVFOBBand.ForeColor = band_text_light_color;
						}
						else
						{
							txtVFOBFreq.ForeColor = vfo_text_dark_color;
							txtVFOBMSD.ForeColor = vfo_text_dark_color;
							txtVFOBLSD.ForeColor = vfo_text_dark_color;
							txtVFOBBand.ForeColor = band_text_dark_color;
						}

						if(fwc_init && current_model == Model.FLEX5000 && !full_duplex)
							txtVFOAFreq_LostFocus(this, EventArgs.Empty);
					}
					if(current_click_tune_mode == ClickTuneMode.VFOB && !chkEnableMultiRX.Checked && !chkFullDuplex.Checked)
						CurrentClickTuneMode = ClickTuneMode.VFOA;
				}
			}
#if false
			// wjtFIXME! 
			// if we're doing soft rock stuff may need to update osc (tx mainly) when split is on
			if ( current_model ==  Model.SOFTROCK40 )
			
			{
				SetSoftRockOscFreqs();
			}
#endif
        } // chkVFOSplit_CheckedChanged


        private void chkXIT_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkXIT.Checked)
			{
				chkXIT.BackColor = button_selected_color;
				Display.XIT = (int)udXIT.Value;
			}
			else
			{
				chkXIT.BackColor = SystemColors.Control;
				Display.XIT = 0;
			}
#if false
			// wjtFIXME!
			if ( current_model == Model.SOFTROCK40 )			
			{
				SetSoftRockOscFreqs();
			}
#endif

			if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
			{
				if(chkVFOSplit.Checked || full_duplex)
					txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				else
					txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
			else
			{
				if(mox)
				{
					if(chkVFOSplit.Checked)
						txtVFOBFreq_LostFocus(this, EventArgs.Empty);
					else
						txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				}
			}
		}

		private void chkRIT_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkRIT.Checked)
			{
				chkRIT.BackColor = button_selected_color;
				Display.RIT = (int)udRIT.Value;
			}
			else
			{
				chkRIT.BackColor = SystemColors.Control;
				Display.RIT = 0;
			}

			if(!mox)
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
		}

		private void udRIT_ValueChanged(object sender, System.EventArgs e)
		{
			if(chkRIT.Checked && !mox)
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			if(chkRIT.Checked) Display.RIT = (int)udRIT.Value;

			/*if(udRIT.Focused)
				btnHidden.Focus();*/
		}

		private void udXIT_ValueChanged(object sender, System.EventArgs e)
		{
			if(chkXIT.Checked && mox)
			{
				if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
				{
					if(chkVFOSplit.Checked || full_duplex)
						txtVFOBFreq_LostFocus(this, EventArgs.Empty);
					else
						txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				}
				else
				{
					if(chkVFOSplit.Checked)
						txtVFOBFreq_LostFocus(this, EventArgs.Empty);
					else
						txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				}
			}
#if false
			//wjtFIXME
			else if ( current_model == Model.SOFTROCK40 )			
			{
				SetSoftRockOscFreqs();
			}
#endif


			if(chkXIT.Checked) Display.XIT = (int)udXIT.Value;

			/*if(udXIT.Focused)
				btnHidden.Focus();*/
		}

		private void btnXITReset_Click(object sender, System.EventArgs e)
		{
			udXIT.Value = 0;
		}

		private void btnRITReset_Click(object sender, System.EventArgs e)
		{
			udRIT.Value = 0;
		}

        public void ZeroBeat()
        {
            if (btnZeroBeat.Enabled)
                btnZeroBeat_Click(this, EventArgs.Empty);
        }

		private void btnZeroBeat_Click(object sender, System.EventArgs e)
		{
			int peak_hz = FindPeakFreqInPassband();
			if ( peak_hz == -1 )
			{
				return; // find peak croaked - bail
			}
			// Debug.WriteLine("peak: " + peak_hz);
			int delta_hz = 0;
			
			// if we're in CW mode, zero beat to CWPitch, provided it is in the passband
			switch(rx1_dsp_mode)
			{
				case DSPMode.CWL:
				case DSPMode.CWU:
				case DSPMode.USB:
				case DSPMode.LSB:
					int local_pitch = CWPitch;
					if ( rx1_dsp_mode == DSPMode.CWL || rx1_dsp_mode == DSPMode.LSB)
					{
						local_pitch = - local_pitch;
					}
					// is cwoffset in passband?
					if ( local_pitch >= udFilterLow.Value && 
						local_pitch <= udFilterHigh.Value )
					{
						delta_hz = peak_hz - local_pitch;
						// Debug.WriteLine("delta(cw): " + delta_hz);
					}				
					else
					{
						// if we get here and delta_hz is still 0, the current
						// CW pitch is not within the passband.
						// Put strongest peak @ center of passband
						int center_hz = ((int)udFilterHigh.Value + (int)udFilterLow.Value)/2;
						delta_hz = peak_hz - center_hz;
					}
					break;
				case DSPMode.DIGL:
					local_pitch = -digl_click_tune_offset;
					if ( local_pitch >= udFilterLow.Value && 
						local_pitch <= udFilterHigh.Value )
					{
						delta_hz = peak_hz - local_pitch;
					}
					else
					{
						// if we get here and delta_hz is still 0, the current
						// pitch is not within the passband.
						// Put strongest peak @ center of passband
						int center_hz = ((int)udFilterHigh.Value + (int)udFilterLow.Value)/2;
						delta_hz = peak_hz - center_hz;
					}
					break;
				case DSPMode.DIGU:
					local_pitch = digu_click_tune_offset;
					if ( local_pitch >= udFilterLow.Value && 
						local_pitch <= udFilterHigh.Value )
					{
						delta_hz = peak_hz - local_pitch;
					}				
					else
					{
						// if we get here and delta_hz is still 0, the current
						// pitch is not within the passband.
						// Put strongest peak @ center of passband
						int center_hz = ((int)udFilterHigh.Value + (int)udFilterLow.Value)/2;
						delta_hz = peak_hz - center_hz;
					}
					break;
				case DSPMode.AM:
				case DSPMode.SAM:
				case DSPMode.FM:
					delta_hz = peak_hz;
					break;
			}

			//          Debug.WriteLine("peak: " + peak_hz);
			//          Debug.WriteLine("center: " + center_hz);
			//          Debug.WriteLine("delta: " + delta_hz + "\n");

			if(zero_beat_rit)
			{
				udRIT.Value += delta_hz;
				chkRIT.Checked = true;
			}
			else
			{
				VFOAFreq += delta_hz*1e-6;
			}
		}

		unsafe private int FindPeakFreqInPassband()
		{
			// convert hz to buckets in the averaging data
			int lo_cut_hz = (int)udFilterLow.Value;
			int hi_cut_hz = (int)udFilterHigh.Value;
			double hz_per_bucket = sample_rate1/(double)Display.BUFFER_SIZE;
			int zero_hz_bucket = Display.BUFFER_SIZE/2;
			int lo_bucket = (int)(lo_cut_hz/hz_per_bucket) + zero_hz_bucket;
			int hi_bucket = (int)(hi_cut_hz/hz_per_bucket) + zero_hz_bucket;

			//~~~~ 
			float max_val = float.MinValue;
			int max_bucket = 0;

			float[] spectrum_data; 

			// reuse the existing display data if there is any
			switch ( Display.CurrentDisplayMode ) 
			{
				case DisplayMode.PANADAPTER:
				case DisplayMode.HISTOGRAM:
				case DisplayMode.SPECTRUM:
				case DisplayMode.WATERFALL:
				case DisplayMode.PANAFALL:
				case DisplayMode.PANASCOPE:
					if ( chkDisplayAVG.Checked ) 
					{
						spectrum_data = Display.rx1_average_buffer; // force avg data into spectrum
					}
					else 
					{
						spectrum_data = Display.current_display_data; 
					}
					break; 

					// no specturm data - go get some 
				default: 
					spectrum_data = new float[Display.BUFFER_SIZE];
					if ( spectrum_data == null ) 
					{ 
						return -1; // bail out - not buffer 
					} 
					fixed(float *ptr = &(spectrum_data[0]))
						DttSP.GetSpectrum(0, ptr);
					break; 										
			}

			for ( int i = lo_bucket; i <= hi_bucket; i++ )
			{
				if ( spectrum_data[i] > max_val )
				{
					max_bucket = i;
					max_val = spectrum_data[i];
				}
			}
			int peak_hz = (int)((max_bucket - zero_hz_bucket) * hz_per_bucket);
			return peak_hz;
		}

		private void btnIFtoVFO_Click(object sender, System.EventArgs e)
		{
			int current_if_shift;

			bool is_centered_mode = false;
			bool is_cw_mode = false;
			bool is_lower_sb_mode = false;

			current_if_shift = ptbFilterShift.Value;

			//			Debug.WriteLine("current if shift: " + current_if_shift);

			if ( current_if_shift == 0 ) return; // nothing to do

			switch ( RX1DSPMode )
			{
				case DSPMode.DRM:
				case DSPMode.SPEC:
				case DSPMode.DIGL:
				case DSPMode.DIGU:
					return; // nothing to do for these modes

				case DSPMode.AM:
				case DSPMode.FM:
				case DSPMode.DSB:
				case DSPMode.SAM:
					is_centered_mode = true;
					break;

				case DSPMode.CWL:
					is_cw_mode = true;
					is_lower_sb_mode = true;
					break;
				case DSPMode.CWU:
					is_cw_mode = true;
					break;
				case DSPMode.LSB:
					is_lower_sb_mode = true;
					break;
				case DSPMode.USB:
					break;
				default:
					// no clue what the mode is -- bail out
					return;
			}

			int current_width = (int)udFilterHigh.Value - (int)udFilterLow.Value;
			int current_center = (int)udFilterLow.Value + (current_width/2);
			//			Debug.WriteLine("w: " + current_width + " center: " + current_center + " vfo: " +  VFOAFreq);

			double new_vfo = 0;
			int new_lo = 0;
			int new_hi = 0;

			if ( is_centered_mode )
			{
				new_vfo = VFOAFreq + ((double)current_center)/(1e6);
				new_lo = - (current_width/2);
				new_hi = current_width/2;
			}
			else  // sideband style mode
			{
				int new_center;
				if ( is_cw_mode )
				{
					new_center = cw_pitch;
				}
				else  // sideband mode
				{
					new_center = default_low_cut + ( current_width/2 );
				}
				if ( is_lower_sb_mode )
				{
					new_center = -new_center;
				}
				new_vfo = VFOAFreq + ((double)(current_center-new_center))/(1e6);
				// now figure out filter limits
				new_lo = new_center - ( current_width/2 );
				new_hi = new_center + ( current_width/2 );
			}
			//			Debug.WriteLine("new vfo: " + new_vfo + " lo: " + new_lo + " hi: " + new_hi );
			if ( VFOAFreq > new_vfo  )  // need to change this in the right order!
			{
				udFilterHigh.Value = new_hi;
				udFilterLow.Value = new_lo;
			}
			else
			{
				udFilterLow.Value = new_lo;
				udFilterHigh.Value = new_hi;
			}

			VFOAFreq = new_vfo;
			switch ( RX1Filter )
			{
				case Filter.VAR1:
					last_var1_shift = 0;
					break;
				case Filter.VAR2:
					last_var2_shift = 0;
					break;
				default: 
					last_filter_shift = 0; 
					break; 
			}
			btnFilterShiftReset_Click(this, EventArgs.Empty); 
		}

#endregion

#region DSP Button Events

		private void chkNR_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkNR.Checked) chkNR.BackColor = button_selected_color;
			else chkNR.BackColor = SystemColors.Control;
			dsp.GetDSPRX(0, 0).NoiseReduction = chkNR.Checked;
			dsp.GetDSPRX(0, 1).NoiseReduction = chkNR.Checked;
			cat_nr_status = Convert.ToInt32(chkNR.Checked);

            
		}

		private void chkANF_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkANF.Checked) chkANF.BackColor = button_selected_color;
			else chkANF.BackColor = SystemColors.Control;
			dsp.GetDSPRX(0, 0).AutoNotchFilter = chkANF.Checked;
			dsp.GetDSPRX(0, 1).AutoNotchFilter = chkANF.Checked;
			cat_anf_status = Convert.ToInt32(chkANF.Checked);
		}

		private void chkNB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkNB.Checked) chkNB.BackColor = button_selected_color;
			else chkNB.BackColor = SystemColors.Control;
			dsp.GetDSPRX(0, 0).NBOn = chkNB.Checked;
			dsp.GetDSPRX(0, 1).NBOn = chkNB.Checked;
			cat_nb1_status = Convert.ToInt32(chkNB.Checked);
		}

		private void chkDSPNB2_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkDSPNB2.Checked) chkDSPNB2.BackColor = button_selected_color;
			else chkDSPNB2.BackColor = SystemColors.Control;
			dsp.GetDSPRX(0, 0).SDROM = chkDSPNB2.Checked;
			dsp.GetDSPRX(0, 1).SDROM = chkDSPNB2.Checked;
			cat_nb2_status = Convert.ToInt32(chkDSPNB2.Checked);
		}

#endregion

#region Mode Specific Events

		private void chkCPDR_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkCPDR.Checked) 
			{
				chkCPDR.BackColor = button_selected_color;
				chkDX.Checked = false;
				ptbCPDR_Scroll(this, EventArgs.Empty);
			}
			else
			{
				chkCPDR.BackColor = SystemColors.Control;
			}
			if(chkDX.Checked || chkCPDR.Checked)
				dsp.GetDSPTX(0).TXCompandOn = true;
			else dsp.GetDSPTX(0).TXCompandOn = false;
			cat_cmpd_status = Convert.ToInt32(chkCPDR.Checked);
		}

		private void ptbCPDR_Scroll(object sender, System.EventArgs e)
		{
			lblCPDRVal.Text = ptbCPDR.Value.ToString();

            if (chkCPDR.Checked)
                dsp.GetDSPTX(0).TXCompandLevel = 0.1 * (double)ptbCPDR.Value;

			if(ptbCPDR.Focused) btnHidden.Focus();
		}

		private void chkDX_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkDX.Checked)
			{
				chkDX.BackColor = button_selected_color;
				if(chkCPDR.Checked) chkCPDR.Checked = false;
				ptbDX_Scroll(this, EventArgs.Empty);
			}
			else
			{
				chkDX.BackColor = SystemColors.Control;
			}
			if(chkDX.Checked || chkCPDR.Checked)
				dsp.GetDSPTX(0).TXCompandOn = true;
			else dsp.GetDSPTX(0).TXCompandOn = false;
		}

		private void ptbDX_Scroll(object sender, System.EventArgs e)
		{
			lblDXVal.Text = ptbDX.Value.ToString();

            if (chkDX.Checked)
                dsp.GetDSPTX(0).TXCompandLevel = 1.0 + 0.4 * (double)ptbDX.Value;
			if(ptbDX.Focused) btnHidden.Focus();
		} 

#endregion

#region Memory Events
		// ======================================================
		// Memory Events
		// ======================================================

		private void btnMemoryQuickSave_Click(object sender, System.EventArgs e)
		{
			txtMemoryQuick.Text = txtVFOAFreq.Text;
			quick_save_mode = RX1DSPMode;
			quick_save_filter = RX1Filter;
		}

		private void btnMemoryQuickRestore_Click(object sender, System.EventArgs e)
		{
			SaveBand();
			last_band = "";
			RX1DSPMode = quick_save_mode;
			txtVFOAFreq.Text = txtMemoryQuick.Text;
			txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			RX1Filter = quick_save_filter;
		}

#endregion

#region Menu Events
        // ======================================================
        // Menu Events
        // ======================================================

		private void menu_setup_Click(object sender, System.EventArgs e)
		{
			if(setupForm.IsDisposed)
				setupForm = new Setup(this);
			setupForm.Show();
			setupForm.Focus();
            setupForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

		private void menu_wave_Click(object sender, System.EventArgs e)
		{
			if(WaveForm.IsDisposed)
				WaveForm = new WaveControl(this);
			WaveForm.Show();
			WaveForm.Focus();
            WaveForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

		private void mnuEQ_Click(object sender, System.EventArgs e)
		{
			if(eqForm == null || eqForm.IsDisposed)
				eqForm = new EQForm(this);
			eqForm.Show();
			eqForm.Focus();
            eqForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

		private void mnuUCB_Click(object sender, System.EventArgs e)
		{
			if(ucbForm == null || ucbForm.IsDisposed)
				ucbForm = new UCBForm(this);
			ucbForm.Show();
			ucbForm.Focus();
		}

		private void mnuXVTR_Click(object sender, System.EventArgs e)
		{
			if(xvtrForm == null || xvtrForm.IsDisposed)
				xvtrForm = new XVTRForm(this);

			xvtrForm.Show();
			xvtrForm.Focus();
            xvtrForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

		private void mnuCWX_Click(object sender, System.EventArgs e)
		{
            if ((setupForm != null) && (setupForm.chkKeyPoll.Checked == false))
            {
                if (rx1_dsp_mode == DSPMode.LSB) RX1DSPMode = DSPMode.CWL;
                else if (rx1_dsp_mode == DSPMode.USB) RX1DSPMode = DSPMode.CWU;

                if (rx1_dsp_mode != DSPMode.CWL && rx1_dsp_mode != DSPMode.CWU)
                {
                    MessageBox.Show("The radio must be in CWL or CWU mode in order to open the " +
                        "CWX Control Form.",
                        "CWX Error: Wrong Mode",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    return;
                }

            }
			//	cw_key_mode = true;
			if(cwxForm == null || cwxForm.IsDisposed)
			{
				cwxForm = new CWX(this);
			}

			cwxForm.Show();
			cwxForm.Focus();
		}

		private void menuItemFilterConfigure_Click(object sender, System.EventArgs e)
		{
			if(rx1_dsp_mode == DSPMode.DRM || rx1_dsp_mode == DSPMode.SPEC) return;

			if(filterRX1Form == null || filterRX1Form.IsDisposed)
				filterRX1Form = new FilterForm(this, rx1_filters, false);

			filterRX1Form.DSPMode = rx1_dsp_mode;
			filterRX1Form.CurrentFilter = rx1_filter;			
			filterRX1Form.Show();
			filterRX1Form.Focus();
            filterRX1Form.WindowState = FormWindowState.Normal; // ke9ns add
        }

		private void menuItemRX2FilterConfigure_Click(object sender, System.EventArgs e)
		{
			if(rx2_dsp_mode == DSPMode.DRM || rx2_dsp_mode == DSPMode.SPEC) return;

			if(filterRX2Form == null || filterRX2Form.IsDisposed)
				filterRX2Form = new FilterForm(this, rx2_filters, true);

			filterRX2Form.DSPMode = rx2_dsp_mode;
			filterRX2Form.CurrentFilter = rx2_filter;
			filterRX2Form.Show();
			filterRX2Form.Focus();
            filterRX2Form.WindowState = FormWindowState.Normal; // ke9ns add
        }

		private void mnuReportBug_Click(object sender, System.EventArgs e)
		{
			Thread t = new Thread(new ThreadStart(LaunchBugLink));
			t.Name = "Launch HelpDesk Link Thread";  //W4TME
			t.IsBackground = true;
			t.Priority = ThreadPriority.Normal;
			t.Start();
		}

		private void LaunchBugLink()
		{
			try
			{
				Process.Start("http://helpdesk.flexradio.com"); // W4TME
			}
			catch(Exception){ }
		}
        
        private void mnuAbout_Click(object sender, System.EventArgs e)                  // W4TME
        {
            // launch about form here
            AboutForm form = new AboutForm();
            form.ShowDialog();
            form.Focus();
        }
		
        private void mnuMixer_Click(object sender, System.EventArgs e)
		{
			if(fwc_init || hid_init)
			{
				switch(current_model)
				{
					case Model.FLEX5000:
						if(fwcMixForm == null || fwcMixForm.IsDisposed)
							fwcMixForm = new FWCMixForm(this);
						fwcMixForm.Show();
						fwcMixForm.Focus();
                        fwcMixForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
					case Model.FLEX3000:
						if(flex3000MixerForm == null || flex3000MixerForm.IsDisposed)
							flex3000MixerForm = new FLEX3000MixerForm(this);
						flex3000MixerForm.Show();
						flex3000MixerForm.Focus();
                        flex3000MixerForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
                    case Model.FLEX1500:
                        if (flex1500MixerForm == null || flex1500MixerForm.IsDisposed)
                            flex1500MixerForm = new FLEX1500MixerForm(this);
                        flex1500MixerForm.Show();
                        flex1500MixerForm.Focus();
                        flex1500MixerForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
				}
			}
		}

		private void mnuAntenna_Click(object sender, System.EventArgs e)
		{
			if(fwc_init && current_model == Model.FLEX5000)
			{
				if(fwcAntForm == null || fwcAntForm.IsDisposed)
					fwcAntForm = new FWCAntForm(this);
				fwcAntForm.Show();
				fwcAntForm.Focus();
                fwcAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else if (hid_init && current_model == Model.FLEX1500)
            {
                if (hidAntForm == null || hidAntForm.IsDisposed)
                    hidAntForm = new HIDAntForm(this);
                hidAntForm.Show();
                hidAntForm.Focus();
                hidAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
		}

		private void mnuRelays_Click(object sender, System.EventArgs e)
		{
			//if(fwc_init && current_model == Model.FLEX5000)
			{
				if(flex5000RelayForm == null || flex5000RelayForm.IsDisposed)
					flex5000RelayForm = new FLEX5000RelayForm(this);
				flex5000RelayForm.Show();
				flex5000RelayForm.Focus();
                flex5000RelayForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
		}

		private void mnuATU_Click(object sender, System.EventArgs e)
		{
			if(fwc_init && current_model == Model.FLEX5000)
			{
				if(fwcAtuForm == null || fwcAtuForm.IsDisposed)
					fwcAtuForm = new FWCATUForm(this);
				fwcAtuForm.Show();
				fwcAtuForm.Focus();
                fwcAtuForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else if (fwc_init && current_model == Model.FLEX3000)
            {
                if (flex3000ATUForm == null || flex3000ATUForm.IsDisposed)
                    flex3000ATUForm = new FLEX3000ATUForm(this);
                flex3000ATUForm.Show();
                flex3000ATUForm.Focus();
                flex3000ATUForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
		}

		private void mnuProfiles_Click(object sender, System.EventArgs e)
		{
            if (File.Exists(Application.StartupPath + "\\command.xml"))
            {
                if (ProfileForm == null || ProfileForm.IsDisposed)
                    ProfileForm = new RemoteProfiles(this);
                ProfileForm.Show();
                ProfileForm.Focus();
                ProfileForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else
                MessageBox.Show("You must create at least one remote profile first", "No Profiles Available", MessageBoxButtons.OK);            
		}		
		
#endregion

#region Sub RX Events
        // ======================================================
        // Sub RX Events
        // ======================================================

		private void ptbPanMainRX_Scroll(object sender, System.EventArgs e)
		{
			//if(chkEnableMultiRX.Checked)
			{
				float val = (int)ptbPanMainRX.Value/100.0f;
				if(chkPanSwap.Checked) val = 1.0f - val;
				dsp.GetDSPRX(0, 0).Pan = val;
			}
			if(ptbPanMainRX.Focused)
				btnHidden.Focus();
		}

		private void ptbPanSubRX_Scroll(object sender, System.EventArgs e)
		{
			float val = (int)ptbPanSubRX.Value/100.0f;
			if(chkPanSwap.Checked) val = 1.0f - val;
			dsp.GetDSPRX(0, 1).Pan = val;

			if(ptbPanSubRX.Focused)
				btnHidden.Focus();
		}


        //==================================================================================
		private void chEnableMultiRX_CheckedChanged(object sender, System.EventArgs e)
		{
			dsp.GetDSPRX(0, 1).Active = chkEnableMultiRX.Checked;

            if (chkEnableMultiRX.Checked)
			{
                  
				//tbPanMainRX_Scroll(this, EventArgs.Empty);
				//tbRX0Gain_Scroll(this, EventArgs.Empty);
				
				chkEnableMultiRX.BackColor = button_selected_color;
				if(chkPower.Checked)
				{
					if(rx2_enabled)
					{
                      if (setupForm.chkBoxMRX.Checked == true)  VFOASubFreq = VFOAFreq; // ke9ns add start with sub on top of vfoA

                        UpdateVFOASub();

					}
					else
					{
                        if (setupForm.chkBoxMRX.Checked == true) VFOBFreq = VFOAFreq; // ke9ns add  start with B synced to A

						txtVFOBFreq_LostFocus(this, EventArgs.Empty);
						if(chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
                        else
						{
							txtVFOBFreq.ForeColor = vfo_text_light_color;
							txtVFOBMSD.ForeColor = vfo_text_light_color;
							txtVFOBLSD.ForeColor = small_vfo_color;
							txtVFOBBand.ForeColor = band_text_light_color;
						}
                        Debug.WriteLine("MULTIRX HERE");

                    }
                }

				dsp.GetDSPRX(0, 1).SetRXFilter(dsp.GetDSPRX(0, 0).RXFilterLow, dsp.GetDSPRX(0, 0).RXFilterHigh);   // turn on sub receiver 
			}
			else
			{
				//dsp.GetDSPRX(0, 0).RXOutputGain = 1.0;
				//dsp.GetDSPRX(0, 0).Pan = 0.5f;
				chkEnableMultiRX.BackColor = SystemColors.Control;
				//if(chkPower.Checked)
				{
					if(rx2_enabled)
					{
						UpdateVFOASub();
					}
					else
					{
						if(chkVFOSplit.Checked && !rx2_enabled) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
						else if(rx2_enabled) chkRX2_CheckedChanged(this, EventArgs.Empty);
						else
						{
							txtVFOBFreq.ForeColor = vfo_text_dark_color;
							txtVFOBMSD.ForeColor = vfo_text_dark_color;
							txtVFOBLSD.ForeColor = vfo_text_dark_color;
							txtVFOBBand.ForeColor = band_text_dark_color;
						}
					}
				}
				if(current_click_tune_mode == ClickTuneMode.VFOB && !chkFullDuplex.Checked && !chkVFOSplit.Checked)
					CurrentClickTuneMode = ClickTuneMode.VFOA;
			}

            Display.SubRX1Enabled = chkEnableMultiRX.Checked;
            UpdateRX1SubNotches();

        } // chEnableMultiRX_CheckedChanged(



        private void chkPanSwap_CheckedChanged(object sender, System.EventArgs e)
		{
			//if(chkEnableMultiRX.Checked)
			{
				ptbPanMainRX_Scroll(this, EventArgs.Empty);
				ptbPanSubRX_Scroll(this, EventArgs.Empty);
			}
		}

		private void ptbRX0Gain_Scroll(object sender, System.EventArgs e)
		{
			//if(chkEnableMultiRX.Checked)
            dsp.GetDSPRX(0, 0).RXOutputGain = (double)ptbRX0Gain.Value / ptbRX0Gain.Maximum * 0.5;  //max 0.5 to allow for headroom
			if(ptbRX0Gain.Focused)
				btnHidden.Focus();
		}

		private void ptbRX1Gain_Scroll(object sender, System.EventArgs e)
		{
            dsp.GetDSPRX(0, 1).RXOutputGain = (double)ptbRX1Gain.Value / ptbRX1Gain.Maximum * 0.5;  //max 0.5 to allow for headroom

			if(ptbRX1Gain.Focused)
				btnHidden.Focus();
		}

#endregion

		/*private void button1_Click(object sender, System.EventArgs e)
		{
            p = new Progress("Test TX Spur");
            Thread t = new Thread(new ThreadStart(CallCalTXSpur));
            t.Name = "Test TX Spur Thread";
            t.IsBackground = true;
            t.Priority = ThreadPriority.Normal;
            t.Start();
            p.Show();
		}*/

		public void TestTXCarrier()
		{
			if(!chkPower.Checked)
			{
				MessageBox.Show("Power must be on.");
				return;
			}

			double vfoa = VFOAFreq;
			double vfob = VFOBFreq;

			bool duplex = full_duplex;
			FullDuplex = true;

			bool spur_red = chkSR.Checked;					// save current spur reduction setting
			chkSR.Checked = false;							// turn spur reduction off

			bool polyphase = setupForm.Polyphase;			// save current polyphase setting
			setupForm.Polyphase = false;					// disable polyphase

			int dsp_buf_size = setupForm.DSPPhoneRXBuffer;		// save current DSP buffer size
			setupForm.DSPPhoneRXBuffer = 4096;					// set DSP Buffer Size to 4096

			// setup display mode
			string display = comboDisplayMode.Text;
			comboDisplayMode.Text = "Spectrum";

			// setup dsp mode
			DSPMode dsp_mode = RX1DSPMode;
			RX1DSPMode = DSPMode.DSB;

			// setup filter
			Filter filter = RX1Filter;
			UpdateRX1Filters(-500, 500);

			FullDuplex = true;
			FWC.SetQSD(true);
			FWC.SetQSE(true);
			FWC.SetTR(true);
			FWC.SetSig(true);
			FWC.SetGen(false);
			FWC.SetTest(true);
			FWC.SetTXMon(false);

			Audio.TXInputSignal = Audio.SignalSource.SILENCE;
			//Audio.SourceScale = 1.0;

			double start = 14.0;
			double end = 14.350;
			double step = 0.001;
			float[] a = new float[Display.BUFFER_SIZE];
			StringBuilder s = new StringBuilder();

			for(double freq=start; freq<end; freq+=step)
			{
				VFOAFreq = freq;
				VFOBFreq = freq;
				Thread.Sleep(100);

				float sum = 0.0f;
				for(int i=0; i<5; i++)
				{
					calibration_mutex.WaitOne();
					fixed(float* ptr = &a[0])
						DttSP.GetSpectrum(0, ptr);// get the spectrum values
					calibration_mutex.ReleaseMutex();
					Thread.Sleep(50);

					sum += a[2048];
				}
                float avg = (sum / 5) + Display.RX1DisplayCalOffset + Display.RX1PreampOffset;
				s.Append(freq.ToString("f6")+","+avg.ToString("f1")+"\n");
			}

            StreamWriter writer = new StreamWriter(app_data_path + "tx_carrier" + start.ToString("f6") + "-" + end.ToString("f6") + ".csv"); // "\\tx_carrier"
           
			writer.WriteLine("freq,carrier");
			writer.Write(s.ToString());
			writer.Close();

			// return output tone
			Audio.TXInputSignal = Audio.SignalSource.RADIO;

			// return hardware to normal operation
			FWC.SetSig(false);
			FWC.SetTest(false);
			FWC.SetQSE(false);

			setupForm.Polyphase = polyphase;
			setupForm.DSPPhoneRXBuffer = dsp_buf_size;
			chkSR.Checked = spur_red;
			FullDuplex = duplex;

			VFOAFreq = vfoa;
			VFOBFreq = vfob;

			comboDisplayMode.Text = display;

			RX1DSPMode = dsp_mode;
			RX1Filter = filter;
		}

		public void CallCalStepGen()
		{
			p = new Progress("Calibrate Gen");
			Thread t = new Thread(new ThreadStart(CalStepGen));
			t.Name = "Run Calibrate Gen Thread";
			t.IsBackground = true;
			t.Priority = ThreadPriority.Normal;
			t.Start();
			p.Show();
		}

		public void CalStepGen()
		{
			if(!chkPower.Checked)
			{
				MessageBox.Show("Power must be on.");
				return;
			}

			if(current_model != Model.FLEX5000) return;

			VFOAFreq = 14.100;
			VFOBFreq = 14.004;

			for(int i=0; i<100; i++)
			{
				VFOBFreq = 14.004+i*0.001920;
				Thread.Sleep(100);
			}

			p.Hide();
		}

		private bool full_duplex = false;
		public bool FullDuplex
		{
			get { return full_duplex; }
			set
			{
				full_duplex = value;
				if(fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
				{
					FWC.SetFullDuplex(chkFullDuplex.Checked);
				}
				chkFullDuplex.Checked = value;
			}
		}

		private void chkFullDuplex_CheckedChanged(object sender, System.EventArgs e)
		{
			FullDuplex = chkFullDuplex.Checked;
			Audio.FullDuplex = chkFullDuplex.Checked;
			if(chkFullDuplex.Checked)
			{
				//MessageBox.Show("Full Duplex is On");
				chkFullDuplex.BackColor = Color.Red;
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				DttSP.SetThreadProcessingMode(0,2);
				DttSP.SetThreadProcessingMode(1,2);
			}
			else 
			{
				chkFullDuplex.BackColor = SystemColors.Control;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
				if (chkMOX.Checked) 
				{
					DttSP.SetThreadProcessingMode(0,0);
					DttSP.SetThreadProcessingMode(1,2);
				}
				else
				{
					DttSP.SetThreadProcessingMode(0,2);
					DttSP.SetThreadProcessingMode(1,0);
				}
				if(current_click_tune_mode == ClickTuneMode.VFOB && !chkVFOSplit.Checked && !chkEnableMultiRX.Checked)
					CurrentClickTuneMode = ClickTuneMode.VFOA;
			}			
		}

		private static Console theConsole = null;

		public static Console getConsole()
		{
			return theConsole;
		}

        protected override void WndProc(ref Message m) 
		{ 
			const int WM_QUERYENDSESSION = 0x0011;
            const int WM_DEVICECHANGE = 0x0219;

			// Listen for operating system messages. 

            switch (m.Msg)
            {
                case WM_QUERYENDSESSION:                   
                    chkPower.Checked = false;
                    ExitConsole();
                    //this.Close();
                    break;
                case WM_DEVICECHANGE:
                    if (flexcontrol_autodetect)  FlexControlScan();
                    break;
                default:
                    base.WndProc(ref m);
                    break;
            }
		}

		public void FWCATUBypass()
		{
			chkFWCATU.Checked = false;
			chkFWCATUBypass.Checked = true;
		}

		public void FWCATUTuned()
		{
			chkFWCATU.Checked = true;
			chkFWCATUBypass.Checked = false;
		}

        public void FWCATUFailed()
        {
            chkFWCATU.Checked = false;
            chkFWCATUBypass.Checked = true;
        }

        public void SetATUFeedback(string s)
        {
            toolTip1.SetToolTip(chkFWCATU, s);
        }

        // ke9ns add  if in pulser and just checked tun, then 
        private void chkFWCATU_CheckedChanged(object sender, EventArgs e)
        {
          //  if (chkFWCATU.Checked == false)
          //  {
           //     if (setupForm.chkBoxPulser.Checked == true)
            //    {
             //       chkFWCATU.Checked = false; // ke9ns keep ATU off until you set TUNp back to TUN

              //  }
         //   }


        } // chkFWCATU_CheckedChanged

        private void chkFWCATU_Click(object sender, System.EventArgs e)
		{
			if(fwc_init && current_model == Model.FLEX5000 && 
				fwcAtuForm != null && !fwcAtuForm.IsDisposed)
			{
				if(!chkTUN.Checked)
				{
					fwcAtuForm.DoTuneMemory();
					FWCATUTuned();
				}
				else
				{
					chkTUN.Checked = false;
					chkFWCATUBypass_Click(this, EventArgs.Empty);
				}
			}
            else if (fwc_init && current_model == Model.FLEX3000 &&
                flex3000ATUForm != null && !flex3000ATUForm.IsDisposed)
            {
                if (!chkTUN.Checked)
                {
                    flex3000ATUForm.DoTune();
                    chkFWCATU.Checked = true;
                    chkFWCATUBypass.Checked = false;
                }
                else
                {
                    chkTUN.Checked = false;
                    flex3000ATUForm.AbortTune();
                }
            }
		}

		private void chkFWCATUBypass_Click(object sender, System.EventArgs e)
		{
			if(fwc_init && current_model == Model.FLEX5000 && 
				fwcAtuForm != null && !fwcAtuForm.IsDisposed)
			{
				fwcAtuForm.DoBypass();
				FWCATUBypass();
			}
            else if (fwc_init && current_model == Model.FLEX3000 &&
                flex3000ATUForm != null && !flex3000ATUForm.IsDisposed)
            {
                if (tuning)
                {
                    flex3000ATUForm.AbortTune();
                }
                flex3000ATUForm.DoBypass();
                FWCATUBypass();
            }
		}

		private void chkSplitDisplay_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkSplitDisplay.Checked)
				chkSplitDisplay.BackColor = button_selected_color;
			else 
				chkSplitDisplay.BackColor = SystemColors.Control;

			Display.SplitDisplay = chkSplitDisplay.Checked;
		}

		private void comboDisplayModeTop_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			/*switch(comboDisplayModeTop.Text)
			{
				case "Spectrum":
					Display.CurrentDisplayModeTop = DisplayMode.SPECTRUM;
					if(chkSplitDisplay.Checked) UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
					break;
				case "Panadapter":
					Display.CurrentDisplayModeTop = DisplayMode.PANADAPTER;
					if(chkSplitDisplay.Checked) CalcDisplayFreq();
					break;
				case "Scope":
					Display.CurrentDisplayModeTop = DisplayMode.SCOPE;
					break;
				case "Phase":
					Display.CurrentDisplayModeTop = DisplayMode.PHASE;
					break;
				case "Phase2":
					Display.CurrentDisplayModeTop = DisplayMode.PHASE2;
					break;
				case "Waterfall":
					Display.CurrentDisplayModeTop = DisplayMode.WATERFALL;
					if(chkSplitDisplay.Checked) CalcDisplayFreq();
					break;
				case "Histogram":
					Display.CurrentDisplayModeTop = DisplayMode.HISTOGRAM;
					break;
				case "Off":
					Display.CurrentDisplayModeTop = DisplayMode.OFF;
					break;
			}*/
		}

		private void comboDisplayModeBottom_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			switch(comboDisplayModeBottom.Text)
			{
				case "Spectrum":
					Display.CurrentDisplayModeBottom = DisplayMode.SPECTRUM;
					if(chkSplitDisplay.Checked) UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
					break;
				case "Panadapter":
					Display.CurrentDisplayModeBottom = DisplayMode.PANADAPTER;
					if(chkSplitDisplay.Checked) CalcDisplayFreq();
					break;
                case "Panafall":                                                // ke9ns added
                    Display.CurrentDisplayModeBottom = DisplayMode.PANAFALL;
                    if (chkSplitDisplay.Checked) CalcDisplayFreq();
                    break;
				case "Scope":
					Display.CurrentDisplayModeBottom = DisplayMode.SCOPE;
					break;
				case "Phase":
					Display.CurrentDisplayModeBottom = DisplayMode.PHASE;
					break;
				case "Phase2":
					Display.CurrentDisplayModeBottom = DisplayMode.PHASE2;
					break;
				case "Waterfall":
					Display.CurrentDisplayModeBottom = DisplayMode.WATERFALL;
					if(chkSplitDisplay.Checked) CalcDisplayFreq();
					break;
				case "Histogram":
					Display.CurrentDisplayModeBottom = DisplayMode.HISTOGRAM;
					break;
				case "Off":
					Display.CurrentDisplayModeBottom = DisplayMode.OFF;
					break;
			}
		}


        //=============================================================================================
        // ke9ns mod
        private void ckQuickPlay_CheckedChanged(object sender, System.EventArgs e)
		{
            if ((checkBoxID.Checked != true) && (!mox)) // ke9ns checkboxID is the REC/PLAY ID box
            {
                ckQuickPlay.Checked = false; // if not transmitting then dont do anything and return.

                MessageBox.Show("You need to be Transmitting First,\n OR, check the Rec/Play ID box",
                   "Not Transmitting",
                   MessageBoxButtons.OK,
                   MessageBoxIcon.Information);

                return;
            }

            string file_name2 = AppDataPath + "SDRQuickAudio.wav"; // ke9ns save data for my mods


            if (WaveForm.chkQuickAudioFolder.Checked == true)  // ke9ns add
            {

                string filePath = AppDataPath + "QuickAudio\\";

                if (!Directory.Exists(filePath))
                {
                    // create PowerSDR audio folder if it does not exist
                    //  Directory.CreateDirectory(wave_folder);
                    Debug.WriteLine("problem no ke9ns dat file found");

                    MessageBox.Show("QuickAudio Folder missing",
                 "QuickAudio Folder missing",
                 MessageBoxButtons.OK,
                 MessageBoxIcon.Information);
                    return;

                }
            }
            else if (!File.Exists(file_name2)) // ke9ns add
            {
                ckQuickPlay.Checked = false; // if file does not exist then dont do anything and return.
                MessageBox.Show("You need to Record a File First\n Missing the SDRQuickAudio.wav file\nUncheck Wave->QuickAudio Save Folder\nMake a recording.\n Now you can Reselect Wave->QuickAudio Save Folder",
                 "No File Selected",
                 MessageBoxButtons.OK,
                 MessageBoxIcon.Information);
                return;
            }


             AudioMOXChanged(mox); // ke9ns add  change the slider to MON from AF if transmitting. Needed becuase of other changes made for use with cross band work.

            ptbAF_Scroll(this, EventArgs.Empty); // update AF to MON slider now

         
            if ((checkBoxID.Checked == true) && (chkPower.Checked)) // ke9ns add allow tx on play directly so you dont need to mox and play
            {
                if ((ckQuickPlay.Checked))
                {

                    if (chkVAC1.Checked)
                    {
                         vac1 = 1;
                         chkVAC1.Checked = false;
                    }

                    chkMOX.Checked = true;     // key radio 
                    WaveForm.QuickPlay = true;
                    ckQuickPlay.BackColor = button_selected_color;

                }
                else
                {

                    WaveForm.QuickPlay = false;
                    chkMOX.Checked = false;     // unkey radio
                    ckQuickPlay.BackColor = SystemColors.Control;//k6jca 1/13/08

                      if (vac1 == 1)
                      {
                         vac1 = 0;
                         Thread.Sleep(100);
                         chkVAC1.Checked = true;

                      }
                   

                }

                ckQuickRec.Enabled = !ckQuickPlay.Checked;

            }
            else // ke9ns this is the original way below
            {
                if (ckQuickPlay.Checked)  
                {

                    WaveForm.QuickPlay = true;
                    ckQuickPlay.BackColor = button_selected_color;
             
                }
                else
                {
                    WaveForm.QuickPlay = false;
                    ckQuickPlay.BackColor = SystemColors.Control;//k6jca 1/13/08
                }

                ckQuickRec.Enabled = !ckQuickPlay.Checked;
            }

        } // ckQuickPlay_CheckedChanged


        private static int temp_PWR = 0; // ke9ns add to remember the original power output value to put it back when done

        //==========================================================================================
        public void ckQuickRec_CheckedChanged(object sender, System.EventArgs e)
		{

          
            if ((checkBoxID.Checked == true)) // ke9ns add (Rec/Play ID box checked) allow tx on play directly so you dont need to mox and play
            {
                if ((ckQuickRec.Checked)) // if enabled (recording)
                {
                    if (chkVAC1.Checked)
                     {
                         vac1 = 1;
                         chkVAC1.Checked = false;
                     }
                    chkMOX.Checked = true;     // key radio 
                    WaveForm.QuickRec = true;
                    ckQuickPlay.Enabled = true;
                    ckQuickRec.BackColor = button_selected_color;
                    temp_PWR = PWR; // ptbPWR.Value; // record current drive settings
                    PWR = 0; // ptbPWR.Value = 0; // turn drive off for recording


                }
                else
                {
                    WaveForm.QuickRec = false;
                    chkMOX.Checked = false;     // unkey radio
                    ckQuickRec.BackColor = SystemColors.Control;//k6jca 1/13/08
                                                                //ptbPWR.Value
                    PWR = temp_PWR; // turn drive level back up to prior setting

                      if (vac1 == 1)
                      {
                         vac1 = 0;
                          Thread.Sleep(100);
                          chkVAC1.Checked = true;

                      }
                   
                }

                ckQuickPlay.Enabled = !ckQuickRec.Checked;
            }

            //--------------------------------------------------
            else // ke9ns original way to doing quickaudio
            {
                if (ckQuickRec.Checked)
                {

                    WaveForm.QuickRec = true;
                    ckQuickPlay.Enabled = true;
                    ckQuickRec.BackColor = button_selected_color;

                }
                else
                {
                    WaveForm.QuickRec = false;
                    ckQuickRec.BackColor = SystemColors.Control;//k6jca 1/13/08
                }

                ckQuickPlay.Enabled = !ckQuickRec.Checked;
            }


        }//ckQuickRec_CheckedChanged

        //==========================================================================================================
        //==========================================================================================================
        //==========================================================================================================
        // ke9ns mod:  this is where you control each button panel movement as the console window changes size
        //==========================================================================================================
        //==========================================================================================================
        //==========================================================================================================
       public void ResizeConsole (int h_delta, int v_delta)		//k6jca 1/15/08
		{

            // This routine captures the size and location parameters *after* windows
            // has resized the image, (if the video is set for "120 dpi" in lieu of the
            // normal 96 dpi).  These will be used as the "basis" for all new size calcs.

           
            if (setupForm != null) TXMeter2 = setupForm.chkTXMeter2.Checked; // update 2nd tx meter

            if ((h_delta == 0) && (v_delta == 0) && (previous_delta == 0)) 
			{
				// do nothing - this only occurs for my first call to Resize with both deltas zero during init
				// and at that time windows hasn't resized the display if in 120 dpi mode.
				// Use the "previous_delta" variable to ensure that if we *reduce* size back
				// to original, we do the calcs for that, too (previous_delta won't be 0 in that case);
			}
			else
			{

                //this.Size = new Size (console_basis_size.Width + h_delta,console_basis_size.Height + v_delta);
                //this.Width = console_basis_size.Width + h_delta;
                //this.Height = console_basis_size.Height + v_delta;

                grpVFOBetween.Location = new Point(gr_vfobetween_basis_location.X + (h_delta / 2), gr_vfobetween_basis_location.Y); // ke9ns move here from below

               
                // Debug.WriteLine("console size " + this.Size.Height);

                //-------------------------------------------------------------------
                // ke9ns add this if section for smaller 768H screen sizes
                if ((this.Size.Height < 850) )
                {

                    if (FWCEEPROM.RX2OK) // if you have RX2 installed
                    {
                        // ke9ns 1st
                        grpMultimeter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y - 2); // RX1/TX meter


                        if ((setupForm != null) && (setupForm.chk2ndMeter.Checked == true))
                        {

                            // ke9ns 2nd
                            grpRX2Meter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y - 2 + grpMultimeter.Height + 6);

                            // ke9ns 3nd
                            panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, grpMultimeter.Height + gr_BandHF_basis_location.Y + (v_delta / 8));  // ke9ns have it stay close to rx1 meter
                            panelBandGN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, grpMultimeter.Height  + gr_BandGEN_basis_location.Y + (v_delta / 8));  // ke9ns have it stay close to rx1 meter
                            panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, grpMultimeter.Height+ gr_BandVHF_basis_location.Y + (v_delta / 8));

                            // ke9ns 4rd
                            panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, grpMultimeter.Height  + gr_Mode_basis_location.Y + (v_delta / 6)); // ke9ns have it stay close to band

                            // ke9ns 5th
                            panelFilter.Location = new Point(gr_filter_basis_location.X + h_delta, grpMultimeter.Height  + gr_filter_basis_location.Y + (v_delta / 5)); // ke9ns have it stay close to mode


                          
                        } // 2nd meter just under 1st meter
                        else
                        {

                            // ke9ns 2nd
                            panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, gr_BandHF_basis_location.Y + (v_delta / 8));  // ke9ns have it stay close to rx1 meter
                            panelBandGN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, gr_BandGEN_basis_location.Y + (v_delta / 8));  // ke9ns have it stay close to rx1 meter
                            panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, gr_BandVHF_basis_location.Y + (v_delta / 8));

                            // ke9ns 3rd
                            panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, gr_Mode_basis_location.Y + (v_delta / 6)); // ke9ns have it stay close to band

                            // ke9ns 4th
                            panelFilter.Location = new Point(gr_filter_basis_location.X + h_delta, gr_filter_basis_location.Y + (v_delta / 5)); // ke9ns have it stay close to mode

                            // ke9ns 5th
                            grpRX2Meter.Location = new Point(gr_rx2_meter_basis.X + h_delta, gr_rx2_meter_basis.Y + v_delta);

                        } // 2nd meter in original bottom location

                    }
                    else // no RX2 installed
                    {

                        if ((setupForm != null) && (setupForm.chk2ndMeter.Checked == true) && (setupForm.chkTXMeter2.Checked) )
                        {
                            // ke9ns 1st
                            grpMultimeter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y - 2); // RX1/TX meter

                            // ke9ns 2th
                            grpRX2Meter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, grpMultimeter.Height + gr_Multimeter_basis_location.Y - 2); // ke9ns have it stay close to mode

                            // ke9ns 3nd
                            panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, grpMultimeter.Height + gr_BandHF_basis_location.Y + (v_delta / 24));  // ke9ns have it stay close to rx1 meter
                            panelBandGN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, grpMultimeter.Height + gr_BandGEN_basis_location.Y + (v_delta / 24));  // ke9ns have it stay close to rx1 meter
                            panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, grpMultimeter.Height + gr_BandVHF_basis_location.Y + (v_delta / 24));

                            // ke9ns 4rd
                            panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, grpMultimeter.Height + gr_Mode_basis_location.Y + (v_delta / 12)); // ke9ns have it stay close to band

                            // ke9ns 5th
                            panelFilter.Location = new Point(gr_filter_basis_location.X + h_delta, grpMultimeter.Height  + gr_filter_basis_location.Y + (v_delta / 9)); // ke9ns have it stay close to mode

                          
                        } // 2nd meter on top
                        else
                        {
                            // ke9ns 1st
                            grpMultimeter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y - 2); // RX1/TX meter

                            // ke9ns 2nd
                            panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, gr_BandHF_basis_location.Y + (v_delta / 24));  // ke9ns have it stay close to rx1 meter
                            panelBandGN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, gr_BandGEN_basis_location.Y + (v_delta / 24));  // ke9ns have it stay close to rx1 meter
                            panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, gr_BandVHF_basis_location.Y + (v_delta / 24));

                            // ke9ns 3rd
                            panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, gr_Mode_basis_location.Y + (v_delta / 12)); // ke9ns have it stay close to band

                            // ke9ns 4th
                            panelFilter.Location = new Point(gr_filter_basis_location.X + h_delta, gr_filter_basis_location.Y + (v_delta / 9)); // ke9ns have it stay close to mode

                            // ke9ns 5th
                            grpRX2Meter.Location = new Point(gr_filter_basis_location.X + h_delta, gr_filter_basis_location.Y + (v_delta / 9) + 180); // ke9ns have it stay close to mode

                        } // 2nd meter on bottom




                    } // no rx2 installed

                }
                else // larger screen size (original settings)
                {

                    if ((setupForm != null) && ((setupForm.chk2ndMeter.Checked == true) && (FWCEEPROM.RX2OK)) || ( (setupForm.chk2ndMeter.Checked == true) && (setupForm.chkTXMeter2.Checked == true) )  ) // if you have RX2 installed
                    {
 
                        //-------------------------------------------------------------------
                        // ke9ns 1st
                        grpMultimeter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y); // RX1/TX meter

                        // ke9ns 2th

                        grpRX2Meter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y + grpMultimeter.Height + 6);


                        // ke9ns 3nd
                        panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, grpMultimeter.Height + gr_BandHF_basis_location.Y + (v_delta / 6));  // ke9ns have it stay close to rx1 meter
                        panelBandGN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, grpMultimeter.Height + gr_BandGEN_basis_location.Y + (v_delta / 6));  // ke9ns have it stay close to rx1 meter
                        panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, grpMultimeter.Height + gr_BandVHF_basis_location.Y + (v_delta / 6));

                        // ke9ns 4rd
                        panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, grpMultimeter.Height + gr_Mode_basis_location.Y + (v_delta / 4)); // ke9ns have it stay close to band

                        // ke9ns 5th
                        panelFilter.Location = new Point(gr_filter_basis_location.X + h_delta, grpMultimeter.Height + gr_filter_basis_location.Y + (v_delta / 3)); // ke9ns have it stay close to mode



                    } // 2nd meter under 1st meter
                    else
                    {

                        //-------------------------------------------------------------------
                        // ke9ns 1st
                        grpMultimeter.Location = new Point(gr_Multimeter_basis_location.X + h_delta, gr_Multimeter_basis_location.Y); // RX1/TX meter

                        // ke9ns 2nd
                        panelBandHF.Location = new Point(gr_BandHF_basis_location.X + h_delta, gr_BandHF_basis_location.Y + (v_delta / 6));  // ke9ns have it stay close to rx1 meter
                        panelBandGN.Location = new Point(gr_BandGEN_basis_location.X + h_delta, gr_BandGEN_basis_location.Y + (v_delta / 6));  // ke9ns have it stay close to rx1 meter
                        panelBandVHF.Location = new Point(gr_BandVHF_basis_location.X + h_delta, gr_BandVHF_basis_location.Y + (v_delta / 6));

                        // ke9ns 3rd
                        panelMode.Location = new Point(gr_Mode_basis_location.X + h_delta, gr_Mode_basis_location.Y + (v_delta / 4)); // ke9ns have it stay close to band

                        // ke9ns 4th
                        panelFilter.Location = new Point(gr_filter_basis_location.X + h_delta, gr_filter_basis_location.Y + (v_delta / 3)); // ke9ns have it stay close to mode

                        // ke9ns 5th
                        if (!FWCEEPROM.RX2OK)
                        {
                            grpRX2Meter.Location = new Point(gr_filter_basis_location.X + h_delta, gr_filter_basis_location.Y + (v_delta / 3) + 200); // ke9ns have it stay close to mode
                        }
                        else
                        {
                            grpRX2Meter.Location = new Point(gr_rx2_meter_basis.X + h_delta, gr_rx2_meter_basis.Y + v_delta - 10);
                        }

                    } // 2nd meter original location on bottom




                } // if height of this is > 850
                //-------------------------------------------------------------------------------

                panelModeSpecificPhone.Location = new Point(gr_ModePhone_basis_location.X + h_delta - (h_delta / 4), gr_ModePhone_basis_location.Y + v_delta);
                panelModeSpecificCW.Location = new Point(gr_ModeCW_basis_location.X + h_delta - (h_delta / 4), gr_ModeCW_basis_location.Y + v_delta);
                panelModeSpecificDigital.Location = new Point(gr_ModeDig_basis_location.X + h_delta - (h_delta / 4), gr_ModeDig_basis_location.Y + v_delta);
                panelModeSpecificFM.Location = new Point(gr_ModeFM_basis_location.X + h_delta - (h_delta / 4), gr_ModeFM_basis_location.Y + v_delta);

				panelVFO.Location = new Point (gr_VFO_basis_location.X+(h_delta/4),gr_VFO_basis_location.Y+v_delta);
				//grpVFOBetween.Location = new Point(gr_vfobetween_basis_location.X+(h_delta/2),gr_vfobetween_basis_location.Y);



				btnDisplayPanCenter.Location = new Point(btn_display_pan_center_basis.X+(h_delta),btn_display_pan_center_basis.Y+v_delta);
				ptbDisplayPan.Size = new Size(tb_display_pan_size_basis.Width+(h_delta),tb_display_pan_size_basis.Height);
				radDisplayZoom4x.Location = new Point(btn_display_zoom_4x_basis.X+h_delta,btn_display_zoom_4x_basis.Y+v_delta);
				radDisplayZoom2x.Location = new Point(btn_display_zoom_2x_basis.X+h_delta,btn_display_zoom_2x_basis.Y+v_delta);
				radDisplayZoom1x.Location = new Point(btn_display_zoom_1x_basis.X+h_delta,btn_display_zoom_1x_basis.Y+v_delta);
				radDisplayZoom05.Location = new Point(btn_display_zoom_05_basis.X+h_delta,btn_display_zoom_05_basis.Y+v_delta);
				ptbDisplayZoom.Location = new Point(tb_display_zoom_basis.X+h_delta,tb_display_zoom_basis.Y+v_delta);

                txtDisplayPeakFreq.Location = new Point(txt_display_peak_freq_basis.X+h_delta,txt_display_peak_freq_basis.Y+v_delta);
				txtDisplayPeakPower.Location = new Point(txt_display_peak_power_basis.X+h_delta,txt_display_peak_power_basis.Y+v_delta);
         		txtDisplayPeakOffset.Location = new Point(txt_display_peak_offset_basis.X+h_delta,txt_display_peak_offset_basis.Y+v_delta);

                lblDisplayZoom.Location = new Point(lbl_display_zoom_basis.X+h_delta,lbl_display_zoom_basis.Y+v_delta);

                panelDisplay.Size = new Size(gr_display_size_basis.Width + h_delta, gr_display_size_basis.Height + v_delta);
				picDisplay.Size = new Size(pic_display_size_basis.Width+h_delta,pic_display_size_basis.Height+v_delta);

            
                autoBrightBox.Size = new Size(textbox1_size_basis.Width+h_delta,textbox1_size_basis.Height);
				autoBrightBox.Location = new Point(textbox1_basis.X,textbox1_basis.Y+v_delta);

                panelDisplay2.Location = new Point(gr_display2_basis.X+(h_delta/2),gr_display2_basis.Y+v_delta);
				panelDSP.Location = new Point(gr_dsp_basis.X+(h_delta/2),gr_dsp_basis.Y+v_delta);

				panelMultiRX.Location = new Point(gr_multirx_basis.X+(h_delta/2),gr_multirx_basis.Y+v_delta);
				ptbDisplayPan.Location = new Point(tb_displaypan_basis.X,tb_displaypan_basis.Y+v_delta);
				lblDisplayPan.Location = new Point(lbl_displaypan_basis.X,lbl_displaypan_basis.Y+v_delta);

                txtDisplayCursorFreq.Location = new Point(txt_display_cursor_freq_basis.X,txt_display_cursor_freq_basis.Y+v_delta);
				txtDisplayCursorPower.Location = new Point(txt_display_cursor_power_basis.X,txt_display_cursor_power_basis.Y+v_delta);
				txtDisplayCursorOffset.Location = new Point(txt_display_cursor_offset_basis.X,txt_display_cursor_offset_basis.Y+v_delta);

                chkPower.Location = new Point(chk_power_basis.X,chk_power_basis.Y + (v_delta / 8));
				panelOptions.Location = new Point(gr_options_basis.X,gr_options_basis.Y + (v_delta / 4));

				panelSoundControls.Location = new Point(gr_sound_controls_basis.X,gr_sound_controls_basis.Y + (v_delta / 8) + (v_delta / 4));

				chkSquelch.Location = new Point(chk_squelch_basis.X,chk_squelch_basis.Y+(v_delta/2));
				picSquelch.Location = new Point(pic_sql_basis.X,pic_sql_basis.Y+(v_delta/2));
				ptbSquelch.Location = new Point(tb_sql_basis.X,tb_sql_basis.Y+(v_delta/2));

                panelAntenna.Location = new Point(gr_antenna_basis.X, gr_antenna_basis.Y + (v_delta / 8) + (v_delta / 2)); // ke9ns mod was /8 /2
				chkBCI.Location = new Point(chk_bci_basis.X,chk_bci_basis.Y+(v_delta/8)+(v_delta/2));
				//button1.Location = new Point(button1_basis.X,button1_basis.Y+(v_delta/8)+(v_delta/2));
                panelDateTime.Location = new Point(gr_date_time_basis.X, gr_date_time_basis.Y + (v_delta / 2) + (v_delta / 4)); // ke9ns mod was /2  /4
				//lblCPUMeter.Location = new Point(lbl_cpu_meter_basis.X,lbl_cpu_meter_basis.Y+(v_delta/8)+(v_delta/2)+(v_delta/4));
			
				//panelRX2Divider.Location = new Point(pan_rx2_divider_basis.X, pan_rx2_divider_basis.Y+v_delta);
				//panelRX2Divider.Size = new Size(pan_rx2_divider_size_basis.Width+h_delta, pan_rx2_divider_size_basis.Height);

                grpDisplaySplit.Location = new Point(gr_display_split_basis.X+(h_delta/2), gr_display_split_basis.Y+v_delta);


                panelRX2Filter.Location = new Point(gr_rx2_filter_basis.X + (int)(h_delta * 0.66), gr_rx2_filter_basis.Y + v_delta);
				panelRX2Mode.Location = new Point(gr_rx2_mode_basis.X+(int)(h_delta*0.492), gr_rx2_mode_basis.Y+v_delta);
                panelRX2Display.Location = new Point(gr_rx2_display_basis.X + (int)(h_delta * 0.383), gr_rx2_display_basis.Y + v_delta);
                panelRX2DSP.Location = new Point(gr_rx2_dsp_basis.X + (int)(h_delta * 0.258), gr_rx2_dsp_basis.Y + v_delta);

				lblRX2RF.Location = new Point(lbl_rx2_rf_basis.X+(int)(h_delta*0.164), lbl_rx2_rf_basis.Y+v_delta);
				ptbRX2RF.Location = new Point(tb_rx2_rf_basis.X+(int)(h_delta*0.164), tb_rx2_rf_basis.Y+v_delta);
				chkRX2Squelch.Location = new Point(chk_rx2_squelch_basis.X+(int)(h_delta*0.164), chk_rx2_squelch_basis.Y+v_delta);
				ptbRX2Squelch.Location = new Point(tb_rx2_squelch_basis.X+(int)(h_delta*0.164), tb_rx2_squelch_basis.Y+v_delta);
                picRX2Squelch.Location = new Point(pic_rx2_squelch_basis.X+(int)(h_delta*0.164), pic_rx2_squelch_basis.Y+v_delta);

				panelRX2Mixer.Location = new Point(gr_rx2_mixer_basis.X+(int)(h_delta*0.078), gr_rx2_mixer_basis.Y+v_delta);
				chkRX2.Location = new Point(chk_rx2_enable_basis.X, chk_rx2_enable_basis.Y+v_delta);
				chkRX2Preamp.Location = new Point(chk_rx2_preamp_basis.X, chk_rx2_preamp_basis.Y+v_delta);
				lblRX2Band.Location = new Point(lbl_rx2_band_basis.X, lbl_rx2_band_basis.Y+v_delta);
				comboRX2Band.Location = new Point(combo_rx2_band_basis.X, combo_rx2_band_basis.Y+v_delta);


                //--------------------------------------------------------------------------------------------------------------
               // ke9ns VFO DIAL option
                if ((vfodial == false) || (this.Size.Width < 1400)) // normal location of VFOA and B
                {
                    VFODialA.Visible = false;
                    VFODialB.Visible = false;
                    VFODialAA.Visible = false;
                    VFODialBB.Visible = false;

                    grpVFOA.Location = new Point(gr_VFOA_basis_location.X + (h_delta / 4), gr_VFOA_basis_location.Y);  // ke9ns was 4
                    grpVFOB.Location = new Point(gr_VFOB_basis_location.X + h_delta - (h_delta / 4), gr_VFOB_basis_location.Y); // ke9ns was 4

                  
                }
                else // ke9ns special location of VFOA and B when VFO Dial is ON
                {

                    VFODialA.Visible = true;
                    VFODialB.Visible = true;
                    VFODialAA.Visible = true;
                    VFODialBB.Visible = true;

                    if ((grpVFOBetween.Location.X - (panelOptions.Location.X + 115 + 262)) > 275)
                    {
                        grpVFOA.Location = new Point(grpVFOBetween.Location.X - 300 - 262 - 5, grpVFOA.Location.Y); //ke9ns if gap between VFOA and CENTER is large, then move VFOA closer to Center
                    }
                    else
                    {
                        grpVFOA.Location = new Point(panelOptions.Location.X + 115 + 5, grpVFOA.Location.Y); // ke9ns if gap between VFOA and CENTER is small, the just keep VFOA on left side
                    }


                    if (((grpMultimeter.Location.X - 262) - (grpVFOBetween.Location.X + 240)) > 275) // 
                    {
                        grpVFOB.Location = new Point(grpVFOBetween.Location.X + 240 + 275, grpVFOB.Location.Y); // 
                    }
                    else
                    {
                        grpVFOB.Location = new Point(grpMultimeter.Location.X - 262 - 5, grpVFOB.Location.Y); // ke9ns 
                    }


                    int dialAPos = ((grpVFOBetween.Location.X - (grpVFOA.Location.X + 262)) / 2) + (grpVFOA.Location.X + 262);
                    int dialBPos = ((grpVFOB.Location.X - (grpVFOBetween.Location.X + 240)) / 2) + (grpVFOBetween.Location.X + 240);

                    int  dialAP = dialAPos - (VFODialA.Width / 2);
                    int  dialBP = dialBPos - (VFODialB.Width / 2);

                    VFODialA.Location = new Point(dialAP, VFODialA.Location.Y);  // ke9ns add dial VFOA
                    VFODialB.Location = new Point(dialBP, VFODialB.Location.Y); // ke9ns add dial VFOB
  
                    int  dialAPo = dialAPos - (VFODialAA.Width / 2)-1;
                    int  dialBPo = dialBPos - (VFODialBB.Width / 2)-1;


                    VFODialAA.Location = new Point(dialAPo, VFODialAA.Location.Y);  // ke9ns add dial VFOA
                    VFODialBB.Location = new Point(dialBPo, VFODialBB.Location.Y); // ke9ns add dial VFOB


                }

            }
            previous_delta = h_delta+v_delta; //we'll check this next time through...

		} // resizeconsole

		public int HDelta
		{
			get { return h_delta; }
			set	
			{ 
				h_delta = value;
				ResizeConsole(h_delta,v_delta);
			}
		}

		public int VDelta
		{
			get { return v_delta; }
			set	
			{ 
				v_delta = value; 
				ResizeConsole(h_delta,v_delta);
			}
		}

		public void GrabConsoleSizeBasis()
		{
			console_basis_size = this.Size;

         //   int yyy = this.Size.Height;

            gr_filter_basis_location = this.panelFilter.Location;
			
            //Debug.WriteLine("console basis:  "+console_basis_size+"  "+gr_filter_basis_location);

			gr_Multimeter_basis_location = this.grpMultimeter.Location;

            gr_BandHF_basis_location = this.panelBandHF.Location;
            gr_BandGEN_basis_location = this.panelBandGN.Location; // ke9ns add
            gr_BandVHF_basis_location = this.panelBandVHF.Location;

			gr_Mode_basis_location = this.panelMode.Location;
			gr_VFOB_basis_location = this.grpVFOB.Location;
			gr_VFOA_basis_location = this.grpVFOA.Location;

            gr_VFODialA_location = this.VFODialA.Location; // ke9ns add
            gr_VFODialB_location = this.VFODialB.Location; // ke9ns add

            gr_VFODialAA_location = this.VFODialA.Location; // ke9ns add
            gr_VFODialBB_location = this.VFODialB.Location; // ke9ns add

            gr_ModePhone_basis_location = this.panelModeSpecificPhone.Location;
            gr_ModeCW_basis_location = this.panelModeSpecificCW.Location;
            gr_ModeDig_basis_location = this.panelModeSpecificDigital.Location;
            gr_ModeFM_basis_location = this.panelModeSpecificFM.Location;
			gr_VFO_basis_location = this.panelVFO.Location;
			gr_vfobetween_basis_location = this.grpVFOBetween.Location;
			btn_display_pan_center_basis = this.btnDisplayPanCenter.Location;
			tb_display_pan_size_basis = this.ptbDisplayPan.Size;
			btn_display_zoom_4x_basis = this.radDisplayZoom4x.Location;
			btn_display_zoom_2x_basis = this.radDisplayZoom2x.Location;
			btn_display_zoom_1x_basis = this.radDisplayZoom1x.Location;
			btn_display_zoom_05_basis = this.radDisplayZoom05.Location;
			tb_display_zoom_basis = this.ptbDisplayZoom.Location;
			txt_display_peak_freq_basis = this.txtDisplayPeakFreq.Location;
			txt_display_peak_power_basis =this.txtDisplayPeakPower.Location;
			txt_display_peak_offset_basis = this.txtDisplayPeakOffset.Location;
			lbl_display_zoom_basis = this.lblDisplayZoom.Location;

            autobrightbox_basis = this.autoBrightBox.Location; // ke9ns add

            gr_display_size_basis = this.panelDisplay.Size;
			pic_display_size_basis = this.picDisplay.Size;
			textbox1_size_basis = this.autoBrightBox.Size;
			textbox1_basis = this.autoBrightBox.Location;
			gr_display2_basis = this.panelDisplay2.Location;
			gr_dsp_basis = this.panelDSP.Location;
			gr_multirx_basis = this.panelMultiRX.Location;
			tb_displaypan_basis = this.ptbDisplayPan.Location;
			lbl_displaypan_basis = this.lblDisplayPan.Location;
			txt_display_cursor_freq_basis = this.txtDisplayCursorFreq.Location;
			txt_display_cursor_power_basis = this.txtDisplayCursorPower.Location;
			txt_display_cursor_offset_basis = this.txtDisplayCursorOffset.Location;
			chk_power_basis = this.chkPower.Location;
			gr_options_basis = this.panelOptions.Location;
			gr_sound_controls_basis = this.panelSoundControls.Location;
			chk_squelch_basis = this.chkSquelch.Location;
			pic_sql_basis = this.picSquelch.Location;
			tb_sql_basis = this.ptbSquelch.Location;
            gr_antenna_basis = this.panelAntenna.Location;
			chk_bci_basis = this.chkBCI.Location;
			//button1_basis = this.button1.Location;
            gr_date_time_basis = this.panelDateTime.Location;
			//lbl_cpu_meter_basis = this.lblCPUMeter.Location;

			//pan_rx2_divider_basis = this.panelRX2Divider.Location;
			//pan_rx2_divider_size_basis = this.panelRX2Divider.Size;

			gr_display_split_basis = this.grpDisplaySplit.Location;
			gr_rx2_meter_basis = this.grpRX2Meter.Location;
			gr_rx2_filter_basis = this.panelRX2Filter.Location;
			gr_rx2_mode_basis = this.panelRX2Mode.Location;
			gr_rx2_display_basis = this.panelRX2Display.Location;
			gr_rx2_dsp_basis = this.panelRX2DSP.Location;

			lbl_rx2_rf_basis = this.lblRX2RF.Location;
			tb_rx2_rf_basis = this.ptbRX2RF.Location;
			chk_rx2_squelch_basis = this.chkRX2Squelch.Location;
			tb_rx2_squelch_basis = this.ptbRX2Squelch.Location;
			pic_rx2_squelch_basis = this.picRX2Squelch.Location;

			gr_rx2_mixer_basis = this.panelRX2Mixer.Location;
			chk_rx2_enable_basis = this.chkRX2.Location;
			chk_rx2_preamp_basis = this.chkRX2Preamp.Location;
			lbl_rx2_band_basis = this.lblRX2Band.Location;
			combo_rx2_band_basis = this.comboRX2Band.Location;

		} // grabconsolesize


        //==============================================================
        // ke9ns come here when you turn on/off RX2 button
        //==============================================================
        private bool rx2_enabled = false;
		public bool RX2Enabled
		{
			get { return rx2_enabled; }
			set
			{
				rx2_enabled = value;
				chkRX2.Checked = value;

				if(rx2_enabled)
				{
                   RX2Band = StringToBand(comboRX2Band.Text); // ke9ns ADD

					if(chkPower.Checked)
					{
						if(rx2_meter_thread == null || !rx2_meter_thread.IsAlive)
						{
                            Debug.Write(" 999 ");
                            rx2_meter_thread = new Thread(new ThreadStart(UpdateRX2MeterData));
							rx2_meter_thread.Name = "RX2 Meter Thread";
							rx2_meter_thread.Priority = ThreadPriority.Lowest;
							rx2_meter_thread.IsBackground = true;
							rx2_meter_thread.Start();
						}

						if(rx2_sql_update_thread == null || !rx2_sql_update_thread.IsAlive)
						{
							rx2_sql_update_thread = new Thread(new ThreadStart(UpdateRX2SQL));
							rx2_sql_update_thread.Name = "Update RX2 SQL";
							rx2_sql_update_thread.Priority = ThreadPriority.Normal;
							rx2_sql_update_thread.IsBackground = true;
							rx2_sql_update_thread.Start();
						}

						txtVFOBFreq_LostFocus(this, EventArgs.Empty);
                        if (!rx2_enabled) return;

                        grpVFOB.Font = ff5; // new Font("Swis721 BT", 8.25F, FontStyle.Italic | FontStyle.Bold);
                        grpVFOB.ForeColor = SystemColors.ControlLightLight;
						txtVFOBFreq.ForeColor = vfo_text_light_color;
						txtVFOBMSD.ForeColor = vfo_text_light_color;
						txtVFOBLSD.ForeColor = small_vfo_color;
						txtVFOBBand.ForeColor = band_text_light_color;

						if(chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
						if(chkEnableMultiRX.Checked) chEnableMultiRX_CheckedChanged(this, EventArgs.Empty);

                    }// do if power ON

                    //=================================
                    // 
					dsp.GetDSPRX(1, 0).Active = true;
					DttSP.SetThreadProcessingMode(2, 2);
					DSP.SetThreadNumber(3);

					if(chkEnableMultiRX.Checked)
						txtVFOABand_LostFocus(this, EventArgs.Empty);

                  //  if (comboDisplayMode.Items.Contains("Panafall"))   // ke9ns mod dont remove panafall from the list
					//	comboDisplayMode.Items.Remove("Panafall");
					if(comboDisplayMode.SelectedIndex < 0)
						comboDisplayMode.Text = "Panadapter";

					if(comboDisplayMode.Items.Contains("Panascope"))
						comboDisplayMode.Items.Remove("Panascope");
					if(comboDisplayMode.SelectedIndex < 0)
						comboDisplayMode.Text = "Panadapter";
				} // if rx2 enabled
				else
				{
                   // rx2_xvtr_index = -1;
					if(chkPower.Checked)
					{
						if(chkVFOSplit.Checked) chkVFOSplit_CheckedChanged(this, EventArgs.Empty);
						else if(chkEnableMultiRX.Checked) chEnableMultiRX_CheckedChanged(this, EventArgs.Empty);
						else
						{
							txtVFOBFreq.ForeColor = vfo_text_dark_color;
							txtVFOBMSD.ForeColor = vfo_text_dark_color;
							txtVFOBLSD.ForeColor = vfo_text_dark_color;
							txtVFOBBand.ForeColor = band_text_dark_color;
							panelVFOASubHover.Visible = false;
						}
                        if (chkVFOBTX.Checked && FWCEEPROM.RX2OK && !chkVFOSplit.Checked)
                            chkVFOATX.Checked = true;
						UpdateVFOASub();
					}

					dsp.GetDSPRX(1, 0).Active = false;
					DttSP.SetThreadProcessingMode(2, 0);
					DSP.SetThreadNumber(2);

					/*if(comboMeterRXMode.Items.Contains("ADC2_L"))
						comboMeterRXMode.Items.Remove("ADC2_L");
					if(comboMeterRXMode.Items.Contains("ADC2_R"))
						comboMeterRXMode.Items.Remove("ADC2_R");*/

					if(chkEnableMultiRX.Checked)
						txtVFOBFreq_LostFocus(this, EventArgs.Empty);

					if(!comboDisplayMode.Items.Contains("Panafall"))
						comboDisplayMode.Items.Insert(comboDisplayMode.Items.Count-1, "Panafall");
					if(!comboDisplayMode.Items.Contains("Panascope"))
						comboDisplayMode.Items.Insert(comboDisplayMode.Items.Count-1, "Panascope");
				} // rx2 off
			
				Audio.RX2Enabled = rx2_enabled;
				chkSplitDisplay.Checked = rx2_enabled;
			} // set 

		} // RX2Enabled



//=========================================================================================
		private void chkRX2_CheckedChanged(object sender, System.EventArgs e)
		{
			RX2Enabled = chkRX2.Checked;

            if (chkVFOBTX.Checked && chkVAC2.Checked && chkRX2.Checked)  // if TX set on VFOB & RX2 ON & VAC2 ON 
            {
                ptbVACRXGain.Value = vac2_rx_gain;
                ptbVACRXGain_Scroll(this, EventArgs.Empty);
                
                ptbVACTXGain.Value = vac2_tx_gain;
                ptbVACTXGain_Scroll(this, EventArgs.Empty);

                comboVACSampleRate.Text = vac2_sample_rate;

                chkVACStereo.Checked = vac2_stereo;
            } // RX2 ON
            else
            {
                ptbVACRXGain.Value = vac_rx_gain;
                ptbVACRXGain_Scroll(this, EventArgs.Empty);

                ptbVACTXGain.Value = vac_tx_gain;
                ptbVACTXGain_Scroll(this, EventArgs.Empty);

                comboVACSampleRate.Text = vac_sample_rate;

                chkVACStereo.Checked = vac_stereo;
            } // RX2 OFF

			if(chkRX2.Checked)
				chkRX2.BackColor = button_selected_color;
			else
				chkRX2.BackColor = SystemColors.Control;

            if(FWCEEPROM.VUOK)  SetVURXPath();

            if (chkRX2.Checked==true) // ke9ns add
            {
               // label2.Visible = true;
                chkRX1MUTE.Visible = true;
            }
            else
            {
                chkRX1MUTE.Checked = false;   // ke9ns add    uncheck when RX2 turned off
                                              //  label2.Visible = false;        // and hide box and text
                                              //   chkRX1MUTE.Visible = false;
                chkRX1MUTE.Visible = true;
            }

		}  // RX2 ON/OFF button


		private void chkRX2SR_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkRX2SR.Checked) chkRX2SR.BackColor = button_selected_color;
			else chkRX2SR.BackColor = SystemColors.Control;
			RX2SpurReduction = chkRX2SR.Checked;
		}

		private void panelVFOASubHover_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			if(!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return;
			if(vfoa_sub_hover_digit < 0) return;

			int x = 0;
			int width = 0;

			/*if(small_lsd && txtVFOALSD.Visible)
			{
				x += (vfo_char_width+vfo_char_space)*vfoa_hover_digit;
				if(vfoa_hover_digit > 3)
					x += (vfo_decimal_space-vfo_char_space);
				
				if(vfoa_hover_digit > 6)
				{
					x += vfo_small_char_width;
					x += (vfo_small_char_width+vfo_small_char_space-vfo_char_width-vfo_char_space)*(vfoa_hover_digit-6);
					width = x+vfo_small_char_width;
				}
				else width = x+vfo_char_width;
			}
			else*/
			{
				x += (vfo_sub_char_width+vfo_sub_char_space)*vfoa_sub_hover_digit;

                if (vfoa_sub_hover_digit > 3) x += (vfo_sub_decimal_space-vfo_sub_char_space);

				width = x+vfo_sub_char_width;
			}

			e.Graphics.DrawLine(new Pen(txtVFOABand.ForeColor, 2.0f), x, 1, width, 1);
		}

		private void panelVFOASubHover_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if(!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked)) return;
			Control c1 = (Control)sender;
			Control c2 = txtVFOABand;
			int client_width = (c1.Size.Width - c1.ClientSize.Width)+(c2.Size.Width-c2.ClientSize.Width);
			int client_height = (c1.Size.Height - c1.ClientSize.Height)+(c2.Size.Height-c2.ClientSize.Height);
			int x_offset = c1.Left-c2.Left - client_width/2;
			int y_offset = c1.Top-c2.Top - client_height/2;
			txtVFOABand_MouseMove(sender, new MouseEventArgs(e.Button, e.Clicks, e.X+x_offset, e.Y+y_offset, e.Delta));
		}

		private void txtVFOABand_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if(!rx2_enabled || (!chkEnableMultiRX.Checked && !chkVFOSplit.Checked) || !chkPower.Checked) return;

			panelVFOASubHover.Visible = true;

			if(this.ContainsFocus)
			{
				int old_digit = vfoa_sub_hover_digit;
				int digit_index = 0;
				if(vfo_sub_char_width == 0)	GetVFOSubCharWidth();

				int x = txtVFOABand.Width - (vfo_sub_pixel_offset - 5);

				while(x < e.X)
				{
					digit_index++;
					
					/*if(small_lsd && txtVFOALSD.Visible)
					{
						if(digit_index < 6)
							x += (vfo_char_width+vfo_char_space);
						else 
							x += (vfo_small_char_width+vfo_small_char_space);

						if(digit_index == 3)
							x += (vfo_decimal_space-vfo_char_space);
						if(digit_index == 6)
							x += vfo_small_char_width;
					}
					else
					{*/
						x += vfo_sub_char_width;
						if(digit_index == 3) x += vfo_sub_decimal_space;
						else  x += vfo_sub_char_space;
					//}
				}

				if(digit_index < 3) digit_index = -1;

				if(digit_index > 9) digit_index = 9;

				vfoa_sub_hover_digit = digit_index;

				if(vfoa_sub_hover_digit != old_digit)	panelVFOASubHover.Invalidate();
				//Debug.WriteLine("vfoa_sub_hover_digit:"+vfoa_sub_hover_digit);
			}

        } // txtVFOABand_MouseMove(

        private void txtVFOABand_MouseLeave(object sender, System.EventArgs e)
		{
			vfoa_sub_hover_digit = -1;
			panelVFOASubHover.Invalidate();
		}

		private void SetRX2Mode(DSPMode new_mode)
		{
			if(!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;
			if(new_mode == DSPMode.FIRST || new_mode == DSPMode.LAST) return;
            DSPMode old_mode = rx2_dsp_mode;

			if(rx2_enabled)
			{
				dsp.GetDSPRX(1, 0).DSPMode = new_mode;				// set new DSP mode
				dsp.GetDSPRX(1, 1).DSPMode = new_mode;

				if(chkVFOBTX.Checked)
				{
					Audio.TXDSPMode = new_mode;
					dsp.GetDSPTX(0).CurrentDSPMode = new_mode;

                    if (fwc_init && (current_model == Model.FLEX5000))  FWC.SetTXDSPMode(new_mode);
				}
			}
			Display.RX2DSPMode = new_mode;
			//if(fwc_init && current_model == Model.FLEX5000)
				//FWC.SetRX2DSPMode(new_mode);

			double rx2_freq = VFOBFreq;
            int old_txosc = (int)dsp.GetDSPTX(0).TXOsc;

            switch (old_mode)
			{
				case DSPMode.LSB:
					radRX2ModeLSB.BackColor = SystemColors.Control;
					break;
				case DSPMode.USB:
					radRX2ModeUSB.BackColor = SystemColors.Control;
					break;
				case DSPMode.DSB:
					radRX2ModeDSB.BackColor = SystemColors.Control;
					break;
				case DSPMode.CWL:
					radRX2ModeCWL.BackColor = SystemColors.Control;

                    if (!RX2IsOn60mChannel())
                    {
                        switch (new_mode)
                        {
                            case DSPMode.USB:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }					
					break;
				case DSPMode.CWU:
					radRX2ModeCWU.BackColor = SystemColors.Control;

                    if (!RX2IsOn60mChannel())
                    {
                        switch (new_mode)
                        {
                            case DSPMode.LSB:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }					
					break;
				case DSPMode.FM:
					radRX2ModeFMN.BackColor = SystemColors.Control;
                    if (rx2_enabled)
					{	
						if(new_mode != DSPMode.AM && new_mode != DSPMode.SAM && new_mode != DSPMode.FM)
						{
                            if(chkVFOBTX.Checked)	chkMON.Enabled = true;

                            chkRX2BIN.Enabled = true;
						}

                        if (chkVFOBTX.Checked)
                            ptbMic_Scroll(this, EventArgs.Empty);
					}

                    if (new_mode != DSPMode.DRM)
                        EnableAllRX2Filters();

                    if(!initializing)
                        rx2_fm_squelch_threshold_scroll = ptbRX2Squelch.Value;

                    ptbRX2Squelch.Minimum = -160;
                    ptbRX2Squelch.Maximum = 0;

                    picRX2Squelch.Visible = true;

                    ptbRX2Squelch.Value = rx2_squelch_threshold_scroll;
					break;
				case DSPMode.AM:
					radRX2ModeAM.BackColor = SystemColors.Control;
                    if (rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM &&
                            new_mode != DSPMode.FM)
                        {
                            if (chkVFOBTX.Checked)
                                chkMON.Enabled = true;

                            chkRX2BIN.Enabled = true;
                        }
                        if (chkVFOBTX.Checked)
                            ptbMic_Scroll(this, EventArgs.Empty);
                    }

                    if (new_mode != DSPMode.SPEC || new_mode != DSPMode.DRM)
                        EnableAllRX2Filters();
					break;
				case DSPMode.SAM:
					radRX2ModeSAM.BackColor = SystemColors.Control;
                    if (rx2_enabled)
                    {
                        if (new_mode != DSPMode.AM &&
                            new_mode != DSPMode.SAM &&
                            new_mode != DSPMode.FM)
                        {
                            if (chkVFOBTX.Checked)
                                chkMON.Enabled = true;

                            chkRX2BIN.Enabled = true;
                        }

                        if (chkVFOBTX.Checked)
                            ptbMic_Scroll(this, EventArgs.Empty);
                    }
					break;
				case DSPMode.DIGL:
					radRX2ModeDIGL.BackColor = SystemColors.Control;
					if(rx2_enabled && vac2_auto_enable &&
						new_mode != DSPMode.DIGU &&
						new_mode != DSPMode.DRM &&
                        new_mode != DSPMode.DIGL)
					{
						setupForm.VAC2Enable = false;
					}
					break;
				case DSPMode.DIGU:
					radRX2ModeDIGU.BackColor = SystemColors.Control;
                    if (rx2_enabled && vac2_auto_enable &&
						new_mode != DSPMode.DIGL &&
						new_mode != DSPMode.DRM &&
                        new_mode != DSPMode.DIGU)
					{
						setupForm.VAC2Enable = false;
					}
					break;
				case DSPMode.DRM:
					radRX2ModeDRM.BackColor = SystemColors.Control;
					rx2_if_shift = true;
					rx2_vfo_offset = 0.0;
                    if (rx2_enabled && vac2_auto_enable &&
                        new_mode != DSPMode.DIGL &&
                        new_mode != DSPMode.DIGU &&
                        new_mode != DSPMode.DRM)
                    {
                        setupForm.VAC2Enable = false;
                    }
                    if (new_mode != DSPMode.FM)
					EnableAllRX2Filters();
					rx2_if_freq = setupForm.IFFreq;
					CalcDisplayFreq();
					break;
			} // old mode

           	switch(new_mode)
			{
				case DSPMode.LSB:
					radRX2ModeLSB.BackColor = button_selected_color;
					//panelRX2Mode.Text = "RX2 Mode - LSB";
                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					break;
				case DSPMode.USB:
					radRX2ModeUSB.BackColor = button_selected_color;
                    //panelRX2Mode.Text = "RX2 Mode - USB";
                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					break;
				case DSPMode.DSB:
					radRX2ModeDSB.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - DSB";
                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					break;
				case DSPMode.CWL:
					radRX2ModeCWL.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - CWL";

                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						dsp.GetDSPTX(0).TXOsc = 0.0;	
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        CWPitch = cw_pitch;
					}

                    if (!RX2IsOn60mChannel())
                    {
                        switch (rx2_dsp_mode)
                        {
                            case DSPMode.USB:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWU:
                                break;
                            default:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }                    
					break;
				case DSPMode.CWU:
					radRX2ModeCWU.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - CWU";

                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						dsp.GetDSPTX(0).TXOsc = 0.0;
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        CWPitch = cw_pitch;
					}

                    if (!RX2IsOn60mChannel())
                    {
                        switch (rx2_dsp_mode)
                        {
                            case DSPMode.LSB:
                                rx2_freq -= (cw_pitch * 1e-6);
                                break;
                            case DSPMode.CWL:
                                break;
                            default:
                                rx2_freq += (cw_pitch * 1e-6);
                                break;
                        }
                        txtVFOBFreq.Text = rx2_freq.ToString("f6");
                    }
					break;
				case DSPMode.FM:
					radRX2ModeFMN.BackColor = button_selected_color;
                    DisableAllRX2Filters();    //this needs to be for RX2 only
                    
                    if(!initializing)
                        rx2_squelch_threshold_scroll = ptbRX2Squelch.Value;

                    ptbRX2Squelch.Minimum = 0;
                    ptbRX2Squelch.Maximum = 100;

                    ptbRX2Squelch.Value = rx2_fm_squelch_threshold_scroll;

                    picRX2Squelch.Visible = false;

                    //chkRX2Squelch.Enabled = false;
                    rx2_squelch_on = chkRX2Squelch.Checked;    //save state of non-FM squelch
                    chkRX2Squelch.Checked = true;

                    if (rx2_enabled)
					{
                        if(chkVFOBTX.Checked)
                        {
                            if (!rx_only && chkPower.Checked)  chkMOX.Enabled = true;

                            chkMON.Checked = false;
                            chkMON.Enabled = false;

                            SetTXFilters(new_mode, tx_filter_low, tx_filter_high);

                            dsp.GetDSPTX(0).TXOsc = 11025.0;

                            ptbFMMic_Scroll(this, EventArgs.Empty);
                        }

                        chkRX2BIN.Checked = false;
                        chkRX2BIN.Enabled = false;						
					}
					break;
				case DSPMode.AM:
					radRX2ModeAM.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - AM";
                    if (chkVFOBTX.Checked)
                    {
                        if (!rx_only && chkPower.Checked)
                            chkMOX.Enabled = true;

                        chkMON.Checked = false;
                        chkMON.Enabled = false;

                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        dsp.GetDSPTX(0).TXOsc = 11025.0;

                        ptbFMMic_Scroll(this, EventArgs.Empty);
                    }

                    chkRX2BIN.Checked = false;
                    chkRX2BIN.Enabled = false;	
					break;
				case DSPMode.SAM:
					radRX2ModeSAM.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - SAM";

                    if (chkVFOBTX.Checked)
                    {
                        if (!rx_only && chkPower.Checked)
                            chkMOX.Enabled = true;

                        chkMON.Checked = false;
                        chkMON.Enabled = false;

                        SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
                        dsp.GetDSPTX(0).TXOsc = 11025.0;

                        ptbFMMic_Scroll(this, EventArgs.Empty);
                    }

                    chkRX2BIN.Checked = false;
                    chkRX2BIN.Enabled = false;	
					break;
				case DSPMode.DIGL:
					radRX2ModeDIGL.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - DIGL";

                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}

                    if (rx2_enabled && vac2_auto_enable)
						setupForm.VAC2Enable = true;
					break;
				case DSPMode.DIGU:
					radRX2ModeDIGU.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - DIGU";

                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
                    if (rx2_enabled && vac2_auto_enable)
						setupForm.VAC2Enable = true;
					break;
				case DSPMode.DRM:
					rx2_if_shift = false;
					rx2_vfo_offset = -0.012;
					radRX2ModeDRM.BackColor = button_selected_color;
					//grpRX2Mode.Text = "RX2 Mode - DRM";
                    if (rx2_enabled && vac2_auto_enable)
						setupForm.VAC2Enable = true;

                    if (chkVFOBTX.Checked && rx2_enabled)
					{
						SetTXFilters(new_mode, tx_filter_low, tx_filter_high);
						dsp.GetDSPTX(0).TXOsc = 0.0;
					}
					//DisableAllRX2Filters(); // !FIXME

					//grpFilter.Text = "Filter - DRM";
					dsp.GetDSPRX(1, 0).SetRXFilter(7000, 17000);
					/*Display.RXDisplayLow = -8000;
						Display.RXDisplayHigh = 8000;*/
					break;
			}

            if (RX2IsOn60mChannel())
            {
                // adjust freq offset to ensure center of energy for new mode in 60m
                rx2_freq += (-ModeFreqOffset(old_mode) + ModeFreqOffset(new_mode));
                txtVFOBFreq.Text = rx2_freq.ToString("f6");
            }

            int new_txosc = (int)dsp.GetDSPTX(0).TXOsc;
            if (new_txosc != old_txosc)
            {
                if (fwc_init && (current_model == Model.FLEX5000))
                    FWC.SetTXOffset(new_txosc);
            }

			radRX2Filter1.Text = rx2_filters[(int)new_mode].GetName(Filter.F1);
			radRX2Filter2.Text = rx2_filters[(int)new_mode].GetName(Filter.F2);
			radRX2Filter3.Text = rx2_filters[(int)new_mode].GetName(Filter.F3);
			radRX2Filter4.Text = rx2_filters[(int)new_mode].GetName(Filter.F4);
			radRX2Filter5.Text = rx2_filters[(int)new_mode].GetName(Filter.F5);
			radRX2Filter6.Text = rx2_filters[(int)new_mode].GetName(Filter.F6);
			radRX2Filter7.Text = rx2_filters[(int)new_mode].GetName(Filter.F7);
			radRX2FilterVar1.Text = rx2_filters[(int)new_mode].GetName(Filter.VAR1);
			radRX2FilterVar2.Text = rx2_filters[(int)new_mode].GetName(Filter.VAR2);

			rx2_dsp_mode = new_mode;

            if (old_mode == DSPMode.FM)
                chkRX2Squelch.Checked = rx2_squelch_on;

            if (old_mode == DSPMode.FM || new_mode == DSPMode.FM)
                ptbRX2Squelch_Scroll(this, EventArgs.Empty);

            if (rx2_dsp_mode != DSPMode.FM && rx2_dsp_mode != DSPMode.DRM)
            {
                RX2Filter = rx2_filters[(int)new_mode].LastFilter;
            }
            else
            {
                if (rx2_dsp_mode == DSPMode.FM)
                {
                    if (dsp.GetDSPRX(1, 0).RXFMDeviation == FMDataDeviation) // ke9ns add
                    {
                        UpdateRX2Filters(-FMDataLowHigh, FMDataLowHigh);
                    }
                    else if (dsp.GetDSPRX(1, 0).RXFMDeviation == 5000)
                    {
                        UpdateRX2Filters(-8000, 8000);
                    }
                    else
                    {
                        UpdateRX2Filters(-4000, 4000);
                    }
                }
                RX2Filter = Filter.NONE;
            }

            if (rx2_dsp_mode != DSPMode.FM && rx2_dsp_mode != DSPMode.DRM)
            {
                RX2Filter = rx2_filters[(int)new_mode].LastFilter;
            }
            else
            {
                RX2Filter = Filter.NONE;
            }

			tbFilterWidthScroll_newMode(); // wjt */

			//Display.DrawBackground();

            if (rx2_enabled)
            {
                UpdateDSPBufRX2();
                if(chkVFOBTX.Checked)
                    UpdateDSPBufTX();
            }

			txtVFOBFreq_LostFocus(this, EventArgs.Empty);
			ptbPWR_Scroll(this, EventArgs.Empty);

			if(fwc_init && current_model == Model.FLEX5000)
			{
				bool tx1, tx2, tx3;
				if(flex5000RelayForm != null)
					flex5000RelayForm.UpdateRelayState(out tx1, out tx2, out tx3);
			}
		}

		private void radRX2ModeLSB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeLSB.Checked)
			{
				SetRX2Mode(DSPMode.LSB);
			}
		}

		private void radRX2ModeUSB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeUSB.Checked)
			{
				SetRX2Mode(DSPMode.USB);
			}
		}

		private void radRX2ModeDSB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeDSB.Checked)
			{
				SetRX2Mode(DSPMode.DSB);
			}
		}

		private void radRX2ModeCWL_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeCWL.Checked)
			{
				SetRX2Mode(DSPMode.CWL);
			}
		}

		private void radRX2ModeCWU_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeCWU.Checked)
			{
				SetRX2Mode(DSPMode.CWU);
			}
		}

		private void radRX2ModeFMN_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeFMN.Checked)
			{
				SetRX2Mode(DSPMode.FM);
			}
		}

		private void radRX2ModeAM_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeAM.Checked)
			{
				SetRX2Mode(DSPMode.AM);
			}
		}

		private void radRX2ModeSAM_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeSAM.Checked)
			{
				SetRX2Mode(DSPMode.SAM);
			}
		}

		private void radRX2ModeDIGL_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeDIGL.Checked)
			{
                chkRX2ANF.Checked = false;
                chkRX2NR.Checked = false;
                chkRX2NB.Checked = false;
                chkRX2NB2.Checked = false;
                SetRX2Mode(DSPMode.DIGL);
			}
		}

		private void radRX2ModeDIGU_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeDIGU.Checked)
			{
                chkRX2ANF.Checked = false;
                chkRX2NR.Checked = false;
                chkRX2NB.Checked = false;
                chkRX2NB2.Checked = false;
                SetRX2Mode(DSPMode.DIGU);
			}
		}

		private void radRX2ModeDRM_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2ModeDRM.Checked)
			{
				SetRX2Mode(DSPMode.DRM);
			}
		}

		public void SetRX2Filter(Filter new_filter)
		{
			if(!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;
			if(rx2_dsp_mode == DSPMode.FIRST || rx2_dsp_mode == DSPMode.LAST) return;

			int low = 0, high = 0;

			switch(rx2_filter)
			{
				case Filter.F1:
					radRX2Filter1.BackColor = SystemColors.Control;
					break;
				case Filter.F2:
					radRX2Filter2.BackColor = SystemColors.Control;
					break;
				case Filter.F3:
					radRX2Filter3.BackColor = SystemColors.Control;
					break;
				case Filter.F4:
					radRX2Filter4.BackColor = SystemColors.Control;
					break;
				case Filter.F5:
					radRX2Filter5.BackColor = SystemColors.Control;
					break;
				case Filter.F6:
					radRX2Filter6.BackColor = SystemColors.Control;
					break;
				case Filter.F7:
					radRX2Filter7.BackColor = SystemColors.Control;
					break;
				case Filter.VAR1:
					//radRX2FilterVar1.BackColor = SystemColors.Control;
					//udRX2FilterLow.BackColor = SystemColors.Window;
					//udRX2FilterHigh.BackColor = SystemColors.Window;
					udRX2FilterLow.Enabled = false;
					udRX2FilterHigh.Enabled = false;
					break;
				case Filter.VAR2:
					//radRX2FilterVar2.BackColor = SystemColors.Control;
					//udRX2FilterLow.BackColor = SystemColors.Window;
					//udRX2FilterHigh.BackColor = SystemColors.Window;
					udRX2FilterLow.Enabled = false;
					udRX2FilterHigh.Enabled = false;
					break;
			}

			rx2_filter = new_filter;
			
			low = rx2_filters[(int)rx2_dsp_mode].GetLow(new_filter);
			high = rx2_filters[(int)rx2_dsp_mode].GetHigh(new_filter);
			rx2_filters[(int)rx2_dsp_mode].LastFilter = new_filter;

			panelRX2Filter.Text = "RX2 Filter - "+rx2_filters[(int)rx2_dsp_mode].GetName(new_filter);

			switch(new_filter)
			{
				case Filter.F1:
					radRX2Filter1.BackColor = button_selected_color;
					break;
				case Filter.F2:
					radRX2Filter2.BackColor = button_selected_color;
					break;
				case Filter.F3:
					radRX2Filter3.BackColor = button_selected_color;
					break;
				case Filter.F4:
					radRX2Filter4.BackColor = button_selected_color;
					break;
				case Filter.F5:
					radRX2Filter5.BackColor = button_selected_color;
					break;
				case Filter.F6:
					radRX2Filter6.BackColor = button_selected_color;
					break;
				case Filter.F7:
					radRX2Filter7.BackColor = button_selected_color;
					break;
				case Filter.VAR1:
					//radRX2FilterVar1.BackColor = button_selected_color;
					//udRX2FilterLow.BackColor = button_selected_color;
					//udRX2FilterHigh.BackColor = button_selected_color;
					udRX2FilterLow.Enabled = true;
					udRX2FilterHigh.Enabled = true;
					break;
				case Filter.VAR2:
					//radRX2FilterVar2.BackColor = button_selected_color;
					//udRX2FilterLow.BackColor = button_selected_color;
					//udRX2FilterHigh.BackColor = button_selected_color;
					udRX2FilterLow.Enabled = true;
					udRX2FilterHigh.Enabled = true;
					break;
				case Filter.NONE:
					foreach(Control c in panelRX2Filter.Controls)
					{
						if(c.GetType() == typeof(RadioButtonTS))
						{
							((RadioButtonTS)c).Checked = false;

							if(c.BackColor != SystemColors.Control)
								((RadioButtonTS)c).BackColor = SystemColors.Control;
						}
					}
					return;
			}

			UpdateRX2Filters(low, high);
		}

		private void radRX2Filter1_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2Filter1.Checked)
				SetRX2Filter(Filter.F1);
		}

		private void radRX2Filter2_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2Filter2.Checked)
				SetRX2Filter(Filter.F2);
		}

		private void radRX2Filter3_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2Filter3.Checked)
				SetRX2Filter(Filter.F3);
		}

		private void radRX2Filter4_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2Filter4.Checked)
				SetRX2Filter(Filter.F4);
		}

		private void radRX2Filter5_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2Filter5.Checked)
				SetRX2Filter(Filter.F5);
		}

		private void radRX2Filter6_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2Filter6.Checked)
				SetRX2Filter(Filter.F6);
		}

		private void radRX2Filter7_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2Filter7.Checked)
				SetRX2Filter(Filter.F7);
		}

		private void radRX2FilterVar1_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2FilterVar1.Checked)
				SetRX2Filter(Filter.VAR1);
		}

		private void radRX2FilterVar2_CheckedChanged(object sender, System.EventArgs e)
		{
			if(radRX2FilterVar2.Checked)
				SetRX2Filter(Filter.VAR2);
		}

		private void udRX2FilterLow_ValueChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(udRX2FilterLow.Focused)
			{
				if(udRX2FilterLow.Value >= udRX2FilterHigh.Value-10)
				{
					udRX2FilterLow.Value = udRX2FilterHigh.Value-10;
					return;
				}

				UpdateRX2Filters((int)udRX2FilterLow.Value, (int)udRX2FilterHigh.Value);

				if(!save_filter_changes)
					rx2_filters[(int)rx2_dsp_mode].SetLow(rx2_filter, (int)udRX2FilterLow.Value);
			}

            if (save_filter_changes && rx2_filter >= Filter.F1 && rx2_filter <= Filter.VAR2)
				rx2_filters[(int)rx2_dsp_mode].SetLow(rx2_filter, (int)udRX2FilterLow.Value);

			/*if(udFilterLow.Focused)
				btnHidden.Focus();*/
		}

		private void udRX2FilterHigh_ValueChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(udRX2FilterHigh.Focused)
			{
				if(udRX2FilterHigh.Value <= udRX2FilterLow.Value+10)
				{
					udRX2FilterHigh.Value = udRX2FilterLow.Value+10;
					return;
				}

				UpdateRX2Filters((int)udRX2FilterLow.Value, (int)udRX2FilterHigh.Value);

				if(!save_filter_changes)
					rx2_filters[(int)rx2_dsp_mode].SetHigh(rx2_filter, (int)udRX2FilterHigh.Value);
			}

            if (save_filter_changes && rx2_filter >= Filter.F1 && rx2_filter <= Filter.VAR2)
				rx2_filters[(int)rx2_dsp_mode].SetHigh(rx2_filter, (int)udRX2FilterHigh.Value);

			/*if(udFilterHigh.Focused)
				btnHidden.Focus();*/
		}

		private void chkRX2NR_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(chkRX2NR.Checked) chkRX2NR.BackColor = button_selected_color;
			else chkRX2NR.BackColor = SystemColors.Control;
			dsp.GetDSPRX(1, 0).NoiseReduction = chkRX2NR.Checked;
			dsp.GetDSPRX(1, 1).NoiseReduction = chkRX2NR.Checked;
			//cat_nr_status = Convert.ToInt32(chkRX2NR.Checked);
		}

		private void chkRX2ANF_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(chkRX2ANF.Checked) chkRX2ANF.BackColor = button_selected_color;
			else chkRX2ANF.BackColor = SystemColors.Control;
			dsp.GetDSPRX(1, 0).AutoNotchFilter = chkRX2ANF.Checked;
			dsp.GetDSPRX(1, 1).AutoNotchFilter = chkRX2ANF.Checked;
			//cat_anf_status = Convert.ToInt32(chkRX2ANF.Checked);
		}

		private void chkRX2NB_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(chkRX2NB.Checked) chkRX2NB.BackColor = button_selected_color;
			else chkRX2NB.BackColor = SystemColors.Control;
			dsp.GetDSPRX(1, 0).NBOn = chkRX2NB.Checked;
			dsp.GetDSPRX(1, 1).NBOn = chkRX2NB.Checked;
			cat_rx2nb1_status = Convert.ToInt32(chkRX2NB.Checked);
		}

		private void chkRX2NB2_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(chkRX2NB2.Checked) chkRX2NB2.BackColor = button_selected_color;
			else chkRX2NB2.BackColor = SystemColors.Control;
			dsp.GetDSPRX(1, 0).SDROM = chkRX2NB2.Checked;
			dsp.GetDSPRX(1, 1).SDROM = chkRX2NB2.Checked;
			cat_rx2nb2_status = Convert.ToInt32(chkRX2NB2.Checked);
		}

		private void chkRX2BIN_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(chkRX2BIN.Checked) chkRX2BIN.BackColor = button_selected_color;
			else chkRX2BIN.BackColor = SystemColors.Control;
			dsp.GetDSPRX(1, 0).BinOn = chkRX2BIN.Checked;
			dsp.GetDSPRX(1, 1).BinOn = chkRX2BIN.Checked;	
		}

		private void comboRX2MeterMode_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			if(comboRX2MeterMode.Items.Count == 0 ||
				comboRX2MeterMode.SelectedIndex < 0)
			{
				rx2_meter_mode = MeterRXMode.FIRST;
			}
			else
			{
				MeterRXMode mode = MeterRXMode.FIRST;
				switch(comboRX2MeterMode.Text)
				{
					case "Signal":
						mode = MeterRXMode.SIGNAL_STRENGTH;
						break;
					case "Sig Avg":
						rx2_meter_avg = Display.CLEAR_FLAG;
						mode = MeterRXMode.SIGNAL_AVERAGE;
						break;
                    case "Sig Pk":      // ke9ns ADD
                        rx2_meter_peak = Display.CLEAR_FLAG;
                        mode = MeterRXMode.SIGNAL_PEAK;
                        break;
					case "ADC L":
						mode = MeterRXMode.ADC_L;
						break;
					case "ADC R":
						mode = MeterRXMode.ADC_R;
						break;
					case "ADC2 L":
						mode = MeterRXMode.ADC2_L;
						break;
					case "ADC2 R":
						mode= MeterRXMode.ADC2_R;
						break;
					case "Off":
						mode = MeterRXMode.OFF;
						break;
				}
				rx2_meter_mode = mode;

				switch(mode)
				{
					case MeterRXMode.SIGNAL_STRENGTH:
                    case MeterRXMode.SIGNAL_PEAK:  // ke9ns ADD
					case MeterRXMode.SIGNAL_AVERAGE:
						lblRX2Meter.Text = "  1   3   5   7   9  +20 +40 +60";
						break;

					case MeterRXMode.ADC_L:
					case MeterRXMode.ADC_R:
						lblRX2Meter.Text = "-100  -80   -60   -40   -20    0";
						break;
					case MeterRXMode.OFF:
						lblRX2Meter.Text = "";
						break;
				}
				ResetRX2MeterPeak();
			}

			picRX2Meter.Invalidate();

			if(comboRX2MeterMode.Focused)	btnHidden.Focus();
		} //comboRx2metermode_selectedindexchanged

		private void chkRX2Preamp_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;

			if(chkRX2Preamp.Checked)
			{
				chkRX2Preamp.BackColor = button_selected_color;
				RX2PreampMode = PreampMode.HIGH;
			}
			else
			{
				chkRX2Preamp.BackColor = SystemColors.Control;
				RX2PreampMode = PreampMode.OFF;
			}			
		}

		private void ptbRX2RF_Scroll(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
            lblRX2RF.Text = "AGC-T:  " + ptbRX2RF.Value.ToString();
            switch (RX2AGCMode)
            {
                case AGCMode.FIXD:
                    dsp.GetDSPRX(1, 0).RXFixedAGC = (double)ptbRX2RF.Value;
                    dsp.GetDSPRX(1, 1).RXFixedAGC = (double)ptbRX2RF.Value;
                    rx2_fixed_gain = ptbRX2RF.Value;
                    break;
                default:
                    dsp.GetDSPRX(1, 0).RXAGCMaxGain = (double)ptbRX2RF.Value;
                    dsp.GetDSPRX(1, 1).RXAGCMaxGain = (double)ptbRX2RF.Value;
                    rx2_max_gain = ptbRX2RF.Value;
                    break;
            }

            rx2_agct_by_band[(int)rx2_band] = ptbRX2RF.Value;
			if(ptbRX2RF.Focused) btnHidden.Focus();
		}

		private void chkRX2Squelch_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
            if (rx2_dsp_mode == DSPMode.FM && !chkRX2Squelch.Checked)
                chkRX2Squelch.Checked = true;

			dsp.GetDSPRX(1, 0).RXSquelchOn = chkRX2Squelch.Checked;
			dsp.GetDSPRX(1, 1).RXSquelchOn = chkRX2Squelch.Checked;
		}

		private void ptbRX2Squelch_Scroll(object sender, System.EventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;

            chkRX2Squelch.Text = "SQL:  " + ptbRX2Squelch.Value.ToString();

            if (rx2_dsp_mode == DSPMode.FM)
            {
                dsp.GetDSPRX(1, 0).FMSquelchThreshold = (float)Math.Pow(10.0, - 2 * ptbRX2Squelch.Value / 100.0);
                dsp.GetDSPRX(1, 1).FMSquelchThreshold = (float)Math.Pow(10.0, - 2 * ptbRX2Squelch.Value / 100.0);
            }
            else
            {
                dsp.GetDSPRX(1, 0).RXSquelchThreshold = ((float)ptbRX2Squelch.Value -
                    rx2_meter_cal_offset -
                    rx2_preamp_offset[(int)rx2_preamp_mode] -
                    rx2_filter_size_cal_offset -
                    rx2_path_offset);

                dsp.GetDSPRX(1, 1).RXSquelchThreshold = ((float)ptbRX2Squelch.Value -
                    rx2_meter_cal_offset -
                    rx2_preamp_offset[(int)rx2_preamp_mode] -
                    rx2_filter_size_cal_offset -
                    rx2_path_offset);
            }

			if(ptbRX2Squelch.Focused) btnHidden.Focus();
		}

		private void picRX2Squelch_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		{
			if(!FWCEEPROM.RX2OK) return;
			int signal_x = (int)((rx2_sql_data + 160.0) * (picRX2Squelch.Width-1) / 160.0);
			int sql_x = (int)(((float)ptbRX2Squelch.Value + 160.0) * (picRX2Squelch.Width-1) / 160.0);

			e.Graphics.FillRectangle(new SolidBrush(Color.LimeGreen), 0, 0, signal_x, picRX2Squelch.Height);
			if(sql_x < signal_x)
				e.Graphics.FillRectangle(new SolidBrush(Color.Red), sql_x+1, 0, signal_x-sql_x-1, picRX2Squelch.Height);
		}

		private void chkRX1Preamp_CheckedChanged(object sender, System.EventArgs e)
		{
			if(!(fwc_init && current_model == Model.FLEX5000)) return;

			if(chkRX1Preamp.Checked)
			{
				chkRX1Preamp.BackColor = button_selected_color;
				chkRX1Preamp.Text = "On";				
				RX1PreampMode = PreampMode.HIGH;
			}
			else
			{
				chkRX1Preamp.BackColor = SystemColors.Control;
				chkRX1Preamp.Text = "Off";				
				RX1PreampMode = PreampMode.OFF;
			}
		}

		private void ptbRX2Pan_Scroll(object sender, System.EventArgs e)
		{
			float val = (int)ptbRX2Pan.Value/100.0f;
			dsp.GetDSPRX(1, 0).Pan = val;

			if(ptbRX2Pan.Focused)
			btnHidden.Focus();
		}

        //===================================================================
		private void ptbRX2Gain_Scroll(object sender, System.EventArgs e)
		{
			if(chkRX2Mute.Checked) return;

            dsp.GetDSPRX(1, 0).RXOutputGain = (double)ptbRX2Gain.Value / ptbRX2Gain.Maximum * 0.5;  //max 0.5 to allow for headroom

            if (ptbRX2Gain.Focused)	btnHidden.Focus();
		}

		private void chkRX2Mute_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkRX2Mute.Checked)
				dsp.GetDSPRX(1, 0).RXOutputGain = 0.0;
			else ptbRX2Gain_Scroll(this, EventArgs.Empty);
			if(chkRX2Mute.Focused)
				btnHidden.Focus();
		}


        //==============================================================
        //==============================================================
        // ke9ns mod: this is RX2 display mode selection
        //==============================================================
        //==============================================================
        private void comboRX2DisplayMode_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			switch(comboRX2DisplayMode.Text)  // ke9ns list of modes is not this complete list
			{
				case "Spectrum":
                   
					Display.CurrentDisplayModeBottom = DisplayMode.SPECTRUM;
					if(chkSplitDisplay.Checked) UpdateRXDisplayVars((int)udFilterLow.Value, (int)udFilterHigh.Value);
					break;
				case "Panadapter":
                    
					Display.CurrentDisplayModeBottom = DisplayMode.PANADAPTER;
					if(chkSplitDisplay.Checked) CalcDisplayFreq();
					break;
                case "Panafall":  // ke9ns pan
                    
                    Display.CurrentDisplayModeBottom = DisplayMode.PANAFALL;
                    if (chkSplitDisplay.Checked) CalcDisplayFreq();

                    break;
				case "Scope":
                    
					Display.CurrentDisplayModeBottom = DisplayMode.SCOPE;
					break;
				case "Phase":
                   
					Display.CurrentDisplayModeBottom = DisplayMode.PHASE;
					break;
				case "Phase2":
                    
					Display.CurrentDisplayModeBottom = DisplayMode.PHASE2;
					break;
				case "Waterfall":
                   
					Display.CurrentDisplayModeBottom = DisplayMode.WATERFALL;
					if(chkSplitDisplay.Checked) CalcDisplayFreq();
					break;
				case "Histogram":
                   
					Display.CurrentDisplayModeBottom = DisplayMode.HISTOGRAM;
					break;
				case "Off":
                    
					Display.CurrentDisplayModeBottom = DisplayMode.OFF;
					break;
			}

    
            // ke9ns add this section since rx2 can now do panafall
            switch (Display.CurrentDisplayModeBottom)
            {
                case DisplayMode.PANADAPTER:
                case DisplayMode.WATERFALL:
                    chkRX2DisplayAVG.Text = "Avg"; // ke9ns  add
                       break;

                case DisplayMode.PANAFALL:
                 
                    if ((Display.PW_AVG2 == 0))
                    {
                        if (chkRX2DisplayAVG.Checked == true) chkRX2DisplayAVG.Text = "AvgB"; // ke9ns add 
                        else chkRX2DisplayAVG.Text = "Avg"; // ke9ns add 
                    }
                    break;

                default:
                       break;
            }



            if (comboRX2DisplayMode.Focused)
                btnHidden.Focus();

		} // rx2 combodisplaymode


        //==============================================================
        //==============================================================
        // ke9ns mod: allows rx2 to have avgB, avgP, and off between the panadapter and waterfall
        //==============================================================
        //==============================================================
        private void chkRX2DisplayAVG_CheckedChanged(object sender, System.EventArgs e)
		{

            if (Display.CurrentDisplayModeBottom == DisplayMode.PANAFALL) // ke9ns pan
            {
               
                chkRX2DisplayAVG.CheckedChanged -= chkRX2DisplayAVG_CheckedChanged; // turn eventoff

                // PW_AVG 0 = water AVG follows Panadapter AVG ON/OFF
                //        1 = water AVG OFF no matter

                if ((Display.PW_AVG2 & 1) == 0) // 0=  avg ON waterfall if its ON panadater
                {

                    if (chkRX2DisplayAVG.Checked == false)   // if AVG on both panadapter and waterfall and you click the avg button then do below
                    {
                        // AVG ONLY ON PANADAPTER
                        Display.PW_AVG2 = 1;             // waterfall avg OFF 
                        chkRX2DisplayAVG.Checked = true;   // Panadapter avg ON (keeping the button ON)
                        chkRX2DisplayAVG.Text = "AvgP"; // ke9ns 

                    }
                    else // true
                    {
                        // AVG ON FULL PANAFALL
                        Display.PW_AVG2 = 0;             // waterfall avg ON    
                        chkRX2DisplayAVG.Checked = true;   // Panadapter avg ON  (simply flipping the button ON)
                        chkRX2DisplayAVG.Text = "AvgB"; // ke9ns 
                    }

                }
                else //  1=panafall mode, and waterfall AVG OFF 
                {

                    if (chkRX2DisplayAVG.Checked == false)   // if AVG on both panadapter and waterfall and you click the avg button then do below
                    {
                        // TURN OFF ALL AVG 
                        Display.PW_AVG2 = 0;             // waterfall avg OFF 
                        chkRX2DisplayAVG.Checked = false;   // Panadapter avg OFF (keeping the button ON)
                        chkRX2DisplayAVG.Text = "Avg"; // ke9ns 

                    }
                    else // true  (pw_avg=1 and panafall mode and button was OFF, now ON) impossibility
                    {

                        Display.PW_AVG2 = 0;             // waterfall avg ON    
                        chkRX2DisplayAVG.Checked = true;   // Panadapter avg ON  (simply flipping the button ON)
                        chkRX2DisplayAVG.Text = "Avg"; // ke9ns 
                    }

                }

                chkRX2DisplayAVG.CheckedChanged += chkRX2DisplayAVG_CheckedChanged; // turn event back on


            } // in panafallmode ?


            Display.RX2AverageOn = chkRX2DisplayAVG.Checked;

			if(chkRX2DisplayAVG.Checked)
			{
				chkRX2DisplayAVG.BackColor = button_selected_color;
			}
			else
			{
				chkRX2DisplayAVG.BackColor = SystemColors.Control;
			}
			
			/*if(chkRX2DisplayAVG.Checked)
			{
				switch(Display.CurrentDisplayMode)
				{
					case DisplayMode.PANADAPTER:
					case DisplayMode.HISTOGRAM:
					case DisplayMode.SPECTRUM:
					case DisplayMode.WATERFALL:
						btnZeroBeat.Enabled = true; // only allow zerobeat when avg is on 
						break;
					default:
						btnZeroBeat.Enabled = false;
						break;
				}
			}
			else btnZeroBeat.Enabled = false;*/
		}

		private void chkRX2DisplayPeak_CheckedChanged(object sender, System.EventArgs e)
		{
			Display.RX2PeakOn = chkRX2DisplayPeak.Checked;
			if(chkRX2DisplayPeak.Checked)
			{
				chkRX2DisplayPeak.BackColor = button_selected_color;
			}
			else
			{
				chkRX2DisplayPeak.BackColor = SystemColors.Control;
			}			
		}

		private void UpdateDSPBufRX1()
		{
			int size = 2048;
			switch(rx1_dsp_mode)
			{
				case DSPMode.LSB:
				case DSPMode.USB:
				case DSPMode.DSB:
				case DSPMode.AM:
				case DSPMode.SAM:
              //  case DSPMode.FM:

                    size = dsp_buf_phone_rx; // ke9ns filter buffer size from setup dsp form
					break;
				case DSPMode.CWL:
				case DSPMode.CWU:
					size = dsp_buf_cw_rx;
					break;
				case DSPMode.DIGL:
				case DSPMode.DIGU:
				case DSPMode.DRM:
					size = dsp_buf_dig_rx;
					break;
                case DSPMode.FM:

                    if (FMData == true)
                    {
                        size = dsp_buf_dig_rx;
                    }
                    else
                    {
                        size = dsp_buf_phone_rx; // ke9ns filter buffer size from setup dsp form
                    }
                    break;

            }

			int offset = 0;
			switch(size)
			{
				case 4096: offset = 0; break;
				case 2048: offset = 3; break;
				case 1024: offset = 6; break;
				case 512:  offset = 9; break;
				case 256:  offset = 12; break;
			}

			if(dsp.GetDSPRX(0, 0).BufferSize != size ||	dsp.GetDSPRX(0, 1).BufferSize != size)
			{
				bool poweron = PowerOn;

				if(poweron) 
				{
					PowerOn = false;
					Thread.Sleep(100);
				}

				RX1FilterSizeCalOffset = (float)offset;

				dsp.GetDSPRX(0, 0).BufferSize = size;
				dsp.GetDSPRX(0, 1).BufferSize = size;

				if(!initializing)
				{           
					DSP.SyncStatic();
   
					for(int i=0; i < 1; i++)
					{
						for(int j=0; j < 2; j++)
						{
							DSPRX dsp_rx = dsp.GetDSPRX(i, j);
							dsp_rx.Update = false;
							dsp_rx.Force = true;
							dsp_rx.Update = true;
							dsp_rx.Force = false;
						}
					}

					for(int i=0; i<1; i++)
					{
						DSPTX dsp_tx = dsp.GetDSPTX(i);
						dsp_tx.Update = false;
						dsp_tx.Force = true;
						dsp_tx.Update = true;
						dsp_tx.Force = false;
					}
				}
			
				if(poweron) PowerOn = true;
			}
		} // update dsp rx1 buffer

		private void UpdateDSPBufRX2()
		{
			int size = 2048;
			switch(rx2_dsp_mode)
			{
				case DSPMode.LSB:
				case DSPMode.USB:
				case DSPMode.DSB:
				case DSPMode.AM:
				case DSPMode.SAM:
				//case DSPMode.FM:
					size = dsp_buf_phone_rx;
					break;
				case DSPMode.CWL:
				case DSPMode.CWU:
					size = dsp_buf_cw_rx;
					break;
				case DSPMode.DIGL:
				case DSPMode.DIGU:
				case DSPMode.DRM:
					size = dsp_buf_dig_rx;
					break;
                case DSPMode.FM:

                    if (FMData == true)
                    {
                        size = dsp_buf_dig_rx;
                    }
                    else
                    {
                        size = dsp_buf_phone_rx; // ke9ns filter buffer size from setup dsp form
                    }
                    break;

            }

			int offset = 0;
			switch(size)
			{
				case 4096: offset = 0; break;
				case 2048: offset = 3; break;
				case 1024: offset = 6; break;
				case 512:  offset = 9; break;
				case 256:  offset = 12; break;
			}

			if(dsp.GetDSPRX(1, 0).BufferSize != size ||
				dsp.GetDSPRX(1, 1).BufferSize != size)
			{
				bool poweron = PowerOn;
				if(poweron) 
				{
					PowerOn = false;
					Thread.Sleep(100);
				}

				RX2FilterSizeCalOffset = (float)offset;
				dsp.GetDSPRX(1, 0).BufferSize = size;
				dsp.GetDSPRX(1, 1).BufferSize = size;

				if(!initializing)
				{           
					DSP.SyncStatic();
   
					for(int i=0; i<1; i++)
					{
						for(int j=0; j<2; j++)
						{
							DSPRX dsp_rx = dsp.GetDSPRX(i, j);
							dsp_rx.Update = false;
							dsp_rx.Force = true;
							dsp_rx.Update = true;
							dsp_rx.Force = false;
						}
					}

					for(int i=0; i<1; i++)
					{
						DSPTX dsp_tx = dsp.GetDSPTX(i);
						dsp_tx.Update = false;
						dsp_tx.Force = true;
						dsp_tx.Update = true;
						dsp_tx.Force = false;
					}
				}
			
				if(poweron) PowerOn = true;
			}
		}

		private void UpdateDSPBufTX()
		{
			int size = 2048;
			DSPMode mode = rx1_dsp_mode;
			if(chkVFOBTX.Checked) mode = rx2_dsp_mode;
			switch(mode)
			{
				case DSPMode.LSB:
				case DSPMode.USB:
				case DSPMode.DSB:
				case DSPMode.AM:
				case DSPMode.SAM:
				case DSPMode.FM:
					size = dsp_buf_phone_tx;
					break;
				case DSPMode.CWL:
				case DSPMode.CWU:
					size = dsp_buf_cw_tx;
					break;
				case DSPMode.DIGL:
				case DSPMode.DIGU:
				case DSPMode.DRM:
					size = dsp_buf_dig_tx;
					break;
			}

			if(dsp.GetDSPTX(0).BufferSize != size)
			{
				bool poweron = PowerOn;
				if(poweron) 
				{
					PowerOn = false;
					Thread.Sleep(100);
				}

				dsp.GetDSPTX(0).BufferSize = size;

				if(!initializing)
				{           
					DSP.SyncStatic();
   
					for(int i=0; i<2; i++)
					{
						for(int j=0; j<2; j++)
						{
							DSPRX dsp_rx = dsp.GetDSPRX(i, j);
							dsp_rx.Update = false;
							dsp_rx.Force = true;
							dsp_rx.Update = true;
							dsp_rx.Force = false;
						}
					}

					for(int i=0; i<1; i++)
					{
						DSPTX dsp_tx = dsp.GetDSPTX(i);
						dsp_tx.Update = false;
						dsp_tx.Force = true;
						dsp_tx.Update = true;
						dsp_tx.Force = false;
					}
				}
			
				if(poweron)PowerOn = true;
			}
		}


        //=========================================================
        // ke9ns value passed from setup->dsp->rx buffer size
		private int dsp_buf_phone_rx = 4096;
		public int DSPBufPhoneRX
		{
			get { return dsp_buf_phone_rx; }
			set
			{
				dsp_buf_phone_rx = value;
				UpdateDSPBufRX1();
				UpdateDSPBufRX2();
			}
		}

		private int dsp_buf_phone_tx = 2048;
		public int DSPBufPhoneTX
		{
			get { return dsp_buf_phone_tx; }
			set
			{
				dsp_buf_phone_tx = value;
				UpdateDSPBufTX();
			}
		}

		private int dsp_buf_cw_rx = 4096;
		public int DSPBufCWRX
		{
			get { return dsp_buf_cw_rx; }
			set 
			{
				dsp_buf_cw_rx = value; 
				UpdateDSPBufRX1();
				UpdateDSPBufRX2();
			}
		}

		private int dsp_buf_cw_tx = 2048;
		public int DSPBufCWTX
		{
			get { return dsp_buf_cw_tx; }
			set
			{
				dsp_buf_cw_tx = value;
				UpdateDSPBufTX();
			}
		}

		private int dsp_buf_dig_rx = 4096;
		public int DSPBufDigRX
		{
			get { return dsp_buf_dig_rx; }
			set 
			{
				dsp_buf_dig_rx = value;
				UpdateDSPBufRX1();
				UpdateDSPBufRX2();
			}
		}



		private int dsp_buf_dig_tx = 2048;
        private void comboRX2Band_SelectedIndexChanged(object sender, System.EventArgs e)
        {
            if (comboRX2Band.Focused)
            {
                string filter = "", mode = "", band = "";
                double freq = 0.0;
                bool b = false;

                switch (comboRX2Band.Text)
                {
                    case "160m":
                        band = "160M";
                       // setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold160m; // ke9ns not needed here
                        break;
                    case "80m":
                        band = "80M";
                       // setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold80m;
                        break;
                    case "60m":
                        band = "60M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold60m;
                        break;
                    case "40m":
                        band = "40M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold40m;
                        break;
                    case "30m":
                        band = "30M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold30m;
                        break;
                    case "20m":
                        band = "20M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold20m;
                        break;
                    case "17m":
                        band = "17M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold17m;
                        break;
                    case "15m":
                        band = "15M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold15m;
                        break;
                    case "12m":
                        band = "12M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold12m;
                        break;
                    case "10m":
                        band = "10M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold10m;
                        break;
                    case "6m":
                        band = "6M";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold6m;
                        break;
                    case "2m":
                        band = "2M";
                       // setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "GEN":
                        band = "GEN";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdGEN;
                        break;
                    case "WWV":
                        band = "WWV";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdWWV;
                        break;
                    case "VU 2m":
                        band = "VHF0";
                       // setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VU 70cm":
                        band = "VHF1";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF2":
                        band = "VHF2";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF3":
                        band = "VHF3";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF4":
                        band = "VHF4";
                       // setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF5":
                        band = "VHF5";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF6":
                        band = "VHF6";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF7":
                        band = "VHF7";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF8":
                        band = "VHF8";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF9":
                        band = "VHF9";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF10":
                        band = "VHF10";
                       // setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF11":
                        band = "VHF11";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF12":
                        band = "VHF12";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                    case "VHF13":
                        band = "VHF13";
                      //  setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR;
                        break;
                } // comboboxrx2

                int register = -1;

                switch (band)
                {
                    case "160m": register = band_160m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold160m; break;
                    case "80m": register = band_80m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold80m; break;
                    case "60m": register = band_60m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold60m; break;
                    case "40m": register = band_40m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold40m; break;
                    case "30m": register = band_30m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold30m; break;
                    case "20m": register = band_20m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold20m; break;
                    case "17m": register = band_17m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold17m; break;
                    case "15m": register = band_15m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold15m; break;
                    case "12m": register = band_12m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold12m; break;
                    case "10m": register = band_10m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold10m; break;
                    case "6m": register = band_6m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThreshold6m; break;
                    case "2m": register = band_2m_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "GEN": register = band_gen_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdGEN; break;
                    case "WWV": register = band_wwv_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdWWV; break;
                    // ke9ns no RX2 SWL bands

                    case "VHF0": register = band_vhf0_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF1": register = band_vhf1_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF2": register = band_vhf2_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF3": register = band_vhf3_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF4": register = band_vhf4_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF5": register = band_vhf5_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF6": register = band_vhf6_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF7": register = band_vhf7_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF8": register = band_vhf8_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF9": register = band_vhf9_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF10": register = band_vhf10_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF11": register = band_vhf11_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF12": register = band_vhf12_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                    case "VHF13": register = band_vhf13_register; setupForm.WaterfallLowRX2Threshold = WaterfallLowThresholdXVTR; break;
                }

                if ((register < 3) && band.StartsWith("VHF"))
                {                    
                    int xvtr_index = Int32.Parse(band.Substring(3));

                    double start_freq = xvtrForm.GetBegin(xvtr_index);

                    for (int i = 0; i < 3 - register; i++)
                        DB.AddBandStack(band, "USB", "2600", start_freq + i * 0.0010);

                    UpdateBandStackRegisters();
                    register = 3;
                }

                b = DB.GetBandStack(band, 0, out mode, out filter, out freq);

                if (b)
                {
                    if (filter.Contains("@"))
                    {
                        filter = filter.Substring(0, (filter.Length)-1); // ke9ns add for bandstack lockout
                    }

                    VFOBFreq = freq;
                    RX2DSPMode = (DSPMode)Enum.Parse(typeof(DSPMode), mode);

                    VFOBFreq = freq;
                    RX2Filter = (Filter)Enum.Parse(typeof(Filter), filter);
                }

                btnHidden.Focus();
            }// combo rx2 focus

            UpdateWaterfallLevelValues(); // ke9ns add allowing panafall requires this

        } // combo rx2 index changed


		//bool done_console_basis = false;
		int dpi = 0;
		Size base_size = new Size(0, 0);
		bool dpi_resize_done = false;
		//bool set_min_size = false;


//================================================================================================ke9ns MOD
		public void Console_Resize(object sender, System.EventArgs e)
		{
            if (this.WindowState == FormWindowState.Minimized)
            {
                N1MM_MINIMIZE = true;

                if (N1MM_ON == true) // ke9ns add
                {
                   

                  //  if (mox)
                        return;
                }
                else
                {
                    N1MM_MINIMIZE = false;
                    return;
                }


            } // window is minimized
            else
            {
                N1MM_MINIMIZE = false; 
            }

			if(dpi == 0) dpi = (int)picDisplay.CreateGraphics().DpiX;

			if(dpi > 96 && !dpi_resize_done)
			{
				if(base_size.Width == 0) base_size = this.AutoScaleBaseSize;

				if(this.AutoScaleBaseSize != base_size) dpi_resize_done = true;
				else return;
			}

         //   this.AutoScaleMode = AutoScaleMode.;  // ke9ns test
          

            /*if(!done_console_basis)
			{
				GrabConsoleSizeBasis();
				done_console_basis = true;
				/*if(dpi > 96)
				{
					ArrayList a = DB.GetVars("State");
					foreach(string s in a)
					{
						string[] vals = s.Split('/');
						string name = vals[0];
						string val = vals[1];
						
						switch(name)
						{
							case "console_width":
								this.Width = int.Parse(val);
								break;
							case "console_height":
								this.Height = int.Parse(val);
								break;
						}
					}						
				}
			}*/

            /*if(!set_min_size)
			{
				int W = console_basis_size.Width;
				int H;

				if(fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
					H = console_basis_size.Height - (panelRX2Filter.Height+8);
				else H = console_basis_size.Height;
				
				this.MinimumSize = new Size(W, H);
				set_min_size = true;
			}*/

            if (this.Width < console_basis_size.Width)
			{
				this.Width = console_basis_size.Width;
				return;
			}
				
			if(fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK)
			{
				if(this.Height < console_basis_size.Height - (panelRX2Filter.Height+8))
                    this.Height = console_basis_size.Height - (panelRX2Filter.Height + 8);
			}
			else if(this.Height < console_basis_size.Height) 
			{
				this.Height = console_basis_size.Height;
				return;
			}

			int h_delta = this.Width-console_basis_size.Width;
			int v_delta = Math.Max(this.Height-console_basis_size.Height, 0);

			ResizeConsole(h_delta, v_delta);

            Display.Power = 1;
           // Debug.WriteLine("RESIZE1");

        } // control resize



		private int rx2_fixed_gain = 20;
		private int rx2_max_gain = 90;
		private void comboRX2AGC_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if(!fwc_init || current_model != Model.FLEX5000 || comboRX2AGC.SelectedIndex < 0) return;
			dsp.GetDSPRX(1, 0).RXAGCMode = (AGCMode)comboRX2AGC.SelectedIndex;

			switch((AGCMode)comboRX2AGC.SelectedIndex) 
			{
				case AGCMode.LONG:
					toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n"+
						"Long (Attack 2ms, Hang 750ms, Decay 200ms)");
					//comboRX2AGC.BackColor = SystemColors.Window;
					break;
				case AGCMode.SLOW:
					toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n"+
						"Slow (Attack 2ms, Hang 500ms, Decay 500ms)");
					//comboRX2AGC.BackColor = SystemColors.Window;
					break;
				case AGCMode.MED:
					toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n"+
						"Medium (Attack 2ms, Hang 250ms, Decay 250ms)");
					//comboRX2AGC.BackColor = SystemColors.Window;
					break;
				case AGCMode.FAST:
					toolTip1.SetToolTip(comboRX2AGC, "Automatic Gain Control Mode Setting:\n"+
						"Fast (Attack 2ms, Hang 100ms, Decay 100ms)");
					//comboRX2AGC.BackColor = SystemColors.Window;
					break;
				/*case AGCMode.CUSTOM:
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Custom - Set specifics in Setup Form -> DSP -> AGC/ALC");
					comboRX2AGC.BackColor = SystemColors.Window;
					break;*/
				case AGCMode.FIXD:
					setupForm.CustomRXAGCEnabled = false;
					toolTip1.SetToolTip(comboAGC, "Automatic Gain Control Mode Setting:\n"+
						"Fixed - Set gain with AGC-T control above");
					//comboRX2AGC.BackColor = Color.Orange;
					break;
			}

			// set RF control to Max or Fixed gain depending on mode
			switch((AGCMode)comboRX2AGC.SelectedIndex)
			{
				case AGCMode.FIXD:
					ptbRX2RF.Value = rx2_fixed_gain;
                    ptbRX2RF_Scroll(this, EventArgs.Empty);
					break;
				default:
					ptbRX2RF.Value = rx2_max_gain;
                    ptbRX2RF_Scroll(this, EventArgs.Empty);
					break;
			}
		}

		private void chkVFOSync_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkVFOSync.Checked)
			{
				chkVFOSync.BackColor = button_selected_color;
				txtVFOAFreq_LostFocus(this, EventArgs.Empty);
			}
			else
			{
				chkVFOSync.BackColor = SystemColors.Control;
			}
		}

		private bool mute_rx1_on_vfob_tx = true;
		public bool MuteRX1OnVFOBTX
		{
			get { return mute_rx1_on_vfob_tx; }
			set
            {
                mute_rx1_on_vfob_tx = value;
                if (fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK && chkVFOBTX.Checked)
                {
                    FWC.SetFullDuplex(!value);
                    Audio.FullDuplex = !value;
                    if (!value)
                        FWC.SetQSE(false);
                }
            }
		}

        private bool mute_rx2_on_vfoa_tx = true;
        public bool MuteRX2OnVFOATX
        {
            get { return mute_rx2_on_vfoa_tx; }
            set
            {
                mute_rx2_on_vfoa_tx = value;
                if (chkVFOATX.Checked)
                    Audio.RX2AutoMuteTX = value;
            }
        }
	
		public int DSPBufDigTX
		{
			get { return dsp_buf_dig_tx; }
			set
			{
				dsp_buf_dig_tx = value;
				UpdateDSPBufTX();
			}
		}

		private void chkVFOATX_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkVFOATX.Focused && !chkVFOATX.Checked) chkVFOATX.Checked = true;

            if (chkVFOATX.Checked)
			{
				if(chkVFOBTX.Checked) chkVFOBTX.Checked = false;

                swap_vfo_ab_tx = false;

                if (KWAutoInformation) BroadcastVFOChange("0");

				chkVFOATX.BackColor = Color.Red;//button_selected_color;

				txtVFOAFreq_LostFocus(this, EventArgs.Empty);

                if (chkVAC2.Checked && chkRX2.Checked)  // W4TME 
                {
                    ptbVACRXGain.Value = vac_rx_gain;
                    ptbVACRXGain_Scroll(this, EventArgs.Empty);

                    ptbVACTXGain.Value = vac_tx_gain;
                    ptbVACTXGain_Scroll(this, EventArgs.Empty);

                    comboVACSampleRate.Text = vac_sample_rate;

                    chkVACStereo.Checked = vac_stereo;
                }
			}
			else
			{
				chkVFOATX.BackColor = SystemColors.Control;
			}
            btnHidden.Focus();
		}

        private void BroadcastVFOChange(string ndx)
        {
            string cmd = "ZZSW" + ndx + ";";
            try
            {
                siolisten.SIO.put(cmd);
            }
            catch{}
        }

		private void chkVFOBTX_CheckedChanged(object sender, System.EventArgs e)
		{
			if(chkVFOBTX.Focused && !chkVFOBTX.Checked) chkVFOBTX.Checked = true;

            if (chkVFOBTX.Checked)
			{
				if(chkVFOATX.Checked) chkVFOATX.Checked = false;
				chkVFOBTX.BackColor = Color.Red;//button_selected_color;
                swap_vfo_ab_tx = true;
                if (KWAutoInformation)
                    BroadcastVFOChange("1");
				txtVFOBFreq_LostFocus(this, EventArgs.Empty);
				if(fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK && chkRX2.Checked)
				{
                    Audio.RX2AutoMuteTX = true;
                    FWC.SetFullDuplex(!mute_rx1_on_vfob_tx);
                    Audio.FullDuplex = !mute_rx1_on_vfob_tx;
                    if (!mute_rx1_on_vfob_tx && !mox)
                        FWC.SetQSE(false);

					Audio.TXDSPMode = rx2_dsp_mode;
					dsp.GetDSPTX(0).CurrentDSPMode = rx2_dsp_mode;
                    if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                        FWC.SetTXDSPMode(rx2_dsp_mode);
					SetRX2Mode(rx2_dsp_mode);
					Display.TXOnVFOB = true;
					if(chkVFOSplit.Checked) 
						chkVFOSplit.Checked = false;

                    if (chkVAC2.Checked && chkRX2.Checked)
                    {
                        ptbVACRXGain.Value = vac2_rx_gain;
                        ptbVACRXGain_Scroll(this, EventArgs.Empty);

                        ptbVACTXGain.Value = vac2_tx_gain;
                        ptbVACTXGain_Scroll(this, EventArgs.Empty);

                        comboVACSampleRate.Text = vac2_sample_rate;

                        chkVACStereo.Checked = vac2_stereo;
                    }
				}
	
				if(chkRX2.Checked == false && chkVFOBTX.Checked)    //in case of VU/XVTR-split error
					chkVFOSplit.Checked = true;
			}
			else // button is unchecked
			{
				chkVFOBTX.BackColor = SystemColors.Control;
                Display.TXOnVFOB = false;
				if(fwc_init && current_model == Model.FLEX5000 && FWCEEPROM.RX2OK && chkRX2.Checked)
				{
                    Audio.RX2AutoMuteTX = mute_rx2_on_vfoa_tx;
                    FWC.SetFullDuplex(false);
                    Audio.FullDuplex = false;					

                    if (chkVAC2.Checked && chkRX2.Checked)
                    {
                        ptbVACRXGain.Value = vac_rx_gain;
                        ptbVACRXGain_Scroll(this, EventArgs.Empty);

                        ptbVACTXGain.Value = vac_tx_gain;
                        ptbVACTXGain_Scroll(this, EventArgs.Empty);

                        comboVACSampleRate.Text = vac_sample_rate;

                        chkVACStereo.Checked = vac_stereo;
                    }
				}

				if(chkRX2.Checked == false)
					chkVFOSplit.Checked = false;
				Audio.TXDSPMode = rx1_dsp_mode;
				dsp.GetDSPTX(0).CurrentDSPMode = rx1_dsp_mode;
                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) 
                    FWC.SetTXDSPMode(rx2_dsp_mode);
				SetRX1Mode(rx1_dsp_mode);
			}
            Audio.VFOBTX = chkVFOBTX.Checked;
            btnHidden.Focus();
		}

        private void toolStripMenuItemRX1FilterConfigure_Click(object sender, EventArgs e)
        {
            if (rx1_dsp_mode == DSPMode.DRM || rx1_dsp_mode == DSPMode.SPEC || rx1_dsp_mode == DSPMode.FM) return;

            if (filterRX1Form == null || filterRX1Form.IsDisposed)
                filterRX1Form = new FilterForm(this, rx1_filters, false);

            filterRX1Form.DSPMode = rx1_dsp_mode;
            filterRX1Form.CurrentFilter = rx1_filter;
            filterRX1Form.Show();
            filterRX1Form.Focus();
            filterRX1Form.WindowState = FormWindowState.Normal; // ke9ns add
        }

        private void toolStripMenuItemRX1FilterReset_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show(
                "Are you sure you want to reset all RX1 custom filter settings to the default?",
                "Reset Filters?",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (dr == DialogResult.No) return;

            InitFilterPresets(rx1_filters);

            radFilter1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F1);
            radFilter2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F2);
            radFilter3.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F3);
            radFilter4.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F4);
            radFilter5.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F5);
            radFilter6.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F6);
            radFilter7.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F7);
            radFilter8.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F8);
            radFilter9.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F9);
            radFilter10.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.F10);
            radFilterVar1.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR1);
            radFilterVar2.Text = rx1_filters[(int)rx1_dsp_mode].GetName(Filter.VAR2);
            RX1Filter = rx1_filter;

            if (filterRX1Form != null && !filterRX1Form.IsDisposed)
            {
                filterRX1Form.DSPMode = rx1_dsp_mode;
            }
        }

        private void toolStripMenuItemRX2FilterConfigure_Click(object sender, EventArgs e)
        {
            if (rx2_dsp_mode == DSPMode.DRM || rx2_dsp_mode == DSPMode.SPEC) return;

            if (filterRX2Form == null || filterRX2Form.IsDisposed)
                filterRX2Form = new FilterForm(this, rx2_filters, true);

            filterRX2Form.DSPMode = rx2_dsp_mode;
            filterRX2Form.CurrentFilter = rx2_filter;
            filterRX2Form.Show();
            filterRX2Form.Focus();
            filterRX2Form.WindowState = FormWindowState.Normal; // ke9ns add
        }

#if (!NO_TNF)
        private Notch Context_Notch;
#endif
        private void toolStripNotchDelete_Click(Object sender, EventArgs e)
        {
#if (!NO_TNF)
            NotchList.RemoveNotch(Context_Notch);
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
#endif
        }

        private void toolStripNotchRemember_Click(object sender, EventArgs e)
        {
#if (!NO_TNF)
            Context_Notch.Permanent = !toolStripNotchRemember.Checked;
            toolStripNotchRemember.Checked = !toolStripNotchRemember.Checked;
            contextMenuStripNotch.Close();
#endif
        }

        private void toolStripNotchNormal_Click(object sender, EventArgs e)
        {
#if (!NO_TNF)

         
            Context_Notch.Depth = 1;
            toolStripNotchNormal.Checked = true;
            toolStripNotchDeep.Checked = false;
            toolStripNotchVeryDeep.Checked = false;
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
#endif
        }

        private void toolStripNotchDeep_Click(object sender, EventArgs e)
        {
#if (!NO_TNF)
            Context_Notch.Depth = 2;
            toolStripNotchNormal.Checked = false;
            toolStripNotchDeep.Checked = true;
            toolStripNotchVeryDeep.Checked = false;
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
#endif
        }

        private void toolStripNotchVeryDeep_Click(object sender, EventArgs e)
        {
#if (!NO_TNF)
            Context_Notch.Depth = 3;
            toolStripNotchNormal.Checked = false;
            toolStripNotchDeep.Checked = false;
            toolStripNotchVeryDeep.Checked = true;
            contextMenuStripNotch.Close();
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
#endif
        }

        private void toolStripMenuItemRX2FilterReset_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show(
                "Are you sure you want to reset all RX2 custom filter settings to the default?",
                "Reset Filters?",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (dr == DialogResult.No) return;

            InitFilterPresets(rx2_filters);

            radRX2Filter1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F1);
            radRX2Filter2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F2);
            radRX2Filter3.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F3);
            radRX2Filter4.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F4);
            radRX2Filter5.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F5);
            radRX2Filter6.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F6);
            radRX2Filter7.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.F7);
            radRX2FilterVar1.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR1);
            radRX2FilterVar2.Text = rx2_filters[(int)rx2_dsp_mode].GetName(Filter.VAR2);
            RX2Filter = rx2_filter;

            if (filterRX2Form != null && !filterRX2Form.IsDisposed)
            {
                filterRX2Form.DSPMode = rx2_dsp_mode;
            }
        }

        private static bool TDxButtonState = false;
        private static bool TDxCurrentVFO = false; //VFOA

        private void timer_navigate_Tick(object sender, System.EventArgs e)
        {
          
            if (TDxSensor == null)  return;

            TDxInput.Vector3D t = TDxSensor.Translation;
            TDxInput.AngleAxis r = TDxSensor.Rotation;
            TDxDevice.Keyboard.IsKeyDown(1);
            double del;
            int val;

            if (TDxDevice.Keyboard.IsKeyDown(1)) //Button 1 assignment
            {
                TDxButtonState = true;
            }
            else if (TDxButtonState)
            {
                TDxButtonState = false;
                //click
                TDxCurrentVFO = !TDxCurrentVFO;
            }
/* ke9ns
            New control axes have been added to the SpaceNavigator support:

    Twist controls VFOA(or if in split, VFOB)

    Push forward/ backward zooms the panadapter

     Push left / right pans the panadapter

       Push up / down controls the filter width

*/
            if (spacenav_controlvfos) // setupForm VFO Control
            {
                del = Math.Exp(r.Angle / 10.0) - 1.0;
                if (del >= 0.1)
                {
                    del *= -Math.Sign(r.Y) / 1e6;
#if false
					if(current_click_tune_mode == ClickTuneMode.VFOB && scroll_vfob_on_split)
						VFOBFreq += del;
					else 
#endif
                    if (TDxCurrentVFO)
                        VFOBFreq += del;
                    else
                        VFOAFreq += del;
                }
            }
            if (spacenav_flypanadapter) // setupForm Panadapter Flight
            {
                if (Math.Abs(t.Z) > 1.0)
                {
                    val = ptbDisplayZoom.Value;
                    val += Convert.ToInt32(t.Z);
                    val = Math.Min(ptbDisplayZoom.Maximum, val);
                    val = Math.Max(ptbDisplayZoom.Minimum, val);
                    ptbDisplayZoom.Value = val;
                    ptbDisplayZoom_Scroll(this, EventArgs.Empty);
                    //btnDisplayPanCenter_Click(this, EventArgs.Empty);
                }

                if (Math.Abs(t.X) > 1.0)
                {
                    val = ptbDisplayPan.Value;
                    val += Convert.ToInt32(t.X);
                    val = Math.Min(ptbDisplayPan.Maximum, val);
                    val = Math.Max(ptbDisplayPan.Minimum, val);
                    ptbDisplayPan.Value = val;
                    CalcDisplayFreq();
                    //if(ptbDisplayPan.Focused) btnHidden.Focus();
                }

                if (Math.Abs(t.Y) > 1.0)
                {
                    val = ptbFilterWidth.Value;
                    val += Convert.ToInt32(t.Y);
                    val = Math.Min(ptbFilterWidth.Maximum, val);
                    val = Math.Max(ptbFilterWidth.Minimum, val);
                    ptbFilterWidth.Value = val;
                    ptbFilterWidth_Scroll(this.ptbFilterWidth, EventArgs.Empty);
                }
            }
        } // timer_navigate_tick

        public void PressKeyboardButton(Keys keyCode)
        {
            const int KEYEVENTF_EXTENDEDKEY = 0x1;
            const int KEYEVENTF_KEYUP = 0x2;

            Win32.keybd_event((byte)keyCode, 0x45, KEYEVENTF_EXTENDEDKEY, 0);
            Win32.keybd_event((byte)keyCode, 0x45, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);
        }

        private HiPerfTimer t9 = new HiPerfTimer();

        /*private void buttonTS1_Click(object sender, EventArgs e)
        {
            ptbRF.Value = 0;
            ptbRF_Scroll(this, EventArgs.Empty);
            Application.DoEvents();
            Thread.Sleep(1000);

            ptbRF.Value = 120;
            ptbRF_Scroll(this, EventArgs.Empty);
        }*/

        public string getVersion()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
          //  string version = fvi.FileVersion.Substring(0, fvi.FileVersion.LastIndexOf(".")); // ke9ns mod
            string version = fvi.FileVersion.ToString();

            return version;
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            timer2.Enabled = false;
            switch (dsp.GetDSPTX(0).CurrentDSPMode)
            {
                case DSPMode.CWL:
                case DSPMode.CWU:
                    Audio.MuteOutput = false;
                    if(mox)
                        USBHID.WriteI2C2Value(0x30, 0x25, 0xC0);
                    break;
                default:
                    USBHID.WriteI2C2Value(0x30, 0x25, 0xC0);
                    break;
            }
        }

        private void SetWBIRRX1Mu()
        {
            if (wbir_rx1_holdoff_active || calibrating) return;

            switch(current_model)
            {
                case Model.FLEX5000:
                case Model.FLEX3000:
              //  case Model.SDR1000:
                    switch(rx1_preamp_mode)
                    {
                        case PreampMode.OFF:
                        case PreampMode.LOW:
                        case PreampMode.MED:
                            dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.005;
                            dsp.GetDSPRX(0, 1).RXCorrectIQMu = 0.005;
                            break;
                        case PreampMode.HIGH:
                            dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.0005;
                            dsp.GetDSPRX(0, 1).RXCorrectIQMu = 0.0005;
                            break;
                    }
                    break;
                case Model.FLEX1500:
                    switch((FLEX1500PreampMode)rx1_preamp_mode)
                    {
                        case FLEX1500PreampMode.MINUS_10:
                        case FLEX1500PreampMode.ZERO:
                        case FLEX1500PreampMode.PLUS_10:
                            dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.005;
                            dsp.GetDSPRX(0, 1).RXCorrectIQMu = 0.005;
                            break;
                        case FLEX1500PreampMode.PLUS_20:
                        case FLEX1500PreampMode.PLUS_30:
                            dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.0005;
                            dsp.GetDSPRX(0, 1).RXCorrectIQMu = 0.0005;
                            break;
                    }
                    break;
                default:
                    dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.005;
                    dsp.GetDSPRX(0, 1).RXCorrectIQMu = 0.005;
                    break;
            }
        }

        private void SetWBIRRX2Mu()
        {
            if (current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;
            if (wbir_rx2_holdoff_active || calibrating) return;

            switch(rx2_preamp_mode)
            {
                case PreampMode.OFF:
                case PreampMode.LOW:
                case PreampMode.MED:
                    dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.005;
                    break;
                case PreampMode.HIGH:
                    dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.0005;
                    break;
            }
        }

        private HiPerfTimer wbir_rx1_holdoff_timer = new HiPerfTimer();
        private bool wbir_rx1_holdoff_active = false;
        private void WBIRRX1Holdoff_Loop()
        {
            wbir_rx1_holdoff_active = true;
            
            while (true)
            {
                wbir_rx1_holdoff_timer.Stop();
                if (wbir_rx1_holdoff_timer.DurationMsec > 1000)
                    break;
                Thread.Sleep(100);
            }

            wbir_rx1_holdoff_active = false;
            SetWBIRRX1Mu();            
        }

        private void WBIRRX1Holdoff()
        {
            wbir_rx1_holdoff_timer.Start();
            if (!wbir_rx1_holdoff_active)
            {
                dsp.GetDSPRX(0, 0).RXCorrectIQMu = 0.0;
                dsp.GetDSPRX(0, 1).RXCorrectIQMu = 0.0;

                Thread t = new Thread(new ThreadStart(WBIRRX1Holdoff_Loop));
                t.Name = "WBIRRX1Holdoff_Loop Thread";
                t.IsBackground = true;
                t.Priority = ThreadPriority.BelowNormal;
                t.Start();
            }
        }

        private HiPerfTimer wbir_rx2_holdoff_timer = new HiPerfTimer();
        private bool wbir_rx2_holdoff_active = false;
        private void WBIRRX2Holdoff_Loop()
        {
            if (calibrating) return;

            wbir_rx2_holdoff_active = true;

            while (true)
            {
                wbir_rx2_holdoff_timer.Stop();
                if (wbir_rx2_holdoff_timer.DurationMsec > 1000)
                    break;
                Thread.Sleep(100);
            }

            wbir_rx2_holdoff_active = false;
            SetWBIRRX2Mu();
        }

        private void WBIRRX2Holdoff()
        {
            if (calibrating) return;

            wbir_rx2_holdoff_timer.Start();
            if (!wbir_rx2_holdoff_active)
            {
                dsp.GetDSPRX(1, 0).RXCorrectIQMu = 0.0;

                Thread t = new Thread(new ThreadStart(WBIRRX2Holdoff_Loop));
                t.Name = "WBIRRX2Holdoff_Loop Thread";
                t.IsBackground = true;
                t.Priority = ThreadPriority.BelowNormal;
                t.Start();
            }
        }
        private void CallCal1500TXImageComb()
        {
            DialogResult dr = MessageBox.Show("The RTG Transmit Image Calibration feature has been activated.  Run the calibration now?",
                "TX Image Cal?",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (dr == DialogResult.No) return;

            p = new Progress("Calibrate TX Image Comb");
            //p.Show();

            Thread t = new Thread(new ThreadStart(Cal1500TXImageComb));
            t.Name = "Cal 1500 TX Image Comb Thread";
            t.IsBackground = true;
            t.Priority = ThreadPriority.Normal;
            t.Start();
        }

        private void Cal1500TXImageComb()
        {
            float[] freq_list = { 1.868f, 3.768f, 5.341f, 7.176f, 10.158f, 14.188f, 18.120f, 21.333f, 24.936f, 28.410f, 50.102f };
            for (int i = 0; i < freq_list.Length; i++)
            {
                Invoke(new MethodInvoker(p.Show));
                Thread.Sleep(50);
                CalibrateTXImage(freq_list[i], p, true);

                if (p.Text == "")
                    break;

                Thread.Sleep(1000);
            }

            if (p.Text != "")
            {
                MessageBox.Show("Transmit Image Calibration complete",
                    "TX Image Cal Complete",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }
        }

        private void chkTNF_CheckedChanged(object sender, EventArgs e)
        {
            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
            Display.TNFActive = chkTNF.Checked;
        }

#if (!NO_TNF)
        private int default_notch_width = 100;
        //MAX_NOTCHES_IN_PASSBAND is declared in consoole.cs, dsp.cs, and sdr.c, [sdrexport.h]
        private const int MAX_NOTCHES_IN_PASSBAND = 18;     //used to be 9
        private const int MAX_NOTCHES_INITIALLY_IN_PASSBAND = 6;   //used to be 3
#endif
        private void btnTNFAdd_Click(object sender, EventArgs e)
        {
#if (!NO_TNF)
            // calculate the mid-point for the filter
            int low = dsp.GetDSPRX(0, 0).RXFilterLow;
            int high = dsp.GetDSPRX(0, 0).RXFilterHigh;
            int midpoint = (low+high)/2;

            // offset for double sideband modes so the filter is visible
            switch(rx1_dsp_mode)
            {
                case DSPMode.DSB:
                case DSPMode.AM:
                case DSPMode.SAM:
                case DSPMode.FM:
                    midpoint += (high - low) / 4;
                    break;
            }

            if (midpoint < -9999 || midpoint > 9999)
                throw new Exception("TNF: The filter limits ["+low+","+high+"] do not make sense");

            double vfo = VFOAFreq;
            if(chkRIT.Checked) vfo += (double)udRIT.Value*1e-6; // check for RIT

            double rf_freq = vfo + midpoint * 1e-6;

            // if there's already another notch within 100Hz, then quit now
            if (NotchList.NotchNearFreq(rf_freq, 100))
                return;

            // if there's already 3+ filters within the RF window, quit now
            if (NotchList.NotchesInBW(VFOAFreq, low, high).Count >= MAX_NOTCHES_INITIALLY_IN_PASSBAND)
                return;

            if (setupForm.udTNFWidth.Value < 100) setupForm.udTNFWidth.Value = default_notch_width; // ke9ns add
            else default_notch_width = (int)setupForm.udTNFWidth.Value;

            NotchList.List.Add(new Notch(rf_freq, default_notch_width)); // ke9ns mod

            UpdateRX1Notches();
            UpdateRX1SubNotches();
            UpdateRX2Notches();
#endif
        } // btnTNFAdd_Click

        private void addNotch(int thread, int subrx, uint count, double freq, double bw)
        {
#if (!NO_TNF)
            //Debug.WriteLine("addNotch( " + thread + "," + subrx + "," + count + "," + freq + "," + bw);
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                dsp.GetDSPRX(thread, subrx).SetNotchBW(count, bw);
                dsp.GetDSPRX(thread, subrx).SetNotchFreq(count, freq);                
                dsp.GetDSPRX(thread, subrx).SetNotchOn(count, true);
            }
#endif
        }

        private void UpdateRX1Notches()
        {
#if (!NO_TNF)
            if (!chkTNF.Checked)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(0, 0).SetNotchOn(i, false);
                return;
            }

            double vfo = VFOAFreq;
            if(chkRIT.Checked) vfo += (double)udRIT.Value*1e-6;

            switch (rx1_dsp_mode)
            {
                case(DSPMode.CWL):
                    vfo += cw_pitch * 1e-6;
                    break;
                case(DSPMode.CWU):
                    vfo -= cw_pitch * 1e-6;
                    break;
            }

            int low = dsp.GetDSPRX(0, 0).RXFilterLow - 200;
            int high = dsp.GetDSPRX(0, 0).RXFilterHigh + 200;


            List<Notch> l = NotchList.NotchesInBW(vfo, low, high);
            if (l.Count == 0)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(0, 0).SetNotchOn(i, false);
                return;
            }

            l.Sort();
            uint count = 0;

            // enable up to MAX_NOTCHES_IN_PASSBAND notches
            foreach (Notch n in l)
            {
                // translate RF to audio frequency
                double audio_freq = Math.Abs((n.Freq - vfo))*1e6; // now in Hz

                for (int x = 0; x < n.Depth; x++)
                {
                    if(audio_freq > 0)
                    addNotch(0, 0, count++, audio_freq, n.BW);
                }

                if (count >= MAX_NOTCHES_IN_PASSBAND) // don't enable more than 9 notches!
                    break;
            } // for loop

            // turn off unused notches
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                for (uint i = count; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(0, 0).SetNotchOn(i, false);
            }

            if (!chkPower.Checked)
                Display.DrawBackground();
#endif
        } // UpdateRX1Notches()

        private void UpdateRX1SubNotches()
        {
#if (!NO_TNF)
            if (!chkTNF.Checked || !chkEnableMultiRX.Checked)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(0, 1).SetNotchOn(i, false);
                return;
            }

            double vfo = VFOBFreq;
            if (rx2_enabled) vfo = VFOASubFreq;
            if (chkRIT.Checked) vfo += (double)udRIT.Value * 1e-6;

            switch (rx1_dsp_mode)
            {
                case (DSPMode.CWL):
                    vfo += cw_pitch * 1e-6;
                    break;
                case (DSPMode.CWU):
                    vfo -= cw_pitch * 1e-6;
                    break;
            }

            int low = dsp.GetDSPRX(0, 1).RXFilterLow - 200;
            int high = dsp.GetDSPRX(0, 1).RXFilterHigh + 200;

            List<Notch> l = NotchList.NotchesInBW(vfo, low, high);
            if (l.Count == 0)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(0, 1).SetNotchOn(i, false);
                return;
            }

            l.Sort();
            uint count = 0;

            // enable up to 3 notches
            foreach (Notch n in l)
            {
                // translate RF to audio frequency
                double audio_freq = (n.Freq - vfo) * 1e6; // now in Hz

                for (int x = 0; x < n.Depth; x++)
                {
                    if(audio_freq > 0)
                    addNotch(0, 1, count++, audio_freq, n.BW);
                }
                if (count >= MAX_NOTCHES_IN_PASSBAND) // don't enable more than 9 notches!
                    break;
            }

            // turn off unused notches
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                for (uint i = count; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(0, 1).SetNotchOn(i, false);
            }

            if (!chkPower.Checked)
                Display.DrawBackground();
#endif
        }

        private void UpdateRX2Notches()
        {
#if (!NO_TNF)
            if (!chkTNF.Checked || !rx2_enabled)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(1, 0).SetNotchOn(i, false);
                return;
            }

            double vfo = VFOBFreq;
            //if (chkRIT.Checked) vfo += (double)udRIT.Value * 1e-6;

            switch (rx2_dsp_mode)
            {
                case (DSPMode.CWL):
                    vfo += cw_pitch * 1e-6;
                    break;
                case (DSPMode.CWU):
                    vfo -= cw_pitch * 1e-6;
                    break;
            }

            int low = dsp.GetDSPRX(1, 0).RXFilterLow - 200;
            int high = dsp.GetDSPRX(1, 0).RXFilterHigh + 200;

            List<Notch> l = NotchList.NotchesInBW(vfo, low, high);
            if (l.Count == 0)
            {
                for (uint i = 0; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(1, 0).SetNotchOn(i, false);
                return;
            }

            l.Sort();
            uint count = 0;

            // enable up to 9 notches
            foreach (Notch n in l)
            {
                // translate RF to audio frequency
                double audio_freq = (n.Freq - vfo) * 1e6; // now in Hz

                for (int x = 0; x < n.Depth; x++)
                {
                    if(audio_freq > 0)
                    addNotch(1, 0, count++, audio_freq, n.BW);
                }
                if (count >= MAX_NOTCHES_IN_PASSBAND) // don't enable more than 9 notches!
                    break;

            }

            // turn off unused notches
            if (count < MAX_NOTCHES_IN_PASSBAND)
            {
                for (uint i = count; i < MAX_NOTCHES_IN_PASSBAND; i++)
                    dsp.GetDSPRX(1, 0).SetNotchOn(i, false);
            }

            if (!chkPower.Checked)
                Display.DrawBackground();
#endif
        }

        private void mnuESC_Click(object sender, EventArgs e)
        {
            if (current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;

            if (diversityForm == null || diversityForm.IsDisposed)
                diversityForm = new DiversityForm(this);

            diversityForm.Show();
            diversityForm.Focus();
            diversityForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

        private void ptbFMMic_Scroll(object sender, EventArgs e)
        {
            lblMicValFM.Text = ptbFMMic.Value.ToString();
            if (dsp.GetDSPTX(0).CurrentDSPMode == DSPMode.FM)
            {
                double gain_db = (double)ptbFMMic.Value;
                if (mic_boost) gain_db += 20.0;
                Audio.MicPreamp = Math.Pow(10.0, gain_db / 20.0); // convert to scalar
            }
            if (ptbFMMic.Focused) btnHidden.Focus();
        }

        private void chkFMCTCSS_CheckedChanged(object sender, EventArgs e)
        {
            CTCSSOn = chkFMCTCSS.Checked;
        }

        private void comboFMCTCSS_SelectedIndexChanged(object sender, EventArgs e)
        {
            CTCSSFreq = double.Parse(comboFMCTCSS.Text);
        }

        private void InitCTCSS()
        {
            comboFMCTCSS.Items.Clear();
            foreach(double d in CTCSS_array)
                comboFMCTCSS.Items.Add(d.ToString("f1"));           
        }

        private void InitMemoryFrontPanel()
        {
            comboFMMemory.DataSource = MemoryList.List;
            comboFMMemory.DisplayMember = "Name";
            comboFMMemory.ValueMember = "Name";
        }

        private void radFMDeviation2kHz_CheckedChanged(object sender, EventArgs e)
        {
            if (radFMDeviation2kHz.Checked)
            {
                dsp.GetDSPTX(0).TXFMDeviation = 2500;
                dsp.GetDSPRX(0, 0).RXFMDeviation = 2500;

                if (RX1DSPMode == DSPMode.FM)
                {
                    UpdateRX1Filters(-4000, 4000);
                    UpdateDisplay();
                }
                if (RX2DSPMode == DSPMode.FM)
                {
                    UpdateRX2Filters(-4000, 4000);
                    UpdateDisplay();
                }
                if (dsp.GetDSPTX(0).CurrentDSPMode == DSPMode.FM)
                {
                    SetTXFilters(DSPMode.FM, -4000, 4000);
                }
            }
        }

        private void radFMDeviation5kHz_CheckedChanged(object sender, EventArgs e)
        {
            if (radFMDeviation5kHz.Checked)
            {
                dsp.GetDSPTX(0).TXFMDeviation = 5000;
                dsp.GetDSPRX(0, 0).RXFMDeviation = 5000;

                if (RX1DSPMode == DSPMode.FM)
                {
                    UpdateRX1Filters(-8000, 8000);
                    UpdateDisplay();
                }
                if (RX2DSPMode == DSPMode.FM)
                {
                    UpdateRX2Filters(-8000, 8000);
                    UpdateDisplay();
                }
                if (dsp.GetDSPTX(0).CurrentDSPMode == DSPMode.FM)
                {
                    SetTXFilters(DSPMode.FM, -8000, 8000);
                }
            }
        }

        //==================================================
        // ke9ns add
        public void FMDeviation10khz()
        {
            dsp.GetDSPTX(0).TXFMDeviation = FMDataDeviation;
            dsp.GetDSPRX(0, 0).RXFMDeviation = FMDataDeviation;

            if (RX1DSPMode == DSPMode.FM)
            {
                UpdateRX1Filters(-FMDataLowHigh, FMDataLowHigh);
                UpdateDisplay();
            }
            if (RX2DSPMode == DSPMode.FM)
            {
                UpdateRX2Filters(-FMDataLowHigh, FMDataLowHigh);
                UpdateDisplay();
            }
            if (dsp.GetDSPTX(0).CurrentDSPMode == DSPMode.FM)
            {
                SetTXFilters(DSPMode.FM, -FMDataLowHigh, FMDataLowHigh);
            }

        } // FMDeviation10khz()



        private void udFMOffset_ValueChanged(object sender, EventArgs e)
        {
            fm_tx_offset_mhz = (double)udFMOffset.Value;
        }

        private void chkFMTXHigh_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMTXHigh.Checked)
            {
                chkFMTXSimplex.Checked = false;
                chkFMTXLow.Checked = false;

                chkFMTXRev.Enabled = true;
                chkFMTXRev.Checked = false;

                CurrentFMTXMode = FMTXMode.High;
            }            
        }

        private void chkFMTXSimplex_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMTXSimplex.Checked)
            {
                chkFMTXHigh.Checked = false;
                chkFMTXLow.Checked = false;

                chkFMTXRev.Enabled = false;
                chkFMTXRev.Checked = false;

                CurrentFMTXMode = FMTXMode.Simplex;
            }
        }

        private void chkFMTXLow_CheckedChanged(object sender, EventArgs e)
        {
            if (chkFMTXLow.Checked)
            {
                chkFMTXSimplex.Checked = false;
                chkFMTXHigh.Checked = false;

                chkFMTXRev.Enabled = true;
                chkFMTXRev.Checked = false;

                CurrentFMTXMode = FMTXMode.Low;
            }
        }

        private void chkFMTXRev_CheckedChanged(object sender, EventArgs e)
        {            
            if (chkFMTXRev.Checked)
            {
                switch (current_fm_tx_mode)
                {
                    case FMTXMode.Low:
                        VFOAFreq -= (fm_tx_offset_mhz);
                        break;
                    case FMTXMode.High:
                        VFOAFreq += (fm_tx_offset_mhz);
                        break;
                }                    
            }
            else
            {
                switch (current_fm_tx_mode)
                {
                    case FMTXMode.Low:
                        VFOAFreq += (fm_tx_offset_mhz);
                        break;
                    case FMTXMode.High:
                        VFOAFreq -= (fm_tx_offset_mhz);
                        break;
                }
            }
        }

        private void chkFMMode_Click(object sender, EventArgs e)
        {
            switch (current_fm_tx_mode)
            {
                case FMTXMode.High:
                    chkFMTXHigh.Checked = true;
                    break;

                case FMTXMode.Simplex:
                    chkFMTXSimplex.Checked = true;
                    break;

                case FMTXMode.Low:
                    chkFMTXLow.Checked = true;
                    break;
            }
        }

        private bool ctcss_on = false;
        public bool CTCSSOn
        {
            get { return ctcss_on; }
            set
            {
                ctcss_on = value;
                if (chkFMCTCSS.Checked != value)
                    chkFMCTCSS.Checked = value;

                dsp.GetDSPTX(0).CTCSSFlag = chkFMCTCSS.Checked;
            }
        }

        private double ctcss_freq = 100.0;
        public double CTCSSFreq
        {
            get { return ctcss_freq; }
            set
            {
                ctcss_freq = value;
                if (comboFMCTCSS.Text != ctcss_freq.ToString("f1"))
                {
                    comboFMCTCSS.Text = ctcss_freq.ToString("f1");
                    comboFMCTCSS_SelectedIndexChanged(this, EventArgs.Empty);
                }

                dsp.GetDSPTX(0).CTCSSFreqHz = value;
            }
        }

        private void mnuMemory_Click(object sender, EventArgs e)
        {
            if (memoryForm == null || memoryForm.IsDisposed)
                memoryForm = new MemoryForm(this);
            memoryForm.Show();
            memoryForm.Focus();
            memoryForm.WindowState = FormWindowState.Normal; // ke9ns add
        }


        //================================================================================================
        // ke9ns 
        public void RecallMemory(MemoryRecord record)
        {
            if (record.RXFreq < 0.009)
            {
                string memerror_message = "The VFO A RX Frequency value of " + record.RXFreq +
                    "  MHz is too low for the memory record modified or selected.  It must be a value greater than 0.009000 MHz.\r\n\r\n" +
                    "Manually change the VFO A RX Frequency value in the Memory record to correct this error.\r\n\r\n" +
                    "A default VFO A RX Frequency value of 10.000 MHz or the memory channel transmit frequency " +
                    "will be used by PowerSDR until the memory record with the invalid VFO A RX Frequency value is corrected.";
                string memerror_caption = "Data Entry Error - VFO A Frequency";
                MessageBox.Show(memerror_message, memerror_caption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);

                record.RXFreq = 10.0;
            }
            
            if ((record.RXFreq != record.TXFreq) && (!record.Split))
            {
                string memerror_message = "The VFO A RX frequency of " + record.RXFreq +
                    " MHz does not match the transmit frequency of " + record.TXFreq +
                    " MHz and Split is not enabled for the memory record modified or selected.  This is an invalid configuration.\r\n\r\n" +
                    "The VFO A RX frequency will not be updated to the defined memory record value unless Split " +
                    " is enabled in the memory record or the RX and TX frequencies are changed to be the same frequency.\r\n\r\n" +
                    "The VFO A RX frequency will be set in PowerSDR to the Memory record transmit frequency of " + record.TXFreq + " MHz.";
                string memerror_caption = " Data Entry Error - VFO A RX/TX Frequency Mismatch";
                MessageBox.Show(memerror_message, memerror_caption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);
            }

            RX1DSPMode = record.DSPMode;
            VFOAFreq = record.RXFreq;
            TuneStepIndex = TuneStepLookup(record.TuneStep);
            VFOSplit = record.Split;

            if (record.DSPMode == DSPMode.FM)
            {
                CurrentFMTXMode = record.RPTR;
                if (record.Split)
                {
                    TXFreq = record.TXFreq;
                }

                if (record.RPTROffset > 50.0 || record.RPTROffset < 0)
                {
                    string memerror_message = "The Repeater Offset Value of " + record.RPTROffset +
                        " is out of range for the memory record modified or selected.  It must be a value between 0.000 and 50.000.\r\n\r\n" +
                        "Manually change the Repeater Offset value in the Memory record to correct this error.\r\n\r\n" +
                        "A default repeater offset value of 0.000 MHz will be used by PowerSDR until the memory record with the invalid repeater offset is corrected.";
                    string memerror_caption = "Data Entry Error - Repeater Offset";
                    MessageBox.Show(memerror_message, memerror_caption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);

                    record.RPTROffset = 0.0;
                }
                FMTXOffsetMHz = record.RPTROffset;
                CTCSSOn = record.CTCSSOn;
                CTCSSFreq = record.CTCSSFreq;
                FMDeviation_Hz = record.Deviation;
            }
            else
            {
                TXFreq = record.TXFreq;
                RX1Filter = record.RXFilter;
                if (record.RXFilter == Filter.VAR1 || record.RXFilter == Filter.VAR2)
                    UpdateRX1Filters(record.RXFilterLow, record.RXFilterHigh);
            }

            if (record.Power > 100 || record.Power < 0)
            {
                string memerror_message = "The Power Value of " + record.Power +
                           " is out of range for the memory record modified or selected.  It must be a value between 0 and 100.\r\n\r\n" +
                           "Manually change the Power value in the Memory record to correct this error.\r\n\r\n" +
                           "A default Power value of 50 will be used by PowerSDR until the memory record with the invalid Power value is corrected.";
                string memerror_caption = "Data Entry Error - Power";
                MessageBox.Show(memerror_message, memerror_caption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);

                record.Power = 50;
            }
            PWR = record.Power;   
            RX1AGCMode = record.AGCMode;

            if (record.AGCT > 120 || record.AGCT < -20)
            {
                string memerror_message = "The AGC-T Value of " + record.AGCT +
                           " is out of range for the memory record modified or selected.  It must be a value between -20 and 120.\r\n\r\n" +
                           "Manually change the AGC-T value in the Memory record to correct this error.\r\n\r\n" +
                           "A default AGC-T value of 90 will be used by PowerSDR until the memory record with the invalid AGC-T value is corrected.";
                string memerror_caption = "Data Entry Error - AGC-T";
                MessageBox.Show(memerror_message, memerror_caption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1);

                record.AGCT = 90;
            }
            RF = record.AGCT; 
        }

        private void comboFMMemory_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboFMMemory.Items.Count == 0 || comboFMMemory.SelectedItem == null) return;

            MemoryRecord recordToRestore = new MemoryRecord((MemoryRecord)comboFMMemory.SelectedItem);
            if(!initializing)
                RecallMemory(recordToRestore);
        }

        private void btnFMMemoryUp_Click(object sender, EventArgs e)
        {
            if (comboFMMemory.Items.Count == 0 || comboFMMemory.SelectedItem == null) return;
            comboFMMemory.SelectedIndex = (comboFMMemory.SelectedIndex + 1)%comboFMMemory.Items.Count;
        }

        private void btnFMMemoryDown_Click(object sender, EventArgs e)
        {
            if (comboFMMemory.Items.Count == 0 || comboFMMemory.SelectedItem == null) return;
            comboFMMemory.SelectedIndex = (comboFMMemory.SelectedIndex - 1 + comboFMMemory.Items.Count) % comboFMMemory.Items.Count;
        }


        //=================================================================================
        //ke9ns come here when you select a memory from memory interface
        public void changeComboFMMemory(int index)
        {
            if (comboFMMemory.Items.Count == 0) return;

            if (index < 0 || index > comboFMMemory.Items.Count - 1) return;

            if (comboFMMemory.SelectedIndex != index)
            {
                comboFMMemory.SelectedIndex = index;
            }
            else // memory is already set in combobox, recall it
            {
                MemoryRecord recordToRestore = new MemoryRecord((MemoryRecord)comboFMMemory.SelectedItem); // ke9ns restore based on selected item from the FM panel rather than from the memoryform.
            
                RecallMemory(recordToRestore); // ke9ns actually pull up memory
            }
        }




        private void btnFMMemory_Click(object sender, EventArgs e)
        {
            if (memoryForm == null || memoryForm.IsDisposed)
                memoryForm = new MemoryForm(this);
            memoryForm.Show();
            memoryForm.Focus();
            memoryForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

        private void timerNotchZoom_Tick(object sender, EventArgs e)
        {
#if (!NO_TNF)
            const int TOL = 10;

            timerNotchZoom.Enabled = false;
            if (notch_drag_max_delta_x < TOL && notch_drag_max_delta_y < TOL)
            {
                Display.TNFZoom = true;
                notch_zoom = true;
                Display.NotchZoomStartFreq = notch_drag_start.Freq;
            }
#endif
        }

        private void setupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (setupForm == null || setupForm.IsDisposed)
                setupForm = new Setup(this);
            setupForm.Show();
            setupForm.Focus();
            setupForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

        private void memoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (memoryForm == null || memoryForm.IsDisposed) memoryForm = new MemoryForm(this);
            memoryForm.Show();
            memoryForm.Focus();
            memoryForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

        private void waveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (WaveForm.IsDisposed)
                WaveForm = new WaveControl(this);
            WaveForm.Show();
            WaveForm.Focus();
            WaveForm.WindowState = FormWindowState.Normal; // ke9ns add

        }

        private void equalizerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (eqForm == null || eqForm.IsDisposed)
                eqForm = new EQForm(this);
            eqForm.Show();
            eqForm.Focus();
            eqForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

        private void xVTRsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (xvtrForm == null || xvtrForm.IsDisposed)
                xvtrForm = new XVTRForm(this);

            xvtrForm.Show();
            xvtrForm.Focus();
            xvtrForm.WindowState = FormWindowState.Normal; // ke9ns add
        }

        private void cWXToolStripMenuItem_Click(object sender, EventArgs e)
        {

            if ((setupForm != null) && (setupForm.chkKeyPoll.Checked == false))
            {
                if (rx1_dsp_mode == DSPMode.LSB) RX1DSPMode = DSPMode.CWL;
                else if (rx1_dsp_mode == DSPMode.USB) RX1DSPMode = DSPMode.CWU;

                if (rx1_dsp_mode != DSPMode.CWL && rx1_dsp_mode != DSPMode.CWU)
                {
                    MessageBox.Show("The radio must be in CWL or CWU mode in order to open the " +
                        "CWX Control Form.",
                        "CWX Error: Wrong Mode",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                    return;
                }
            }
            //	cw_key_mode = true;
            if (cwxForm == null || cwxForm.IsDisposed)
            {
                cwxForm = new CWX(this);
            }

            cwxForm.Show();
            cwxForm.Focus();
            cwxForm.WindowState = FormWindowState.Normal; // ke9ns add

        } // cWXToolStripMenuItem_Click

        private void uCBToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (ucbForm == null || ucbForm.IsDisposed)
                ucbForm = new UCBForm(this);
            ucbForm.Show();
            ucbForm.Focus();
            ucbForm.WindowState = FormWindowState.Normal; // ke9ns add
        }


       //=========================================================================
       // ke9ns opens up the correct audio mixer board for your flex radio type
       //       this allows you to choose the input and output (assume VAC1 & 2 off)
       //==========================================================================
        private void mixerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (fwc_init || hid_init)
            {
                switch (current_model)
                {
                    case Model.FLEX5000:
                        if (fwcMixForm == null || fwcMixForm.IsDisposed)
                            fwcMixForm = new FWCMixForm(this);
                        fwcMixForm.Show();
                        fwcMixForm.Focus();
                        fwcMixForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
                    case Model.FLEX3000:
                        if (flex3000MixerForm == null || flex3000MixerForm.IsDisposed)
                            flex3000MixerForm = new FLEX3000MixerForm(this);
                        flex3000MixerForm.Show();
                        flex3000MixerForm.Focus();
                        flex3000MixerForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
                    case Model.FLEX1500:
                        if (flex1500MixerForm == null || flex1500MixerForm.IsDisposed)
                            flex1500MixerForm = new FLEX1500MixerForm(this);
                        flex1500MixerForm.Show();
                        flex1500MixerForm.Focus();
                        flex1500MixerForm.WindowState = FormWindowState.Normal; // ke9ns add
                        break;
                }
            }
        }

        private void antennaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (fwc_init && current_model == Model.FLEX5000)
            {
                if (fwcAntForm == null || fwcAntForm.IsDisposed)
                    fwcAntForm = new FWCAntForm(this);
                fwcAntForm.Show();
                fwcAntForm.Focus();
                fwcAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else if (hid_init && current_model == Model.FLEX1500)
            {
                if (hidAntForm == null || hidAntForm.IsDisposed)
                    hidAntForm = new HIDAntForm(this);
                hidAntForm.Show();
                hidAntForm.Focus();
                hidAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
        }

        private void relaysToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //if(fwc_init && current_model == Model.FLEX5000)
            {
                if (flex5000RelayForm == null || flex5000RelayForm.IsDisposed)
                    flex5000RelayForm = new FLEX5000RelayForm(this);
                flex5000RelayForm.Show();
                flex5000RelayForm.Focus();
                flex5000RelayForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
        }

        private void aTUToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (fwc_init && current_model == Model.FLEX5000)
            {
                if (fwcAtuForm == null || fwcAtuForm.IsDisposed)
                    fwcAtuForm = new FWCATUForm(this);
                fwcAtuForm.Show();
                fwcAtuForm.Focus();
            }
            else if (fwc_init && current_model == Model.FLEX3000)
            {
                if (flex3000ATUForm == null || flex3000ATUForm.IsDisposed)
                    flex3000ATUForm = new FLEX3000ATUForm(this);
                flex3000ATUForm.Show();
                flex3000ATUForm.Focus();
            }
        }

        private void flexControlToolStripMenuItem_Click(object sender, EventArgs e)
        {
            switch (current_flexcontrol_mode)
            {
                case FlexControlMode.Basic:
                    if (flexControlBasicForm == null || flexControlBasicForm.IsDisposed)
                        flexControlBasicForm = new FlexControlBasicForm(this);
                    flexControlBasicForm.Show();
                    flexControlBasicForm.Focus();
                  //  flexControlBasicForm.WindowState = FormWindowState.Normal; // ke9ns add
                    break;
                case FlexControlMode.Advanced:
                    if (flexControlAdvancedForm == null || flexControlAdvancedForm.IsDisposed)
                        flexControlAdvancedForm = new FlexControlAdvancedForm(this);
                    flexControlAdvancedForm.Show();
                    flexControlAdvancedForm.Focus();
                 //   flexControlAdvancedForm.WindowState = FormWindowState.Normal; // ke9ns add
                    break;
            }
        }

        private void eSCToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return;

            if (diversityForm == null || diversityForm.IsDisposed)
                diversityForm = new DiversityForm(this);

            diversityForm.Show();
            diversityForm.Focus();
            diversityForm.WindowState = FormWindowState.Normal; // ke9ns add
        }


        private void reportBugToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Thread t = new Thread(new ThreadStart(LaunchBugLink));
            t.Name = "Launch Helpdesk Link Thread";  //W4TME
            t.IsBackground = true;
            t.Priority = ThreadPriority.Normal;
            t.Start();
        }

        private void remoteProfilesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (File.Exists(Application.StartupPath + "\\command.xml"))
            {
                if (ProfileForm == null || ProfileForm.IsDisposed)
                    ProfileForm = new RemoteProfiles(this);
                ProfileForm.Show();
                ProfileForm.Focus();
                ProfileForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else
                MessageBox.Show("You must create at least one remote profile first", "No Profiles Available", MessageBoxButtons.OK);   
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // launch about form here
            if(aboutForm == null || aboutForm.IsDisposed)
                aboutForm = new AboutForm();
            aboutForm.ShowDialog();
            aboutForm.Focus();
        }

        private void herosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if ((fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                            (hid_init && current_model == Model.FLEX1500))
            {
                if (preSelForm == null || preSelForm.IsDisposed)
                    preSelForm = new PreSelForm(this);
                preSelForm.Show();
                preSelForm.Focus();
                preSelForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
        }

        private void UpdateTXProfile(int ndx)
        {
            int cnt = CATTXProfileCount;
            int current = comboTXProfile.SelectedIndex;
            if (ndx != 0 && cnt > 0)
                comboTXProfile.SelectedIndex = 0;
            else if (ndx == 0 && cnt > 0)
                comboTXProfile.SelectedIndex = 1;

            comboTXProfile.SelectedIndex = ndx;
        }

        public bool RX1IsIn60m()
        {
            double freq = VFOAFreq;
            return (freq >= 5.25 && freq <= 5.45); // (freq >= 5.1 && freq <= 5.5);
        }

        public bool RX1IsOn60mChannel(Channel c)
        {
            double freq = VFOAFreq - ModeFreqOffset(rx1_dsp_mode);
            freq = Math.Round(freq, 6);

            return (c.Freq == freq);
        }

        public bool RX1IsOn60mChannel()
        {
            double freq = VFOAFreq - ModeFreqOffset(rx1_dsp_mode);
            freq = Math.Round(freq, 6);

            foreach (Channel c in Display.Channels60m)
            {
                if (c.Freq == freq)
                    return true;
            }

            return false; // nothing matched, return false
        }

        public bool RX2IsIn60m()
        {
            if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return false;

            double freq = VFOBFreq;
            return (freq >= 5.25 && freq <= 5.45); //(freq >= 5.1 && freq <= 5.5)
        }

        public bool RX2IsOn60mChannel(Channel c)
        {
            double freq = VFOBFreq - ModeFreqOffset(rx2_dsp_mode);
            freq = Math.Round(freq, 6);

            return (c.Freq == freq);
        }

        public bool RX2IsOn60mChannel()
        {
            if (!fwc_init || current_model != Model.FLEX5000 || !FWCEEPROM.RX2OK) return false;

            double freq = VFOBFreq - ModeFreqOffset(rx2_dsp_mode);
            freq = Math.Round(freq, 6);

            foreach (Channel c in Display.Channels60m)
            {
                if (c.Freq == freq)
                    return true;
            }

            return false; // nothing matched, return false
        }




        private double ModeFreqOffset(DSPMode mode)
        {
            switch (mode)
            {
                case DSPMode.LSB:
                case DSPMode.DIGL:  
                    return (1500 * 1e-6);
                case DSPMode.USB:
                case DSPMode.DRM:
                case DSPMode.DIGU:  
                    return (-1500 * 1e-6);
                case DSPMode.DSB:
                case DSPMode.CWL:
                case DSPMode.CWU:
                case DSPMode.FM:
                case DSPMode.AM:
                case DSPMode.SAM:   
                    return 0;                
                default: return 0;
            }
        }

        private void radBandVHF3_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void Console_Load(object sender, EventArgs e)
        {
            //   using System.Runtime.InteropServices;
            //  using System.Drawing.Text;

           

        }

        private void panelFilter_Paint(object sender, PaintEventArgs e)
        {

        }


        private void picRX2Meter_MouseUp(object sender, EventArgs e)
        {

        }


        //=======================================================================
        // ke9ns add to move meter up/down
        private void picRX2Meter_MouseUp(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            
            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {
              

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 6; // select appearance tab;
                setupForm.tcAppearance.SelectedIndex = 2; // select  tab meter

            } // right click
            else
            {
                if (setupForm != null)
                {
                    Debug.WriteLine("RX3 " + setupForm.chk2ndMeter.Checked);

                    if (setupForm.chk2ndMeter.Checked == true)
                    {
                        setupForm.chk2ndMeter.Checked = false;

                    }
                    else
                    {
                        setupForm.chk2ndMeter.Checked = true;

                    }

                }

            }



        } // picRX2Meter_MouseUp


        //============================================================================
        //============================================================================ 
        // ke9ns add Clicking on RX1 meter will cycle through 3 meters and 
        // update setup form
        //============================================================================ 
        //============================================================================ 

        private void picMultiMeterDigital_MouseUp(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 6; // select appearance tab;
                setupForm.tcAppearance.SelectedIndex = 2; // select  tab meter

            } // right click
            else
            {

                switch (current_meter_display_mode)
                {

                    case MultiMeterDisplayMode.Edge: // if edge switch to analog
                        meterLMB = false;
                        meterDMB = false;

                        if (setupForm != null)
                        {
                            setupForm.chkBoxLMB.Checked = false;
                            setupForm.chkBoxDMB.Checked = false;

                        }

                        current_meter_display_mode = MultiMeterDisplayMode.Analog; // switch to analog
                        CurrentMeterDisplayMode = current_meter_display_mode;
                        setupForm.MTRSet = "Analog";  // comboMeterType update
                        AnalogMeterBackgroundColor = analog_meter_background_color;

                        break;

                    case MultiMeterDisplayMode.Analog: // if analog switch to TR7

                        if ((meterDMB == false) && (meterLMB == false))
                        {
                            meterLMB = true;
                            meterDMB = false;
                            if (setupForm != null)
                            {
                                setupForm.chkBoxLMB.Checked = true;
                                setupForm.chkBoxDMB.Checked = false;

                            }
                            CurrentMeterDisplayMode = current_meter_display_mode;
                            AnalogMeterBackgroundColor = analog_meter_background_color;
                        }
                        else if (meterLMB == true)
                        {
                            meterLMB = false;
                            meterDMB = true;
                            if (setupForm != null)
                            {
                                setupForm.chkBoxDMB.Checked = true;
                                setupForm.chkBoxLMB.Checked = false;

                            }
                            CurrentMeterDisplayMode = current_meter_display_mode;
                            AnalogMeterBackgroundColor = analog_meter_background_color;
                        }
                        else if (meterDMB == true)
                        {
                            meterLMB = false;
                            meterDMB = false;

                            if (setupForm != null)
                            {
                                setupForm.chkBoxDMB.Checked = false;
                                setupForm.chkBoxLMB.Checked = false;

                            }

                            CurrentMeterDisplayMode = current_meter_display_mode;
                            setupForm.MTRSet = "AnalogTR7";
                            AnalogMeterBackgroundColor = analog_meter_background_color;
                        }

                        break;
                    case MultiMeterDisplayMode.Original: // if already TR7 switch to EDGE

                        current_meter_display_mode = MultiMeterDisplayMode.Edge;
                        CurrentMeterDisplayMode = current_meter_display_mode;
                        setupForm.MTRSet = "Edge";
                        EdgeMeterBackgroundColor = edge_meter_background_color;

                        break;

                } // check which meter you current display and change to the next one


                UpdateDisplay(); // ke9ns add

                btnHidden.Focus();


            } // left mouse click


        } // picMultiMeterDigital_MouseUp



       

        //=========================================================================

        private void radBand160_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void picDisplay_Click(object sender, EventArgs e)
        {

        }

        //============================================================================ 
        //============================================================================ 
        // ke9ns add turn waterfall from color to grayscale
        // this saves display time and remote internet bandwidth
        //============================================================================ 
        //============================================================================ 
        private void GrayMenuItem_Click(object sender, EventArgs e) // ke9ns ADD  // this selects color or gray scale waterfalls
        {

            if (Display.GrayScale == 1) // do if currently GRAY waterfall
            {
                Display.GrayScale = 0;                // change to  RGB
                this.GrayMenuItem.Text = "GrayWtr";
            }
            else  // do if currently Color waterfall
            {
                Display.GrayScale = 1;                 // change to Gray
                this.GrayMenuItem.Text = "ColorWtr";
            }

          //  this.GrayMenuItem.ForeColor = System.Drawing.SystemColors.ControlLightLight;
        
        } //graymenuitem




        //============================================================================ 
        //============================================================================ 
        // ke9ns add clicking on PA temp or volts turns on/off this reading
        // PA reading from the flex take a long time so this is a toggle
        //============================================================================ 
        //============================================================================ 
        private void labelTS4_Click(object sender, EventArgs e) // ke9ns add
        {
            if (PAON == 0)
            {
                PAON = 1;
            }
            else
            {
                PAON = 0;
            }

           

        } //  click on AMPS



        //============================================================================ 
        // ke9ns add 
        private void labelTS3_Click(object sender, EventArgs e) // ke9ns add
        {

            if (PAON == 0)
            {
                PAON = 1;
            }
            else if (PAON == 1)
            {
                PAON = 2;
            }
            else
            {
                PAON = 0;
            }

        } // click on temp


        //============================================================================ 
        //============================================================================ 
        // ke9ns add CALLSIGN menu field allow WaveForm to get text from here
        //============================================================================ 
        //============================================================================ 
        public static string callsign = "CallSign";

        public string Callsign            // wave.cs gets call sign from here
        {
            get { return callsign; }
            set
            {
                // Callsign = setupForm.txtGenCustomTitle.Text;
                callsign = value;

            } // set
        } // tx id

        public static string lastcallsign = " hhh ";

        public string LastCall            // wave.cs gets call sign from here
        {
            get { return lastcallsign; }
            set
            {
                lastcallsign = value;

            } // set
        } // tx id



//=================================================================================================
// ke9ns add   Check for left or right mouse click
//=================================================================================================
        private void callsignTextBox_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            callsignTextBox.ShortcutsEnabled = false; // added to eliminate the contextmenu from popping up

            if (me.Button == System.Windows.Forms.MouseButtons.Right) // right mouse click
            {
               
                string filePath = AppDataPath + "ke9ns8.dat";

                if (!File.Exists(filePath))
                {
                    Debug.WriteLine("problem no ke9ns dat file found ");
                    return;
                }

                 string argument = @"/select, " + filePath;

                System.Diagnostics.Process.Start("explorer.exe", argument);

            }

            if (me.Button == System.Windows.Forms.MouseButtons.Left) // left mouse click
            {
                 WaveForm.CreatePlay = true;   // create wave file            
            }

        } // callsigntextbox mouse down

        //============================================================================ 
        //============================================================================ 
        // ke9ns add change callsign TX waterfall ID text here
        //============================================================================ 
        //============================================================================ 
        private void callsignTextBox_TextChanged_1(object sender, EventArgs e) // ke9ns add
        {
            // Debug.WriteLine("change   ");
            // Process.Start(@"c:\test")

            callsignTextBox.BackColor = Color.LemonChiffon; //to show your editing this callsign field
            callsign = callsignTextBox.Text;
            menuStrip1.Invalidate();
            menuStrip1.Update();

        }


        private static byte callsignfocus = 0; // ke9ns used to keep focus on text entry and not flex keyboard shortcuts

        private void callsignTextBox_MouseEnter(object sender, EventArgs e)// ke9ns add
        {

          //  Debug.WriteLine("Enter  ");

            callsign = callsignTextBox.Text;
            callsignTextBox.BackColor = Color.LemonChiffon;  // to show your editing this callsign field
            callsignfocus = 1;

            callsignTextBox.Focus();


        }

        private void callsignTextBox_MouseLeave(object sender, EventArgs e)// ke9ns add
        {
           // Debug.WriteLine("leaveM   ");
              WaveForm.CreatePlay = true;   // create wave file
              btnHidden.Focus();

              callsignfocus = 0; // ke9ns 
        }

        //============================================================================ 
        //============================================================================ 
        // ke9ns add  call waveform.createBoxTS to create new wave file first.
        //============================================================================ 
        //============================================================================ 
        private void callsignTextBox_Leave(object sender, EventArgs e)// ke9ns add
        {
         //   Debug.WriteLine("leave   ");
            WaveForm.CreatePlay = true;   // create wave file
                                          // "bright" variable controls brightness of txwaterID
        } // callsignTextBox_Leave



        //============================================================================ 
        //============================================================================ 
        // ke9ns add update TX Waterfall ID status from here
        // jump here from either a TXIDMenu click or from WaveForm TXIDBoxTS update
        //============================================================================ 
        //============================================================================ 
        private static byte vac1 = 0;
        public static int Txfh = 0;
        private void TXIDMenuItem_CheckedChanged(object sender, EventArgs e)
        {
          
            if ((TXIDMenuItem.Checked) && (chkPower.Checked))
            {
               
                if (comboDisplayMode.Focused)
                    btnHidden.Focus();

                if (chkVAC1.Checked)
                {
                    vac1 = 1;
                    chkVAC1.Checked = false;
                }
                  chkMOX.Checked = true;     // key radio 
                  WaveForm.TXIDPlay = true;
            }
            else
            {
                 this.TXIDMenuItem.Text = "TX WaterID";
                 WaveForm.TXIDPlay = false;

                if (WIDEWATERID == false)
                {
                    if (Txfh > 0) TXFilterHigh = Txfh;         // put back original filter size
                }

                if (vac1 == 1)
                {
                    vac1 = 0;
                      Thread.Sleep(100);
                    chkVAC1.Checked = true;
                   
                  //  await Task.Delay(3000);
                }
              //  Debug.WriteLine("wating...........");

              //  Thread.Sleep(300);
              //  Task.Delay(200);

                chkMOX.Checked = false;

            }
        } // TXIDMenuItem_CheckedChanged


        //=================================================================================
        //=================================================================================
        //=================================================================================
        // ke9ns add
        public Color Border = Color.DarkGreen;  // color of line around box
        public float BorderThk = 2.2f;   // line thickness around box
        public float BorderOff = (2.2f / 2.0f); // ke9ns offset from edge of box

        public Color BackGround = Color.FromArgb(46, 46, 46); // ke9ns add

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void panelDateTime_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(BackGround), gPath);

            if (txtTimer.ForeColor == Color.Red)
            {
                p.Graphics.DrawPath(new Pen(Color.Yellow, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            }
            else
            {
                p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color
            }

          
        } //panelDateTime_Paint

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpVFOBetween_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(BackGround), gPath);


            if (txtTimer.ForeColor == Color.Red)
            {
                p.Graphics.DrawPath(new Pen(Color.Yellow, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            }
            else
            {
                p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color
            }

        } // grpVFOBetween_Paint

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void panelAntenna_Paint(object sender, PaintEventArgs p)
        {
           
            PanelTS box = (PanelTS)sender; // this is the box we are currently repainting

            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(BackGround), gPath);
            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

           
            int HS = (int)(((float)box.Height / 2.0F) - ((float)box.Height ) * 0.2F);
            int HF = (int)(((float)box.Height / 2.0F) * 0.8F);

            p.Graphics.DrawImage(ant2, new Rectangle(7, HS, 20, HF));


        } // panelAntenna_Paint

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void panelRing_Paint(object sender, PaintEventArgs p)
        {

            PanelTS box = (PanelTS)sender; // this is the box we are currently repainting

            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(BackGround), gPath);
            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color


           


        } // panelRing_Paint


        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void panelOptions_Paint(object sender, PaintEventArgs p)
        {

            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(BackGround), gPath);
            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color


        } // panelOptions



        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void panelTSBandStack_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(BackGround), gPath);
            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            p.Graphics.DrawString("BandStack", box.Font, Brushes.White, 8, 0);

        } // panelTSBandStack_Paint


        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpVFOA_Paint(object sender, PaintEventArgs p)  // ke9ns ADD
        {

            //   Debug.WriteLine("z layer for VFOA1 " + grpVFOA.Parent.Controls.GetChildIndex(grpVFOA));  //7
            //   Debug.WriteLine("z layer for VFOA2 " + grpVFOA.Parent.Controls.GetChildIndex(VFODialA));  //46
            //   Debug.WriteLine("z layer for VFOA3 " + grpVFOA.Parent.Controls.GetChildIndex(VFODialAA));  //2;
            //   VFODialAA.Parent.Controls.SetChildIndex(VFODialAA, 45);


            if ((setupForm != null))
            {
                if ((setupForm.chkVFOOpenFont.Checked == true)) vfoopenfont = true;
                else vfoopenfont = false;


                if ((setupForm.chkVFOBoldFont.Checked == true)) VFOBoldFont = true;
                     else VFOBoldFont = false;


            }



            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width  - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //
         
            p.Graphics.FillPath(new SolidBrush(VFOBackgroundColor), gPath); // VFOBackgroundColor

            if ((MOX) && (chkVFOATX.Checked == true))
            {
                p.Graphics.DrawPath(new Pen(Color.Red, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            }
            else
            {
                p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color
            }

             p.Graphics.DrawString("VFO A", box.Font, Brushes.White, 8, 0);
            //  p.Graphics.DrawImage(vfoa, new Rectangle(-8,-9, 50, 40));


          

        } // grpVFOA_Paint

        float rotA = 0;  // ke9ns add angle of dial for vfoA
        float rotB = 0; // ke9ns add angle of dial for vfoB

      
        public bool dialcheckA = false;  // ke9ns add true = update dial because vfo freq changed
      
        Bitmap rotatedBmp = new Bitmap(300, 300);   //create a new empty bitmap to hold rotated image
        Graphics gA;

        //===================================================================
        // ke9ns add  THREAD old fashioned dial rotation behind the digital values
        private void DIALA()
        {
            do
            {
                Thread.Sleep(10);

                if (dialcheckA == true)
                {
                    dialcheckA = false;

                    rotA = (float)((VFOAFreq % 1.0) * 1000.0); // vfoafreq in mhz
                    rotA = rotA / 2.777777F;  // ke9ns 1000 khz per revolution = 360 deg rotation or 0 to 359 = 0 to 999 khz
                    rotA = 360 - rotA;
                  
                    rotatedBmp.SetResolution(dial.HorizontalResolution, dial.VerticalResolution);
                  
                    gA = Graphics.FromImage(rotatedBmp);   //make a graphics object from the Empty bitmap area
                                      
                    gA.PixelOffsetMode = PixelOffsetMode.HighSpeed;
                  
                    gA.TranslateTransform(dial.Width / 2F, dial.Height / 2F);   //Put the rotation point in the center of the bitmap area
                 
                    gA.RotateTransform(rotA);  //rotate the bitmap area (not the dial image)
                   
                    gA.TranslateTransform(-(dial.Width / 2F), -(dial.Height / 2F));  //move the 0,0 point back to the upper left corner
                   
                    gA.DrawImage(dial, new PointF(0, 0));   //drop dial image onto graphics object that has already been rotated
                   
                    gA = Graphics.FromImage(rotatedBmp);   //make a graphics object from the Empty bitmap area
                    gA.DrawLine(new Pen(Color.Red, 2.0F), dial.Width / 2F, 30, dial.Width / 2F, 150);


                    VFODialA.Image = rotatedBmp;

                  

                } // if (dialcheckA == true)

            } while (vfodial == true);
        } // DIALA

      

        Bitmap rotatedBmpB = new Bitmap(300, 300);   //create a new empty bitmap to hold rotated image
        Graphics gB;
        public bool dialcheckB = false;  // ke9ns add


        //===================================================================
        // ke9ns add  THREAD old fashioned dial rotation behind the digital values
        private void DIALB()
        {
            do
            {
                Thread.Sleep(10);

                if (dialcheckB == true)
                {

                    dialcheckB = false;
                    rotB = (float)((VFOBFreq % 1.0) * 1000.0); // vfobfreq in mhz
                    rotB = rotB / 2.777777F; // ke9ns 1000 khz per revolution = 360 deg rotation or 0 to 359 = 0 to 999 khz
                    rotB = 360 - rotB;
                  
                    rotatedBmpB.SetResolution(dial1.HorizontalResolution, dial1.VerticalResolution);

                    gB = Graphics.FromImage(rotatedBmpB);   //make a graphics object from the empty bitmap

                    gB.PixelOffsetMode = PixelOffsetMode.HighSpeed;
                    

                    gB.TranslateTransform(dial1.Width / 2F, dial1.Height / 2F);   //Put the rotation point in the center of the bitmap area

                    gB.RotateTransform(rotB);  //rotate the empty bitmap area
               
                    gB.TranslateTransform(-(dial1.Width / 2F), -(dial1.Height / 2F));  //move 0,0 back to upper left corner
                 
                    gB.DrawImage(dial1, new PointF(0, 0));   //drop your image into previously rotated bitmap

                    gB = Graphics.FromImage(rotatedBmpB);   //take this new image and put it back into a bitmap
                    gB.DrawLine(new Pen(Color.Red, 2.0F), dial1.Width / 2F, 30, dial1.Width / 2F, 150); // draw red line

                    VFODialB.Image = rotatedBmpB;
                   
                   
                }

            } while (vfodial == true);

        } // DIALB



    
        private void grpVFOA_MouseHover(object sender, EventArgs e)
        {
            grpVFOA.Invalidate();

        }

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpVFOB_Paint(object sender, PaintEventArgs p)
        {
            if ((setupForm != null))
            {
                if ((setupForm.chkVFOOpenFont.Checked == true)) vfoopenfont = true;
                else vfoopenfont = false;

                if ((setupForm.chkVFOBoldFont.Checked == true)) VFOBoldFont = true;
                else VFOBoldFont = false;


            }

            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 8, true, true, true, true); //

            p.Graphics.FillPath(new SolidBrush(VFOBackgroundColor), gPath); // VFOBackgroundColor

            if ((MOX) && (chkVFOBTX.Checked == true))
            {
                p.Graphics.DrawPath(new Pen(Color.Red, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

            }
            else
            {
                p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color
            }

            p.Graphics.DrawString("VFO B", box.Font, Brushes.White, 8, 0);

        } //grpVFOB_Paint

        private void grpVFOB_MouseHover(object sender, EventArgs e)
        {
            grpVFOB.Invalidate();
        }


        Color Border1 = Color.DarkGreen;

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpMultimeter_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;


            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 4, true, true, true, true); //

            if (meterLMB == true) // ke9ns v1 (light colored meter)
            {
                LinearGradientBrush P = new LinearGradientBrush(box.ClientRectangle, Color.FromArgb(218,218,189), Color.FromArgb(243,244,211), LinearGradientMode.Horizontal);

               
                p.Graphics.FillPath(P, gPath); // new SolidBrush(Color.FromArgb(0xff,0xff,0xe4))
                p.Graphics.DrawString("RX1 Meter          TX Meter", box.Font, Brushes.Black, 8, 2);

                txtMultiText.ForeColor = Color.Black;
               txtMultiText.BackColor = Color.FromArgb(0xff, 0xff, 0xe4);
              

            }
            else if (meterDMB == true)  // ke9ns (dark colored meter)
            {

               LinearGradientBrush P = new LinearGradientBrush(box.ClientRectangle, Color.FromArgb(64, 64, 55), Color.FromArgb(139, 139, 125), LinearGradientMode.Horizontal);


                p.Graphics.FillPath(P, gPath); // new SolidBrush(Color.FromArgb(146, 146, 140))
                p.Graphics.DrawString("RX1 Meter          TX Meter", box.Font, Brushes.White, 8, 2);

                txtMultiText.ForeColor = Color.Black;
               txtMultiText.BackColor = Color.FromArgb(139,139,125);
              

            }
            else
            {


                p.Graphics.FillPath(new SolidBrush(AnalogMeterBackgroundColor), gPath);
                p.Graphics.DrawString("RX1 Meter          TX Meter", box.Font, Brushes.White, 8, 2);

                txtMultiText.ForeColor = MeterDigitalTextColor;
                txtMultiText.BackColor = MeterDigitalBackgroundColor;
            }

            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color


        } // grpMultimeter_Paint

        //=================================================================================
        // ke9ns add to draw curved colored line around groupbox
        private void grpRX2Meter_Paint(object sender, PaintEventArgs p)
        {
            PanelTS box = (PanelTS)sender;
            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            GraphicsPath gPath = CreatePath(1, 1, box.Width - BorderThk, box.Height - BorderThk, 4, true, true, true, true); //
    
                    
            if (meterLMB == true)
            {
                LinearGradientBrush P = new LinearGradientBrush(box.ClientRectangle, Color.FromArgb(218, 218, 189), Color.FromArgb(243, 244, 211), LinearGradientMode.Horizontal);

                p.Graphics.FillPath(P, gPath); // color of the light meter background  new SolidBrush(Color.FromArgb(0xff, 0xff, 0xe4))

                if (FWCEEPROM.RX2OK)  // if no 2nd receiver then make the 2nd meter visable
                {
                    p.Graphics.DrawString("RX2 Meter          TX Meter(2nd)", box.Font, Brushes.Black, 8, 2);
                }
                else
                {
                    p.Graphics.DrawString("TX Meter(2nd)", box.Font, Brushes.Black, 88, 2);
                }
              
                
                //  grpRX2Meter.Text = "------------------------ TX Meter (2nd)";

                txtRX2Meter.ForeColor = Color.Black;
                txtRX2Meter.BackColor = Color.FromArgb(0xff, 0xff, 0xe4);
            }
            else if (meterDMB == true)
            {
                LinearGradientBrush P = new LinearGradientBrush(box.ClientRectangle, Color.FromArgb(64, 64, 55), Color.FromArgb(139, 139, 125), LinearGradientMode.Horizontal);
                 
                p.Graphics.FillPath(P, gPath); // color of the dark meter background new SolidBrush(Color.FromArgb(146,146,140))
                if (FWCEEPROM.RX2OK)  // if no 2nd receiver then make the 2nd meter visable
                {
                    p.Graphics.DrawString("RX2 Meter          TX Meter(2nd)", box.Font, Brushes.White, 8, 2);
                }
                else
                {
                    p.Graphics.DrawString("TX Meter(2nd)", box.Font, Brushes.White, 88, 2);
                }

                txtRX2Meter.ForeColor = Color.Black;
                //  txtRX2Meter.BackColor = Color.FromArgb(146, 146, 140);
                txtRX2Meter.BackColor = Color.FromArgb(139,139,125);
            }
            else
            {
                p.Graphics.FillPath(new SolidBrush(AnalogMeterBackgroundColor), gPath);

                if (FWCEEPROM.RX2OK)  // if no 2nd receiver then make the 2nd meter visable
                {
                    p.Graphics.DrawString("RX2 Meter          TX Meter(2nd)", box.Font, Brushes.White, 8, 2);
                }
                else
                {
                    p.Graphics.DrawString("TX Meter(2nd)", box.Font, Brushes.White, 88, 2);
                }

                txtRX2Meter.ForeColor = MeterDigitalTextColor;
                txtRX2Meter.BackColor = MeterDigitalBackgroundColor;
            }

            p.Graphics.DrawPath(new Pen(ring_vfo_color, BorderThk), gPath); // ke9ns take color from setup Ring VFO color

        } //  grpRX2Meter_Paint


        //=======================================================================================================
        //=======================================================================================================
        //  grpVFOA.Paint += PaintBorderlessGroupBox;
        // ke9ns add draw rounded box around groupbox (but prefer to use the grpVFOA_PAINT event instead of this)
        private void PaintBorderlessGroupBox(object sender, PaintEventArgs p)
        {
            GroupBoxTS box = (GroupBoxTS)sender;

            GraphicsPath gPath = CreatePath(0, 0, box.Width - 1, box.Height - 1, 4, true, true, true, true); //

            p.Graphics.Clear(Color.Transparent);  // box.Parent.BackColor

            p.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            p.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            p.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

            p.Graphics.FillPath(new SolidBrush(Color.Transparent), gPath);
            p.Graphics.DrawPath(new Pen(Color.Green, 2.2f), gPath);

            p.Graphics.DrawString(box.Text, box.Font, Brushes.White, 8, 0);

        } // PaintBorderlessGroupBox






        //  ToolTip tt = new ToolTip();
        private void TXIDMenuItem_MouseHover(object sender, EventArgs e)
        {
           //  tt.Show("Click 'LIVE ...", this.menuStrip1, 10000);
           
        }


        //=======================================================================
        // ke9ns add  PLAY button opens folder 
        //=======================================================================
        private void ckQuickRec_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if (me.Button == System.Windows.Forms.MouseButtons.Right)
            {
/*
                if (WaveForm.IsDisposed)
                    WaveForm = new WaveControl(this);
                WaveForm.Show();
                WaveForm.Focus();

            */
                
                                string filePath = AppDataPath + "ke9ns8.dat";
                                string filePath1 = AppDataPath + "QuickAudio\\";


                                if (WaveForm.chkQuickAudioFolder.Checked == false) // ke9ns do below if standard quickqudio
                                {
                                    if (!File.Exists(filePath))
                                    {
                                        Debug.WriteLine("problem no ke9ns dat file found");
                                        return;
                                    }

                                    string argument = @"/select, " + filePath;
                                 //   Debug.WriteLine("filepath " + argument);

                                    System.Diagnostics.Process.Start("explorer.exe", argument);
                                }
                                else // do below if subfolder sequential quickaudio
                                {


                                    if (!Directory.Exists(filePath1))
                                    {
                                        // create PowerSDR audio folder if it does not exist
                                        //  Directory.CreateDirectory(wave_folder);
                                        Debug.WriteLine("problem no ke9ns dat file found");
                                        return;

                                    }
                                    string argument = @"/select, " + filePath1;

                                 //   Debug.WriteLine("filepath1 " + argument);

                                    System.Diagnostics.Process.Start("explorer.exe", argument);

                                } // 

                          

            } // right mouse button click


        } // ckQuickRec_MouseDown



        //============================================================================ 
        //============================================================================ 
        // ke9ns add Click here to 1 time autoadjust waterfall level
        //============================================================================ 
        //============================================================================ 
        public void autoBrightBox_Click(object sender, EventArgs e)
        {

          
            if (Display.continuum == 0)
            {
                Display.AutoBright = 1; // adjust RX or TX
            }
            else // in continuum mode so restart
            {
                Display.K14 = 0; // click to restart continuum 
            }

            btnHidden.Focus();  

            
        } // autoBrightBox_Click


        //============================================================================ 
        //============================================================================ 
        // ke9ns add Scanner function
        //============================================================================ 
        //============================================================================ 
        private void ScanMenuItem_Click(object sender, EventArgs e)
        {
            if (ScanForm == null || ScanForm.IsDisposed)
                ScanForm = new ScanControl(this);
            ScanForm.Show();
            ScanForm.Focus();
            ScanForm.WindowState = FormWindowState.Normal; // ke9ns add

        }  //  ScanMenuItem_Click



        //===============================================================================================
        // ke9ns add GENERAL SWL BANDS here

        private void radBandGEN0_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("LMF"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_LMF_index = (band_LMF_index - 1 + band_LMF_register) % band_LMF_register;
                else
                    band_LMF_index = (band_LMF_index + 1) % band_LMF_register;
            }
            last_band = "LMF";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_LMF_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();

        } // MF or AM band in USA

        private void radBandGEN1_Click(object sender, EventArgs e)
        {
              SaveBand();
         
            if (last_band.Equals("120M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                {
                      band_120m_index = (band_120m_index - 1 + band_120m_register) % band_120m_register;
                 }
                else
                {
                       band_120m_index = (band_120m_index + 1) % band_120m_register; // ke9ns get the remainder as an index for the next bandstack
                 }
            }
            last_band = "120M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_120m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 120m

        private void radBandGEN2_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("90M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_90m_index = (band_90m_index - 1 + band_90m_register) % band_90m_register;
                else
                    band_90m_index = (band_90m_index + 1) % band_90m_register;
            }
            last_band = "90M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_90m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 90m

        private void radBandGEN3_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("61M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_61m_index = (band_61m_index - 1 + band_61m_register) % band_61m_register;
                else
                    band_61m_index = (band_61m_index + 1) % band_61m_register;
            }
            last_band = "61M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_61m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 60m

        private void radBandGEN4_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("49M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_49m_index = (band_49m_index - 1 + band_49m_register) % band_49m_register;
                else
                    band_49m_index = (band_49m_index + 1) % band_49m_register;
            }
            last_band = "49M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_49m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 49m

        private void radBandGEN5_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("41M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_41m_index = (band_41m_index - 1 + band_41m_register) % band_41m_register;
                else
                    band_41m_index = (band_41m_index + 1) % band_41m_register;
            }
            last_band = "41M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_41m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 41m

        private void radBandGEN6_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("31M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_31m_index = (band_31m_index - 1 + band_31m_register) % band_31m_register;
                else
                    band_31m_index = (band_31m_index + 1) % band_31m_register;
            }
            last_band = "31M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_31m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } //31m

        private void radBandGEN7_CheckedChanged(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("25M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_25m_index = (band_25m_index - 1 + band_25m_register) % band_25m_register;
                else
                    band_25m_index = (band_25m_index + 1) % band_25m_register;
            }
            last_band = "25M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_25m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 25m

        private void radBandGEN8_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("22M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_22m_index = (band_22m_index - 1 + band_22m_register) % band_22m_register;
                else
                    band_22m_index = (band_22m_index + 1) % band_22m_register;
            }
            last_band = "22M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_22m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 22m

        private void radBandGEN9_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("19M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_19m_index = (band_19m_index - 1 + band_19m_register) % band_19m_register;
                else
                    band_19m_index = (band_19m_index + 1) % band_19m_register;
            }
            last_band = "19M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_19m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 19m

        private void radBandGEN10_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("16M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_16m_index = (band_16m_index - 1 + band_16m_register) % band_16m_register;
                else
                    band_16m_index = (band_16m_index + 1) % band_16m_register;
            }
            last_band = "16M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_16m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } //16m

        private void radBandGEN11_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("14M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_14m_index = (band_14m_index - 1 + band_14m_register) % band_14m_register;
                else
                    band_14m_index = (band_14m_index + 1) % band_14m_register;
            }
            last_band = "14M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_14m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 14m

        private void radBandGEN12_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("13M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_13m_index = (band_13m_index - 1 + band_13m_register) % band_13m_register;
                else
                    band_13m_index = (band_13m_index + 1) % band_13m_register;
            }
            last_band = "13M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_13m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();
        } // 13m 

        private void radBandGEN13_Click(object sender, EventArgs e)
        {
            SaveBand();
            if (last_band.Equals("11M"))
            {
                if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                    band_11m_index = (band_11m_index - 1 + band_11m_register) % band_11m_register;
                else
                    band_11m_index = (band_11m_index + 1) % band_11m_register;
            }
            last_band = "11M";

            string filter, mode;
            double freq;
            if (DB.GetBandStack(last_band, band_11m_index, out mode, out filter, out freq))
            {
                 if (filter.Contains("@"))  filter = filter.Substring(0, (filter.Length) - 1); // ke9ns add for bandstack lockout

                SetBand(mode, filter, freq);
            }
            UpdateWaterfallLevelValues();

        } // 11m


        //==========================================================================
        // ke9ns add RIGHT CLICK to add bandstack to list
        private void radBand160_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

          
            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right)) // regband is 1 when control key held down
            {
              if (band_160m_register < 10)
                    DB.AddBandStack("160M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
             
            } // right click



        } //  radBand160_MouseDown

        private void radBand80_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_80m_register < 10)
                    DB.AddBandStack("80M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click

        }//  radBand80_MouseDown

        private void radBand60_MouseDown(object sender, MouseEventArgs e)
        {
            // channelized

        }

        private void radBand40_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_40m_register < 10)
                    DB.AddBandStack("40M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq

                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click

        }

        private void radBand30_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_30m_register < 10)
                    DB.AddBandStack("30M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click

        }

        private void radBand20_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_20m_register < 10)
                    DB.AddBandStack("20M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click

        }

        private void radBand17_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_17m_register < 10)
                    DB.AddBandStack("17M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();
            } // right click
        }

        private void radBand15_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_15m_register < 10)
                    DB.AddBandStack("15M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBand12_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_12m_register < 10)
                    DB.AddBandStack("12M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBand10_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_10m_register < 10)
                    DB.AddBandStack("10M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBand6_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_6m_register < 10)
                    DB.AddBandStack("6M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN0_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_LMF_register < 10)
                    DB.AddBandStack("LMF", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN1_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_120m_register < 10)
                  DB.AddBandStack("120M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN2_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_90m_register < 10)
                    DB.AddBandStack("90M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN3_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_61m_register < 10)
                    DB.AddBandStack("61M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN4_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_49m_register < 10)
                    DB.AddBandStack("49M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                 if (band_160m_register < 10)
             UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN5_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_41m_register < 10)
                    DB.AddBandStack("41M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN6_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_31m_register < 10)
                    DB.AddBandStack("31M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN7_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_25m_register < 10)
                    DB.AddBandStack("25M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN8_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_22m_register < 10)
                    DB.AddBandStack("22M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN9_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_19m_register < 10)
                    DB.AddBandStack("19M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN10_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_16m_register < 10)
                    DB.AddBandStack("16M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN11_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_14m_register < 10)
                    DB.AddBandStack("14M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN12_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_13m_register < 10)
                    DB.AddBandStack("13M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandGN13_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_11m_register < 10)
                    DB.AddBandStack("11M", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF0_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_vhf0_register < 10)
                    DB.AddBandStack("VHF0", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF1_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_vhf1_register < 10)
                    DB.AddBandStack("VHF1", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF2_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_vhf2_register < 10)
                    DB.AddBandStack("VHF2", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF3_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf3_register < 10)
                    DB.AddBandStack("VHF3", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF4_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf4_register < 10)
                    DB.AddBandStack("VHF4", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF5_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf5_register < 10)
                    DB.AddBandStack("VHF5", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }



        private void radBandVHF6_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf6_register < 10)
                    DB.AddBandStack("VHF6", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF7_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf7_register < 10)
                    DB.AddBandStack("VHF7", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF8_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf8_register < 10)
                    DB.AddBandStack("VHF8", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF9_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf9_register < 10)
                    DB.AddBandStack("VHF9", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF10_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf10_register < 10)
                    DB.AddBandStack("VHF10", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF11_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf11_register < 10)
                    DB.AddBandStack("VHF11", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }

        private void radBandVHF12_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf12_register < 10)
                    DB.AddBandStack("VHF12", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        private void radBandVHF13_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (band_vhf13_register < 10)
                    DB.AddBandStack("VHF13", rx1_dsp_mode.ToString(), rx1_filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq
                UpdateBandStackRegisters();
                UpdateBandButtonColors();

            } // right click
        }


        //====================================================================================================
        // ke9ns
        public bool SWLFORM
        {
            get {
                return false;
                }
            set {
                  if (SwlForm == null || SwlForm.IsDisposed) SwlForm = new SwlControl(this); // ke9ns add communicate with swl list controls

                   SwlForm.Show();
                   SwlForm.Focus();
                   SwlForm.WindowState = FormWindowState.Normal; // ke9ns add


                // = value;
            }
        }
       

        //====================================================================================================
        //====================================================================================================
        // ke9ns add 
        private void spotterMenu_Click(object sender, EventArgs e)
        {

            if (SpotForm == null || SpotForm.IsDisposed)  SpotForm = new SpotControl(this);
         
           SpotForm.Show();
           SpotForm.Focus();
           SpotForm.WindowState = FormWindowState.Normal; // ke9ns add

          

            //   Debug.WriteLine("SPOTTER CLICK");
            /*
                        if (spotterMenu.Checked == false)  //
                        {
                            spotterMenu.Checked = true;
                          //  spotterMenu.Text = "Spotting";
                        }
                        else
                        {
                            spotterMenu.Checked = false;
                            spotterMenu.Text = "Spotter";
                        }
            */


        } //  spotterMenu_Click

        //====================================================================================================
        // ke9ns add 
        private void trackMenuItem1_Click(object sender, EventArgs e)
        {
          
            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);
            SpotForm.btnTrack_Click(this, EventArgs.Empty);


        } // trackMenuItem1_Click

        //====================================================================================================
        // ke9ns add 
        private void dxspotMenuItem1_Click(object sender, EventArgs e)
        {
            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

            SpotForm.Show();
         
            SpotForm.WindowState = FormWindowState.Minimized; // ke9ns add

            SpotForm.spotSSB_Click(this, EventArgs.Empty);

        } // dxspotMenuItem1_Click



        //====================================================================================================
        // ke9ns add 
        private void spotterMenuItem1_Click(object sender, EventArgs e)
        {

            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

            SpotForm.Show();
            SpotForm.Focus();
            SpotForm.WindowState = FormWindowState.Normal; // ke9ns add

        } // spotterMenuItem1_Click

      
        //====================================================================================================
        // ke9ns add 
        private void swlMenuItem1_Click(object sender, EventArgs e)
        {
            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

            SpotForm.SWLbutton_Click(this, EventArgs.Empty);

         //   swlsearchMenuItem1.Enabled = true;

        } // swlMenuItem1_Click

        //====================================================================================================
        // ke9ns add 
        private void swlsearchMenuItem1_Click(object sender, EventArgs e)
        {
            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

           
            if (SpotControl.SP1_Active == 0) // if swl list not loaded up, do it now.
            {
                SpotForm.SWLbutton_Click(this, EventArgs.Empty);
            }

            if (SwlForm == null || SwlForm.IsDisposed) SwlForm = new SwlControl(this); // ke9ns add communicate with swl list controls

            if (SpotControl.SP3_Active == 1) // if swl list not loaded up, do it now.
            {
                SwlForm.Show();
                SwlForm.Focus();
                SwlForm.WindowState = FormWindowState.Normal; // ke9ns add
            }

        } // swlsearchMenuItem1_Click

        //====================================================================================================
        // ke9ns add 
        private void trackMenuItem2_Click(object sender, EventArgs e)
        {
            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

            SpotForm.btnTrack_Click(this, EventArgs.Empty);

          //  propMenuItem1.Enabled = true;

        } // trackMenuItem2_Click


        //====================================================================================================
        // ke9ns add 
        private void propMenuItem1_Click(object sender, EventArgs e)
        {

            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

            if (SpotControl.SP5_Active == 0) // if tracking map not running, do it now
            {
                SpotForm.btnTrack_Click(this, EventArgs.Empty);

                if (SpotForm.checkBoxMUF.Checked == true) return;
            }


            if (SpotForm.checkBoxMUF.Checked == false)
            {
                SpotForm.checkBoxMUF.Checked = true;
            }
            else
            {
                SpotForm.checkBoxMUF.Checked = false;
            }


       } // propMenuItem1_Click







        //====================================================================================================
        //====================================================================================================
        // ke9ns add Thread routine
        private void spotterMenu_CheckedChanged(object sender, EventArgs e)
        {

         //   Debug.WriteLine("SPOTTER change");

          /*  
            if (spotterMenu.Checked == true)  // if checked open up dx cluster
            {
                if (setupForm.txtGenCustomTitle.Text != null)
                {
                    SP_Active = 1;
                    Thread t = new Thread(new ThreadStart(SPOTTER));
                    t.Name = "Spotter Thread";
                    t.IsBackground = true;
                    t.Priority = ThreadPriority.Normal;
                    t.Start();
                }

             //   Debug.WriteLine("start DX SPOT thread");


            } // dx spotter using spider.ham-radio-deluxe.com port 8000
            else
            {

             //   Debug.WriteLine("END DX SPOT thread");

                SP_Active = 0;

            }

            */

        } // spotterMenu_CheckedChanged





        //===================================================================================
        // ke9ns add setup DX spider cluster by right clicking
        public void spotterMenu_MouseDown(object sender, MouseEventArgs e)
        {

            /*
            MouseEventArgs me = (MouseEventArgs)e;


            if (me.Button == System.Windows.Forms.MouseButtons.Right)
            {
                if (SpotForm == null || SpotForm.IsDisposed)
                   SpotForm = new SpotControl(this);

                    SpotForm.Show();
                   SpotForm.Focus();

            }

    */
        } //spotterMenu_MouseDown


        //=================================================================================================
        // ke9ns add right click to open VAC panel directly
        private void chkVAC1_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ( (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 1; // select audio tab;
                setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
                setupForm.chkAudioIQtoVAC.Focus();
            

            } // right click
        }

        //=================================================================================================
        // ke9ns add right click to open VAC panel directly
        private void chkVAC2_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ( (me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);
                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 1; // select audio tab;
                setupForm.tcAudio.SelectedIndex = 2; // select vac2 tab
                setupForm.chkVAC2DirectIQ.Focus();



            } // right click
        } // chkVAC2_MouseDown


        // ke9ns add
        private void comboTXProfile_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 4; // select audio tab;
            
                //   setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
            //    setupForm.chkAudioIQtoVAC.Focus();

            } // right click
        } // comboTXProfile_MouseDown

        // ke9ns add
        private void lblAntRX1_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (fwc_init && current_model == Model.FLEX5000)
                {
                    if (fwcAntForm == null || fwcAntForm.IsDisposed)
                        fwcAntForm = new FWCAntForm(this);
                    fwcAntForm.Show();
                    fwcAntForm.Focus();
                    fwcAntForm.WindowState = FormWindowState.Normal; // ke9ns add
                }
                else if (hid_init && current_model == Model.FLEX1500)
                {
                    if (hidAntForm == null || hidAntForm.IsDisposed)
                        hidAntForm = new HIDAntForm(this);
                    hidAntForm.Show();
                    hidAntForm.Focus();
                    hidAntForm.WindowState = FormWindowState.Normal; // ke9ns add
                }

            } // right click
        }

        // ke9ns add
        private void lblAntTX_Click(object sender, EventArgs e)
        {
            if (fwc_init && current_model == Model.FLEX5000)
            {
                if (fwcAntForm == null || fwcAntForm.IsDisposed)
                    fwcAntForm = new FWCAntForm(this);
                fwcAntForm.Show();
                fwcAntForm.Focus();
                fwcAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else if (hid_init && current_model == Model.FLEX1500)
            {
                if (hidAntForm == null || hidAntForm.IsDisposed)
                    hidAntForm = new HIDAntForm(this);
                hidAntForm.Show();
                hidAntForm.Focus();
                hidAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
        }

        // ke9ns add
        private void lblAntRX1_Click(object sender, EventArgs e)
        {
            if (fwc_init && current_model == Model.FLEX5000)
            {
                if (fwcAntForm == null || fwcAntForm.IsDisposed)
                    fwcAntForm = new FWCAntForm(this);
                fwcAntForm.Show();
                fwcAntForm.Focus();
                fwcAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else if (hid_init && current_model == Model.FLEX1500)
            {
                if (hidAntForm == null || hidAntForm.IsDisposed)
                    hidAntForm = new HIDAntForm(this);
                hidAntForm.Show();
                hidAntForm.Focus();
                hidAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
        }

        // ke9ns add
        private void lblAntRX2_Click(object sender, EventArgs e)
        {
            if (fwc_init && current_model == Model.FLEX5000)
            {
                if (fwcAntForm == null || fwcAntForm.IsDisposed)
                    fwcAntForm = new FWCAntForm(this);
                fwcAntForm.Show();
                fwcAntForm.Focus();
                fwcAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
            else if (hid_init && current_model == Model.FLEX1500)
            {
                if (hidAntForm == null || hidAntForm.IsDisposed)
                    hidAntForm = new HIDAntForm(this);
                hidAntForm.Show();
                hidAntForm.Focus();
                hidAntForm.WindowState = FormWindowState.Normal; // ke9ns add
            }
        }

        // ke9ns add (right click )
        private void chkRXEQ_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (eqForm == null || eqForm.IsDisposed)
                    eqForm = new EQForm(this);
                eqForm.Show();
                eqForm.Focus();
                eqForm.WindowState = FormWindowState.Normal; // ke9ns add


            } // right click
        }

        // ke9ns add (right click )
        private void chkTXEQ_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (eqForm == null || eqForm.IsDisposed)
                    eqForm = new EQForm(this);
                eqForm.Show();
                eqForm.Focus();
                eqForm.WindowState = FormWindowState.Normal; // ke9ns add
                                                           //   setupForm.tcSetup.SelectedIndex = 4; // select audio tab;

                //   setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
                //    setupForm.chkAudioIQtoVAC.Focus();


            } // right click
            
        }

        private void comboVACSampleRate_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 1; // select audio tab;
                setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
                setupForm.chkAudioIQtoVAC.Focus();


            } // right click
        }

        //ke9ns add
        private void comboFMTXProfile_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 4; // select audio tab;

                //   setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
                //    setupForm.chkAudioIQtoVAC.Focus();

            } // right click
        }

        // ke9ns add
        private void ptbMic_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

            } // right click
        }


        // ke9ns add
        private void ptbDX_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

            } // right click
        }

        // ke9ns add
        private void ptbCPDR_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

            } // right click
        }


        // ke9ns add
        private void ptbVOX_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

            } // right click
        }

        // ke9ns add
        private void chkNB_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }

        // ke9ns add
        private void chkDSPNB2_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }


        // ke9ns add
        private void chkANF_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }


        // ke9ns add
        private void chkNR_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab
               
            } // right click
        }

        // ke9ns add
        private void chkRX2NR_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }

        private void chkRX2ANF_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }

        private void chkRX2NB_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }

        private void chkRX2NB2_MouseDown(object sender, MouseEventArgs e)
        {

            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }

        // ke9ns add
        private void btnTNFAdd_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }

        // ke9ns add
        private void chkTNF_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 3; // select dsp tab;
                setupForm.tcDSP.SelectedIndex = 0; // select Options tab

            } // right click
        }


        // ke9ns add to go directly to gray line color section
        private void btnDisplayPanCenter_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 6; // select appearance tab;
                setupForm.tcAppearance.SelectedIndex = 1; // select  tab

            } // right click
        }

        private void chkTUN_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                if (setupForm.chkBoxPulser.Checked == false)
                {
                    setupForm.chkBoxPulser.Checked = true;
                    chkFWCATU.Enabled = false;

                }
                else
                {
                    setupForm.chkBoxPulser.Checked = false;
                    chkFWCATU.Enabled = true;
                }

               

            } // right click
            else if ((me.Button == System.Windows.Forms.MouseButtons.Middle))
            {
                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 4; // select transmit tab;
                               

            }

        } // chkTUN_MouseDown(


        // ke9ns add for auto adjusting panadapter min level (keep the base line signal on the screen)
        private void autoBrightBox_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            autoBrightBox.ShortcutsEnabled = false; // added to eliminate the contextmenu from popping up

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {
                autoBrightBox.ForeColor = Color.LightPink;

                if (Display.continuum == 0)
                {
                    Display.AutoBright = 2; // adjust RX  panadapter level
                }
                else // in continuum mode so restart
                {
                 //   Display.K14 = 0; // click to restart continuum 
                }

                btnHidden.Focus();


            } // right click
            else
            {
                autoBrightBox.ForeColor = Color.LightSkyBlue;
            }


        } // autobrightbox_mousedown

        private void chkEnableMultiRX_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (rx2_enabled)
                {
                    VFOASubFreq = VFOAFreq; // ke9ns add start with sub on top of vfoA
                    UpdateVFOASub();

                }
                else
                {
                    VFOBFreq = VFOAFreq; // ke9ns add  start with B synced to A
                }


            } // right click

        } // chkEnableMultiRX_MouseDown

        private void ptbDisplayPan_MouseDown(object sender, MouseEventArgs e)
        {
          
        }

        private void ptbDisplayPan_MouseUp(object sender, MouseEventArgs e)
        {
          
        }


        // ke9ns add right click over ZOOM label goes directly to setup->display
        public bool AutoPanScale = false;  // ke9ns add true = readjust the pan scale for small signals, false = go back to large scale pan
        public int AutoPanScaleMin = -140; // ke9ns
        public int AutoPanScaleMax = -20; // ke9ns
        public int AutoPanScaleStep = 10; // ke9ns

        public bool ZZOOM = false; // ke9ns to allow TNFZOOM feature without TNF ON

        private void lblDisplayZoom_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;
            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (ZZOOM == false)
                {
                    Display.NotchZoomStartFreq = VFOAFreq; // in mhz
                    Display.TNFZoom = true;
                    ZZOOM = true;
                }
                else
                {
                    Display.TNFZoom = false;
                    ZZOOM = false;
                }

                Debug.WriteLine("TNFZOOM");


             /*
                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 2; // select Display tab;
              */
            
            } // right click
            else // ke9ns left click to adjust pan scale 
            {
                if (Display.continuum == 0)
                {
                    if (AutoPanScale == true)
                    {
                        lblDisplayZoom.ForeColor = Color.White; // ke9ns turn back to white when viewing standard scale signals
                        AutoPanScale = false;
                        Display.AutoBright = 4; // adjust RX pan scale to standard signals
                    }
                    else
                    {
                        lblDisplayZoom.ForeColor = Color.Red; // ke9ns turn ZOOM text red to indicate your viewing small scale
                        AutoPanScale = true;
                        AutoPanScaleMin = Display.SpectrumGridMin; // ke9ns store original value so you can go back when you toggle to standard signals again
                        AutoPanScaleMax = Display.SpectrumGridMax;
                        AutoPanScaleStep = Display.SpectrumGridStep;

                        Display.AutoBright = 3; // adjust RX pan scale to small signals

                    }


                    Debug.WriteLine("AutoPanScale = " + AutoPanScale);
                }

            }
        }

        //===================================================================
        // ke9ns add  VAC system PC volume control
        private void ptbVAC_Scroll(object sender, EventArgs e)
        {

        }

        //===========================================================================================
        // ke9ns add allow 2nd meter function for TX function
        private void comboMeterTX1Mode_SelectedIndexChanged(object sender, EventArgs e)
        {
            MeterTXMode mode = MeterTXMode.FIRST;
            if (comboMeterTX1Mode.Items.Count == 0 || comboMeterTX1Mode.SelectedIndex < 0)
            {
                //current_meter_tx_mode = MeterTXMode.FIRST;
            }
            else
            {
                switch (comboMeterTX1Mode.Text)
                {
                    case "Fwd Pwr":
                        mode = MeterTXMode.FORWARD_POWER;
                        break;
                    case "Ref Pwr":
                        mode = MeterTXMode.REVERSE_POWER;
                        break;
                    case "Mic":
                        mode = MeterTXMode.MIC;
                        break;
                    case "EQ":
                        mode = MeterTXMode.EQ;
                        break;
                    case "Leveler":
                        mode = MeterTXMode.LEVELER;
                        break;
                    case "Lev Gain":
                        mode = MeterTXMode.LVL_G;
                        break;
                    case "CPDR":
                        mode = MeterTXMode.CPDR;
                        break;
                    case "ALC":
                        mode = MeterTXMode.ALC;
                        break;
                    case "ALC Comp":
                        mode = MeterTXMode.ALC_G;
                        break;
                    case "SWR":
                        mode = MeterTXMode.SWR;
                        break;
                    case "Off":
                        mode = MeterTXMode.OFF;
                        break;

                } // switch (comboMeterTX1Mode.Text)

                //  if (chkTUN.Checked)
                //  {
                //      tune_meter_tx_mode = mode;
                //     if (setupForm != null) setupForm.TuneMeterTXMode = mode;
                //  }

                current_meter_tx1_mode = mode;

            } 

            if (mox)
            {
                switch (mode)
                {
                    case MeterTXMode.FIRST:
                        lblRX2Meter.Text = "";
                        break;
                    case MeterTXMode.MIC:
                    case MeterTXMode.EQ:
                    case MeterTXMode.LEVELER:
                    case MeterTXMode.CPDR:
                    case MeterTXMode.ALC:
                        lblRX2Meter.Text = "-20    -10     -5      0   1   2   3";
                        break;
                    case MeterTXMode.FORWARD_POWER:
                    case MeterTXMode.REVERSE_POWER:
                        if (pa_present ||
                            (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000)) ||
                            (hid_init && current_model == Model.FLEX1500))
                            lblRX2Meter.Text = "1      5     10    50   100  120+";
                        else
                            lblRX2Meter.Text = "0      0.1     0.2     0.5        1.0";
                        break;
                    case MeterTXMode.SWR:
                        lblRX2Meter.Text = "1      1.5   2     3     5    10";
                        lblRX2Meter.Text = "0             10              20";
                        break;
                    case MeterTXMode.OFF:
                        lblRX2Meter.Text = "";
                        break;
                    case MeterTXMode.LVL_G:
                    case MeterTXMode.ALC_G:
                        lblRX2Meter.Text = "0       5       10      15      20";
                        break;
                }
                ResetRX2MeterPeak();

            } // mox

            picRX2Meter.Invalidate();

            if (comboMeterTX1Mode.Focused)  btnHidden.Focus();


        } //comboMeterTX1Mode_SelectedIndexChanged

        //===================================================================================
        // ke9ns add allow you to play sequential quickaudio by right clicking
        private void ckQuickPlay_MouseDown(object sender, MouseEventArgs e)
        {
         //   ckQuickPlay.ContextMenu = null;
         //   ckQuickPlay.ContextMenuStrip = null;


            MouseEventArgs me = (MouseEventArgs)e;


            if (me.Button == System.Windows.Forms.MouseButtons.Right)
            {

                if (WaveForm.chkQuickAudioFolder.Checked == true)
                {
                  

                    string filePath = AppDataPath + "QuickAudio\\";

                    if (!Directory.Exists(filePath))
                    {
                        // create PowerSDR audio folder if it does not exist
                        //  Directory.CreateDirectory(wave_folder);
                        Debug.WriteLine("problem no ke9ns dat file found");
                        return;

                    }

                    openFileDialog1.InitialDirectory = String.Empty;
                    
                    openFileDialog1.InitialDirectory = filePath; // ke9ns  file to quickplay subfolder but could also be wave_folder;

                    //   Debug.WriteLine("right  click ");


                    DialogResult result = openFileDialog1.ShowDialog();

                    if (result == DialogResult.OK) // Test result.
                    {
                        //      Debug.WriteLine("file selected1 " + result);
                        //     Debug.WriteLine("file selected2 " + openFileDialog1.FileName);

                        WaveControl.QPFILE = openFileDialog1.FileName; // pass file name to wave file
                    }
                    else
                    {
                        WaveControl.QPFILE = null;
                    }

                    //    Debug.WriteLine("file selected " + result);

                } // sequential quickaudio

            } // right mouse button click
            else if (me.Button == System.Windows.Forms.MouseButtons.Left)
            {
             //   Debug.WriteLine("left click ");

            }


        } // ckQuickPlay_MouseDown











        //============================================================================ 
        //============================================================================ 
        // ke9ns add Click here to start/stop TX Waterfall ID
        //============================================================================ 
        //============================================================================ 
        private void TXIDMenuItem_MouseDown(object sender, MouseEventArgs e)  // also called by txtTimer_mouse
        {
 
            if ((!TXIDMenuItem.Checked) && (callsignTextBox.BackColor == Color.MediumSpringGreen) && (chkPower.Checked)) // cant transmit unless you have a valid callsign waterfall id wave file and Radio is ON
            {
              
                // WaveOptions.RECPLAY1 = true; // force wave into POST
                WaveForm.RECPLAY = true;

                Txfh = TXFilterHigh;         // save original filter size

                if (WIDEWATERID == false)
                {
                    TXFilterHigh = 2600;         // reduce size for text waterfall ID
                }

                if (chkVAC1.Checked)
                {
                    vac1 = 1; 
                    chkVAC1.Checked = false;
                }

                TXIDMenuItem.Text = "Creating";   // transmit will  be displayed in the wave.cs form
             
                menuStrip1.Invalidate();
                menuStrip1.Update();
             
                TXIDMenuItem.Checked = true;
            }
            else
            {
                //  Debug.WriteLine("WATERFALL OFF======================");
                WaveForm.TXIDPlay = false; // tell wave.cs not to create or send waterfall id
                this.TXIDMenuItem.Text = "TX WaterID";
               
                TXIDMenuItem.Checked = false;

                if (WIDEWATERID == false)
                {
                    if (Txfh > 0) TXFilterHigh = Txfh;         // put back original filter size
                }

                if (vac1 == 1)
                {
                    vac1 = 0;
                     Thread.Sleep(100);
                    chkVAC1.Checked = true;
                    
                   // Task.Delay(200);
                }

                chkMOX.Checked = false;

            } // was checked when clicked


        } // mousedown on TXID menu item


        //============================================================================ 
        //============================================================================ 
        // ke9ns add turn on/off peak values (bottom right side of panadapter window)
        //============================================================================ 
        //============================================================================ 
        private static int peak1 = 0;
        private void txtDisplayPeakOffset_TextChanged(object sender, EventArgs e) // ke9ns ADD toggle on/off this display
        {
            
            if (peak1 == 1) peak1 = 0;
            else peak1 = 1;
            btnHidden.Focus();
        }
      
        private void txtDisplayPeakFreq_TextChanged(object sender, EventArgs e)
        {
            if (peak1 == 1) peak1 = 0;
            else peak1 = 1;
            btnHidden.Focus();
       }

        

        // ke9ns add
        public static int bslock = 0;

        public static int BandStackLock
        {
            get { return bslock; }
            set
            {
                  bslock = value;
    
            }
        }


        //=====================================================================
        // ke9ns add 10 minute Timer

        private int chkBoxTimer1 = 0;  // ke9ns    2= timer ID starting at the next 10min mark and every 10min, 1= timerID starting on the next minute and every 10 min, 3=OFF

        private bool chkBoxTimer2 = false; // ke9ns true = Waterfall ID
        private bool chkBoxTimer3 = false; // ke9ns true = Voice ID  IDTIMER.wav
        private bool chkBoxTimer4 = false; // ke9ns true = CW Audio ID IDTIMERCW.wav
      
        private bool voice = false; // ke9ns add true = voice ID was selected, dont reset until to toggle through all choices again

        [DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.Winapi)]
        internal static extern IntPtr GetFocus();

        private string GetFocusControl()
        {
            Control focusControl = null;
            IntPtr focusHandle = GetFocus();
            if (focusHandle != IntPtr.Zero)
                focusControl = Control.FromHandle(focusHandle);
            if (focusControl.Name.ToString().Length == 0)
                return focusControl.Parent.Parent.Name.ToString();
            else
                return focusControl.Name.ToString();
        }


        public bool MouseIsOverControl(Control c)
        {
            return c.ClientRectangle.Contains(c.PointToClient(Control.MousePosition));
        }
        private void txtTimer_KeyDown(object sender, KeyEventArgs e)
        {

           
         /*   if (e.KeyCode == Keys.F1)
            {
                if (helpboxForm == null || helpboxForm.IsDisposed) helpboxForm = new helpbox(this);

                helpboxForm.Show();
                helpboxForm.Focus();
                helpboxForm.WindowState = FormWindowState.Normal; // ke9ns add

                helpboxForm.richTextBox1.Text = "Testing";
            }
         */  

        } // txtTimer_KeyDown


        //===============================================================================
        // ke9ns add called by setup.cs program when TOT box checked on or off
        public bool tot_onoff = false; // ke9ns add  ON or OFF
        public bool TOT_TRIP = false; // ke9ns add TOT exceeded wait to clear popup to return to false

        public bool TOT_ONOFF
        {
            get
            {
                return tot_onoff;
            }

            set
            {
                tot_onoff = value;

                if (tot_onoff == true)
                {
                    Debug.WriteLine("TOT ON");
                    if (TOTBOXForm == null) TOTBOXForm = new TOTBOX(this);

                    Thread t5 = new Thread(new ThreadStart(TOTTIMER)); // ke9ns start TIME-OUT TIMER HERE
                    t5.Name = "Time-Out Timer Thread";
                    t5.IsBackground = true;
                    t5.Priority = ThreadPriority.BelowNormal;
                    t5.Start();
                }
                else
                {
                    tot_onoff = false; // ke9ns turn normal operation back on
                    TOT_TRIP = false; // ke9ns turn normal operation back on
                   if (setupForm != null) setupForm.textBoxTOT.Text = "OFF";
                }

            }


        } // TOT_ONOFF



        
        Stopwatch TOTTIME = new Stopwatch();  // ke9ns add

        public bool TOT_TX = false; // ke9ns add
        public bool TOT_RXONLY = false; // ke9ns add

        //=====================================================================
        // ke9ns add THREAD
        private void TOTTIMER()
        {
        
            while ((tot_onoff == true) ) // exit thread if TOT turned OFF
            {
                Thread.Sleep(100);            // 

                if (mox)
                {
                    if (TOT_TX == false) // if TX active start timer 1 time
                    {
                        TOT_TX = true;
                        TOTTIME.Restart(); // timer on now


                    } // if (TOT_TX == false)

                } // if (mox)
                else
                {
                  
                    if (TOT_TRIP == false)
                    {
                        if (setupForm != null) setupForm.textBoxTOT.Text = "Ready";
                        TOTTIME.Reset(); // dont clear this if you have tripped the timer OUT
                        TOT_TX = false;
                    }

                } // in RX mode here


                try
                {
                    if (TOT_TX == true)
                    {
                        if (TOTTIME.ElapsedMilliseconds > ((long)setupForm.udTOT.Value * 1000)) // 
                        {
                            TOT_TRIP = true;

                            TOTTIME.Reset();

                            if (TOTBOXForm == null) TOTBOXForm = new TOTBOX(this);

                            TOTBOXForm.Show();
                            TOTBOXForm.Focus();
                            TOTBOXForm.WindowState = FormWindowState.Normal; // ke9ns POP UP Window for TOT

                            MOX = false;

                            RXOnly = true; // kill transmit

                            if (setupForm != null) setupForm.textBoxTOT.Text = "TIME-OUT";

                        } // if (TOTTIME.ElapsedMilliseconds > (setupForm.udTOT.Value * 1000))
                        else if (TOT_TRIP == false)
                        {
                           
                            long temp1 = (long)setupForm.udTOT.Value - ((long)TOTTIME.ElapsedMilliseconds / 1000);

                            if (setupForm != null) setupForm.textBoxTOT.Text = temp1.ToString();

                        }

                    }



                }
                catch (Exception)
                {

                    setupForm.textBoxTOT.Text = "problem";
                }


            } //   while ((tot_onoff == true))

            TOTTIME.Stop();
            setupForm.textBoxTOT.Text = "OFF";

        } // TOTTIMER THREAD






        // ke9ns add
        private void txtTimer_MouseUp(object sender, MouseEventArgs e)
        {
            txtTimer.ShortcutsEnabled = false;

            if (e.Button == MouseButtons.Left) // ke9ns Start Stop 10 min timer
            {

                if (chkBoxTimer1 == 0)
                {
                    chkBoxTimer1 = 1; // timer on  1= timerID starting on the next minute and every 10 min
                    txtTimer.ForeColor = Color.AntiqueWhite;
                   
                    if (chkBoxTimer2 == true)
                    {
                         txtTimer.Text = "wfID Timer: 10min";
                       
                    }
                    else if (chkBoxTimer3 == true)
                    {
                       txtTimer.Text = "voID Timer: 10min";
                        
                    }
                    else if (chkBoxTimer4 == true)
                    {
                        txtTimer.Text = "cwID Timer: 10min";
                        
                    }
                    else
                    {
                       txtTimer.Text = "  ID Timer: 10min";
                       

                    }

                    DurationCount = 10;

                    txtTimer.Select(12, 2);
                    txtTimer.SelectionColor = Color.LawnGreen;
                    txtTimer.Select(0, 0);

                    Thread t = new Thread(new ThreadStart(IDTIMER));
                    t.Name = "10min ID timer Thread";
                    t.IsBackground = true;
                    t.Priority = ThreadPriority.BelowNormal;
                    t.Start();

                } //  if (chkBoxTimer1 == 0)

                else if (chkBoxTimer1 == 1)
                {
                    chkBoxTimer1 = 2; // timer on  2= timer ID starting at the next 10min mark and every 10min
                    txtTimer.ForeColor = Color.AntiqueWhite;


                    DurationCount = (10 - (UTCNEW % 10)); // find the time remaining until the next 10min interval

                  

                    if (chkBoxTimer2 == true)
                    {
                        txtTimer.Text = "wfID Timer: " + DurationCount.ToString() + "minI";
                    }
                    else if (chkBoxTimer3 == true)
                    {
                        txtTimer.Text = "voID Timer: " + DurationCount.ToString() + "minI";
                    }
                    else if (chkBoxTimer4 == true)
                    {
                        txtTimer.Text = "cwID Timer: " + DurationCount.ToString() + "minI";
                    }
                    else
                    {
                        txtTimer.Text = "  ID Timer: " + DurationCount.ToString() + "minI";
                    }

                    
                    txtTimer.Select(12, DurationCount.ToString().Length);
                    txtTimer.SelectionColor = Color.LawnGreen;
                    txtTimer.Select(0, 0);

              

                } //
                else
                {
                    chkBoxTimer1 = 0; // timer off
                  
                    if (chkBoxTimer2 == true)
                    {

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "wfID Timer: OFF";
                        
                    }
                    else if (chkBoxTimer3 == true)
                    {

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "voID Timer: OFF";
                       
                    }
                    else if (chkBoxTimer4 == true)
                    {

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "cwID Timer: OFF";

                    }
                    else
                    {

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "  ID Timer: OFF";
                       
                    }
                    txtTimer.Select(12, 3);
                    txtTimer.SelectionColor = Color.Red;
                    txtTimer.Select(0, 0);

                    DurationCount = 10;

                } //  if (chkBoxTimer1 == true)

                btnHidden.Focus();


            } // left mouse button
            else if (e.Button == MouseButtons.Right) // ke9ns  toggle wf = waterfall ID transmission
            {

                if (chkBoxTimer1 == 0) // id timer is off
                {


                    if (chkBoxTimer2 == true) // if doing waterfall ID
                    {
                        voice = false;
                       
                        chkBoxTimer2 = false; // 
                        chkBoxTimer3 = false; //
                        chkBoxTimer4 = false; // 
                       
                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "  ID Timer: OFF";
                     

                    }
                    else if ((chkBoxTimer3 == false) && (voice == false))
                    {
                        WaveForm.RECPLAY = true; // ke9ns also sets waveoptions.recplay1 which sets POST

                        voice = true;
                        
                        chkBoxTimer3 = true; // 
                        chkBoxTimer2 = false; // 
                        chkBoxTimer4 = false; // 
                       

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "voID Timer: OFF";
                       
                    }
                    else if (chkBoxTimer4 == false)
                    {
                        WaveForm.RECPLAY = true; // ke9ns also sets waveoptions.recplay1 which sets POST

                       
                        chkBoxTimer4 = true; // 
                        chkBoxTimer2 = false; // 
                        chkBoxTimer3 = false; // 
                       

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "cwID Timer: OFF";

                    }
                    else // if chkBoxTime3 was already True then switch to waterfall ID
                    {

                        chkBoxTimer2 = true; // 
                        chkBoxTimer3 = false; // 
                        chkBoxTimer4 = false; // 
                       

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        txtTimer.Text = "wfID Timer: OFF";
               
                    }

                    txtTimer.Select(12, 3);
                    txtTimer.SelectionColor = Color.Red;
                    txtTimer.Select(0, 0);

                }
                else // if timer running then do below
                {


                    if (chkBoxTimer2 == true)
                    {
                        voice = false;
                        chkBoxTimer2 = false; // 
                        chkBoxTimer3 = false; // 
                        chkBoxTimer4 = false; // 
                      

                        txtTimer.ForeColor = Color.AntiqueWhite;

                        if (chkBoxTimer1 == 1)  txtTimer.Text = "  ID Timer: " + DurationCount.ToString() + "min";
                        else txtTimer.Text = "  ID Timer: " + DurationCount.ToString() + "minI";


                    }
                    else if ((chkBoxTimer3 == false) && (voice == false))
                    {
                        WaveForm.RECPLAY = true; // ke9ns also sets waveoptions.recplay1 which sets POST

                        voice = true;
                        chkBoxTimer3 = true; // 
                        chkBoxTimer2 = false; // 
                        chkBoxTimer4 = false; // 
                      

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        if (chkBoxTimer1 == 1) txtTimer.Text = "voID Timer: " + DurationCount.ToString() + "min";
                        else  txtTimer.Text = "voID Timer: " + DurationCount.ToString() + "minI";

                    }
                    else if (chkBoxTimer4 == false)
                    {
                        WaveForm.RECPLAY = true; // ke9ns also sets waveoptions.recplay1 which sets POST

                        chkBoxTimer4 = true; // 
                        chkBoxTimer2 = false; // 
                        chkBoxTimer3 = false; // 
                      

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        if (chkBoxTimer1 == 1) txtTimer.Text = "cwID Timer: " + DurationCount.ToString() + "min";
                        else txtTimer.Text = "cwID Timer: " + DurationCount.ToString() + "minI";

                    }
                    else // if chkBoxTime3 was already True then switch to waterfall ID
                    {

                        chkBoxTimer2 = true; // 
                        chkBoxTimer3 = false; // 
                       
                        chkBoxTimer4 = false; // 

                        txtTimer.ForeColor = Color.AntiqueWhite;
                        if (chkBoxTimer1 == 1) txtTimer.Text = "wfID Timer: " + DurationCount.ToString() + "min";
                        else  txtTimer.Text = "wfID Timer: " + DurationCount.ToString() + "minI";
                    }


                   if (DurationCount == 10) txtTimer.Select(12, 2);
                   else txtTimer.Select(12, 1);

                    txtTimer.SelectionColor = Color.LawnGreen;
                    txtTimer.Select(0, 0);
       

                } // timer1 running

            } // right mouse button

            

        } // txtTimer_MouseUp


        //=====================================================================
        // ke9ns add 10 minute Timer

    
        private void txtTimer_MouseDown(object sender, MouseEventArgs e)
        {

            txtTimer.ShortcutsEnabled = false;
     

        } //  txtTimer_MouseDown


        //=====================================================================
        // ke9ns add 
   /*     private void IDSQLEVEL()
        {

            if (IDSQL < -100)
            {

                if (sql_data <= (float)(IDSQL - 10))
                {
                    IDSQUELCH = true; // nobody talking so your OK to transmit ID
                }
                else
                {
                    IDSQUELCH = false; // talking, so wait
                }

            }
            else
            {
                IDSQUELCH = true; // noise floor too high to determine, so just transmit ID
            }


        } // IDSQLEVEL()
*/

        //==================================================================
        DateTime UTCD;
        String FD;
        int UTCNEW = 0;  // used to check the time to sync onto the nearest minute
        int LASTUTC = 0;
        int DurationCount = 10;              // ID occurs every 10 min
       
        Stopwatch IDTIME = new Stopwatch();  // 10min timer

        public bool TIMETOID = false;   // true = 10min up and time to id  (wave plays IDTIMER.wav file)
        public bool TIMETOID1 = false;   // true = 10min up and time to id (wave.cs plays IDTIMERCW.wave file)


        public bool IDSQUELCH = false; // true =ok to ID using audio or waterfall (signal is low so nobody talking)


      //  public bool TIMETOID1 = false;   // true = get noise floor level from display
      //  public int IDSQL = 0; // noise floor level from display

        //=====================================================================
        // ke9ns add THREAD
        private void IDTIMER()
        {
           
            UTCD = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc);
            FD = UTCD.ToString("HHmm");
            LASTUTC = UTCNEW = Convert.ToInt16(FD);

            IDTIME.Reset();
          //  DurationCount = 10;  // this should be 10 for 10min per ID
          
            bool flag1 = false; // ring flash
            bool flag2 = false; // ring flash
            bool temp1 = false; // checkkBoxID

            IDSQUELCH = true; // this will be controlled by signal levels compared to the noise floor

            while (chkBoxTimer1 > 0)
            {
                Thread.Sleep(100);            // 
              
                UTCD = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc);
                FD = UTCD.ToString("HHmm");
                UTCNEW = Convert.ToInt16(FD);
                

                try
                {

                    if ((UTCNEW != LASTUTC)) // check 1 time per minute
                    {
                        LASTUTC = UTCNEW;
                     
                        if (DurationCount > 0) // check 10 min
                        {
                           
                        
                            DurationCount--;

                            if (chkBoxTimer1 == 2) // start timer on any 10min increment of the hour
                            {
                             
                                if (chkBoxTimer2 == true)
                                {
                                    txtTimer.Text = "wfID Timer: " + DurationCount.ToString() + "minI";
                                }
                                else if (chkBoxTimer3 == true)
                                {
                                    txtTimer.Text = "voID Timer: " + DurationCount.ToString() + "minI";
                                }
                                else if (chkBoxTimer4 == true)
                                {
                                    txtTimer.Text = "cwID Timer: " + DurationCount.ToString() + "minI";
                                }
                                else
                                {
                                    txtTimer.Text = "  ID Timer: " + DurationCount.ToString() + "minI";
                                }
                            }
                            else  // start 10min timer on the next minute
                            {
                             
                                if (chkBoxTimer2 == true)
                                {
                                    txtTimer.Text = "wfID Timer: " + DurationCount.ToString() + "min";
                                }
                                else if (chkBoxTimer3 == true)
                                {
                                    txtTimer.Text = "voID Timer: " + DurationCount.ToString() + "min";
                                }
                                else if (chkBoxTimer4 == true)
                                {
                                    txtTimer.Text = "cwID Timer: " + DurationCount.ToString() + "min";
                                }
                                else
                                {
                                    txtTimer.Text = "  ID Timer: " + DurationCount.ToString() + "min";
                                }
                            }

                            if (DurationCount == 10) txtTimer.Select(12, 2);
                            else txtTimer.Select(12, 1);

                            txtTimer.SelectionColor = Color.LawnGreen;
                            txtTimer.Select(0, 0);

                        } //  if (DurationCount > 0)

                        if (DurationCount == 0) // TIME TO ID
                        {
                            txtTimer.Text = " >> TIME TO ID << ";
                            txtTimer.ForeColor = Color.Red;
                            panelDateTime.Invalidate();
                            grpVFOBetween.Invalidate();
                            flag1 = true;


                            if (chkBoxTimer2 == true)
                            {

                                if ((chkPower.Checked))
                                {
                                    TIMETOID = true; // let wave: chkQuickPlay_CheckedChanged know you want to play IDTIMER.WAV file only
                                    if (IDSQUELCH == true)
                                    {
                                        TXIDMenuItem_MouseDown(this, new MouseEventArgs(MouseButtons.Left, 1, 0, 0, 1)); // transmit TX Waterfall ID (only if its Green)
                                        TIMETOID = false;
                                    }
                                }
                            }
                            else if (chkBoxTimer3 == true) 
                            {
                                temp1 = checkBoxID.Checked;

                                string filePath = AppDataPath + "QuickAudio\\";

                                if (WaveForm.chkQuickAudioFolder.Checked == false) WaveForm.chkQuickAudioFolder.Checked = true;

                                if (WaveForm.chkQuickAudioFolder.Checked == true)  // ke9ns add
                                {

                                    if (Directory.Exists(filePath)) // need to see the quickaudio folder
                                    {

                                        if (File.Exists(filePath + "IDTIMER.wav"))
                                        {

                                            if ((chkPower.Checked)) // ke9ns add allow tx on play directly so you dont need to mox and play
                                            {
                                                TIMETOID = true; // let wave: chkQuickPlay_CheckedChanged know you want to play IDTIMER.WAV file only

                                                checkBoxID.Checked = true;
                                                ckQuickPlay.Checked = true;
                                                chkMOX.Checked = true;     // key radio 
                                                WaveForm.QuickPlay = true;
                                                //   ckQuickPlay.BackColor = button_selected_color;
                                                // TIMETOID = false; this is set false by chkQuickPlay_CheckedChanged
                                            }


                                        } //  if (File.Exists(filePath + "\\IDTIMER.wav"))
                                        else
                                        {
                                            MessageBox.Show("No IDTIMER.wav file found in folder: " + filePath+"\n" +
                                               "Select the [Rec/Play ID] checkbox option, then hit the REC button to record your own Audio File\n" +
                                               "Then Hit the REC button again, to end the recording, then Right Click on the PLAY Button\n" +
                                               "And rename the newest file created to: IDTIMER.wav", "IDTIMER.WAV");

                                        }

                                    } // if (!Directory.Exists(filePath)) 

                                } //  if (WaveForm.chkQuickAudioFolder.Checked == true) 
                            } // if (chkBoxTimer3 == true)
                            else if (chkBoxTimer4 == true)
                            {
                                temp1 = checkBoxID.Checked;

                                string filePath = AppDataPath + "QuickAudio\\";

                                if (WaveForm.chkQuickAudioFolder.Checked == false) WaveForm.chkQuickAudioFolder.Checked = true;

                                if (WaveForm.chkQuickAudioFolder.Checked == true)  // ke9ns add
                                {

                                    if (Directory.Exists(filePath)) // need to see the quickaudio folder
                                    {

                                        if (File.Exists(filePath + "IDTIMERCW.wav"))
                                        {

                                            if ((chkPower.Checked)) // ke9ns add allow tx on play directly so you dont need to mox and play
                                            {
                                                TIMETOID1 = true; // let wave: chkQuickPlay_CheckedChanged know you want to play IDTIMER.WAV file only

                                                checkBoxID.Checked = true;
                                                ckQuickPlay.Checked = true;
                                                chkMOX.Checked = true;     // key radio 
                                                WaveForm.QuickPlay = true;
                                               
                                            }


                                        } //  if (File.Exists(filePath + "\\IDTIMER.wav"))
                                      
                                        else
                                        {
                                            MessageBox.Show("No IDTIMERCW.wav file found in folder: " + filePath + "\n" +
                                               "Select the [Rec/Play ID] checkbox option in CW mode, then hit the REC button to record your own CW or CWX recording.\n" +
                                               "Then Hit the REC button again, to end the recording, then Right Click on the PLAY Button\n" +
                                               "And rename the newest file created to: IDTIMERCW.wav", "IDTIMERCW.WAV");

                                        }

                                    } // if (!Directory.Exists(filePath)) 

                                } //  if (WaveForm.chkQuickAudioFolder.Checked == true) 

                            } // if (chkBoxTimer4 == true)
                            else
                            {
                                //   SystemSounds.Exclamation.Play(); // play sound on PC 
                                //   AutoClosingMessageBox.Show(">>>>TIME to ID your STATION<<<<\n>>>>TIME to ID your STATION<<<<\n>>>>TIME to ID your STATION<<<<", ">>>>TIME to ID<<<<", 5000);
                               //  MessageBox.Show(">>>>TIME to ID your STATION<<<<\n>>>>TIME to ID your STATION<<<<","TIME-TO-ID");

                                // example of a threaded message box (new Thread(new ThreadStart(TXBW))).Start(); // just a warning message

                                TIMETOID = true;

                                if (IDBOXForm == null) IDBOXForm = new IDBOX(this);

                                IDBOXForm.Show();
                                IDBOXForm.Focus();
                                IDBOXForm.WindowState = FormWindowState.Normal; // ke9ns add

                            }


                            IDTIME.Restart(); // timer restart

                        } // Durationcount == 0

                    } //   if ((UTCNEW != LASTUTC))
                    else if (DurationCount == 0)  // flash TIME TO ID  (outside of the last minute)
                    {
                        int warntime = 8000;

                        if (chkBoxTimer2 == true) warntime = 8000; // if transmitting waterfall ID, then shorten the ID warning time

                       
                        if (IDTIME.ElapsedMilliseconds < warntime) // 5 seconds
                        {

                            /*
                            if ((TIMETOID == true) && (IDSQUELCH == true) && (chkPower.Checked)) // check if squelch prevented Audio or waterfall ID, then try here
                            {
                                if ((chkBoxTimer2 == true))
                                {
   
                                    TXIDMenuItem_MouseDown(this, new MouseEventArgs(MouseButtons.Left, 1, 0, 0, 1)); // transmit TX Waterfall ID (only if its Green)
                                    TIMETOID = false;
                                    
                                }
                                else if ((chkBoxTimer3 == true))
                                {
                                    checkBoxID.Checked = true;
                                    ckQuickPlay.Checked = true;
                                    chkMOX.Checked = true;     // key radio 
                                    WaveForm.QuickPlay = true;

                                }


                            } //if (TIMETOID == true)
                            */

                            if ((IDTIME.ElapsedMilliseconds % 1000) < 500)
                            {
                                flag2 = false;
                                if (flag1 == false)
                                {
                                    txtTimer.ForeColor = Color.Red;
                                    panelDateTime.Invalidate();
                                    grpVFOBetween.Invalidate();
                                    flag1 = true;
                                }

                            }
                            else
                            {
                                flag1 = false;
                                if (flag2 == false)
                                {
                                    txtTimer.ForeColor = Color.Black;
                                    panelDateTime.Invalidate();
                                    grpVFOBetween.Invalidate();
                                    flag2 = true;
                                }
                            }

                        }

                        else // reset over again
                        {

                            DurationCount = 10;
                            flag1 = false;
                            flag2 = false;
                            txtTimer.ForeColor = Color.AntiqueWhite;

                            panelDateTime.Invalidate();
                            if (chkBoxTimer2 == true)
                            {
                                if (chkBoxTimer1 == 1) txtTimer.Text = "wfID Timer: 10min";
                                else txtTimer.Text = "wfID Timer: 10minI";
                            }
                            else if (chkBoxTimer3 == true)
                            {
                                if (chkBoxTimer1 == 1) txtTimer.Text = "voID Timer: 10min";
                                else txtTimer.Text = "voID Timer: 10minI";
                            }
                            else if (chkBoxTimer4 == true)
                            {
                                if (chkBoxTimer1 == 1) txtTimer.Text = "cwID Timer: 10min";
                                else txtTimer.Text = "cwID Timer: 10minI";
                            }
                            else
                            {
                                if (chkBoxTimer1 == 1) txtTimer.Text = "  ID Timer: 10min";
                                else txtTimer.Text = "  ID Timer: 10minI";
                            }

                            txtTimer.Select(12, 2);
                            txtTimer.SelectionColor = Color.LawnGreen;
                            txtTimer.Select(0, 0);
                            IDTIME.Stop();
                        }

                        if (chkBoxTimer3 == true)
                        { 
                            if (!mox) checkBoxID.Checked = temp1;
                        }

                    } // Durationcount == 0
                }
                catch (Exception)
                {

                    txtTimer.Text = "  ID Timer: Flt";
                }


            } //  while (chkBoxTimer1 == true)

          //  TIMETOID1 = false; // turn off noise floor measurement

        } // IDTIMER THREAD





        //=====================================================================
        // ke9ns add
        private void txtNOAA_MouseDown(object sender, MouseEventArgs e)
        {

            if (noaaON == 0)
            {
                noaaON = 1; // turn on space weather
                btnHidden.Focus();
            }
            else
            {
                noaaON = 0; // shut down thread
                suncounter = 2;
                RadioBlackout = GeoBlackout = " ";

                txtNOAA.ForeColor = Color.AliceBlue;
                txtNOAA2.ForeColor = Color.AliceBlue;

                txtNOAA.Text = "Space WX: OFF";
                txtNOAA2.Text = "Click On";
            }

            txtNOAA.SelectAll();
            txtNOAA.SelectionAlignment = HorizontalAlignment.Center;

            txtNOAA2.SelectAll();
            txtNOAA2.SelectionAlignment = HorizontalAlignment.Center;

            txtNOAA.Select(0, 0);
            txtNOAA2.Select(0, 0);


        } // txtNOAA_Mousedown

        //========================================================================
        //========================================================================
        // ke9ns add

        private void checkBoxID_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBoxID.Checked == true)
            {
                WaveForm.RECPLAY = true; // ke9ns also sets waveoptions.recplay1 which sets POST
            }

            btnHidden.Focus();


        } //checkBoxID_CheckedChanged



        public static int suncounter = 2; // for space weather
        public static byte noaaON = 0; // for space weather
        public static int SFI = 0;       // for Space weather
        public static int SN = 0;        // for Space weather
        public static int Aindex = 0;    // for Space weather
        public static int Kindex = 0;    // for Space weather
        public static string RadioBlackout = " ";    // R scale
        public static string GeoBlackout = " ";      // G scale
        public static int EISN = 0;                    // Estimated International Sunspot Number
        public static int SSNE = 0;                   // Effecitve sunpot number
        private string serverPath;       // for Space weather NOAA
        private string serverPath1;       // for Space weather SIDC
        private string serverPath2;       // for Space weather  NWRA


        public void NOAA()
        {
         
                        Debug.WriteLine("GET NOAA=========");

                        suncounter = 1;
                        serverPath = "ftp://ftp.swpc.noaa.gov/pub/latest/wwv.txt";

                        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverPath);

                        //  textBox1.Text += "Attempt to download Space Weather \r\n";

                        request.KeepAlive = true;
                        request.UsePassive = true;
                        request.UseBinary = true;

                        request.Method = WebRequestMethods.Ftp.DownloadFile;
                        string username = "anonymous";
                        string password = "guest";
                        request.Credentials = new NetworkCredential(username, password);

                        string noaa = null;

                        try
                        {
                            FtpWebResponse response = (FtpWebResponse)request.GetResponse();

                            Stream responseStream = response.GetResponseStream();
                            StreamReader reader = new StreamReader(responseStream);
                            noaa = reader.ReadToEnd();

                            reader.Close();
                            response.Close();
                            //   Debug.WriteLine("noaa=== " + noaa);

                            //   textBox1.Text += "NOAA Download complete \r\n";



                            //--------------------------------------------------------------------
                            if (noaa.Contains("Solar flux ")) // 
                            {

                                int ind = noaa.IndexOf("Solar flux ") + 11;

                                try
                                {
                                    SFI = (int)(Convert.ToDouble(noaa.Substring(ind, 3)));
                                    Debug.WriteLine("SFI " + SFI);
                                }
                                catch (Exception)
                                {
                                    SFI = 0;
                                }


                            } // SFI

                            if (noaa.Contains("A-index ")) // 
                            {

                                int ind = noaa.IndexOf("A-index ") + 8;

                                try
                                {
                                    Aindex = (int)(Convert.ToDouble(noaa.Substring(ind, 2)));
                                    Debug.WriteLine("Aindex " + Aindex);
                                }
                                catch (Exception)
                                {
                                    Aindex = 0;
                                }


                            } // Aindex

                            if (noaa.Contains("K-index ") && noaa.Contains(" was ")) // 
                            {

                                int ind = noaa.IndexOf(" was ") + 5;

                                try
                                {
                                    Kindex = (int)(Convert.ToDouble(noaa.Substring(ind, 2)));
                                    Debug.WriteLine("Kindex " + Aindex);
                                }
                                catch (Exception)
                                {
                                    Kindex = 0;
                                }


                            } // Kindex


                            if (noaa.Contains("Radio blackouts reaching the ")) // 
                            {

                                int ind = noaa.IndexOf("Radio blackouts reaching the ") + 29;

                                try
                                {
                                    RadioBlackout = noaa.Substring(ind, 2);
                                    Debug.WriteLine("Radio Blackout " + RadioBlackout);
                                }
                                catch (Exception)
                                {
                                    RadioBlackout = " ";
                                }


                            } // radio blackouts
                            else
                            {
                                RadioBlackout = " ";
                            }

                            if (noaa.Contains("level occurred") && noaa.Contains("Geomagnetic storms reaching the ")) // 
                            {

                                int ind = noaa.IndexOf("Geomagnetic storms reaching the ") + 32;

                                try
                                {
                                    GeoBlackout = noaa.Substring(ind, 2);
                                    Debug.WriteLine("Geomagnetic storms" + GeoBlackout);
                                }
                                catch (Exception)
                                {
                                    GeoBlackout = " ";
                                }


                            } //geo storms
                            else
                            {
                                GeoBlackout = " ";
                            }

                            if (RadioBlackout != " ")
                            {
                                RadioBlackout = RadioBlackout + GeoBlackout;
                                Debug.WriteLine("radio-geo " + RadioBlackout);

                            }
                            else
                            {
                                RadioBlackout = GeoBlackout;
                                Debug.WriteLine("geo " + RadioBlackout);
                            }

                        } // try
                        catch (Exception )
                        {
                            noaaON = 0; // failure to get data
                        }
               
            Debug.WriteLine("endof NOAA thread");


            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            // ke9ns get Estimated International Sunspot Number (EISN)


            Debug.WriteLine("GET SIDC=========");

            suncounter = 1;
            serverPath1 = "http://www.sidc.be/silso/DATA/EISN/EISN_current.txt";

            try
            {

                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(serverPath1);
                HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse();

                Stream responseStream1 = webResponse.GetResponseStream();
                StreamReader streamReader1 = new StreamReader(responseStream1);

                string eisn = streamReader1.ReadToEnd();

                responseStream1.Close();
                streamReader1.Close();
               

                Debug.WriteLine("GET SIDC1=========" + eisn);

                int len = eisn.Length;

                Debug.WriteLine("GET SIDC2=========" + len);

                string sub1 = eisn.Substring(len - 18, 3); // get Sunspot value from end of file (newest data)

                Debug.WriteLine("GET SIDC3=========" + sub1);

                try
                {
                    EISN = Convert.ToInt16(sub1);

                }
                catch (Exception)
                {
                    EISN = 0;
                    Debug.WriteLine("Failed to detect EISN# from text file");

                }

            }
            catch(Exception)
            {
                Debug.WriteLine("Could not get SIDC EISN#");
            }

            Debug.WriteLine("endof SIDC thread");

            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            //--------------------------------------------------------------------------
            // ke9ns get Effective SSN from NWRA


            Debug.WriteLine("GET NWRA=========");

          
            serverPath2 = "https://spawx.nwra.com/spawx/env_latest.html";

            try
            {

                HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(serverPath2);
                HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse();

                Stream responseStream1 = webResponse.GetResponseStream();
                StreamReader streamReader1 = new StreamReader(responseStream1);

                string ssne = streamReader1.ReadToEnd();

                responseStream1.Close();
                streamReader1.Close();


              //  Debug.WriteLine("GET SSNe=========" + ssne);

                //  int len = ssne.Length;

                if (ssne.Contains("NWRA SSNe:") == true) // example:  NWRA SSNe:    24.5    26.7    27.4    23.2    26.0     7.1     9.1
                {
                    int len = ssne.IndexOf("NWRA SSNe:");  // location of first char in this string
                    
                
                    string sub1 = ssne.Substring(len+ 59, 5); // get newest effective ssn#

                    Debug.WriteLine("GET SSNe3=========" + sub1);

                    try
                    {
                             SSNE = Convert.ToInt16(sub1);
                            if (SSNE == -999) SSNE = 0;
                    }
                    catch (Exception)
                    {
                        SSNE = 0;
                        Debug.WriteLine("Failed to detect EISN# from text file");

                    }

                } // contains NWRA SSNe:
            }
            catch (Exception)
            {
                Debug.WriteLine("Could not get NWRA SSNe#");
            }

            Debug.WriteLine("endof NWRA thread");



        } // NOAA thread to get space weather



        //=============================================================================================
        private void radBandWWV_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((regBand == 1) && (me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (band_wwv_register < 9)
                { 
                    DB.AddBandStack("WWV", "SAM", "F5", 25.000000); // take current band, DSP mode, filter, and freq
                    DB.AddBandText(25.000000, 25.000000, "WWV", false);

                UpdateBandStackRegisters();
                UpdateBandButtonColors();
                }
            } // right click
        }

        private void autoBrightBox_MouseUp(object sender, MouseEventArgs e)
        {
            autoBrightBox.ForeColor = Color.White;
        }

        private void ckQuickPlay_MouseUp(object sender, MouseEventArgs e)
        {
          //  ckQuickPlay.ContextMenu = null;
          //  ckQuickPlay.ContextMenuStrip = null;

        }



        //============================================================================
        // ke9ns add to determine if you want the peak db numbers to appear in the lower right of the pan display area
        private void txtDisplayPeakPower_TextChanged(object sender, EventArgs e)
        {
            if (peak1 == 1) peak1 = 0;
            else peak1 = 1;
            btnHidden.Focus();
        }
   
        private void lblCPUMeter_Click(object sender, EventArgs e)
        {
          
        }

        private void txtVFOAMSD_TextChanged(object sender, EventArgs e)
        {

        }




        //============================================================================================
        // ke9ns add everything below as part of PowerMate add one
        //================================================================================================
        // Button Push event handler
        //================================================================================================
       public void OnButtonEvent(HidDevice.PowerMate.ButtonState bs, int value, int value1, int value2)
        {
          
            switch (bs)   // 2 cases UP or DOwn
            {
                case HidDevice.PowerMate.ButtonState.Down:
                    {
                        Trace.WriteLine(" down");
                        if (RIT == true)
                        {
                            RITValue = 0; // reset RIT back to zero if you hit the KNOB
                        }
                        else
                        {
                            if (setupForm.chkBoxIND.Checked == true)
                            {
                                if (setupForm.tune_step_index2 >= 6)
                                {
                                    setupForm.tune_step_index2 = 3 % tune_step_list.Count;
                                    setupForm.txtWheelTune2.Text = tune_step_list[setupForm.tune_step_index2].Name;

                                }
                                else
                                {
                                    setupForm.ChangeTuneStepUp2();
                                }
                            }
                            else
                            {
                                if (tune_step_index >= 6)
                                {
                                    tune_step_index = 3 % tune_step_list.Count;
                                    txtWheelTune.Text = tune_step_list[tune_step_index].Name;

                                }
                                else
                                {
                                    ChangeTuneStepUp();
                                }
                            }
                        }
                    }
                    break;

                case HidDevice.PowerMate.ButtonState.Up:
                    {
                        Trace.WriteLine("up");
                       
                    }
                    break;
            } // switch
     

        } // onbutton

      

        //================================================================================================
        //   LED brightness event handler (slider)
        //================================================================================================

        public void OnSliderBrightness(object sender, EventArgs e)
        {
            TrackBar slider = sender as TrackBar;

            if (slider != null)
            {
              //  LEDV = (int)slider.Value;
                this.powerMate.LedBrightness = (byte)slider.Value; // get slider bar value to set LED


                Trace.WriteLine(slider.Value.ToString());
            }

        }

        public static int CTUN3 = 0; // ke9ns add keep rundisplay() thread from updating pan and water too soon in CTUn mode
        public static bool CTUN = false; // ke9ns add CTUN feature ON/OFF
        public static long CTUN1_HZ = 0; // ke9ns add used in Calcdisplayfreq() to keep display from moving and allow vfoa bandpass to move across display
        public double tempVFOAFreq = 0.0; //  ke9ns add hold new vfo freq seperate from real vfoafreq to sync up display movement
        public static int UPDATEOFF = 0; // ke9ns add pan & waterfall delay while CTUN is on and your sliding across the display
      
        //============================================================================
        // ke9ns add CTUN=0 normal, 1=main bandpass moves (just like the sub does across the display)
        //   public static bool ctun = false;


        // ke9ns add to turn on/off CTUN feature
        private void lblDisplayPan_MouseDown(object sender, MouseEventArgs e)
        {
            if (CTUN == false)
            {
              //  CTUN1_HZ = 0;
                CTUN = true;
                lblDisplayPan.ForeColor = Color.Red;
            }
            else
            {
              //  CTUN1_HZ = 0;
                CTUN = false;
                lblDisplayPan.ForeColor = Color.White;

            }

        } // pan text from console window

        
        // ke9ns add  make sure to turn off CTUN if not in water, or pan or panfall modes
        private bool CTUN1
        {
            get
            {
                return CTUN;
            }
            set
            {
                CTUN = value;
                if (CTUN == true) lblDisplayPan.ForeColor = Color.Red;
                else lblDisplayPan.ForeColor = Color.White;

            }


        } // CTUN1

        //================================================================================================
        // ke9ns add  PowerMate Griffin Knob rotation value event handler
        //================================================================================================
        public void OnRotateEvent(int value1)
        {
          // Trace.WriteLine("ROTATE "+ value1);

            if (((lastvalue < 0) && (value1 > 0)) || ((lastvalue > 0) && (value1 < 0))) // if knob changes directions, reset speed counter
            {
                speed = 0;
                lastvalue = value1;
                return;
            }

            lastvalue = value1;

            if (speed < (int)setupForm.udSpeedPM.Value)
            {

                speed++;
                return; // wait until you turn knob in 1 direction far enough to exceed speed rating you set in setup.cs
            }
            else speed = 0; // you turned knob far enough so reset speed counter


            if (CTUN == false)
            {
                //---------------------------------------------
                if (value1 < 0)
                {
                    if (RIT == true)
                    {
                        RITValue = RITValue - 1;
                    }
                    else
                    {
                        if (setupForm.chkBoxIND.Checked == true)
                        {

                            int num_steps = -1;

                            if (vfo_char_width == 0) GetVFOCharWidth();

                          
                            int step = CurrentTuneStepHz2;  // ke9ns add

                             
                            VFOAFreq = SnapTune(VFOAFreq, step, num_steps);
                      
                        }
                        else
                        {
                            Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, -120));
                        }
                    }
                }
                else // value >= 0
                {
                    if (RIT == true)
                    {
                        RITValue = RITValue + 1;
                    }
                    else
                    {
                        if (setupForm.chkBoxIND.Checked == true)
                        {
                            int num_steps = 1;

                            if (vfo_char_width == 0) GetVFOCharWidth();
                            
                            int step = CurrentTuneStepHz2;  // ke9ns add
                                              
                            VFOAFreq = SnapTune(VFOAFreq, step, num_steps);
                            
                        }
                        else
                        {
                            Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, 120));
                        }
                    }
                }
            } // CTUN false
            else
            {
               
                if ((Display.CurrentDisplayMode == DisplayMode.PANADAPTER) || (Display.CurrentDisplayMode == DisplayMode.PANAFALL) || (Display.CurrentDisplayMode == DisplayMode.PANASCOPE) || (Display.CurrentDisplayMode == DisplayMode.WATERFALL))
                {
                    UPDATEOFF = 2; // ke9ns let system know not to update screen for a little while pan
                }
               
                if (value1 < 0)
                {
                    CTUN1_HZ = CTUN1_HZ - CurrentTuneStepHz;// ke9ns add allow bandpass window to scroll across display instead of display freq scroll under bandpass.
                    tempVFOAFreq = VFOAFreq - (double)CurrentTuneStepHz / 1e6; // vfoafreq in mhz
                    CalcDisplayFreq(); // ke9ns keep display from moving

                }
                else // value >= 0
                {
                  
                    CTUN1_HZ = CTUN1_HZ + CurrentTuneStepHz;// ke9ns add allow bandpass window to scroll across display instead of display freq scroll under bandpass.
                    tempVFOAFreq = VFOAFreq + (double)CurrentTuneStepHz / 1e6;
                    CalcDisplayFreq(); // ke9ns keep display from moving

                }

             //   Debug.WriteLine("CTUN="+ CTUN1_HZ);


            } // CTUN true

        } //onrotateevent

        //================================================================================================
        // rotation value to screen invoked from above
        //================================================================================================

        void SetRotateLabel()
        {
          //  this.rotationLabel.Text = currentRotationalValue.ToString();

        }
        //================================================================================================
        // rotation value to screen invoked from above
        //================================================================================================

        void SetSENDLabel()
        {
      
        }





        //=========================================================================================
        //=========================================================================================
        // ke9ns add to allow TX filter on main console SSB panel
        private void udTXFilterHigh_ValueChanged(object sender, EventArgs e)
        {
            if (setupForm != null) setupForm.udTXFilterHigh.Value = udTXFilterHigh.Value;

        }

        // ke9ns add
        private void udTXFilterLow_ValueChanged(object sender, EventArgs e)
        {
            if (setupForm != null) setupForm.udTXFilterLow.Value = udTXFilterLow.Value;
        }



     

        //=========================================================================================
        //=========================================================================================
        // ke9ns add send hygain rotor command to DDUtil via the CAT port setup in PowerSDR
        public string spotDDUtil_Rotor // called from SPOT.cs routine when clicking on DX SPOT
        {
            set
            {
               
                try
                {
                    Debug.WriteLine("DDUTIL ROTOR1:");
                    siolisten1.SIO.put(value);   // this is the DDUtil PORT found in setup and SIOListenerIII.cs
                }
                catch { }
            }

        } // 


        double sPrev = 0.0;
        double sPrev2 = 0.0;


        //================================================================================================
        //================================================================================================
        // ke9ns add to detect single Frequecy tones in a data stream  (audio.cs routine uses for wwv)
        public int Goertzel(float[] samples, int start, int end)
        {
            sPrev = 0.0;
            sPrev2 = 0.0;

            for (int i = start; i < end; i++)   // feedback
            {
                double s = samples[i] + SpotForm.Coeff * sPrev - sPrev2;
                sPrev2 = sPrev;
                sPrev = s;
            }

            double power = (sPrev2 * sPrev2) + (sPrev * sPrev) - ((SpotForm.Coeff * sPrev) * sPrev2);  // feedforward

            return (int)power; // magnitude of frequency in question within the stream
        } //  Goertzel


        //==================================================================================
        //==================================================================================
        // ke9ns for precision mSec timer (not used at this time)
        // ke9ns add  This timer runs at the periodic rate, repeatedly and  jmps to "TimerPeriodicEventCallback" when the timer is reached
        private void setup_timer(int cwxwpm)
        {

            if (timerID != 0) // if timer is running, kill it to start over
            {
                timeKillEvent(timerID);
            }

            // (delay, resolution, proc, user, mode)
            timerID = timeSetEvent(cwxwpm, 1, timeProcPeriodic, 0, (int)TimerMode.Periodic); //  jmps to "TimerPeriodicEventCallback" when the timer is reached

       
            if (timerID == 0)
            {
                Debug.Fail("1Timer creation failed.");
            }

        } // setup_timer

        //==================================================================================
        //==================================================================================
        private int timerID1;

        

        private TimeProc timeProcPeriodic1;

        // ke9ns for precision mSec timer for TUNE Pulser
        // ke9ns add  This timer is a one shot timer for the duty cycle of the tone jmps to "TimerPeriodicEventCallback1" when the timer is reached 
        private void setup_timer1(int cwxwpm)
        {

            if (timerID1 != 0)
            {
                timeKillEvent(timerID1);
            }

            // (delay, resolution, proc, user, mode)
            timerID1 = timeSetEvent(cwxwpm, 1, timeProcPeriodic1, 0, (int)TimerMode.OneShot); //  jmps to "TimerPeriodicEventCallback1" when the timer is reached

         
            if (timerID1 == 0)
            {

                Debug.Fail("2Timer creation failed.");
            }

        } // setup_timer1

      




        //=========================================================================================
        //=========================================================================================
        // rn3kk 
        public void startHttpServer(int port)
        {
            httpServer.start(port);
        }

        //=========================================================================================
        //=========================================================================================
        // rn3kk 
        public void stopHttpServer()
        {
            httpServer.stop();
        }

        //=========================================================================================
        //=========================================================================================
        // rn3kk add method for set VFOAFreq
        public void setVFOAFreqByPixel(int pixel)
        {
            Debug.WriteLine("Receive pixel: " + pixel.ToString());
            Debug.WriteLine("Panoram width: " + picDisplay.Width.ToString());
            float x = PixelToHz(pixel);
            Debug.WriteLine("Offset x:=" + x.ToString());

            double rf_freq = VFOAFreq + (double)x * 0.0000010;

            if (rx1_dsp_mode == DSPMode.CWL)
                rf_freq += (double)cw_pitch * 0.0000010;
            else if (rx1_dsp_mode == DSPMode.CWU)
                rf_freq -= (double)cw_pitch * 0.0000010;

            long f = (long)(rf_freq * 1e6);
            int mult = CurrentTuneStepHz;
            if (f % mult > mult / 2) f += (mult - f % mult);
            else f -= f % mult;
            rf_freq = (double)f * 1e-6;
            VFOAFreq = rf_freq;
        }

     






        //=========================================================================================
        //=========================================================================================
        // rn3kk add method for change if mousewheell on web
        public void wheelEventOnWeb(bool direction)
        {
            if (direction)
            {
                VFOAFreq += CurrentTuneStepMHz;
            }
            else
            {
                VFOAFreq -= CurrentTuneStepMHz;
            }
        }

        // rn3kk add
        public string getVFOAFreqString()
        {
            return txtVFOAFreq.Text;
        }

     

        // rn3kk add
        public string getVFOBFreqString()
        {
            return txtVFOBFreq.Text;
        }

        //========================================================================
        // ke9ns add

        bool lastHF = false;
        bool lastVHF = false;
        bool lastGN = false;

        private void panelBandHF_VisibleChanged(object sender, EventArgs e)
        {
            if (panelBandHF.Visible != lastHF)
            {
                panelBandHF.Invalidate();
                lastHF = panelBandHF.Visible;
            }
         
          
        }

        private void panelBandVHF_VisibleChanged(object sender, EventArgs e)
        {
            if (panelBandVHF.Visible != lastVHF)
            {
                panelBandVHF.Invalidate();
                lastVHF = panelBandVHF.Visible;
            }
        }

        private void panelBandGN_VisibleChanged(object sender, EventArgs e)
        {
            if (panelBandGN.Visible != lastGN)
            {
                panelBandGN.Invalidate();
                lastGN = panelBandGN.Visible;
            }
        }

  
        //===============================================================================
        // ke9ns add bandstack from main console screen
        private void buttonAdd_Click(object sender, EventArgs e)
        {
            //    StackForm.buttonADD_Click(this, EventArgs.Empty);
          //  txtVFOAFreq_LostFocus(this, EventArgs.Empty);


            bool dupfound = false;

            StackForm.updateindex();

            if (band_stacks[StackForm.nnn] < 12) // allow 12 bandstack entries each band
            {

                for (int ii = 0; ii < band_stacks[StackForm.nnn]; ii++)  // check for freq dups, so dont add if a dup in freq
                {
                    if (StackForm.freq1[ii] == Math.Round(VFOAFreq, 6))
                    {
                        dupfound = true;
                        break;
                    }

                }
                if (dupfound == false)
                {
                    DB.AddBandStack(StackForm.band_list[StackForm.nnn], RX1DSPMode.ToString(), RX1Filter.ToString(), Math.Round(VFOAFreq, 6)); // take current band, DSP mode, filter, and freq

                    BandStackUpdate();
                    StackForm.bandstackupdate();


                    StackForm.xxx = band_stacks[StackForm.nnn] - 1; // go to end of list and highlight it

                    textBox1.SelectionStart = (StackForm.xxx * StackForm.BSLength);
                    textBox1.SelectionLength = StackForm.BSLength;
                    StackForm.updateindex();
                  
                }


                dupfound = false;

            } //  if (xxx < 12)

        } // buttonAdd_Click

        //===============================================================================
        // ke9ns add bandstack from main console screen
        private void buttonSort_Click(object sender, EventArgs e)
        {
        
                        int index = band_stacks[StackForm.nnn];

                        try
                        {
                            if (index < 2) return; // nothing to sort


                            // bubble sort
                            for (int d = 0; d < index;)
                            {

                                for (int f = index - 1; f > d; f--)  // check end of list first and work back to front
                                {
                                    if (StackForm.freq1[d] > StackForm.freq1[f])
                                    {

                                        string tempmode = StackForm.mode1[d];
                                        string tempfilter = StackForm.filter1[d];
                                        double tempfreq = StackForm.freq1[d];


                                        StackForm.freq1[d] = StackForm.freq1[f];
                                        StackForm.mode1[d] = StackForm.mode1[f];
                                        StackForm.filter1[d] = StackForm.filter1[f];

                                        StackForm.freq1[f] = tempfreq;
                                        StackForm.mode1[f] = tempmode;
                                        StackForm.filter1[f] = tempfilter;

                                        StackForm.bubble = true;
                                    }


                                } // for f

                                if (StackForm.bubble == false) d++;
                                else StackForm.bubble = false;  // reset

                            } // for d

                            for (int g = 0; g < index; g++)  // update database with new sorted bandstack
                            {

                                SortBandStack(g, StackForm.mode1[g], StackForm.filter1[g], StackForm.freq1[g]);     //   DB.SaveBandStack(console.last_band, g, mode1[g], filter1[g], freq1[g]);

                            }

                            BandStackUpdate();  // update the console with the new database sorted bandstack

                            StackForm.bandstackupdate();

                        }
                        catch (Exception)
                        {
                            Debug.WriteLine("Bad location3");

                        }
           
        } //buttonSort_Click

        //===============================================================================
        // ke9ns add bandstack from main console screen
        private void buttonDel_Click(object sender, EventArgs e)
        {
            //  StackForm.buttonDel.PerformClick();

            try
            {
                if (band_stacks[StackForm.nnn] < 3) return;    // dont allow removing all the bandstacks

                if (StackForm.xxx >= band_stacks[StackForm.nnn]) return;    // if you click past the last index freq, then do nothing.

               iii = StackForm.xxx;                            // update new position in bandstack for checking if its locked

                if (StackForm.filter1[StackForm.xxx].Contains("@") == false)      // can only delete an unlocked entry in the bandstack
                {
                    DialogResult dr = MessageBox.Show("Are you sure you want to Delete the selected BandStack Entry?",
                            "Delete?",
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);

                    if (dr == DialogResult.No) return;


                    PurgeBandStack(StackForm.xxx, StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx].ToString());

                    BandStackUpdate();
                    StackForm.bandstackupdate();
                    StackForm.updateindex();
                }
            }
            catch (Exception)
            {
                Debug.WriteLine("Bad location2");

            }


        } // buttonDel_Click

        //===============================================================================
        // ke9ns add bandstack from main console screen
        private void textBox1_MouseDown(object sender, MouseEventArgs e)
        {
            textBox1.ShortcutsEnabled = false; // added to eliminate the contextmenu from popping up

        }

        //===============================================================================
        // ke9ns add bandstack from main console screen
        private void textBox1_MouseUp(object sender, MouseEventArgs e)
        {

            textBox1.ShortcutsEnabled = false;


            if (e.Button == MouseButtons.Left)
            {
                try
                {
                    int ii = textBox1.GetCharIndexFromPosition(e.Location);

                    StackForm.xxx = (ii / StackForm.BSLength); //find row 

                    if (StackForm.xxx >= band_stacks[StackForm.nnn]) return; // if you click past the last index freq, then do nothing.

                    Debug.WriteLine("xxx " + StackForm.xxx + " , " + ii);


                    textBox1.SelectionStart = (StackForm.xxx * StackForm.BSLength);
                    textBox1.SelectionLength = StackForm.BSLength;

                    Debug.WriteLine("index at start of click " + iii);

                    if (filter2[iii] == "") // check if current index locked
                    {
                        StackForm.yyy = 1;
                        SaveBand(); // put away last freq you were on before moving
                        Debug.WriteLine("OPEN SO SAVE");
                    }
                    else
                    {
                        Debug.WriteLine("LOCKED SO DONT SAVE " + iii + " says " + filter2[iii]);
                    }

                    iii = StackForm.xxx; // update new position in bandstack for checking if its locked

                    Debug.WriteLine("index after click " + iii);

                    StackForm.yyy = 0;

                    StackForm.updateindex();

                    SetBand(StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx]);

                   UpdateWaterfallLevelValues();
                }
                catch
                {
                    Debug.WriteLine("Failed to determine index or cannot save bandstack because its locked");

                    if (StackForm.yyy == 1)
                    {
                        StackForm.updateindex();

                        SetBand(StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx]);

                        UpdateWaterfallLevelValues();
                    }

                }

            } // LEFT CLICK MOUSE

            else if (e.Button == MouseButtons.Right) // ke9ns right click = lock or unlock bandstank memory
            {

                //-----------------------------------------------------------
                // This saves the bandstack (if unlocked)
                try
                {
                    Debug.WriteLine("CONSOLE RIGHT CLICK");

                    int ii = textBox1.GetCharIndexFromPosition(e.Location);

                    StackForm.xxx = (ii / StackForm.BSLength); //find row 

                    Debug.WriteLine("CONSOLE RIGHT CLICK "+ StackForm.xxx + " , " + ii + " , "+ band_stacks[StackForm.nnn]);

                    if (StackForm.xxx >= band_stacks[StackForm.nnn]) return; // if you click past the last index freq, then do nothing.


                    textBox1.SelectionStart = (StackForm.xxx * StackForm.BSLength);
                    textBox1.SelectionLength = StackForm.BSLength;

                    Debug.WriteLine("Cindex at start of click " + iii);

                    if (filter2[iii] == "") // check if current index locked
                    {
                        StackForm.yyy = 1;
                        SaveBand(); // put away last freq you were on before moving
                        Debug.WriteLine("COPEN SO SAVE");
                    }
                    else
                    {
                        Debug.WriteLine("CLOCKED SO DONT SAVE " + iii + " says " + filter2[iii]);
                    }

                    iii = StackForm.xxx; // update new position in bandstack for checking if its locked

                    Debug.WriteLine("Cindex after click " + iii);

                    StackForm.yyy = 0;

                    StackForm.updateindex();

                    SetBand(StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx]);

                    UpdateWaterfallLevelValues();
                }
                catch
                {
                    Debug.WriteLine("Failed to determine index or cannot save bandstack because its locked");

                    if (StackForm.yyy == 1)
                    {
                        StackForm.updateindex();

                        SetBand(StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx]);

                        UpdateWaterfallLevelValues();
                    }

                }


                //-----------------------------------------------------------
                // This toggles the LOCK / UNLOCK and saves it
                try
                {

                    int ii = textBox1.GetCharIndexFromPosition(e.Location);

                    Debug.WriteLine("BOX POS " + ii);

                    StackForm.xxx = (ii / StackForm.BSLength); //find row 

                    if (StackForm.xxx >= band_stacks[StackForm.nnn]) return; // if you click past the last index freq, then do nothing.

                    textBox1.SelectionStart = (StackForm.xxx * StackForm.BSLength);
                    textBox1.SelectionLength = StackForm.BSLength;

                    SaveBand(); // put away last freq you were on before moving

                    StackForm.updateindex();

                    SetBand(StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx]);

                    UpdateWaterfallLevelValues();


                    if (StackForm.filter1[StackForm.xxx].Contains("@"))
                    {
                        StackForm.filter1[StackForm.xxx] = StackForm.filter1[StackForm.xxx].Substring(0, (StackForm.filter1[StackForm.xxx].Length) - 1); // toggle LOCK OFF
                    }
                    else
                    {
                        StackForm.filter1[StackForm.xxx] = StackForm.filter1[StackForm.xxx] + "@"; // toggle LOCK ON

                    }


                    DB.SaveBandStack(last_band, StackForm.xxx, StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx]);

                  
                    StackForm.bandstackupdate(); // update bandstack screen
                    StackForm.updateindex();

                }
                catch
                {
                    Debug.WriteLine("Bad location1");

                }

            } // RIGHT CLICK MOUSE
            else if (e.Button == MouseButtons.Middle) // ke9ns Middle erases bandstack entries 1 at a time
            {

                try
                {
                    if (band_stacks[StackForm.nnn] < 3) return;    // dont allow removing all the bandstacks

                    int ii = textBox1.GetCharIndexFromPosition(e.Location);

                    StackForm.xxx = (ii / StackForm.BSLength);                                // find row 

                    if (StackForm.xxx >= band_stacks[StackForm.nnn]) return;    // if you click past the last index freq, then do nothing.


                    textBox1.SelectionStart = (StackForm.xxx * StackForm.BSLength);
                    textBox1.SelectionLength = StackForm.BSLength;

                    iii = StackForm.xxx;                            // update new position in bandstack for checking if its locked


                    if (StackForm.filter1[StackForm.xxx].Contains("@") == false)      // can only delete an unlocked entry in the bandstack
                    {

                       PurgeBandStack(StackForm.xxx, StackForm.mode1[StackForm.xxx], StackForm.filter1[StackForm.xxx], StackForm.freq1[StackForm.xxx].ToString());

                        BandStackUpdate();
                        StackForm.bandstackupdate();
                        StackForm.updateindex();
                    }
                }
                catch (Exception)
                {
                    Debug.WriteLine("Bad location2");

                }


                btnHidden.Focus();



            } // MIDDLE CLICK MOUSE




        } // textBox1_MouseUp

        private void labelTS5_MouseUp(object sender, MouseEventArgs e)
        {

          //  labelTS5.ShortcutsEnabled = false;

            if (StackForm == null || StackForm.IsDisposed) StackForm = new StackControl(this);

            if (e.Button == MouseButtons.Left) // ke9ns 
            {
                
                  StackForm.Show();
                  StackForm.Focus();
                  StackForm.WindowState = FormWindowState.Normal; // ke9ns add

            }


            else if (e.Button == MouseButtons.Right) // ke9ns 
            {

                            
                if (panelTSBandStack.Enabled == false)
                {
                    buttonAdd.Enabled = true;
                    buttonSort.Enabled = true;
                    buttonDel.Enabled = true;

                    buttonAdd.Visible = true;
                    buttonSort.Visible = true;
                    buttonDel.Visible = true;


                    panelTSBandStack.Enabled = true;
                    panelTSBandStack.Visible = true;


                    picDisplay.Width = panelDisplay.Width - panelTSBandStack.Width - 18;

                    Display.Target = picDisplay;
                    Display.Init();

                    UpdateDisplay();

                    panelDisplay.Invalidate();
                    picDisplay.Invalidate();
                }
                else
                {
                    buttonAdd.Enabled = false;
                    buttonSort.Enabled = false;
                    buttonDel.Enabled = false;

                    buttonAdd.Visible = false;
                    buttonSort.Visible = false;
                    buttonDel.Visible = false;


                    panelTSBandStack.Enabled = false;
                    panelTSBandStack.Visible = false;


                    picDisplay.Width = panelDisplay.Width - 18; // 9 pixels on each size

                    Display.Target = picDisplay;
                    Display.Init();

                    UpdateDisplay();

                    panelDisplay.Invalidate();
                    picDisplay.Invalidate();

                }
            } // right click

        } // labelTS5_MouseUp

        //=============================================================================
        // ke9ns add
        private void regBox_MouseUp(object sender, MouseEventArgs e)
        {

            regBox.ShortcutsEnabled = false;
            regBox1.ShortcutsEnabled = false;

            if (StackForm == null || StackForm.IsDisposed) StackForm = new StackControl(this);

            if (e.Button == MouseButtons.Left) // ke9ns 
            {

                StackForm.Show();
                StackForm.Focus();
                StackForm.WindowState = FormWindowState.Normal; // ke9ns add

            }
            else if (e.Button == MouseButtons.Right) // ke9ns 
            {


                if (panelTSBandStack.Enabled == false)
                {
                    buttonAdd.Enabled = true;
                    buttonSort.Enabled = true;
                    buttonDel.Enabled = true;

                    buttonAdd.Visible = true;
                    buttonSort.Visible = true;
                    buttonDel.Visible = true;


                    panelTSBandStack.Enabled = true;
                    panelTSBandStack.Visible = true;


                    picDisplay.Width = panelDisplay.Width - panelTSBandStack.Width - 18; // reduce the size the panadapter display when Bandstack turned on

                    if (Display.WMS == 1) // ke9ns force a redraw of the waterfall as we shrink or expand the panafall display area
                    {
                        Display.WMS = 0;
                    }
                    else
                    {
                        Display.WMS = 1;
                    }

                    picDisplay.Invalidate();
                    panelDisplay.Invalidate();
              
               
                    if (Display.WMS == 1)  // ke9ns force a redraw of the waterfall as we shrink or expand the panafall display area
                    {
                        Display.WMS = 0;
                    }
                    else
                    {
                        Display.WMS = 1;
                    }

                  
                }
                else
                {
                    buttonAdd.Enabled = false;
                    buttonSort.Enabled = false;
                    buttonDel.Enabled = false;

                    buttonAdd.Visible = false;
                    buttonSort.Visible = false;
                    buttonDel.Visible = false;


                    panelTSBandStack.Enabled = false;
                    panelTSBandStack.Visible = false;


                    picDisplay.Width = panelDisplay.Width - 18; // 9 pixels on each size

                    if (Display.WMS == 1)  // ke9ns force a redraw of the waterfall as we shrink or expand the panafall display area
                    {
                        Display.WMS = 0;
                    }
                    else
                    {
                        Display.WMS = 1;
                    }

                    picDisplay.Invalidate();
                    panelDisplay.Invalidate();
 
                    if (Display.WMS == 1)   // ke9ns force a redraw of the waterfall as we shrink or expand the panafall display area
                    {
                        Display.WMS = 0;
                    }
                    else
                    {
                        Display.WMS = 1;
                    }

               }

            } // right click


        } // regBox_Mouseup

        //=============================================================================
        // ke9ns add
        private void regBox1_MouseDown(object sender, MouseEventArgs e)
        {
            regBox.ShortcutsEnabled = false;
            regBox1.ShortcutsEnabled = false;

        } // regBox1_MouseDown





        //=============================================================================
        // ke9ns add call DB routine and delete the current freq listed in the current bandstack
        public void PurgeBandStack( int xxx, string mode, string filter, string freq)
        {
        
            DB.PurgeBandStack(xxx, last_band, mode, filter, freq); // call database and delete 1 bandstack entry for the current freq

           
        } //  PurgeBandStack (this routine is called from stack.cs)

      



        //=============================================================================
        // ke9ns add call DB routine and SORT the current freq listed in the current bandstack
        public void SortBandStack(int g, string mode, string filter, double freq)
        {

            DB.SortBandStack(last_band, g, mode, filter, freq);  // call database and sort bandstack entries 

        }

        //=============================================================================
        // ke9ns add call DB routine and SORT the current freq listed in the current bandstack
        public void BandStackUpdate()
        {
            UpdateBandStackRegisters();  // recheck the remaining bandstack entries 

            SetRX1BandButton(RX1Band);   // update the remaining bandstack entries

            UpdateWaterfallLevelValues();

        } // 
       
        
      

   




    //============================================================================
    //============================================================================
    //============================================================================
    // ke9ns add to allow extra control of group panels (ie rounded edges)
    public static GraphicsPath CreatePath(float x, float y, float width, float height,
                                      float radius, bool RoundTopLeft, bool RoundTopRight, bool RoundBottomRight, bool RoundBottomLeft)
        {
            float xw = x + width;
            float yh = y + height;
            float xwr = xw - radius;
            float yhr = yh - radius;
            float xr = x + radius;
            float yr = y + radius;
            float r2 = radius * 2;
            float xwr2 = xw - r2;
            float yhr2 = yh - r2;

            GraphicsPath p = new GraphicsPath();
            p.StartFigure();

            //Top Left Corner

            if (RoundTopLeft)
            {
                p.AddArc(x, y, r2, r2, 180, 90);
            }
            else
            {
                p.AddLine(x, yr, x, y);
                p.AddLine(x, y, xr, y);

            }

            //Top Edge
            p.AddLine(xr, y, xwr, y);

            //Top Right Corner

            if (RoundTopRight)
            {
                p.AddArc(xwr2, y, r2, r2, 270, 90);
            }
            else
            {
                p.AddLine(xwr, y, xw, y);
                p.AddLine(xw, y, xw, yr);
            }


            //Right Edge
            p.AddLine(xw, yr, xw, yhr);

            //Bottom Right Corner

            if (RoundBottomRight)
            {
                p.AddArc(xwr2, yhr2, r2, r2, 0, 90);
            }
            else
            {
                p.AddLine(xw, yhr, xw, yh);
                p.AddLine(xw, yh, xwr, yh);
            }


            //Bottom Edge
            p.AddLine(xwr, yh, xr, yh);

            //Bottom Left Corner           

            if (RoundBottomLeft)
            {
                p.AddArc(x, yhr2, r2, r2, 90, 90);
            }
            else
            {
                p.AddLine(xr, yh, x, yh);
                p.AddLine(x, yh, x, yhr);
            }

            //Left Edge
            p.AddLine(x, yhr, x, yr);

            p.CloseFigure();

            return p;

        } // CreatePath(float x, float y, float width, float height,  float radius, bool RoundTopLeft, bool RoundTopRight, bool RoundBottomRight, bool RoundBottomLeft)



      


      


        //==================================================================
        // ke9ns add so all richtextbox items can still use the mouse wheel to change freq.
        private void labelTS4_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Console_MouseWheel(this, new MouseEventArgs(MouseButtons.None, 0, 0, 0, e.Delta));
        } // labelTS4_MouseWheel


        public bool CQCQCALL = false; // ke9ns add true = wave plays CQCQ.wav file

        //==================================================================
        // ke9ns add
        private void checkBoxCallCQ_CheckedChanged(object sender, EventArgs e)
        {
           

        } // checkBoxCallCQ_CheckedChanged

        //==================================================================
        // ke9ns add CQCQ button when trying to become a DX spot by called CQ
        private void btnTrack_Click(object sender, EventArgs e)
        {
         //   btnHidden.Focus();

            string filePath = AppDataPath + "QuickAudio\\";

            if (WaveForm.chkQuickAudioFolder.Checked == false) WaveForm.chkQuickAudioFolder.Checked = true;

            if (WaveForm.chkQuickAudioFolder.Checked == true)  // ke9ns add
            {

                if (Directory.Exists(filePath)) // need to see the quickaudio folder
                {

                    if (File.Exists(filePath + "CQCQ.wav"))
                    {

                        if ((chkPower.Checked)) // ke9ns add allow tx on play directly so you dont need to mox and play
                        {

                            if (WaveForm.QuickPlay == false)
                            {
                                if (chkVAC1.Checked)
                                {
                                    vac1 = 1;
                                    chkVAC1.Checked = false;
                                }

                                CQCQCALL = true;// let wave: chkQuickPlay_CheckedChanged know you want to play CQCQ.WAV file only

                                checkBoxID.Checked = true;
                                ckQuickPlay.Checked = true;
                                chkMOX.Checked = true;     // key radio 
                                WaveForm.QuickPlay = true;
                           
                        }
                        else
                        {

                            WaveForm.QuickPlay = false;
                            chkMOX.Checked = false;     // unkey radio
                            ckQuickPlay.BackColor = SystemColors.Control;//k6jca 1/13/08
                            CQCQCALL = false;

                            if (vac1 == 1)
                            {
                                vac1 = 0;
                                Thread.Sleep(100);
                                chkVAC1.Checked = true;

                            }

                        }
                    } // chkpower


                    } //  if (File.Exists(filePath + "\\CQCQ.wav"))
                    else
                    {
                        MessageBox.Show("No CQCQ.wav file found in folder: " + filePath + "\n" +
                             "Open Wave menu and Click the CQCQ button to record your Voice or CW,\n" +
                             "Speak or CW your CQ message including your Callsign as you would when trying to make a contact.\n" +
                             "Then click CQCQ button again, to end the recording", "CQCQ audio File");

                    }

                } // if (!Directory.Exists(filePath)) 

            } //  if (WaveForm.chkQuickAudioFolder.Checked == true) 

          //  btnHidden.Focus();

        } // btnTrack_Click

        private void regBox1_TextChanged(object sender, EventArgs e)
        {

        }

        public bool CALLCALL = false; // ke9ns add true = wave plays CALL.wav file

        //=======================================================================
        // ke9ns add  CALL button This button is used when trying to make a contact with a station
        private void buttonCall_Click(object sender, EventArgs e)
        {
          //  btnHidden.Focus();

            string filePath = AppDataPath + "QuickAudio\\";

            if (WaveForm.chkQuickAudioFolder.Checked == false) WaveForm.chkQuickAudioFolder.Checked = true;

            if (WaveForm.chkQuickAudioFolder.Checked == true)  // ke9ns add
            {

                if (Directory.Exists(filePath)) // need to see the quickaudio folder
                {

                    if (File.Exists(filePath + "CALL.wav"))
                    {

                        if ((chkPower.Checked)) // ke9ns add allow tx on play directly so you dont need to mox and play
                        {

                            if (WaveForm.QuickPlay == false)
                            {

                                if (chkVAC1.Checked)
                                {
                                    vac1 = 1;
                                    chkVAC1.Checked = false;
                                }

                                CALLCALL = true;// let wave: chkQuickPlay_CheckedChanged know you want to play CALL.WAV file only

                                checkBoxID.Checked = true;
                                ckQuickPlay.Checked = true;
                                chkMOX.Checked = true;     // key radio 
                                WaveForm.QuickPlay = true;
                                //   ckQuickPlay.BackColor = button_selected_color;
                                // TIMETOID = false; this is set false by chkQuickPlay_CheckedChanged
                            }
                            else
                            {

                                WaveForm.QuickPlay = false;
                                chkMOX.Checked = false;     // unkey radio
                                ckQuickPlay.BackColor = SystemColors.Control;//k6jca 1/13/08
                                CALLCALL = false;

                                if (vac1 == 1)
                                {
                                    vac1 = 0;
                                    Thread.Sleep(100);
                                    chkVAC1.Checked = true;

                                }

                            }


                        } // chkpower


                    } //  if (File.Exists(filePath + "\\CALL.wav"))
                    else
                    {
                        MessageBox.Show("No REPLY CALL.wav file found in folder: " + filePath + "\n" +
                           "Open Wave menu and Click the REPLY button to record your Voice or CW,\n" +
                           "Speak or CW your Callsign as you would when trying to contact a DX station.\n" +
                           "Then click REPLY button again, to end the recording" , "REPLY audio File");

                    }

                } // if (!Directory.Exists(filePath)) 

            } //  if (WaveForm.chkQuickAudioFolder.Checked == true) 

          //  btnHidden.Focus();


        } // buttonCall_Click




        //=======================================================================================================
        //=======================================================================================================
        // ke9ns add (for magnifier)

        Bitmap bitmap1;

        public Bitmap bitmap2;  //something Display.cs can display
  
        private void MagnifyImage() // get mouse position from mousemove routine above and put in DX_X and _Y
        {

            bitmap1 = new Bitmap(picDisplay.Width, picDisplay.Height); // ke9ns set bitmap size to size of picDisplay since it gets resized with your screen
            picDisplay.DrawToBitmap(bitmap1,picDisplay.ClientRectangle); // ke9ns grab picDisplay and convert to bitmap

            bitmap2 =  bitmap1.Clone(new Rectangle(DX_X - 25, DX_Y - 25, 50, 50), PixelFormat.Format32bppRgb); // get small window of bitmap

            // g.DrawImage(bitmap2, DX_X - 50, DX_Y - 50, 100,100);

        } // getImage()




        //=========================================================
        // ke9ns 
        public bool CW_POLL()
        {
            bool dot, dash, rca_ptt, mic_ptt;

            if ((cwxForm != null) && (cwxForm.stopPoll == true))
            {
                FWC.ReadPTT(out dot, out dash, out rca_ptt, out mic_ptt);

                if ((dot == true) || (dash == true)) return true;
            }

            return false;
        }


        public bool keydot = false;  // ke9ns add

        public bool CWP = false; // ke9ns add allows CWX panel usage while in SSB mode


      
        //==================================================================================================
        public bool KEYON = false;

        public void CWINUSBMODE()
        {
            if (KEYON  == true)
            { 
                    switch (Audio.TXDSPMode)
                    {
                        case DSPMode.USB:
                        case DSPMode.CWU:
                        case DSPMode.DIGU:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                        case DSPMode.LSB:
                        case DSPMode.CWL:
                        case DSPMode.DIGL:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, -cw_pitch - 100, -cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                        case DSPMode.DSB:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                        case DSPMode.AM:
                        case DSPMode.SAM:
                        case DSPMode.FM:
                            Audio.SineFreq1 = cw_pitch;
                            DttSP.SetTXFilter(1, cw_pitch - 100, cw_pitch + 100);
                            Audio.TXInputSignal = Audio.SignalSource.SINE;
                            Audio.SourceScale = 1.0;
                            break;
                    }

                    DttSP.SetMode(1, 0, DSPMode.DIGU);

                    // ensure radio believes we are in CW for tx freq limits
                    if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                    {
                        switch (Audio.TXDSPMode)
                        {
                            case DSPMode.CWL:
                            case DSPMode.LSB:
                            case DSPMode.DIGL:
                                FWC.SetTXDSPMode(DSPMode.CWL);

                                break;
                            default:
                                FWC.SetTXDSPMode(DSPMode.CWU);
                                break;
                        }
                    }
              


                    chkMOX.Checked = true;
                
                    current_ptt_mode = PTTMode.MANUAL;

                    switch (Audio.TXDSPMode)
                    {
                        case DSPMode.CWL:
                        case DSPMode.CWU:
                            Audio.TXDSPMode = DSPMode.DIGU;
                            break;
                    }
           
	

                if (chkMUT.Checked == false) // ke9ns add prevent MUT from malfunctioning
                {
                    Audio.MonitorVolume = (ptbAF.Value / 100.0) / 10;  // ke9ns add cut volume during a tune
                  
                }
                else
                {
                    if (chkBoxMuteSpk.Checked == false) // ke9ns add
                    {
                        Audio.MonitorVolume = 0.0; // if muted
                     
                    }
                    else
                    {
                      //  Debug.WriteLine("check...");

                    }
                }

              

			} // CW bug being used
			else // when you unkey the bug then put back everything
			{
                Audio.TXInputSignal = Audio.SignalSource.RADIO;
             

				chkMOX.Checked = false;
				
              
			
                DSPMode mode = dsp.GetDSPTX(0).CurrentDSPMode;

                if (fwc_init && (current_model == Model.FLEX5000 || current_model == Model.FLEX3000))
                FWC.SetTXDSPMode(mode);

				DttSP.SetMode(1, 0, mode);
				switch(mode)
				{
					case DSPMode.AM:
					case DSPMode.SAM:
					case DSPMode.FM:
						Audio.SineFreq1 = cw_pitch;
						break;
					case DSPMode.CWL:
					case DSPMode.CWU:
						Audio.TXDSPMode = mode;
						break;
				}

				DttSP.SetTXFilter(1, dsp.GetDSPTX(0).TXFilterLow, dsp.GetDSPTX(0).TXFilterHigh);

				if(tune_meter_tx_mode != old_tune_meter_tx_mode)					
					CurrentMeterTXMode = old_tune_meter_tx_mode;

                if (chkNoiseGate.Checked)
                    dsp.GetDSPTX(0).TXSquelchOn = true;

                if (chkMUT.Checked == false) // ke9ns add prevent MUT from malfunctioning
                {
                    Audio.MonitorVolume = ptbAF.Value / 100.0; // ke9ns add to bring volume back up when done
                }


            } // cw bug released

        } // CWINUSEMODE()


        //==============================================================================================
        // ke9ns add
        public bool WideWaterID = false; // ke9ns add allows for wider TX water ID

        public bool WIDEWATERID
        {
            get {
                if (setupForm != null) return setupForm.chkTXWtrID.Checked;
                else return WideWaterID;
            }
            set { WideWaterID = value; }
        }


        //====================================================================================================
        // ke9ns add works auto closing messagebox
        public class AutoClosingMessageBox
        {
            System.Threading.Timer _timeoutTimer;
            string _caption;

            AutoClosingMessageBox(string text, string caption, int timeout)
            {
                _caption = caption;


                _timeoutTimer = new System.Threading.Timer(OnTimerElapsed, null, timeout, System.Threading.Timeout.Infinite);

                using (_timeoutTimer)
                {
                      MessageBox.Show(text, caption, MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1,MessageBoxOptions.DefaultDesktopOnly);
                   //  MessageBox.Show(text);
                   
                }
                
            }


            //========================================================================================
            
            public static void Show(string text, string caption, int timeout)
            {
                new AutoClosingMessageBox(text, caption, timeout);
            }

            
            void OnTimerElapsed(object state) // ke9ns used for auto closing messagebox
            {
                IntPtr mbWnd = FindWindow("#32770", _caption); // lpClassName is #32770 for MessageBox

                if (mbWnd != IntPtr.Zero) SendMessage(mbWnd, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);

                _timeoutTimer.Dispose();
            }

            const int WM_CLOSE = 0x0010;
            [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]
            static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

            [System.Runtime.InteropServices.DllImport("user32.dll", CharSet = System.Runtime.InteropServices.CharSet.Auto)]
            static extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);

        } // AutoClosingMessageBox



        //======================================================================================================
        // ke9ns add to allow JPEG compression
        private ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
            foreach (ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }
            }
            return null;
        }


        //=========================================================================================
        // ke9ns add
        public bool URLPresent = false; // ke9ns add true=imagerequest for simple HTTPserver (this is used in setup->general->user interface to show if someone is looking at your http server address)

        public bool URLPRESENT
        {
            get
            {
                return URLPresent;
            }

            set
            {
                URLPresent = value;

                if (setupForm != null)
                {
                    if (value == true) setupForm.groupBox2.Text = "HttpServer: Active";
                    else setupForm.groupBox2.Text = "HttpServer";
                }

                //  URLPresent = false; // reset

            }


        } // URLPRESENT


        Bitmap bitmap; // ke9ns add
        Bitmap bitmapA; // ke9ns add

       

        byte[] picDisplayOutput; // ke9ns add
        MemoryStream memstream; // ke9ns add

        // ke9ns add
        private void comboCWTXProfile_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 4; // select audio tab;

                //   setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
                //    setupForm.chkAudioIQtoVAC.Focus();

            } // right click
        } //comboCWTXProfile_mousedown

        // ke9ns add
        private void comboDigTXProfile_MouseDown(object sender, MouseEventArgs e)
        {
            MouseEventArgs me = (MouseEventArgs)e;

            if ((me.Button == System.Windows.Forms.MouseButtons.Right))
            {

                if (setupForm == null || setupForm.IsDisposed)
                    setupForm = new Setup(this);

                setupForm.Show();
                setupForm.Focus();
                setupForm.WindowState = FormWindowState.Normal; // ke9ns add

                setupForm.tcSetup.SelectedIndex = 4; // select audio tab;

                //   setupForm.tcAudio.SelectedIndex = 1; // select vac1 tab
                //    setupForm.chkAudioIQtoVAC.Focus();

            } // right click
        } // comboDigTXProfile











        //======================================================================================================
        // ke9ns add  used by HTTP routine to send graphic image of either PAN or full console window to internet
        public byte[] getImage()
        {

            if ((setupForm != null) && (setupForm.checkBoxHTTP1.Checked == true))
            {
               
                Graphics myGraphics = this.CreateGraphics();
                Size s = this.Size;
               // Size s1 = new Size(s.Width / 2, s.Height / 2);
               // Rectangle compressionRectangle = new Rectangle(0, 0,s1.Width,s1.Height);
               // myGraphics.DrawImage(bitmap, compressionRectangle);

                bitmap = new Bitmap(s.Width, s.Height, myGraphics); // bitmap of the exact size of the console window
              
                Graphics memGraph = Graphics.FromImage(bitmap);

                memGraph.CopyFromScreen(this.Location.X, this.Location.Y, 0, 0, s);
           

                using (memstream = new MemoryStream())
                {
                    ImageCodecInfo jpgEncoder = GetEncoder(ImageFormat.Jpeg);
                    System.Drawing.Imaging.Encoder myEncoder = System.Drawing.Imaging.Encoder.Quality;
                    EncoderParameters myEncoderParameters = new EncoderParameters(1);

                   EncoderParameter myEncoderParameter = new EncoderParameter(myEncoder, 40L);  // ke9ns 40% quality  (reduction to reduce byte size since this is the entire console screen)
                  
                    myEncoderParameters.Param[0] = myEncoderParameter;
                    bitmap.Save(memstream, jpgEncoder, myEncoderParameters);
                    picDisplayOutput = memstream.ToArray();
                }


            }
            else
            {

                bitmap = new Bitmap(picDisplay.Width, picDisplay.Height); // ke9ns set bitmap size to size of picDisplay since it gets resized with your screen
                picDisplay.DrawToBitmap(bitmap, picDisplay.ClientRectangle); // ke9ns grab picDisplay and convert to bitmap

                using (memstream = new MemoryStream())
                {
                    bitmap.Save(memstream, ImageFormat.Jpeg);
                    picDisplayOutput = memstream.ToArray();
                }

            }

            return picDisplayOutput;  // return byte array of jpeg


        } // getImage()

        byte[] audioOutput; // ke9ns add

        //======================================================================================================
        // ke9ns add  used by HTTP routine to send graphic image of either PAN or full console window to internet
        public byte[] getAudio()
        {
                    
             //   bitmap = new Bitmap(picDisplay.Width, picDisplay.Height); // ke9ns set bitmap size to size of picDisplay since it gets resized with your screen
              //  picDisplay.DrawToBitmap(bitmap, picDisplay.ClientRectangle); // ke9ns grab picDisplay and convert to bitmap

              //  using (memstream = new MemoryStream())
               // {
                 //   bitmap.Save(memstream, ImageFormat.Jpeg);
                  //  picDisplayOutput = memstream.ToArray();
              //  }

                using (memstream = new MemoryStream())
                {
             //   WWV_data;
                    audioOutput = memstream.ToArray();
                }


            return audioOutput;  // return byte array of jpeg


        } // getAudio()

/*
            var waveIn = new WaveInEvent();
            waveIn.DeviceNumber = deviceID;
            waveIn.WaveFormat = Program.WAVEFORMAT;
            waveIn.BufferMilliseconds = 50;
            waveIn.DataAvailable += OnDataAvailable;

            var udpSender = new UdpClient();
                    udpSender.JoinMulticastGroup(Program.MulticastIP);

            waveIn.StartRecording();

            private void OnDataAvailable(object sender, WaveInEventArgs e)
        {
            udpSender.Send(e.Buffer, e.BytesRecorded, Program.EndPoint);
        }
*/

        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        //       
        public static int m_port = 0;   // ke9ns add port# 
        public static bool m_terminated = true;

        // ke9ns add  called by setup() when Basic HTTP activated 
        public bool HttpServer
        {

            set
            {
                httpFile.HttpServer1();
            }

        } //HttpServer


        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        public int HTTP_PORT
        {
            get
            {
                return (int)setupForm.udHttpPort.Value;
            }

        } // HTTP_PORT

        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        public int HTTP_REFRESH
        {
            get
            {
                return (int)setupForm.udHttpRefresh.Value;
            }

        } // HTTP_REFRESH

        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        public string HTTP_USER
        {
            get
            {
                return setupForm.txtHttpUser.Text;
            }

        } // HTTP_PORT


        //=========================================================================================
        //=========================================================================================
        // ke9ns add allows Http server to talk with Setup through Console
        public string HTTP_PASS
        {
            get
            {
                return setupForm.txtHttpPass.Text;
            }

        } // HTTP_PORT

        // ke9ns add
        private void trackMenuItem1_MouseEnter(object sender, EventArgs e)
        {
            HELPMAP = true;
         
        }

        private void trackMenuItem1_MouseLeave(object sender, EventArgs e)
        {
            HELPMAP = false;
    
        }


        //==========================================================================
        // ke9ns add
        public bool N1MM
        {
            get
            {
                return true;
            }
            set
            {
                if (value == true)
                {
                    N1MM_ON = true;
                    Thread t8 = new Thread(new ThreadStart(N1MM_SPECTRUM));
                    t8.Name = "N1MM_SPECTRUM display";
                    t8.IsBackground = true;
                    t8.Priority = ThreadPriority.Normal;
                    t8.Start();
                   
                }
                else
                {
                     N1MM_ON = false; // shut down thread
                   
                }
            }



        } //  N1MM


        // ke9ns n1mm
       


        //=========================================================================================
        /*
         
     <?xml version="1.0" encoding="utf-8"?>
     <Spectrum>
     <Name>N1MM SDR1</Name>
     <LowScopeFrequency>14000</LowScopeFrequency>
     <HighScopeFrequency>14055</HighScopeFrequency>
     <ScalingFactor>0.3125</ScalingFactor>
     <DataCount>475</DataCount>
     <SpectrumData>0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0, 
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0, 
     0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,19,25,0,0,0,0,0,0,0,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0, 
     1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0, 
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,38,50,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0, 
     0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
     </SpectrumData>
     </Spectrum>
          
         */


        IPEndPoint RemoteEndPoint; // ke9ns add
        Socket server; // ke9ns add

        public bool N1MM_ON = false; // ke9ns add setupform turns this ON
        public int N1MM_Sample = 0; // ke9ns add  current number of samples in the pan (W)
        public int N1MM_Floor = -130; // ke9ns add  current lowest dBm value on the pan
        public int N1MM_Low = 0; // ke9ns add in khz found in display.cs
        public int N1MM_High = 0; // ke9ns add in khz found in display.cs
        public bool N1MM_MINIMIZE = false; // ke9ns add console minimized or not

        public int[] N1MM_Data = new int[6000]; // ke9ns add

        // StringBuilder N1MM_Data_String = new StringBuilder();
        string N1MM_Data_String;

      

        //=========================================================================================
        // ke9ns add thread  (N1MM+ uses connectionless UDP that is unreliable)

        public void N1MM_SPECTRUM()
        {
            Debug.WriteLine("N1MM START");

            if (SpotForm == null || SpotForm.IsDisposed) SpotForm = new SpotControl(this);

              RemoteEndPoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 13064);
               server = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

          
            //    IPEndPoint RemoteEndPoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 13064);
            //    Socket server = new Socket(AddressFamily.InterNetwork,SocketType.Dgram, ProtocolType.Udp);
            //  string welcome = "Hello, are you there?";

            // this should be the bandpass, so LOW = VFOA - lowrxbandpass, HIGH = VFOA + highrxbandpass

            while (N1MM_ON == true)
            {
                Thread.Sleep(100);

                if (!mox)
                {
                 
/*
                    // check if picDisplay_Paint() is firing, that is that it is not minimized
                    if (N1MM_MINIMIZE == true) // normall display.cs is not called when true
                    {
                       Debug.WriteLine("N1MM MINIMIZED HERE> " + PD);
                        // UpdateDisplay();    
                            picDisplay.Invalidate();
                           picDisplay.Refresh();
                         picDisplay.Update();
                        //  this.Update();
                        //  this.Refresh();

                        // this.Invalidate();
                        //  this.Update();
                        //  this.Refresh();
                         Application.DoEvents();

                        //  picDisplay_Paint(this, System.Windows.Forms.PaintEventArgs(this.picDisplay_Paint));

                        //  PaintEventArgs ps = picDisplay.Paint();


                        //  var ps = Graphics.FromHwnd(picDisplay.Handle);
                        //  var ps = PaintEventArgs.Empty;
                        try
                        {
                            Display.RenderGDIPlus(ref PD);
                        }
                        catch(Exception f)
                        {
                            Debug.WriteLine("RENDERGDIPLUS FAULT>> " + f);

                        }
                    } //
*/

                    N1MM_Data_String = "";

                    int y = 0;

                    //  Debug.WriteLine("Floor "+ N1MM_Floor);
                    //  Debug.WriteLine("samples " + N1MM_Sample);

                    int yy = 0;

                    yy = N1MM_Floor * (-1);

                    N1MM_Floor = 0; // reset

                    int qq = N1MM_Sample / 2; // cut the number of samples in half

                    for (int i = 0; i < N1MM_Sample - 1; i = i + 2)
                    {
                        y = (yy + N1MM_Data[i]) * 3; // 140

                        N1MM_Data_String = N1MM_Data_String + y.ToString();

                        if (i < N1MM_Sample - 3)
                        {
                            N1MM_Data_String = N1MM_Data_String + ",";
                        }


                    } // for samples

                    string welcome = "<?xml version=\"1.0\" encoding=\"utf - 8\"?>\n" +
                         "<Spectrum>\n" +
                         "<Name>" +
                      SpotControl.callB.ToString() +     //  SpotForm.callBox.Text.ToString() +  // "KE9NS" +
                        "</Name>\n" +

                        "<LowScopeFrequency>" +
                        N1MM_Low.ToString() + // "14000" +  // low freq
                        "</LowScopeFrequency>\n" +

                        "<HighScopeFrequency>" +
                        N1MM_High.ToString() + // "14055" +  // high freq
                        "</HighScopeFrequency>\n" +

                        "<ScalingFactor>" +
                        setupForm.udN1MMscale.Value.ToString() + // "0.3125" + // scale factor
                        "</ScalingFactor>\n" +

                        "<DataCount>" +
                        qq.ToString() +     // N1MM_Sample.ToString() +   //"475" +
                        "</DataCount>\n" +

                         "<SpectrumData>" +

                         N1MM_Data_String +

                         //  "0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,\n" +
                         // "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,\n" +
                         //  "0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,19,25,0,0,0,0,0,0,0,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,\n" +
                         //  "1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,\n" +
                         //  "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,38,50,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,\n" +
                         //  "0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n" +
                         //  "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0\n" +

                         "</SpectrumData>\n" +
                         "</Spectrum>\n";

                    //   Debug.WriteLine("N1MM DATA");
                    //   Debug.WriteLine(welcome);


                    byte[] data = Encoding.ASCII.GetBytes(welcome);

                    server.SendTo(data, data.Length, SocketFlags.None, RemoteEndPoint);

                } // !mox

            } // while N1MM_ON == true

            Debug.WriteLine("N1MM STOP");

           
            server.Close(); // shut down N1MM

        } // N1MM_SPECTRUM()



    } // class console




} // powerSDR