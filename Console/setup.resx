<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>157, 17</value>
  </metadata>
  <data name="chkBoxShutdown.ToolTip" xml:space="preserve">
    <value>Normally PowerSDR does not allow Windows to close PowerSDR during a shutdown (unless forced)

When Checked will allow a Windows shutdown to Close PowerSDR
However no updates to your Database will take place.

</value>
  </data>
  <data name="chkBoxAutoFocus.ToolTip" xml:space="preserve">
    <value>When Checked: Mouse over the Console will Auto Focus PowerSDR console.
This will bring the Keyboard automatically back into Focus for PowerSDR
without having to Click somewhere on the PowerSDR console screen.

Use this only if you have multiple Display monitors, where PowerSDR has its own Monitor.</value>
  </data>
  <data name="chkBoxRestart.ToolTip" xml:space="preserve">
    <value>When Checked: Will examine panadapter data to determine if DttSP has frozen 
due to DPC latency issues. If its frozen, will issue a STOP/START to unfreeze it.

If you are experiencing DPC Latency, a PC program that has background operations 
may be consuming too much time. Chrome can be an offender, or Serial port CAT programs.</value>
  </data>
  <data name="udDDSCorrection.ToolTip" xml:space="preserve">
    <value>Correction for DDS frequency 
(Make sure radio has been on for at least 30 minutes prior)
This auto updates by using the Generial-&gt;Calibration-&gt;Freq Cal routine
OR 
Tune to WWV, set to USB, set display to PHASE
Tune for no movement CW or CCW (Stationary rotation about the center)
It will never be stationary due to band conditions, but close

INC values cause CW rotation
DEC values cause CCW rotation</value>
  </data>
  <data name="lblClockCorrection.ToolTip" xml:space="preserve">
    <value>Correction for DDS frequency 
(Make sure radio has been on for at least 30 minutes prior)
This auto updates by using the Generial-&gt;Calibration-&gt;Freq Cal routine
OR 
Tune to WWV, set to USB, set display to PHASE
Tune for no movement CW or CCW (Stationary rotation about the center)
It will never be stationary due to band conditions, but close

INC values cause CW rotation
DEC values cause CCW rotation
</value>
  </data>
  <data name="chkBoxPM1.ToolTip" xml:space="preserve">
    <value>Check box to communicate with PowerMaster (via serial port) and display Power and SWR output from your AMP.

You must configure your PowerMaster (via its menu) for 38400 baud
and select a real COM port to talk to the PowerMaster.
</value>
  </data>
  <data name="chkBoxIICON.ToolTip" xml:space="preserve">
    <value>Check to send IIC signal to activate SS AMP (ON/OFF).
The IIC bus will send 3 bytes of data:  4E (and 4A),  01, &lt;DATA&gt;

Where &lt;DATA&gt; bit6 (64) will always be SET when this box is checked.
Except on VHF/UHF bands

The AMP uses the relay controlled W6PQL Output FIlter board and a relay for ON/OFF of the AMP 
and a relay to enable PTT operation

For reading the IIC bus, you can use a  PCA9534 device and some relays, and use the FlexWire port for power.

Upon startup and band change, PowerSDR will send 2 IIC command strings:
1)  Address 0x4E  Register 0x01 Value = &lt;DATA&gt;
2)  Address 0x4E, Register 0x03, Value = 0x00
(repeats for 0x4A address)

Address 0x4E is for the orignal w6pql LDMOS filter board layout
Address 0x4A is for the newer w6pql LDMOS filter boad layout
Both addresses will be sent

Where &lt;DATA&gt; runs from the following map:

1 = Select bands: L/MW, 160m, 120m (no relay needed with W6PQL design filter board)
2 = Select bands: 90m, 80m, 61m, 60m, 49m
4 = Select bands: 41m, 40m, 31m ,30m

8 = Select bands: 25m, 22m, 20m, 17m, 16m, 15m, 14m (Address 0x4E only)
16 = Select bands: 13m, 12m, 11m, 10m (Address 0x4E only)
and
8 = Select bands: 25m, 22m, 20m, 17m, 16m(Address 0x4A only)
16 = Select bands:  15m, 14m 13m, 12m, 11m, 10m (Address 0x4A only)


32 = Select bands: 6m
64 = Remote ON/OFF (used N.C. contact... 64 relay on = remote control)
128 = Selected bands: VHF/UHF  (bit7 is turned OFF)

&lt;DATA&gt; bit6 (64) is SET only if IIC AMP ON/OFF checkbox is set and on an HF/6m band

For NON-W6PQL LPF band selectors use:
0X42 and 0x44 Band selector output for PCA9534 8bit I2C chip
OR
0x46 Band selector output for MCP23017 16bit I2c chip 
OR
0x4C UCB (Universal Control board) PCA9555D Relay selector (part of the Xvtr panel)
See page: http://k3tuf.com/FW.html , for info on FlexWire and UCB
</value>
  </data>
  <data name="chkBoxIIC.ToolTip" xml:space="preserve">
    <value>Check to use IIC FlexWire bus (8bit address 0x4E &amp; 4A) to send commands to an external device for AMP control.
NOTE: 8bit address 0x40 = Heros Preselector, 0x4C = UCB XVTR, 0x42 &amp; 0x44 &amp; 0x46 = HF band select (starting with 2200m = 1)

The AMP uses the relay controlled W6PQL Output FIlter board and a relay for ON/OFF of the AMP 
and a relay to enable PTT operation

For reading the IIC bus, you can use a  PCA9534 device and some relays, and use the FlexWire port for power.

Upon startup and band change, PowerSDR will send 2 IIC command strings:
1)  8bit Address 0x4E  Register 0x01 Value = &lt;DATA&gt;
2)  8bit Address 0x4E, Register 0x03, Value = 0x00
(repeats for 0x4A address)

8bit Address 0x4E is for the orignal w6pql LDMOS filter board layout
8bit Address 0x4A is for the newer w6pql LDMOS filter boad layout
Both addresses will be sent

Where &lt;DATA&gt; runs from the following map:

1 = Select bands: L/MW, 160m, 120m (no relay needed with W6PQL design filter board)
2 = Select bands: 90m, 80m, 61m, 60m, 49m
4 = Select bands: 41m, 40m, 31m ,30m

8 = Select bands: 25m, 22m, 20m, 17m, 16m, 15m, 14m (Address 0x4E only)
16 = Select bands: 13m, 12m, 11m, 10m (Address 0x4E only)
and
8 = Select bands: 25m, 22m, 20m, 17m, 16m(Address 0x4A only)
16 = Select bands:  15m, 14m 13m, 12m, 11m, 10m (Address 0x4A only)


32 = Select bands: 6m
64 = Remote ON/OFF (used N.C. contact... 64 relay on = remote control)
128 = Selected bands: VHF/UHF  (bit7 is turned OFF)

&lt;DATA&gt; bit6 (64) is SET only if IIC AMP ON/OFF checkbox is set and on an HF/6m band

NOTE example: 8bit address 0x4E = 0,1,0,0, A2,A1,A0, 0 = (01001110)

For NON-W6PQL LPF band selectors use:
0X42 and 0x44 Band selector output for PCA9534 8bit I2C chip
OR
0x46 Band selector output for MCP23017 16bit I2c chip 
OR
0x4C UCB (Universal Control board) PCA9555D Relay selector (part of the Xvtr panel)
See page: http://k3tuf.com/FW.html , for info on FlexWire and UCB

</value>
  </data>
  <data name="chkOptCWFilterPitch.ToolTip" xml:space="preserve">
    <value>Unchecked: CW RX (Low -  High) automatically adjust around the CW Pitch value.
So when you manually enter a Low - High value will change (after its saved) to divide the bandwidth around the CW Pitch value.
(This is the original mode of operation)

Checked: CW RX Low - High can be user selected and will stay exactly as you set them. (similiar to SSB operation)</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>For Cross Band Full Duplex operation: 
Example: Listen or decoding on 80m while Transmitting on 20m

WARNING: Do not overload the Receiver while transmitting. 
Make sure you have enough RF isolation between transmitting and
receiving antennas.</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Memory Screen: Mouse Wheel Click = VFOB,  Left Click = VFOA,  Right Click = go to hyperlink (browser)
Scanner Screen: Mouse Wheel Click = VFOB,  Left Click = VFOA , Right Click = Scanner channel ignore
Spotter Screen:  Mouse Wheel Click = VFOB,  Left Click = VFOA,  Right CLick = open QRZ.com (browser)
</value>
  </data>
  <data name="chkBoxHERO.ToolTip" xml:space="preserve">
    <value>I2C output when you change into each Ham band

Upon band change, PowerSDR will send 2 IIC command strings:
(For PCS9534 I2C port replacement chip)
1)  8bit Address 0x42 Register 0x01 Value = &lt;DATAA&gt;
2)  8bit Address 0x42, Register 0x03, Value = 0x00

&lt;DATAA&gt; (below)
2200m = 1, 630m = 2, 160m = 4, 80m = 8, 60m = 16, 40m = 32, 30m =64, 20m = 128

(For PCA9534 I2C port replacement chip)
1) 8bit Address 0x44 Register 0x01 Value = &lt;DATAB&gt;
2) 8bit Address 0x44, Register 0x03, Value = 0x00 (all output)

&lt;DATAB&gt; (below)
17m =1, 15m = 2, 12m = 4, 10m = 8, 6m = 16, reserved = 32, reserved = 64, reserved = 128

AND 

(For MPC23017 I2C 16bit port replacement chip):
8bit address 0x46, register 0 &amp; 1 to 0 (all output on PortA &amp; B)
8bit address 0x46, register 0x12&lt;DATAA&gt;
8bit address 0x46, register 0x13 &lt;DATAB&gt;

NOTE example: 8bit address 0x46 = 0,1,0,0, A2,A1,A0, 0 = (01000110)</value>
  </data>
  <data name="chkBoxHTTP.ToolTip" xml:space="preserve">
    <value>Setup your Router “Port Forward” to pass the Port# you select. 8081 is default
get an No-IP.com account which is a permanent URL linked back to your home IP address
set your router to update your No-Ip.com account (usually under apps and gaming)
Now if you type in your no-ip.com URL:port#  from a web browser you will see your Panadapter

You can place code into a web page to allow visitors to view your Panadapter.
 &lt;iframe id="frame" src="https://your_no-ip_URL:8081"&gt;&lt;/iframe&gt;
</value>
  </data>
  <data name="radVAC1SelectB.ToolTip" xml:space="preserve">
    <value>Select the Virtual Cable B setup

Example setup B:
Driver:   DirectSound
Input:    Microphone (plugged into your PC)
Output: Speakers (Plugged into your PC)

Use for PC Speaker and PC Mic connection with PowerSDR
</value>
  </data>
  <data name="groupBoxTS6.ToolTip" xml:space="preserve">
    <value>VAC1: AF Volume Slider &amp; "Mute 1&gt;" box do NOT function in PowerSDR. (VAC2: AF slider &amp; Mute functions DO)
NOTE: PowerSDR will not get INPUT audio from VAC1 unless you select VFOA as TX
NOTE: VAC1 will ignore VFOB and Flex-5000 RX2

This allows PowerSDR to send or receive audio to your PC 
(As though PowerSDR was seperate from your PC and you were using RCA audio cables)

MME:              Multimedia Extensions. Oldest standard with the highest latency (120mSec), but the most compatible drivers.
DirectSound: Less latency than MME (Buffer Latency setting can be set as low as 90mSec)
WDM-KS:       Windows Driver Model Kernal Streaming. Very low latency (Buffer Latency can be set as low as 15mSec) 

ASIO:              Audio Stream I/O. Very low (10mSec) latency, but only 1 device allowed and is already being used betwen your Flex and PowerSDR</value>
  </data>
  <data name="grpAudioDetails2.ToolTip" xml:space="preserve">
    <value>VAC1: AF Volume Slider &amp; "Mute 1&gt;" box do NOT function in PowerSDR. (VAC2: AF slider &amp; Mute functions DO)
NOTE: PowerSDR will not get INPUT audio from VAC1 unless you select VFOA as TX
NOTE: VAC1 will ignore VFOB and Flex-5000 RX2

This allows PowerSDR to send or receive audio to your PC 
(As though PowerSDR was seperate from your PC and you were using RCA audio cables)

MME:              Multimedia Extensions. Oldest standard with the highest latency (120mSec), but the most compatible drivers.
DirectSound: Less latency than MME (Buffer Latency setting can be set as low as 90mSec)
WDM-KS:       Windows Driver Model Kernal Streaming. Very low latency (Buffer Latency can be set as low as 15mSec) 

ASIO:              Audio Stream I/O. Very low (10mSec) latency, but only 1 device allowed and is already being used betwen your Flex and PowerSDR</value>
  </data>
  <data name="tpVAC.ToolTip" xml:space="preserve">
    <value>VAC1: AF Volume Slider &amp; "Mute 1&gt;" box do NOT function in PowerSDR. (VAC2: AF slider &amp; Mute functions DO)
NOTE: PowerSDR will not get INPUT audio from VAC1 unless you select VFOA as TX
NOTE: VAC1 will ignore VFOB and Flex-5000 RX2

This allows PowerSDR to send or receive audio to your PC 
(As though PowerSDR was seperate from your PC and you were using RCA audio cables)

MME:              Multimedia Extensions. Oldest standard with the highest latency (120mSec), but the most compatible drivers.
DirectSound: Less latency than MME (Buffer Latency setting can be set as low as 90mSec)
WDM-KS:       Windows Driver Model Kernal Streaming. Very low latency (Buffer Latency can be set as low as 15mSec) 

ASIO:              Audio Stream I/O. Very low (10mSec) latency, but only 1 device allowed and is already being used betwen your Flex and PowerSDR
</value>
  </data>
  <data name="grpAudioDetails3.ToolTip" xml:space="preserve">
    <value>VAC2: AF Volume Slider &amp; "Mute 1&gt;" box function in PowerSDR and will adjust this volume of RX1 (VAC1 will not). 
NOTE: PowerSDR will not get VAC MIC INPUT audio from VAC2 unless you select VFOB as TX
NOTE: If you have a Flex-5000 (with 2nd rec) VAC2 provides audio for RX2 when you enable RX2 &amp; "&lt;2 MUTE" box will function

This allows PowerSDR to send or receive audio to your PC 
(As though PowerSDR was seperate from your PC and you were using RCA audio cables)

MME:              Multimedia Extensions. Oldest standard with the highest latency (120mSec), but the most compatible drivers.
DirectSound: Less latency than MME (Buffer Latency setting can be set as low as 90mSec)
WDM-KS:       Windows Driver Model Kernal Streaming. Very low latency (Buffer Latency can be set as low as 15mSec).

ASIO:              Audio Stream I/O. Very low (10mSec) latency, but only 1 device allowed and is already being used betwen your Flex and PowerSDR
</value>
  </data>
  <data name="tpVAC2.ToolTip" xml:space="preserve">
    <value>VAC2: AF Volume Slider &amp; "Mute 1&gt;" box function in PowerSDR and will adjust this volume of RX1 (VAC1 will not). 
NOTE: PowerSDR will not get VAC MIC INPUT audio from VAC2 unless you select VFOB as TX
NOTE: If you have a Flex-5000 (with 2nd rec) VAC2 provides audio for RX2 when you enable RX2 &amp; "&lt;2 MUTE" box will function

This allows PowerSDR to send or receive audio to your PC 
(As though PowerSDR was seperate from your PC and you were using RCA audio cables)

MME:              Multimedia Extensions. Oldest standard with the highest latency (120mSec), but the most compatible drivers.
DirectSound: Less latency than MME (Buffer Latency setting can be set as low as 90mSec)
WDM-KS:       Windows Driver Model Kernal Streaming. Very low latency (Buffer Latency can be set as low as 15mSec).

ASIO:              Audio Stream I/O. Very low (10mSec) latency, but only 1 device allowed and is already being used betwen your Flex and PowerSDR

</value>
  </data>
  <data name="labelTS38.ToolTip" xml:space="preserve">
    <value>Slider adjusts where the noise floor will show up on the Waterfall screen
Noise Floor gets DARKER &lt;---&gt; Noise Floor gets LIGHTER

when "auto wtr/pan" checkbox is checked, the slider Lightens/Darkens the signal as the slider move.
If unchecked, you must click on the Auto Water/Pan text (just below the Panadater screen). 
</value>
  </data>
  <data name="chkSpectrumHiRes.ToolTip" xml:space="preserve">
    <value>Check box to increase the resolution of the Panadapter and Waterfall display
From 4096 points to 16384 points (x4) for much finer detail
Most noticable when you zoom in on a signal
NOTE: Because of the finer detail, you may see more signals on the screen, but also more Spurs. 

Warning: This will require higher CPU usage</value>
  </data>
  <data name="labelTS14.ToolTip" xml:space="preserve">
    <value>Slider adjusts where the noise floor will show up on the Waterfall screen
Noise Floor gets DARKER &lt;---&gt; Noise Floor gets LIGHTER

when "auto wtr/pan" checkbox is checked, the slider Lightens/Darkens the signal as the slider move.
If unchecked, you must click on the Auto Water/Pan text (just below the Panadater screen). 
</value>
  </data>
  <data name="tbWaterOffset.ToolTip" xml:space="preserve">
    <value>Slider adjusts where the noise floor will show up on the Waterfall screen
Noise Floor gets DARKER &lt;---&gt; Noise Floor gets LIGHTER

when "auto wtr/pan" checkbox is checked, the slider Lightens/Darkens the signal as the slider move.
If unchecked, you must click on the Auto Water/Pan text (just below the Panadater screen). 
</value>
  </data>
  <data name="labelTS13.ToolTip" xml:space="preserve">
    <value>Slider adjusts where the noise floor will show up on the Panadapter screen 
Noise Floor Moves DOWN &lt;---&gt; Noise Floor Moves UP

when "auto wtr/pan" checkbox is checked, the slider moves the signal as the slider move.
If unchecked, you must click on the Auto Water/Pan text (just below the Panadater screen). 
</value>
  </data>
  <data name="tbGridOffset.ToolTip" xml:space="preserve">
    <value>Slider adjusts where the noise floor will show up on the Panadapter screen 
Noise Floor Moves DOWN &lt;---&gt; Noise Floor Moves UP

when "auto wtr/pan" checkbox is checked, the slider moves the signal as the slider move.
If unchecked, you must click on the Auto Water/Pan text (just below the Panadater screen). 
</value>
  </data>
  <data name="comboDisplayLabelAlign.ToolTip" xml:space="preserve">
    <value>Sets the alignment of the grid callouts on the display.

For S-units to show a correct scale on the right side matched to the left side,
Set Spectrum Grid-&gt;Max = -19, Min= -135, Step = 6 (S signals are 6 dBm apart).
</value>
  </data>
  <data name="udDisplayGridStep.ToolTip" xml:space="preserve">
    <value>Horizontal Grid Step Size in dBm for the full screen Panadapter. 
Split screen modes will display a grid step size 2x greater.

In order to see a correct scale on the right side matched to the left side,
Set Spectrum Grid-&gt;Max = -19, Min = -135, Step = 6 (S signals are 6 dBm apart).
</value>
  </data>
  <data name="udDisplayGridMin.ToolTip" xml:space="preserve">
    <value>Signal Level at bottom of the Panadapter display in dBm.

In order to see a correct scale on the right side matched to the left side,
Set Spectrum Grid-&gt;Max = -19, Min = -135, Step = 6 (S signals are 6 dBm apart).

"Auto wtr/pan" box will automatically adjust this for both RX &amp; TX modes
</value>
  </data>
  <data name="udDisplayGridMax.ToolTip" xml:space="preserve">
    <value>Signal level at top of Panadapter display in dB.

In order to see a correct scale on the right side matched to the left side,
Set Spectrum Grid-&gt;Max = -19, Min = -135, Step = 6 (S signals are 6 dBm apart).

"Auto wtr/pan" box will automatically adjust this for RX mode only
TX mode is set permanently to 10 dBm for its virtual "Max" (since you should not exceed 0 dBm)
</value>
  </data>
  <data name="grpDisplaySpectrumGrid.ToolTip" xml:space="preserve">
    <value>Spectrum Grid is mainly for RX mode

In order to see a correct scale on the right side matched to the left side,
Set Spectrum Grid-&gt;Max = -19, Min = -135, Step = 6 (S signals are 6 dBm apart).

"Auto wtr/pan" box will automatically adjust "Max" for RX mode only, but "Min" works for both RX &amp; TX modes.
TX mode is set permanently to 10 dBm for its virtual "Max" (since you should not exceed 0 dBm)
</value>
  </data>
  <data name="chkBoxAutoWtrPan.ToolTip" xml:space="preserve">
    <value>Check to Automatically update the waterfall (brightness), and Panadapter Noise Floor levels (height)
based on the Sliders.

You can still Left and Right Click on the "Auto Wtr/Pan Lvl" console button
for a semi-automatic level adjust</value>
  </data>
  <data name="udDSPNB.ToolTip" xml:space="preserve">
    <value>Detection threshold for impulse noise.  

Low values will distort signals.
High values may not capture noise.

Strong adjacent signals that invade the passband may 
prevent the NB from catching noise.</value>
  </data>
  <data name="chkDSPLevelerEnabled.ToolTip" xml:space="preserve">
    <value>The Leveler is intended to even out the sound level variations through your microphone caused by
varying distance from or angle to it. It is an attempt to level the amplitude presented to the rest of the
DSP audio processing. The leveler is disabled in DIGU and DIGL modes.</value>
  </data>
  <data name="grpDSPLeveler.ToolTip" xml:space="preserve">
    <value>The Leveler is intended to even out the sound level variations through your microphone caused by
varying distance from or angle to it. It is an attempt to level the amplitude presented to the rest of the
DSP audio processing. The leveler is disabled in DIGU and DIGL modes.</value>
  </data>
  <data name="grpDSPALC.ToolTip" xml:space="preserve">
    <value>The ALC is what you would typically consider ALC to be in a transmitter. It is an attempt to prevent
overdrive of the power amplifier and the distortion that would result. Because of the dual track ALC
algorithm we use (similar to the AGC), this ALC will allow very high average power while maintaining
peaks at a controlled level. The Compander (DX and CPDR on the Front Console - see Mode Specific
Controls – Phone on page 82) work very well together with the ALC to increase average power without
overdrive.</value>
  </data>
  <data name="udDSPAGCMaxGaindB.ToolTip" xml:space="preserve">
    <value>AGC Max Gain T=Threshold - Operates similarly to traditional RF Gain (but this way the Panadapter signal does not change when you change the gain)
This provides for a “threshold” AGC  (see AGC-T on the main Console Screen)
Irrespective of how weak a signal is, no gain over this Max Gain is applied. (-20 dB to +120 dB gain)
AGC-T = 90 (means the AGC will not add more than 90dBm of gain to any signal you hear)

RIGHT CLICK (on top of AGC-T text): Toggle Panadapter Control (Grab Green line with your Mouse and pull up/down)
</value>
  </data>
  <data name="lblDSPAGCMaxGain.ToolTip" xml:space="preserve">
    <value>AGC Max Gain T=Threshold - Operates similarly to traditional RF Gain (but this way the Panadapter signal does not change when you change the gain)
This provides for a “threshold” AGC  (see AGC-T on the main console screen)
Irrespective of how weak a signal is, no gain over this Max Gain is applied. (-20 dB to +120 dB gain)
AGC-T = 90 (means the AGC will not add more than 90dBm of gain to any signal you hear)

RIGHT CLICK (on top of AGC-T text): Toggle Panadapter Control (Grab Green line with your Mouse and pull up/down)
</value>
  </data>
  <data name="grpDSPAGC.ToolTip" xml:space="preserve">
    <value>The AGC is a state of the art, dual track AGC with anticipatory response on both fast and slower tracks.
Or, stated differently, the AGC is in essence the combination of two AGCs, one with a very fast time
constant, the other with a much slower time constant</value>
  </data>
  <data name="chkBandModeSave.ToolTip" xml:space="preserve">
    <value>When Checked, will save Transmit DRIVE Slider setpoint, and Drive Max setpoint per Band and per Mode

Normally (unchecked), Only Transmit Drive Slider setpoint is saved per Band 

AGC-T continues to be saves on a per Band basis only.

Do not use this feature if an external program like DDUtil, controls your Drive levels.</value>
  </data>
  <data name="chkRememberTXProfileOnModeChange.ToolTip" xml:space="preserve">
    <value>When checked the previous TX Profile used for a particular mode is remembered.

Example: LSB -&gt; SAM: The last TXProfile used to SAM will be USED.

UnChecked = Changing Modes will not change TXProfiles, 
                         but changing the TXProfile will change Modes 
                         to whatever mode was saved to the selected TXProfile</value>
  </data>
  <data name="udTXAMCarrierLevel.ToolTip" xml:space="preserve">
    <value>One suggested way to setup for AM mode: 

With your MIC already adjusted to prevent any ALC clipping, 
Set Drive level to 100, 
Set Carrier to 0,
PTT the radio (with no Audio)
Adjust Carrier Level for 25% of maximum wattage. (around 8 or so)

(Example: If Max is 100watts, then set Carrier for 25watts)
(Example: If Max is 1500watts, then set Carrier for 375watts)

Your Audio should now allow for Peaks of Max power out with a Carrier of 25% max
(Compander can help increase average talk power)</value>
  </data>
  <data name="comboTXProfileName.ToolTip" xml:space="preserve">
    <value>Sets the transmit profile to be used(PWR, EQ, MIC, CPDR, Mode etc.)

TXProfile saves almost everything related to transmit including Mode
TXProfile will change Modes to whatever mode was saved to the selected TXProfile.

Will NOT change modes if "Remember TX Profile on Mode Change is Checked.
</value>
  </data>
  <data name="chkKWAI7.ToolTip" xml:space="preserve">
    <value>Check if your CAT device does not POLL for Frequency
and needs PowerSDR to send CAT FA and FB frequency to your device 
each time the VFOA or B is changed.

If your CAT device sends an AI OFF command it will not disable AI for the other CAT ports</value>
  </data>
  <data name="chkCatURLON.ToolTip" xml:space="preserve">
    <value>TCP Server based on this computers IP address and a user selected PORT.

This allows CAT commands to/from PowerSDR form any TCP/IP device linked to your IP and Port

Right click to open Display screen for CAT communications Received and Transmitted.
</value>
  </data>
  <data name="chkKWAI6.ToolTip" xml:space="preserve">
    <value>Check if your CAT device does not POLL for Frequency
and needs PowerSDR to send CAT FA and FB frequency to your device 
each time the VFOA or B is changed.

If your CAT device sends an AI OFF command it will not disable AI for the other CAT ports</value>
  </data>
  <data name="chkKWAI5.ToolTip" xml:space="preserve">
    <value>Check if your CAT device does not POLL for Frequency
and needs PowerSDR to send CAT FA and FB frequency to your device 
each time the VFOA or B is changed.

If your CAT device sends an AI OFF command it will not disable AI for the other CAT ports</value>
  </data>
  <data name="chkKWAI4.ToolTip" xml:space="preserve">
    <value>Check if your CAT device does not POLL for Frequency
and needs PowerSDR to send CAT FA and FB frequency to your device 
each time the VFOA or B is changed.

If your CAT device sends an AI OFF command it will not disable AI for the other CAT ports</value>
  </data>
  <data name="chkKWAI3.ToolTip" xml:space="preserve">
    <value>Check if your CAT device does not POLL for Frequency
and needs PowerSDR to send CAT FA and FB frequency to your device 
each time the VFOA or B is changed.

If your CAT device sends an AI OFF command it will not disable AI for the other CAT ports</value>
  </data>
  <data name="chkKWAI2.ToolTip" xml:space="preserve">
    <value>Check if your CAT device does not POLL for Frequency
and needs PowerSDR to send CAT FA and FB frequency to your device 
each time the VFOA or B is changed.

If your CAT device sends an AI OFF command it will not disable AI for the other CAT ports</value>
  </data>
  <data name="comboCATPort6.ToolTip" xml:space="preserve">
    <value>Requires the Flex-5000 and a 2nd RX unit to activate:

Assign a COM port, used to send/receive CAT commands with PowerSDR.
Use a program like VspMgr to create virtual COM port Pairs.
One side of each COM port Pair goes here, the other side is assigned to the program like WSJT-X

This COM port spoofs the connected PC Digital program into controlling RX2 VFOB,
even though the Digital program believes its controlling RX1 VFOA

This would be used on a 2nd Instance of a PC Digital program 
Example:  WSJT-X can have 2 instances running together. Each can run its own VFO.

Icon#1:  C:\WSJT\wsjtx\bin\wsjtx.exe --rig-name=Flex5000RX1 
This uses VAC1

Icon#2:  C:\WSJT\wsjtx\bin\wsjtx.exe --rig-name=Flex5000RX2
This uses VAC2

This requires 2 seperate Virtual Audio Cables (VoiceMeeeter and DAX will work)


</value>
  </data>
  <data name="chkCATEnable6.ToolTip" xml:space="preserve">
    <value>Requires the Flex-5000 and a 2nd RX unit to activate:

Assign a COM port, used to send/receive CAT commands with PowerSDR.
Use a program like VspMgr to create virtual COM port Pairs.
One side of each COM port Pair goes here, the other side is assigned to the program like WSJT-X

This COM port spoofs the connected PC Digital program into controlling RX2 VFOB,
even though the Digital program believes its controlling RX1 VFOA

This would be used on a 2nd Instance of a PC Digital program 
Example:  WSJT-X can have 2 instances running together. Each can run its own VFO.

Icon#1:  C:\WSJT\wsjtx\bin\wsjtx.exe --rig-name=Flex5000RX1 
This uses VAC1

Icon#2:  C:\WSJT\wsjtx\bin\wsjtx.exe --rig-name=Flex5000RX2
This uses VAC2

This requires 2 seperate Virtual Audio Cables (VoiceMeeeter and DAX will work)
</value>
  </data>
  <data name="chkKWAI.ToolTip" xml:space="preserve">
    <value>Check if your CAT device does not POLL for Frequency
and needs PowerSDR to send CAT FA and FB frequency to your device 
each time the VFOA or B is changed.

If your CAT device sends an AI OFF command it will not disable AI for the other CAT ports</value>
  </data>
  <data name="txtCATPort1.ToolTip" xml:space="preserve">
    <value>Assign a name to this COM port, used to send/receive CAT commands with PowerSDR.
Example:  This COM maybe used by your Logging software or DDUtil or WSJT-X

Use a program like VspMgr to create virtual COM port Pairs.
One side of each COM port Pair goes to the Right, the other side is assigned to the program like WSJT-X
</value>
  </data>
  <data name="comboCATPort5.ToolTip" xml:space="preserve">
    <value>Assign a COM port, used to send/receive CAT commands with PowerSDR.

Use a program like VspMgr to create virtual COM port Pairs.
One side of each COM port Pair goes here, the other side is assigned to the program like WSJT-X
</value>
  </data>
  <data name="comboCATPort4.ToolTip" xml:space="preserve">
    <value>Assign a COM port, used to send/receive CAT commands with PowerSDR.

Use a program like VspMgr to create virtual COM port Pairs.
One side of each COM port Pair goes here, the other side is assigned to the program like WSJT-X
</value>
  </data>
  <data name="comboCATPort3.ToolTip" xml:space="preserve">
    <value>Assign a COM port, used to send/receive CAT commands with PowerSDR.

Use a program like VspMgr to create virtual COM port Pairs.
One side of each COM port Pair goes here, the other side is assigned to the program like WSJT-X
</value>
  </data>
  <data name="comboCATPort2.ToolTip" xml:space="preserve">
    <value>Assign a COM port, used to send/receive CAT commands with PowerSDR.

Use a program like VspMgr to create virtual COM port Pairs.
One side of each COM port Pair goes here, the other side is assigned to the program like WSJT-X
</value>
  </data>
  <data name="comboCATPort.ToolTip" xml:space="preserve">
    <value>Assign a COM port, used to send/receive CAT commands with PowerSDR.

Use a program like VspMgr (or COM0COM) to create virtual COM port Pairs.
One side of each COM port Pair goes here, the other side is assigned to the program, like WSJT-X</value>
  </data>
  <data name="labelTS57.ToolTip" xml:space="preserve">
    <value>Requires the Flex-5000 and a 2nd RX unit to activate:

This COM port spoofs the connected PC Digital program into controlling RX2 VFOB,
even though the Digital program believes its controlling RX1 VFOA

This would be used on a 2nd Instance of a PC Digital program 
Example:  WSJT-X can have 2 instances running together. Each can run its own VFO.

Icon#1:  C:\WSJT\wsjtx\bin\wsjtx.exe --rig-name=Flex5000RX1 
This uses VAC1

Icon#2:  C:\WSJT\wsjtx\bin\wsjtx.exe --rig-name=Flex5000RX2
This uses VAC2

This requires 2 seperate Virtual Audio Cables (VoiceMeeeter and DAX will work)
</value>
  </data>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="timer_sweep.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>254, 17</value>
  </metadata>
  <metadata name="mainMenu1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>374, 17</value>
  </metadata>
  <metadata name="saveFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>491, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>69</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAA/wkBAP8OAgD/FQMA/xkEAP8fBQD/HBAA/x0WAP8kBQD/MggA/zUIAP8yDQD/OgkA/z0KAP8m
        EgD/JRoA/zUaAPo+OwD/QQoA/0QLAP9JDAD/TxMA/0gXAP9OFQD/Rx8A/1EeAP9WHwD/QCEA/0gvAP9V
        IAD/XSkA+kE+APpLPQD6Tj4A/1Y1AP9SOgD6Uz8A/1A/APpWPwD/YSwA/2Y0APpFQgD6SUAA+khFAP9M
        RwD6WkAA+l1AAP9SSAD/VEsA/1lIAP9cTQD/X1EA+mFBAP9jQQD6ZkIA/2ZAAPppQwD6bUMA/21GAP9h
        SgD/ZEgA+nFDAPpzRAD/ckQA/3hMAP9gUAD/Z1EA/2VXAP9pVgD/bVYA/2peAP9sXgD/cFYA/35RAP9/
        VgD/cVoA/3teAP9oYAD4aWcA/25nAPhsaAD/cGAA/3hgAP95ZQD/f2cA/3NrAP91bgD/emkA+nV0AP9/
        eQD/gVgA/4VbAP+EZQD7iWAA/4hjAP+MYwD/imQA/41mAP+FaAD/j2gA/4psAP+ObQD/kWYA/5VnAP+Y
        ZwD/kmgA/5ZsAP6ZagD/gXIA/4N3AP+LcwD2gXsA/4J5AP+FewD/hX0A/4p4AP+NeQD/lXAA/5d1AP+a
        dQD/k38A/59+AP+GgQD/i4cA/5KDAP+XgQD/m4UA/5SIAP+WjQD/mYgA/52JAP+ajAD3kpEA95iRAP+f
        kAD6mJcA/6WBAP+hhwD/pYoA/6KNAPypiQD8rYoA/6qNAPywjQD/p5UA/6qdAP+vnQD/tpsA+qOhAP+q
        oAD2r6wA/7CkAP+yqQD/tqgA97qvAP+9qgD/uK4A/72sAP+5swD/uLUA+ru6AP++vAD5w60A+cStAPnF
        tAD/xrUA+cixAP/JtAD/wroA/8a5AP/CvQD7y74A/8m/APnMvAD/xcEA/8jBAP/NwgD6ycgA/8/KAP/O
        zQD518cA/9XHAP/VyAD/0swA/9XNAP/ZzgDp1NQA6djUAOnc1wDp29sA/9PRAP/W0AD/2NMA/93QAP/e
        1QD629oA/9/aAOrh3QD/4NYA/+LbAP7k2gD+4t4A+ubdAOvk4QDr5+cA6+jnAOzs6wDt7e0A/+XiAPrl
        5QD/6eIA/+rmAP/r6QD+7OoA/+3tAP/w7QDx8fEA9fX1AP/x8AD/9PEA+/T0AP/19AD/+PYA+fn5AP/5
        +QD//PsA/v7+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD///8A39jYu7q6urq6urq6urq6urq6urq6urq6urq6urrY2NjY34QrERERERErWIegsdHRw5QRERER
        ERERERERH07a2NiWAQEBByx6sd/f39/dvq6fewEBAQEBAQEBAQEBAU7M2G8BB1Wg2t/f39+uVS8vTU9Z
        enpVDwECAQIBAgECKrvYhHHU39/f3p9yM3Gu3d/f397Jvq5HAgQEAgQEBAIhutjR39/f359Hg67a39/f
        37BxMyUyM0dEMzIOBAQEBCW62N/f37Bsf9rf39/an1cyUZWx39/f393RwUQFBQUFJLrY396Df7Lf39/f
        mURUl9He39/f2pFXOyVEJRwcEAUtu9jJVJnf39/fnURzyd/f39+wg1FEi7Da39/f39quGC262Jqy39/f
        2nNUrN/f39+wVHKbxt7f39/anX9IPCIJLrvY39/f37A8kN/f39+wc4LU39/f37CCIgkJCQkJCQk8utjf
        39+XN6zf39/ei4Ky39/f351UGAkMCQkJCQkJCTe72N/JYGLU39/fwWSu39/f3506DAwMDAwMDAwMDAwM
        NrvYrDqJ3d/f351zxt/f39plFgwMDAwMDBIMEhISEgw6u9ii1N/f39qOidrf39+nGRISEhISEhISEhIS
        EhISEji72N/f39+5ZJ3f39/fjh0SEhQSFBIUEhQSEhISEhISPbvY39/Gd3fa39/f2o5KSmBgYGBaSkA9
        KCcaFRQUFBQ9u9jJd3ey3t/f38F5YGBgYGRmYGBgZmBgYFtKPScVFD272K3B39/f39KOZWZmZWZmYGZl
        ZmZgZWZmYGZmYGBKW8XY39/f39qTd2ZmYGZmYGZmYGZgZmZmZmZmYGZmZmaOxdjawaeIZmZmZmZmZmZm
        ZmZmZmZmZmZmZmZmZmZmZojM2KJqZWZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmjsXYomZoZmhmaGZo
        ZmZoZmZoZmhmZmhmZmhmZmhmaGaOxdiiZmZoZmhmZmhmaGZoZmZoZmhmZmhmZmhmaGZmaI7F2KJoaGZo
        aGhoZmhoZmhoaGZoaGhoZmhoaGhmaGhmj8XYomZoaGZoZmhoZmhoZmhoaGZoZmhoZmhmaGhoZmiPxdii
        aGZoaGhoZmhoaGhoaGZoaGhoZmhoaGhoaGhoaI7F2KJoaGhoZmhoaGhmaGhoaGhoZmhoaGhoaGZoaGho
        j8XYomhoZmhoaGhmaGhoZmhoZmhoaGhmaGhoaGhmaGiPy9jKaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGho
        aGhoaKfY2NnKraKjo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6O039jf2NjN2NjY2NjY2NjY2NjY2NjY2NjY
        2NjY2NjY2NjY2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>